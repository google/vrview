(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   3.2.1
 */

(function() {
    "use strict";
    function lib$es6$promise$utils$$objectOrFunction(x) {
      return typeof x === 'function' || (typeof x === 'object' && x !== null);
    }

    function lib$es6$promise$utils$$isFunction(x) {
      return typeof x === 'function';
    }

    function lib$es6$promise$utils$$isMaybeThenable(x) {
      return typeof x === 'object' && x !== null;
    }

    var lib$es6$promise$utils$$_isArray;
    if (!Array.isArray) {
      lib$es6$promise$utils$$_isArray = function (x) {
        return Object.prototype.toString.call(x) === '[object Array]';
      };
    } else {
      lib$es6$promise$utils$$_isArray = Array.isArray;
    }

    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
    var lib$es6$promise$asap$$len = 0;
    var lib$es6$promise$asap$$vertxNext;
    var lib$es6$promise$asap$$customSchedulerFn;

    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
      lib$es6$promise$asap$$len += 2;
      if (lib$es6$promise$asap$$len === 2) {
        // If len is 2, that means that we need to schedule an async flush.
        // If additional callbacks are queued before the queue is flushed, they
        // will be processed by this flush that we are scheduling.
        if (lib$es6$promise$asap$$customSchedulerFn) {
          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
        } else {
          lib$es6$promise$asap$$scheduleFlush();
        }
      }
    }

    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
    }

    function lib$es6$promise$asap$$setAsap(asapFn) {
      lib$es6$promise$asap$$asap = asapFn;
    }

    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
    var lib$es6$promise$asap$$isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

    // test for web worker but not in IE10
    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
      typeof importScripts !== 'undefined' &&
      typeof MessageChannel !== 'undefined';

    // node
    function lib$es6$promise$asap$$useNextTick() {
      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
      // see https://github.com/cujojs/when/issues/410 for details
      return function() {
        process.nextTick(lib$es6$promise$asap$$flush);
      };
    }

    // vertx
    function lib$es6$promise$asap$$useVertxTimer() {
      return function() {
        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
      };
    }

    function lib$es6$promise$asap$$useMutationObserver() {
      var iterations = 0;
      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
      var node = document.createTextNode('');
      observer.observe(node, { characterData: true });

      return function() {
        node.data = (iterations = ++iterations % 2);
      };
    }

    // web worker
    function lib$es6$promise$asap$$useMessageChannel() {
      var channel = new MessageChannel();
      channel.port1.onmessage = lib$es6$promise$asap$$flush;
      return function () {
        channel.port2.postMessage(0);
      };
    }

    function lib$es6$promise$asap$$useSetTimeout() {
      return function() {
        setTimeout(lib$es6$promise$asap$$flush, 1);
      };
    }

    var lib$es6$promise$asap$$queue = new Array(1000);
    function lib$es6$promise$asap$$flush() {
      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
        var callback = lib$es6$promise$asap$$queue[i];
        var arg = lib$es6$promise$asap$$queue[i+1];

        callback(arg);

        lib$es6$promise$asap$$queue[i] = undefined;
        lib$es6$promise$asap$$queue[i+1] = undefined;
      }

      lib$es6$promise$asap$$len = 0;
    }

    function lib$es6$promise$asap$$attemptVertx() {
      try {
        var r = require;
        var vertx = r('vertx');
        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
        return lib$es6$promise$asap$$useVertxTimer();
      } catch(e) {
        return lib$es6$promise$asap$$useSetTimeout();
      }
    }

    var lib$es6$promise$asap$$scheduleFlush;
    // Decide what async method to use to triggering processing of queued callbacks:
    if (lib$es6$promise$asap$$isNode) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
    } else if (lib$es6$promise$asap$$isWorker) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
    } else {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
    }
    function lib$es6$promise$then$$then(onFulfillment, onRejection) {
      var parent = this;

      var child = new this.constructor(lib$es6$promise$$internal$$noop);

      if (child[lib$es6$promise$$internal$$PROMISE_ID] === undefined) {
        lib$es6$promise$$internal$$makePromise(child);
      }

      var state = parent._state;

      if (state) {
        var callback = arguments[state - 1];
        lib$es6$promise$asap$$asap(function(){
          lib$es6$promise$$internal$$invokeCallback(state, child, callback, parent._result);
        });
      } else {
        lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
      }

      return child;
    }
    var lib$es6$promise$then$$default = lib$es6$promise$then$$then;
    function lib$es6$promise$promise$resolve$$resolve(object) {
      /*jshint validthis:true */
      var Constructor = this;

      if (object && typeof object === 'object' && object.constructor === Constructor) {
        return object;
      }

      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$resolve(promise, object);
      return promise;
    }
    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
    var lib$es6$promise$$internal$$PROMISE_ID = Math.random().toString(36).substring(16);

    function lib$es6$promise$$internal$$noop() {}

    var lib$es6$promise$$internal$$PENDING   = void 0;
    var lib$es6$promise$$internal$$FULFILLED = 1;
    var lib$es6$promise$$internal$$REJECTED  = 2;

    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$selfFulfillment() {
      return new TypeError("You cannot resolve a promise with itself");
    }

    function lib$es6$promise$$internal$$cannotReturnOwn() {
      return new TypeError('A promises callback cannot return that same promise.');
    }

    function lib$es6$promise$$internal$$getThen(promise) {
      try {
        return promise.then;
      } catch(error) {
        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
        return lib$es6$promise$$internal$$GET_THEN_ERROR;
      }
    }

    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
      try {
        then.call(value, fulfillmentHandler, rejectionHandler);
      } catch(e) {
        return e;
      }
    }

    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
       lib$es6$promise$asap$$asap(function(promise) {
        var sealed = false;
        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
          if (sealed) { return; }
          sealed = true;
          if (thenable !== value) {
            lib$es6$promise$$internal$$resolve(promise, value);
          } else {
            lib$es6$promise$$internal$$fulfill(promise, value);
          }
        }, function(reason) {
          if (sealed) { return; }
          sealed = true;

          lib$es6$promise$$internal$$reject(promise, reason);
        }, 'Settle: ' + (promise._label || ' unknown promise'));

        if (!sealed && error) {
          sealed = true;
          lib$es6$promise$$internal$$reject(promise, error);
        }
      }, promise);
    }

    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, thenable._result);
      } else {
        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      }
    }

    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable, then) {
      if (maybeThenable.constructor === promise.constructor &&
          then === lib$es6$promise$then$$default &&
          constructor.resolve === lib$es6$promise$promise$resolve$$default) {
        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
      } else {
        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
        } else if (then === undefined) {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        } else if (lib$es6$promise$utils$$isFunction(then)) {
          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
        } else {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        }
      }
    }

    function lib$es6$promise$$internal$$resolve(promise, value) {
      if (promise === value) {
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
        lib$es6$promise$$internal$$handleMaybeThenable(promise, value, lib$es6$promise$$internal$$getThen(value));
      } else {
        lib$es6$promise$$internal$$fulfill(promise, value);
      }
    }

    function lib$es6$promise$$internal$$publishRejection(promise) {
      if (promise._onerror) {
        promise._onerror(promise._result);
      }

      lib$es6$promise$$internal$$publish(promise);
    }

    function lib$es6$promise$$internal$$fulfill(promise, value) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

      promise._result = value;
      promise._state = lib$es6$promise$$internal$$FULFILLED;

      if (promise._subscribers.length !== 0) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
      }
    }

    function lib$es6$promise$$internal$$reject(promise, reason) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
      promise._state = lib$es6$promise$$internal$$REJECTED;
      promise._result = reason;

      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
    }

    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;

      parent._onerror = null;

      subscribers[length] = child;
      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

      if (length === 0 && parent._state) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
      }
    }

    function lib$es6$promise$$internal$$publish(promise) {
      var subscribers = promise._subscribers;
      var settled = promise._state;

      if (subscribers.length === 0) { return; }

      var child, callback, detail = promise._result;

      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];

        if (child) {
          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
        } else {
          callback(detail);
        }
      }

      promise._subscribers.length = 0;
    }

    function lib$es6$promise$$internal$$ErrorObject() {
      this.error = null;
    }

    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
      try {
        return callback(detail);
      } catch(e) {
        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
      }
    }

    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
          value, error, succeeded, failed;

      if (hasCallback) {
        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
          failed = true;
          error = value.error;
          value = null;
        } else {
          succeeded = true;
        }

        if (promise === value) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
          return;
        }

      } else {
        value = detail;
        succeeded = true;
      }

      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
        // noop
      } else if (hasCallback && succeeded) {
        lib$es6$promise$$internal$$resolve(promise, value);
      } else if (failed) {
        lib$es6$promise$$internal$$reject(promise, error);
      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, value);
      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, value);
      }
    }

    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
      try {
        resolver(function resolvePromise(value){
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function rejectPromise(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      } catch(e) {
        lib$es6$promise$$internal$$reject(promise, e);
      }
    }

    var lib$es6$promise$$internal$$id = 0;
    function lib$es6$promise$$internal$$nextId() {
      return lib$es6$promise$$internal$$id++;
    }

    function lib$es6$promise$$internal$$makePromise(promise) {
      promise[lib$es6$promise$$internal$$PROMISE_ID] = lib$es6$promise$$internal$$id++;
      promise._state = undefined;
      promise._result = undefined;
      promise._subscribers = [];
    }

    function lib$es6$promise$promise$all$$all(entries) {
      return new lib$es6$promise$enumerator$$default(this, entries).promise;
    }
    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
    function lib$es6$promise$promise$race$$race(entries) {
      /*jshint validthis:true */
      var Constructor = this;

      if (!lib$es6$promise$utils$$isArray(entries)) {
        return new Constructor(function(resolve, reject) {
          reject(new TypeError('You must pass an array to race.'));
        });
      } else {
        return new Constructor(function(resolve, reject) {
          var length = entries.length;
          for (var i = 0; i < length; i++) {
            Constructor.resolve(entries[i]).then(resolve, reject);
          }
        });
      }
    }
    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
    function lib$es6$promise$promise$reject$$reject(reason) {
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$reject(promise, reason);
      return promise;
    }
    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;


    function lib$es6$promise$promise$$needsResolver() {
      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
    }

    function lib$es6$promise$promise$$needsNew() {
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }

    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
    /**
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise's eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```

      @class Promise
      @param {function} resolver
      Useful for tooling.
      @constructor
    */
    function lib$es6$promise$promise$$Promise(resolver) {
      this[lib$es6$promise$$internal$$PROMISE_ID] = lib$es6$promise$$internal$$nextId();
      this._result = this._state = undefined;
      this._subscribers = [];

      if (lib$es6$promise$$internal$$noop !== resolver) {
        typeof resolver !== 'function' && lib$es6$promise$promise$$needsResolver();
        this instanceof lib$es6$promise$promise$$Promise ? lib$es6$promise$$internal$$initializePromise(this, resolver) : lib$es6$promise$promise$$needsNew();
      }
    }

    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

    lib$es6$promise$promise$$Promise.prototype = {
      constructor: lib$es6$promise$promise$$Promise,

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.

      ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```

      Chaining
      --------

      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.

      ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });

      findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

      ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```

      Assimilation
      ------------

      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```

      If the assimliated promise rejects, then the downstream promise will also reject.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```

      Simple Example
      --------------

      Synchronous Example

      ```javascript
      var result;

      try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```

      Advanced Example
      --------------

      Synchronous Example

      ```javascript
      var author, books;

      try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js

      function foundBooks(books) {

      }

      function failure(reason) {

      }

      findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      }).catch(function(reason){
        // something went wrong
      });
      ```

      @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      Useful for tooling.
      @return {Promise}
    */
      then: lib$es6$promise$then$$default,

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.

      ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }

      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }

      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```

      @method catch
      @param {Function} onRejection
      Useful for tooling.
      @return {Promise}
    */
      'catch': function(onRejection) {
        return this.then(null, onRejection);
      }
    };
    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;
    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (!this.promise[lib$es6$promise$$internal$$PROMISE_ID]) {
        lib$es6$promise$$internal$$makePromise(this.promise);
      }

      if (lib$es6$promise$utils$$isArray(input)) {
        this._input     = input;
        this.length     = input.length;
        this._remaining = input.length;

        this._result = new Array(this.length);

        if (this.length === 0) {
          lib$es6$promise$$internal$$fulfill(this.promise, this._result);
        } else {
          this.length = this.length || 0;
          this._enumerate();
          if (this._remaining === 0) {
            lib$es6$promise$$internal$$fulfill(this.promise, this._result);
          }
        }
      } else {
        lib$es6$promise$$internal$$reject(this.promise, lib$es6$promise$enumerator$$validationError());
      }
    }

    function lib$es6$promise$enumerator$$validationError() {
      return new Error('Array Methods must be provided an Array');
    }

    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
      var length  = this.length;
      var input   = this._input;

      for (var i = 0; this._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        this._eachEntry(input[i], i);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
      var c = this._instanceConstructor;
      var resolve = c.resolve;

      if (resolve === lib$es6$promise$promise$resolve$$default) {
        var then = lib$es6$promise$$internal$$getThen(entry);

        if (then === lib$es6$promise$then$$default &&
            entry._state !== lib$es6$promise$$internal$$PENDING) {
          this._settledAt(entry._state, i, entry._result);
        } else if (typeof then !== 'function') {
          this._remaining--;
          this._result[i] = entry;
        } else if (c === lib$es6$promise$promise$$default) {
          var promise = new c(lib$es6$promise$$internal$$noop);
          lib$es6$promise$$internal$$handleMaybeThenable(promise, entry, then);
          this._willSettleAt(promise, i);
        } else {
          this._willSettleAt(new c(function(resolve) { resolve(entry); }), i);
        }
      } else {
        this._willSettleAt(resolve(entry), i);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
      var promise = this.promise;

      if (promise._state === lib$es6$promise$$internal$$PENDING) {
        this._remaining--;

        if (state === lib$es6$promise$$internal$$REJECTED) {
          lib$es6$promise$$internal$$reject(promise, value);
        } else {
          this._result[i] = value;
        }
      }

      if (this._remaining === 0) {
        lib$es6$promise$$internal$$fulfill(promise, this._result);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
      var enumerator = this;

      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
      }, function(reason) {
        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
      });
    };
    function lib$es6$promise$polyfill$$polyfill() {
      var local;

      if (typeof global !== 'undefined') {
          local = global;
      } else if (typeof self !== 'undefined') {
          local = self;
      } else {
          try {
              local = Function('return this')();
          } catch (e) {
              throw new Error('polyfill failed because global object is unavailable in this environment');
          }
      }

      var P = local.Promise;

      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
        return;
      }

      local.Promise = lib$es6$promise$promise$$default;
    }
    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

    var lib$es6$promise$umd$$ES6Promise = {
      'Promise': lib$es6$promise$promise$$default,
      'polyfill': lib$es6$promise$polyfill$$default
    };

    /* global define:true module:true window: true */
    if (typeof define === 'function' && define['amd']) {
      define(function() { return lib$es6$promise$umd$$ES6Promise; });
    } else if (typeof module !== 'undefined' && module['exports']) {
      module['exports'] = lib$es6$promise$umd$$ES6Promise;
    } else if (typeof this !== 'undefined') {
      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
    }

    lib$es6$promise$polyfill$$default();
}).call(this);


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":18}],2:[function(require,module,exports){
(function(){var g={};
(function(window){var k,aa=this;aa.Lb=!0;function m(a,b){var c=a.split("."),d=aa;c[0]in d||!d.execScript||d.execScript("var "+c[0]);for(var e;c.length&&(e=c.shift());)c.length||void 0===b?d[e]?d=d[e]:d=d[e]={}:d[e]=b}function ba(a){var b=ca;function c(){}c.prototype=b.prototype;a.Ob=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Mb=function(a,c,f){return b.prototype[c].apply(a,Array.prototype.slice.call(arguments,2))}};/*

 Copyright 2016 Google Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
function da(a){this.c=Math.exp(Math.log(.5)/a);this.a=this.b=0}function ea(a,b,c){var d=Math.pow(a.c,b);a.b=c*(1-d)+d*a.b;a.a+=b}function fa(a){return a.b/(1-Math.pow(a.c,a.a))};function ga(){this.a=new da(3);this.c=new da(10);this.b=5E5}function ia(a){return.5>a.a.a?a.b:Math.min(fa(a.a),fa(a.c))};function ja(){this.h=null;this.c=!1;this.b=new ga;this.g={};this.a={};this.i=!1;this.f=null}m("shaka.abr.SimpleAbrManager",ja);k=ja.prototype;k.stop=function(){this.h=null;this.c=!1;this.g={};this.a={};this.f=null};k.init=function(a){this.h=a};k.chooseStreams=function(a){this.g=a;this.a={};return ka(this)};k.enable=function(){this.c=!0};k.disable=function(){this.c=!1};
k.segmentDownloaded=function(a,b,c){var d=this.b;a=b-a;65536>c||200>a||(a=Math.max(a,50),c=8E3*c/a,a/=1E3,ea(d.a,a,c),ea(d.c,a,c));if(null!=this.f&&this.c)a:{d=Date.now()-this.f;if(!this.i){if(4E3>d)break a;this.i=!0}else if(8E3>d)break a;d=this.a.audio;c=this.a.video;a=ka(this);a.audio==d&&a.video==c||this.h(a)}};k.getBandwidthEstimate=function(){return ia(this.b)};k.setDefaultEstimate=function(a){this.b.b=a};
function ka(a){var b={},c;(c=a.g.audio)?(c=la(c),c=c[Math.floor(c.length/2)]):c=null;c&&(b.audio=c,a.a.audio=c);if(c=a.g.video){c=la(c);for(var d=a.a.audio,d=d&&d.bandwidth||0,e=ia(a.b),f=c[0],g=0;g<c.length;++g){var l=c[g],h=g+1<c.length?c[g+1]:{bandwidth:Number.POSITIVE_INFINITY};l.bandwidth&&(h=(h.bandwidth+d)/.85,e>=(l.bandwidth+d)/.95&&e<=h&&(f=l))}c=f}else c=null;c&&(b.video=c,a.a.video=c);a.f=Date.now();return b}
function la(a){return a.streams.slice(0).filter(function(a){return a.allowedByApplication&&a.allowedByKeySystem}).sort(function(a,c){return a.bandwidth-c.bandwidth})};var ma={},na={};m("shaka.media.ManifestParser.registerParserByExtension",function(a,b){na[a]=b});m("shaka.media.ManifestParser.registerParserByMime",function(a,b){ma[a]=b});function oa(){var a={basic:!0},b;for(b in ma)a[b]=!0;for(b in na)a[b]=!0;["application/dash+xml","application/x-mpegurl","application/vnd.apple.mpegurl","application/vnd.ms-sstr+xml"].forEach(function(b){a[b]=!!ma[b]});["mpd","m3u8","ism"].forEach(function(b){a[b]=!!na[b]});return a};function pa(a){this.h=a;this.c=this.a=Number.POSITIVE_INFINITY;this.b=1;this.g=this.f=0}m("shaka.media.PresentationTimeline",pa);function qa(a,b,c){0!=c.length&&(a.b=c.reduce(function(a,b){return Math.max(a,b.a-b.startTime)},a.b),0==b&&(a.f=Math.max(a.f,c[0].startTime)))}pa.prototype.aa=function(){return this.a==Number.POSITIVE_INFINITY||this.c<Number.POSITIVE_INFINITY};function ra(a){return Math.max(Math.min(a.f,n(a)),sa(a))}
function sa(a){return a.c==Number.POSITIVE_INFINITY?0:Math.max(0,n(a)-a.c)}function n(a){return null!=a.h&&a.aa()?Math.min(Math.max(0,(Date.now()+a.g)/1E3-a.b-a.h),a.a):a.a};function ta(a,b,c){this.uris=a;this.c=b;this.b=c}m("shaka.media.InitSegmentReference",ta);function w(a,b,c,d,e,f){this.position=a;this.startTime=b;this.a=c;this.uris=d;this.c=e;this.b=f}m("shaka.media.SegmentReference",w);function ua(a,b){if(!a)return 0;for(var c=0;c<a.length;++c)if(b+1E-4>=a.start(c)&&b<a.end(c))return a.end(c)-b;return 0};m("shaka.polyfill.installAll",function(){for(var a=0;a<va.length;++a)va[a]()});var va=[];function wa(a){va.push(a)}m("shaka.polyfill.register",wa);function xa(a){var b=a.type.replace(/^(webkit|moz|MS)/,"").toLowerCase(),b=new Event(b,a);a.target.dispatchEvent(b)}
wa(function(){if(window.Document){var a=Element.prototype;a.requestFullscreen=a.requestFullscreen||a.mozRequestFullScreen||a.msRequestFullscreen||a.webkitRequestFullscreen;a=Document.prototype;a.exitFullscreen=a.exitFullscreen||a.mozCancelFullScreen||a.msExitFullscreen||a.webkitExitFullscreen;"fullscreenElement"in document||Object.defineProperty(document,"fullscreenElement",{get:function(){return document.mozFullScreenElement||document.msFullscreenElement||document.webkitFullscreenElement}});document.addEventListener("webkitfullscreenchange",
xa);document.addEventListener("webkitfullscreenerror",xa);document.addEventListener("mozfullscreenchange",xa);document.addEventListener("mozfullscreenerror",xa);document.addEventListener("MSFullscreenChange",xa);document.addEventListener("MSFullscreenError",xa)}});function ya(){return Promise.reject(Error("The key system specified is not supported."))}function za(a){return null==a?Promise.resolve():Promise.reject(Error("MediaKeys not supported."))}function Aa(){throw new TypeError("Illegal constructor.");}Aa.prototype.createSession=function(){};Aa.prototype.setServerCertificate=function(){};function Ba(){throw new TypeError("Illegal constructor.");}Ba.prototype.getConfiguration=function(){};Ba.prototype.createMediaKeys=function(){};function x(a){this.c=[];this.b=[];this.X=Ca;if(a)try{a(this.N.bind(this),this.a.bind(this))}catch(b){this.a(b)}}var Ca=0;function Ea(a){var b=new x;b.N(a);return b}function Fa(a){var b=new x;b.a(a);return b}function Ga(a){function b(a,b,c){a.X==Ca&&(e[b]=c,d++,d==e.length&&a.N(e))}var c=new x;if(!a.length)return c.N([]),c;for(var d=0,e=Array(a.length),f=c.a.bind(c),g=0;g<a.length;++g)a[g]&&a[g].then?a[g].then(b.bind(null,c,g),f):b(c,g,a[g]);return c}
function Ha(a){for(var b=new x,c=b.N.bind(b),d=b.a.bind(b),e=0;e<a.length;++e)a[e]&&a[e].then?a[e].then(c,d):c(a[e]);return b}x.prototype.then=function(a,b){var c=new x;switch(this.X){case 1:Ia(this,c,a);break;case 2:Ia(this,c,b);break;case Ca:this.c.push({D:c,ta:a}),this.b.push({D:c,ta:b})}return c};x.prototype.then=x.prototype.then;x.prototype["catch"]=function(a){return this.then(void 0,a)};x.prototype["catch"]=x.prototype["catch"];
x.prototype.N=function(a){if(this.X==Ca){this.ra=a;this.X=1;for(a=0;a<this.c.length;++a)Ia(this,this.c[a].D,this.c[a].ta);this.c=[];this.b=[]}};x.prototype.a=function(a){if(this.X==Ca){this.ra=a;this.X=2;for(a=0;a<this.b.length;++a)Ia(this,this.b[a].D,this.b[a].ta);this.c=[];this.b=[]}};
function Ia(a,b,c){Ja.push(function(){if(c&&"function"==typeof c){try{var a=c(this.ra)}catch(f){b.a(f);return}var e;try{e=a&&a.then}catch(f){b.a(f);return}a instanceof x?a==b?b.a(new TypeError("Chaining cycle detected")):a.then(b.N.bind(b),b.a.bind(b)):e?Ka(a,e,b):b.N(a)}else 1==this.X?b.N(this.ra):b.a(this.ra)}.bind(a));null==La&&(La=Ma(Na))}
function Ka(a,b,c){try{var d=!1;b.call(a,function(a){if(!d){d=!0;var b;try{b=a&&a.then}catch(g){c.a(g);return}b?Ka(a,b,c):c.N(a)}},c.a.bind(c))}catch(e){c.a(e)}}function Na(){for(;Ja.length;){null!=La&&(Oa(La),La=null);var a=Ja;Ja=[];for(var b=0;b<a.length;++b)a[b]()}}function Ma(){return 0}function Oa(){}var La=null,Ja=[];
wa(function(){window.Promise||(window.Promise=x,window.Promise.resolve=Ea,window.Promise.reject=Fa,window.Promise.all=Ga,window.Promise.race=Ha,window.setImmediate?(Ma=function(a){return window.setImmediate(a)},Oa=function(a){return window.clearImmediate(a)}):(Ma=function(a){return window.setTimeout(a,0)},Oa=function(a){return window.clearTimeout(a)}))});function Pa(){return{droppedVideoFrames:this.webkitDroppedFrameCount,totalVideoFrames:this.webkitDecodedFrameCount,corruptedVideoFrames:0,creationTime:NaN,totalFrameDelay:0}}wa(function(){if(window.HTMLVideoElement){var a=HTMLVideoElement.prototype;!a.getVideoPlaybackQuality&&"webkitDroppedFrameCount"in a&&(a.getVideoPlaybackQuality=Pa)}});function Qa(a,b,c){for(var d=0;d<a.length;++d)if(c(a[d],b))return d;return-1};function z(a,b,c){this.category=a;this.code=b;this.data=Array.prototype.slice.call(arguments,2)}m("shaka.util.Error",z);z.prototype.toString=function(){return"shaka.util.Error "+JSON.stringify(this,null,"  ")};z.Category={NETWORK:1,TEXT:2,MEDIA:3,MANIFEST:4,STREAMING:5,DRM:6};
z.Code={UNSUPPORTED_SCHEME:1E3,BAD_HTTP_STATUS:1001,HTTP_ERROR:1002,TIMEOUT:1003,MALFORMED_DATA_URI:1004,UNKNOWN_DATA_URI_ENCODING:1005,INVALID_TEXT_HEADER:2E3,INVALID_TEXT_CUE:2001,INVALID_TEXT_SETTINGS:2002,UNABLE_TO_DETECT_ENCODING:2003,BAD_ENCODING:2004,BUFFER_READ_OUT_OF_BOUNDS:3E3,JS_INTEGER_OVERFLOW:3001,EBML_OVERFLOW:3002,EBML_BAD_FLOATING_POINT_SIZE:3003,MP4_SIDX_WRONG_BOX_TYPE:3004,MP4_SIDX_INVALID_TIMESCALE:3005,MP4_SIDX_TYPE_NOT_SUPPORTED:3006,WEBM_CUES_ELEMENT_MISSING:3007,WEBM_EBML_HEADER_ELEMENT_MISSING:3008,
WEBM_SEGMENT_ELEMENT_MISSING:3009,WEBM_INFO_ELEMENT_MISSING:3010,WEBM_DURATION_ELEMENT_MISSING:3011,WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING:3012,WEBM_CUE_TIME_ELEMENT_MISSING:3013,MEDIA_SOURCE_OPERATION_FAILED:3014,MEDIA_SOURCE_OPERATION_THREW:3015,VIDEO_ERROR:3016,UNABLE_TO_GUESS_MANIFEST_TYPE:4E3,DASH_INVALID_XML:4001,DASH_NO_SEGMENT_INFO:4002,DASH_EMPTY_ADAPTATION_SET:4003,DASH_EMPTY_PERIOD:4004,DASH_WEBM_MISSING_INIT:4005,DASH_UNSUPPORTED_CONTAINER:4006,DASH_PSSH_BAD_ENCODING:4007,DASH_NO_COMMON_KEY_SYSTEM:4008,
DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED:4009,DASH_CONFLICTING_KEY_IDS:4010,UNPLAYABLE_PERIOD:4011,ALL_STREAMS_RESTRICTED:4012,INCONSISTENT_BUFFER_STATE:5E3,INVALID_STREAMS_CHOSEN:5005,NO_RECOGNIZED_KEY_SYSTEMS:6E3,REQUESTED_KEY_SYSTEMS_UNAVAILABLE:6001,FAILED_TO_CREATE_CDM:6002,FAILED_TO_ATTACH_TO_VIDEO:6003,INVALID_SERVER_CERTIFICATE:6004,FAILED_TO_CREATE_SESSION:6005,FAILED_TO_GENERATE_LICENSE_REQUEST:6006,LICENSE_REQUEST_FAILED:6007,LICENSE_RESPONSE_REJECTED:6008,ENCRYPTED_CONTENT_WITHOUT_DRM_INFO:6010,
WRONG_KEYS:6011};function Ra(a){this.b=a;this.c=0==Sa;this.a=0}var Sa=1;function Ta(a){return a.a<a.b.byteLength}function Ua(a){try{var b=a.b.getUint8(a.a)}catch(c){Va()}a.a+=1;return b}function A(a){try{var b=a.b.getUint32(a.a,a.c)}catch(c){Va()}a.a+=4;return b}function Wa(a){var b,c;try{a.c?(b=a.b.getUint32(a.a,!0),c=a.b.getUint32(a.a+4,!0)):(c=a.b.getUint32(a.a,!1),b=a.b.getUint32(a.a+4,!1))}catch(d){Va()}if(2097151<c)throw new z(3,3001);a.a+=8;return c*Math.pow(2,32)+b}
function Xa(a){a.a+16>a.b.byteLength&&Va();var b=new Uint8Array(a.b.buffer,a.a,16);a.a+=16;return b}function B(a,b){a.a+b>a.b.byteLength&&Va();a.a+=b}function Va(){throw new z(3,3E3);};function C(a){this.b=a;this.a=new Ra(a);Ya||(Ya=[new Uint8Array([255]),new Uint8Array([127,255]),new Uint8Array([63,255,255]),new Uint8Array([31,255,255,255]),new Uint8Array([15,255,255,255,255]),new Uint8Array([7,255,255,255,255,255]),new Uint8Array([3,255,255,255,255,255,255]),new Uint8Array([1,255,255,255,255,255,255,255])])}var Ya;
function D(a){var b;b=Za(a);if(7<b.length)throw new z(3,3002);for(var c=0,d=0;d<b.length;d++)c=256*c+b[d];b=c;c=Za(a);a:{for(d=0;d<Ya.length;d++)if(E(c,Ya[d])){d=!0;break a}d=!1}if(d)c=a.b.byteLength-a.a.a;else{if(8==c.length&&c[1]&224)throw new z(3,3001);for(var d=c[0]&(1<<8-c.length)-1,e=1;e<c.length;e++)d=256*d+c[e];c=d}c=a.a.a+c<=a.b.byteLength?c:a.b.byteLength-a.a.a;d=new DataView(a.b.buffer,a.b.byteOffset+a.a.a,c);B(a.a,c);return new $a(b,d)}
function Za(a){var b=Ua(a.a),c;for(c=1;8>=c&&!(b&1<<8-c);c++);if(8<c)throw new z(3,3002);var d=new Uint8Array(c);d[0]=b;for(b=1;b<c;b++)d[b]=Ua(a.a);return d}function $a(a,b){this.id=a;this.a=b}function ab(a){if(8<a.a.byteLength)throw new z(3,3002);if(8==a.a.byteLength&&a.a.getUint8(0)&224)throw new z(3,3001);for(var b=0,c=0;c<a.a.byteLength;c++)var d=a.a.getUint8(c),b=256*b+d;return b};function F(a,b){var c=b||{},d;for(d in c)this[d]=c[d];this.defaultPrevented=this.cancelable=this.bubbles=!1;this.timeStamp=window.performance?window.performance.now():Date.now();this.type=a;this.isTrusted=!1;this.target=this.currentTarget=null;this.a=!1}F.prototype.preventDefault=function(){};F.prototype.stopImmediatePropagation=function(){this.a=!0};F.prototype.stopPropagation=function(){};function bb(a,b){return a.reduce(function(a,b,e){return b["catch"](a.bind(null,e))}.bind(null,b),Promise.reject())}function cb(a,b){return a.concat(b)}function G(){}function db(a){return null!=a}function eb(a){return function(b){return b!=a}};function H(a){this.a=a}m("shaka.media.SegmentIndex",H);H.prototype.s=function(){this.a=null;return Promise.resolve()};H.prototype.b=function(a){for(var b=this.a.length-1;0<=b;--b){var c=this.a[b];if(a>=c.startTime&&a<c.a)return c.position}return null};H.prototype.get=function(a){if(0==this.a.length)return null;a-=this.a[0].position;return 0>a||a>=this.a.length?null:this.a[a]};
function fb(a,b){for(var c=[],d=0,e=0;d<a.a.length&&e<b.length;){var f=a.a[d],g=b[e];f.startTime<g.startTime?(c.push(f),d++):(f.startTime>g.startTime||(.1<Math.abs(f.a-g.a)?c.push(g):c.push(f),d++),e++)}for(;d<a.a.length;)c.push(a.a[d++]);if(c.length)for(d=c[c.length-1].position+1;e<b.length;)g=b[e++],g=new w(d++,g.startTime,g.a,g.uris,g.c,g.b),c.push(g);else c=b;a.a=c}function gb(a,b){for(var c=0;c<a.a.length&&!(a.a[c].a>b);++c);a.a.splice(0,c)};function hb(a,b){this.g=ib[b];this.c=a;this.h=0;this.f=Number.POSITIVE_INFINITY;this.a=this.b=null}var ib={};m("shaka.media.TextEngine.registerParser",function(a,b){ib[a]=b});m("shaka.media.TextEngine.unregisterParser",function(a){delete ib[a]});hb.prototype.s=function(){this.c&&jb(this,function(){return!0});this.c=this.g=null;return Promise.resolve()};
function kb(a,b,c,d){var e=a.h;c+=e;d+=e;return Promise.resolve().then(function(){for(var a=this.g(b),g=0;g<a.length;++g){a[g].startTime+=e;a[g].endTime+=e;if(a[g].startTime>=this.f)break;this.c.addCue(a[g])}null==this.b&&(this.b=c);this.a=Math.min(d,this.f)}.bind(a))}
function lb(a,b,c){return Promise.resolve().then(function(){jb(this,function(a){return a.startTime>=c||a.endTime<=b?!1:!0});null==this.b||c<=this.b||b>=this.a||(b<=this.b&&c>=this.a?this.b=this.a=null:b<=this.b&&c<this.a?this.b=c:b>this.b&&c>=this.a&&(this.a=b))}.bind(a))}function mb(a,b){return null==a.a||a.a<b||b<a.b?0:a.a-b}function jb(a,b){for(var c=a.c.cues,d=[],e=0;e<c.length;++e)b(c[e])&&d.push(c[e]);for(e=0;e<d.length;++e)a.c.removeCue(d[e])};function nb(a){a=a.toLowerCase().split("-");var b=ob[a[0]];b&&(a[0]=b);return a.join("-")}
var ob={aar:"aa",abk:"ab",afr:"af",aka:"ak",alb:"sq",amh:"am",ara:"ar",arg:"an",arm:"hy",asm:"as",ava:"av",ave:"ae",aym:"ay",aze:"az",bak:"ba",bam:"bm",baq:"eu",bel:"be",ben:"bn",bih:"bh",bis:"bi",bod:"bo",bos:"bs",bre:"br",bul:"bg",bur:"my",cat:"ca",ces:"cs",cha:"ch",che:"ce",chi:"zh",chu:"cu",chv:"cv",cor:"kw",cos:"co",cre:"cr",cym:"cy",cze:"cs",dan:"da",deu:"de",div:"dv",dut:"nl",dzo:"dz",ell:"el",eng:"en",epo:"eo",est:"et",eus:"eu",ewe:"ee",fao:"fo",fas:"fa",fij:"fj",fin:"fi",fra:"fr",fre:"fr",
fry:"fy",ful:"ff",geo:"ka",ger:"de",gla:"gd",gle:"ga",glg:"gl",glv:"gv",gre:"el",grn:"gn",guj:"gu",hat:"ht",hau:"ha",heb:"he",her:"hz",hin:"hi",hmo:"ho",hrv:"hr",hun:"hu",hye:"hy",ibo:"ig",ice:"is",ido:"io",iii:"ii",iku:"iu",ile:"ie",ina:"ia",ind:"id",ipk:"ik",isl:"is",ita:"it",jav:"jv",jpn:"ja",kal:"kl",kan:"kn",kas:"ks",kat:"ka",kau:"kr",kaz:"kk",khm:"km",kik:"ki",kin:"rw",kir:"ky",kom:"kv",kon:"kg",kor:"ko",kua:"kj",kur:"ku",lao:"lo",lat:"la",lav:"lv",lim:"li",lin:"ln",lit:"lt",ltz:"lb",lub:"lu",
lug:"lg",mac:"mk",mah:"mh",mal:"ml",mao:"mi",mar:"mr",may:"ms",mkd:"mk",mlg:"mg",mlt:"mt",mon:"mn",mri:"mi",msa:"ms",mya:"my",nau:"na",nav:"nv",nbl:"nr",nde:"nd",ndo:"ng",nep:"ne",nld:"nl",nno:"nn",nob:"nb",nor:"no",nya:"ny",oci:"oc",oji:"oj",ori:"or",orm:"om",oss:"os",pan:"pa",per:"fa",pli:"pi",pol:"pl",por:"pt",pus:"ps",que:"qu",roh:"rm",ron:"ro",rum:"ro",run:"rn",rus:"ru",sag:"sg",san:"sa",sin:"si",slk:"sk",slo:"sk",slv:"sl",sme:"se",smo:"sm",sna:"sn",snd:"sd",som:"so",sot:"st",spa:"es",sqi:"sq",
srd:"sc",srp:"sr",ssw:"ss",sun:"su",swa:"sw",swe:"sv",tah:"ty",tam:"ta",tat:"tt",tel:"te",tgk:"tg",tgl:"tl",tha:"th",tib:"bo",tir:"ti",ton:"to",tsn:"tn",tso:"ts",tuk:"tk",tur:"tr",twi:"tw",uig:"ug",ukr:"uk",urd:"ur",uzb:"uz",ven:"ve",vie:"vi",vol:"vo",wel:"cy",wln:"wa",wol:"wo",xho:"xh",yid:"yi",yor:"yo",zha:"za",zho:"zh",zul:"zu"};function J(a){return Object.keys(a).map(function(b){return a[b]})}function pb(a,b){return Object.keys(a).reduce(function(c,d){c[d]=b(a[d],d);return c},{})}function qb(a,b){return Object.keys(a).reduce(function(c,d){b(d,a[d])&&(c[d]=a[d]);return c},{})};function L(){this.a={}}L.prototype.push=function(a,b){this.a.hasOwnProperty(a)?this.a[a].push(b):this.a[a]=[b]};L.prototype.get=function(a){return(a=this.a[a])?a.slice():null};function rb(a,b,c){if(a=a.a[b])for(b=0;b<a.length;++b)a[b]==c&&(a.splice(b,1),--b)}L.prototype.keys=function(){var a=[],b;for(b in this.a)a.push(b);return a};L.prototype.clear=function(){this.a={}};function M(){this.a=new L}M.prototype.s=function(){sb(this);this.a=null;return Promise.resolve()};function N(a,b,c,d){b=new tb(b,c,d);a.a.push(c,b)}M.prototype.Y=function(a,b){for(var c=this.a.get(b)||[],d=0;d<c.length;++d){var e=c[d];e.target==a&&(e.Y(),rb(this.a,b,e))}};function sb(a){var b=a.a,c=[],d;for(d in b.a)c.push.apply(c,b.a[d]);for(b=0;b<c.length;++b)c[b].Y();a.a.clear()}function tb(a,b,c){this.target=a;this.type=b;this.a=c;this.target.addEventListener(b,c,!1)}
tb.prototype.Y=function(){this.target&&(this.target.removeEventListener(this.type,this.a,!1),this.a=this.target=null)};function ub(a,b,c,d,e,f){this.a=a;this.c=b;this.i=c;this.o=d;this.l=e;this.m=f;this.b=new M;this.h=!1;this.g=1;this.f=null;0<a.readyState?this.Ia():N(this.b,a,"loadedmetadata",this.Ia.bind(this));N(this.b,a,"ratechange",this.cb.bind(this))}k=ub.prototype;k.s=function(){var a=this.b.s();this.b=null;null!=this.f&&(window.clearInterval(this.f),this.f=null);this.m=this.l=this.c=this.a=null;return a};function vb(a){return 0<a.a.readyState?wb(a,a.a.currentTime):xb(a)}
function xb(a){return a.o?wb(a,a.o):a.c.a<Number.POSITIVE_INFINITY?ra(a.c):Math.max(n(a.c)-a.i,ra(a.c))}function yb(a,b){b!=a.h&&(a.h=b,zb(a,a.g),a.l(b))}k.va=function(){return this.g};function zb(a,b){null!=a.f&&(window.clearInterval(a.f),a.f=null);a.g=b;a.a.playbackRate=a.h||0>b?0:b;!a.h&&0>b&&(a.f=window.setInterval(function(){this.a.currentTime+=b/4}.bind(a),250))}k.cb=function(){this.a.playbackRate!=(this.h||0>this.g?0:this.g)&&zb(this,this.a.playbackRate)};
k.Ia=function(){this.b.Y(this.a,"loadedmetadata");var a=xb(this);this.a.currentTime.toFixed(3)==a.toFixed(3)?(N(this.b,this.a,"seeking",this.Ka.bind(this)),N(this.b,this.a,"playing",this.Ja.bind(this))):(N(this.b,this.a,"seeking",this.eb.bind(this)),this.a.currentTime=a)};k.eb=function(){this.b.Y(this.a,"seeking");N(this.b,this.a,"seeking",this.Ka.bind(this));N(this.b,this.a,"playing",this.Ja.bind(this))};k.Ka=function(){var a=this.a.currentTime,b=Ab(this,a);b!=a?Bb(this,a,b):this.m()};
k.Ja=function(){var a=this.a.currentTime,b=Ab(this,a);b!=a&&Bb(this,a,b)};function Ab(a,b){var c=a.c,d=ra(c),e=n(c);if(!c.aa()||c.c==Number.POSITIVE_INFINITY)return b<d?d:b>e?e:b;c=d+1;d=c+a.i;return b>=d&&b<=e||0!=ua(a.a.buffered,b)&&b>=c&&b<=e?b:b>e?e:e<d&&b>=c&&b<=e?b:Math.min(d+2,e)}function Bb(a,b,c){a.a.currentTime=c;var d=0,e=function(){!this.a||10<=d++||this.a.currentTime!=b||(this.a.currentTime=c,setTimeout(e,100))}.bind(a);setTimeout(e,100)}
function wb(a,b){var c=ra(a.c);if(b<c)return c;c=n(a.c);return b>c?c:b};function ca(){this.w=new L}ca.prototype.addEventListener=function(a,b){this.w.push(a,b)};ca.prototype.removeEventListener=function(a,b){rb(this.w,a,b)};ca.prototype.dispatchEvent=function(a){for(var b=this.w.get(a.type)||[],c=0;c<b.length;++c){a.target=this;a.currentTarget=this;var d=b[c];try{d.handleEvent?d.handleEvent(a):d.call(this,a)}catch(e){}if(a.a)break}return a.defaultPrevented};function O(){var a,b,c=new Promise(function(c,e){a=c;b=e});c.resolve=a;c.reject=b;return c};function Cb(a,b,c){this.i=a;this.f=b;this.l=c;this.c={};this.b=null;this.a={};this.g=new M;this.h=!1}
function Db(){var a={basic:!!window.MediaSource},b=navigator.vendor,c=navigator.appVersion;b&&0<=b.indexOf("Apple")&&c&&0<=c.indexOf("Version/8")&&(a.basic=!1);a.basic&&'video/mp4; codecs="avc1.42E01E",audio/mp4; codecs="mp4a.40.2",video/webm; codecs="vp8",video/webm; codecs="vp9",audio/webm; codecs="vorbis",audio/webm; codecs="opus",video/mp2t; codecs="avc1.42E01E",video/mp2t; codecs="mp4a.40.2",text/vtt,application/mp4; codecs="wvtt",application/ttml+xml,application/mp4; codecs="stpp"'.split(",").forEach(function(b){a[b]=!!ib[b]||
MediaSource.isTypeSupported(b);var c=b.split(";")[0];a[c]=a[c]||a[b]});return a}k=Cb.prototype;k.s=function(){this.h=!0;var a=[],b;for(b in this.a){var c=this.a[b],d=c[0];this.a[b]=c.slice(0,1);d&&a.push(d.p["catch"](G));for(d=1;d<c.length;++d)c[d].p["catch"](G),c[d].p.reject()}this.b&&a.push(this.b.s());return Promise.all(a).then(function(){this.g.s();this.b=this.l=this.f=this.i=this.g=null;this.c={};this.a={}}.bind(this))};
k.init=function(a){for(var b in a){var c=a[b];"text"==b?this.b=new hb(this.l,c):(c=this.f.addSourceBuffer(c),N(this.g,c,"error",this.Gb.bind(this,b)),N(this.g,c,"updateend",this.za.bind(this,b)),this.c[b]=c,this.a[b]=[])}};function Eb(a,b){var c;c="text"==b?a.b.b:(c=a.c[b].buffered)?c.length?c.start(0):null:null;return c}function Fb(a,b,c){"text"==b?(b=mb(a.b,c),b||(b=mb(a.b,c+.1))&&(b+=.1)):(a=a.c[b].buffered,b=ua(a,c),b||(b=ua(a,c+.1))&&(b+=.1));return b}
function Gb(a,b,c,d,e){return"text"==b?kb(a.b,c,d,e):Hb(a,b,a.Fb.bind(a,b,c))}function Ib(a,b,c,d){return"text"==b?lb(a.b,c,d):Hb(a,b,a.La.bind(a,b,c,d))}k.clear=function(a){return"text"==a?lb(this.b,0,Number.POSITIVE_INFINITY):Hb(this,a,this.La.bind(this,a,0,this.f.duration))};function Kb(a,b,c){return"text"==b?(a.b.h=c,Promise.resolve()):Hb(a,b,a.yb.bind(a,b,c))}function Mb(a,b,c){return"text"==b?(a.b.f=c,Promise.resolve()):Hb(a,b,a.wb.bind(a,b,c))}
k.endOfStream=function(a){return Nb(this,function(){a?this.f.endOfStream(a):this.f.endOfStream()}.bind(this))};function Ob(a,b){Nb(a,function(){this.f.duration=b}.bind(a))}k.Fb=function(a,b){this.c[a].appendBuffer(b)};k.La=function(a,b,c){this.c[a].remove(b,c)};k.yb=function(a,b){this.c[a].timestampOffset=b;this.za(a)};k.wb=function(a,b){this.c[a].appendWindowEnd=b+1/15;this.za(a)};k.Gb=function(a){this.a[a][0].p.reject(new z(3,3014,this.i.error?this.i.error.code:0))};
k.za=function(a){var b=this.a[a][0];b&&(b.p.resolve(),Pb(this,a))};function Hb(a,b,c){if(a.h)return Promise.reject();c={start:c,p:new O};a.a[b].push(c);if(1==a.a[b].length)try{c.start()}catch(d){c.p.reject(new z(3,3015,d)),Pb(a,b)}return c.p}
function Nb(a,b){if(a.h)return Promise.reject();var c=[],d;for(d in a.c){var e=new O,f={start:function(a){a.resolve()}.bind(null,e),p:e};a.a[d].push(f);c.push(e);1==a.a[d].length&&f.start()}return Promise.all(c).then(function(){var a,c;try{b()}catch(d){c=Promise.reject(new z(3,3015,d))}for(a in this.c)Pb(this,a);return c}.bind(a),function(){return Promise.reject()}.bind(a))}function Pb(a,b){a.a[b].shift();var c=a.a[b][0];if(c)try{c.start()}catch(d){c.p.reject(new z(3,3015,d)),Pb(a,b)}};function Qb(a){if(!a)return"";a=Rb(new Uint8Array(a));a=escape(a);try{return decodeURIComponent(a)}catch(b){throw new z(2,2004);}}function Sb(a,b){if(!a)return"";if(0!=a.byteLength%2)throw new z(2,2004);var c;if(a instanceof ArrayBuffer)c=a;else{var d=new Uint8Array(a.byteLength);d.set(new Uint8Array(a));c=d.buffer}var d=a.byteLength/2,e=new Uint16Array(d);c=new DataView(c);for(var f=0;f<d;f++)e[f]=c.getUint16(2*f,b);return Rb(e)}
function Tb(a){var b=new Uint8Array(a);if(239==b[0]&&187==b[1]&&191==b[2])return Qb(b.subarray(3));if(254==b[0]&&255==b[1])return Sb(b.subarray(2),!1);if(255==b[0]&&254==b[1])return Sb(b.subarray(2),!0);var c=function(a,b){return a.byteLength<=b||32<=a[b]&&126>=a[b]}.bind(null,b);if(0==b[0]&&0==b[2])return Sb(a,!1);if(0==b[1]&&0==b[3])return Sb(a,!0);if(c(0)&&c(1)&&c(2)&&c(3))return Qb(a);throw new z(2,2003);}
function Ub(a){a=unescape(encodeURIComponent(a));for(var b=new Uint8Array(a.length),c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b.buffer}function Rb(a){for(var b="",c=0;c<a.length;c+=16E3)b+=String.fromCharCode.apply(null,a.subarray(c,c+16E3));return b};function Vb(a){this.b=a;this.a=0}function Wb(a,b){var c;b.lastIndex=a.a;c=b.exec(a.b);c=null==c?null:{position:c.index,length:c[0].length,tb:c};if(a.a==a.b.length||null==c||c.position!=a.a)return null;a.a+=c.length;return c.tb}function Xb(a){return a.a==a.b.length?null:(a=Wb(a,/[^ \t\n]*/gm))?a[0]:null};function P(a){a=Tb(a);a=a.replace(/\r\n|\r(?=[^\n]|$)/gm,"\n");a=a.split(/\n{2,}/m);if(!/^WEBVTT($|[ \t\n])/m.test(a[0]))throw new z(2,2E3);for(var b=[],c=1;c<a.length;c++){var d=P.b(a[c].split("\n"));d&&b.push(d)}return b}
P.b=function(a){if(1==a.length&&!a[0]||/^NOTE($|[ \t])/.test(a[0]))return null;var b=null;0>a[0].indexOf("--\x3e")&&(b=a[0],a.splice(0,1));var c=new Vb(a[0]),d=P.a(c),e=Wb(c,/[ \t]+--\x3e[ \t]+/g),f=P.a(c);if(null==d||null==e||null==f)throw new z(2,2001);a=a.slice(1).join("\n");if(window.VTTCue)for(d=new VTTCue(d,f,a),Wb(c,/[ \t]+/gm),f=Xb(c);f;){if(!P.c(d,f))throw new z(2,2002);Wb(c,/[ \t]+/gm);f=Xb(c)}else d=new TextTrackCue(d,f,a);null!=b&&(d.id=b);return d};
P.c=function(a,b){var c=null;if(c=/^align:(start|middle|end)$/.exec(b))a.align=c[1];else if(c=/^vertical:(lr|rl)$/.exec(b))a.c=c[1];else if(c=/^size:(\d{1,2}|100)%$/.exec(b))a.size=Number(c[1]);else if(c=/^position:(\d{1,2}|100)%$/.exec(b))a.position=Number(c[1]);else if(c=/^line:(\d{1,2}|100)%$/.exec(b))a.b=!1,a.a=Number(c[1]);else if(c=/^line:(-?\d+)$/.exec(b))a.b=!0,a.a=Number(c[1]);else return!1;return!0};
P.a=function(a){a=Wb(a,/(?:(\d{2,}):)?(\d{2}):(\d{2})\.(\d{3})/g);if(null==a)return null;var b=Number(a[2]),c=Number(a[3]);return 59<b||59<c?null:Number(a[4])/1E3+c+60*b+3600*(Number(a[1])||0)};ib["text/vtt"]=P;function Yb(a){return window.btoa(String.fromCharCode.apply(null,a)).replace(/\+/g,"-").replace(/\//g,"_").replace(/=*$/,"")}function Zb(a){a=window.atob(a.replace(/-/g,"+").replace(/_/g,"/"));for(var b=new Uint8Array(a.length),c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b}function $b(a){for(var b=new Uint8Array(a.length/2),c=0;c<a.length;c+=2)b[c/2]=window.parseInt(a.substr(c,2),16);return b}
function ac(a){for(var b="",c=0;c<a.length;++c){var d=a[c].toString(16);1==d.length&&(d="0"+d);b+=d}return b}function E(a,b){if(!a&&!b)return!0;if(!a||!b||a.length!=b.length)return!1;for(var c=0;c<a.length;++c)if(a[c]!=b[c])return!1;return!0};function bc(a,b,c){this.l="";this.m=null;this.o=[];this.h=this.i=null;this.u=!1;this.c=new M;this.w="";this.a=[];this.A=a;this.f=null;this.g=b;this.F=c;this.b=!1}k=bc.prototype;k.s=function(){this.b=!0;this.a.forEach(function(a){a.pa.close()["catch"](G)});var a=[];this.c&&a.push(this.c.s());this.h&&a.push(this.h.setMediaKeys(null)["catch"](G));this.o=[];this.c=this.h=this.i=this.m=null;this.a=[];this.g=this.f=this.A=null;return Promise.all(a)};k.configure=function(a){this.f=a};
k.init=function(a,b){var c={},d=[];cc(this,a,b,c,d);return d.length?dc(this,c,d):(this.u=!0,Promise.resolve())};
function ec(a,b){if(!a.i)return N(a.c,b,"encrypted",function(){this.c.Y(b,"encrypted");this.g(new z(6,6010))}.bind(a)),Promise.resolve();var c=[],d=[],e=[];fc(a,c,d,e);a.w=c[0];a.h=b;var c=a.h.setMediaKeys(a.i),c=c["catch"](function(a){return Promise.reject(new z(6,6003,a.message))}),f=null;d.length&&(f=a.i.setServerCertificate(d[0]),f=f["catch"](function(a){return Promise.reject(new z(6,6004,a.message))}));N(a.c,a.h,"waitingforkey",a.hb.bind(a));return Promise.all([c,f]).then(function(){if(this.b)return Promise.reject();
e.length?e.forEach(function(a){gc(this,a.initDataType,a.initData)}.bind(this)):N(this.c,this.h,"encrypted",this.Ya.bind(this))}.bind(a))["catch"](function(a){return this.b?Promise.resolve():Promise.reject(a)}.bind(a))}k.keySystem=function(){return this.l};
function cc(a,b,c,d,e){var f=hc(a);b.periods.forEach(function(a){a.streamSets.forEach(function(a){"text"!=a.type&&(f&&(a.drmInfos=[f]),a.drmInfos.forEach(function(b){ic(this,b);var f=d[b.keySystem];f||(f={initDataTypes:void 0,audioCapabilities:[],videoCapabilities:[],distinctiveIdentifier:"optional",persistentState:c?"required":"optional",sessionTypes:[c?"persistent-license":"temporary"],label:b.keySystem,drmInfos:[]},d[b.keySystem]=f,e.push(b.keySystem));f.drmInfos.push(b);b.distinctiveIdentifierRequired&&
(f.distinctiveIdentifier="required");b.persistentStateRequired&&(f.persistentState="required");var g="video"==a.type?f.videoCapabilities:f.audioCapabilities,t=("video"==a.type?b.videoRobustness:b.audioRobustness)||"";a.streams.forEach(function(a){var c=a.mimeType;a.codecs&&(c+='; codecs="'+a.codecs+'"');"com.microsoft.playready"==b.keySystem&&g.length||g.push({robustness:t,contentType:c})}.bind(this))}.bind(this)))}.bind(this))}.bind(a))}
function dc(a,b,c){var d=new O,e=d;if(1==c.length&&""==c[0])return Promise.reject(new z(6,6E3));c.forEach(function(a){var c=b[a];c.drmInfos.some(function(a){return!!a.licenseServerUri})&&(0==c.audioCapabilities.length&&(c.audioCapabilities=void 0),0==c.videoCapabilities.length&&(c.videoCapabilities=void 0),e=e["catch"](function(){return this.b?Promise.reject():navigator.requestMediaKeySystemAccess(a,[c])}.bind(this)))}.bind(a));e=e["catch"](function(){return Promise.reject(new z(6,6001))});e=e.then(function(a){if(this.b)return Promise.reject();
var c=a.getConfiguration();this.m=(c.audioCapabilities||[]).concat(c.videoCapabilities||[]).map(function(a){return a.contentType});0==this.m.length&&(this.m=null);this.o=b[a.keySystem].drmInfos;this.l=a.keySystem;return a.createMediaKeys()}.bind(a)).then(function(a){if(this.b)return Promise.reject();this.i=a;this.u=!0}.bind(a))["catch"](function(a){if(this.b)return Promise.resolve();if(a instanceof z)return Promise.reject(a);this.l="";this.o=[];this.m=null;return Promise.reject(new z(6,6002,a.message))}.bind(a));
d.reject();return e}
function ic(a,b){var c=b.keySystem;if(c){if(!b.licenseServerUri){var d=a.f.servers[c];d&&(b.licenseServerUri=d)}if(c=a.f.advanced[c])b.distinctiveIdentifierRequired||(b.distinctiveIdentifierRequired=c.distinctiveIdentifierRequired),b.persistentStateRequired||(b.persistentStateRequired=c.persistentStateRequired),b.videoRobustness||(b.videoRobustness=c.videoRobustness),b.audioRobustness||(b.audioRobustness=c.audioRobustness),b.serverCertificate||(b.serverCertificate=c.serverCertificate)}}
function hc(a){var b=a.f.clearKeys;if(!b||0==Object.keys(b).length)return null;var c=[],b=[],d;for(d in a.f.clearKeys){var e=a.f.clearKeys[d],f=$b(d),e=$b(e),f={kty:"oct",kid:Yb(f),k:Yb(e)};c.push(f);b.push(f.kid)}a=JSON.stringify({keys:c});b=JSON.stringify({kids:b});b=[{initData:new Uint8Array(Ub(b)),initDataType:"keyids"}];return{keySystem:"org.w3.clearkey",licenseServerUri:"data:application/json;base64,"+window.btoa(a),distinctiveIdentifierRequired:!1,persistentStateRequired:!1,audioRobustness:"",
videoRobustness:"",serverCertificate:null,initData:b}}function fc(a,b,c,d){function e(a,b){return a.initDataType==b.initDataType&&E(a.initData,b.initData)}a.o.forEach(function(a){-1==b.indexOf(a.licenseServerUri)&&b.push(a.licenseServerUri);a.serverCertificate&&-1==Qa(c,a.serverCertificate,E)&&c.push(a.serverCertificate);a.initData&&a.initData.forEach(function(a){-1==Qa(d,a,e)&&d.push(a)})})}k.hb=function(){this.a.some(function(a){return!a.loaded})||this.g(new z(6,6011))};
k.Ya=function(a){for(var b=new Uint8Array(a.initData),c=0;c<this.a.length;++c)if(E(b,this.a[c].initData))return;gc(this,a.initDataType,b)};
function gc(a,b,c){var d;try{d=a.i.createSession()}catch(e){a.g(new z(6,6005,e.message));return}N(a.c,d,"message",a.fb.bind(a));N(a.c,d,"keystatuseschange",a.Za.bind(a));b=d.generateRequest(b,c.buffer);a.a.push({initData:c,pa:d,loaded:!1});b["catch"](function(a){if(!this.b){for(var b=0;b<this.a.length;++b)if(this.a[b].pa==d){this.a.splice(b,1);break}this.g(new z(6,6006,a.message))}}.bind(a))}
k.fb=function(a){var b=a.target,c=jc,d=kc([this.w],this.f.retryParameters);d.body=a.message;d.method="POST";"com.microsoft.playready"==this.l&&lc(d);this.A.request(c,d).then(function(a){return this.b?Promise.reject():b.update(a.data)}.bind(this),function(a){if(this.b)return Promise.resolve();this.g(new z(6,6007,a))}.bind(this))["catch"](function(a){if(this.b)return Promise.resolve();this.g(new z(6,6008,a.message))}.bind(this))};
function lc(a){for(var b=Sb(a.body,!0),b=(new DOMParser).parseFromString(b,"application/xml"),c=b.getElementsByTagName("HttpHeader"),d=0;d<c.length;++d)a.headers[c[d].querySelector("name").textContent]=c[d].querySelector("value").textContent;a.body=Zb(b.querySelector("Challenge").textContent).buffer}
k.Za=function(a){var b=a.target;a=b.keyStatuses;void 0===a.forEach&&(a=[]);var c={};a.forEach(function(a,e){if("string"==typeof a){var f=a;a=e;e=f}if("com.microsoft.playready"==this.l&&16==a.byteLength){var f=new DataView(a),g=f.getUint32(0,!0),l=f.getUint16(4,!0),h=f.getUint16(6,!0);f.setUint32(0,g,!1);f.setUint16(4,l,!1);f.setUint16(6,h,!1)}"com.microsoft.playready"==this.l&&"status-pending"==e&&(e="usable");"status-pending"!=e&&"internal-error"!=e&&(this.a.filter(function(a){return a.pa==b})[0].loaded=
!0);f=ac(new Uint8Array(a));c[f]=e}.bind(this));if(b.expiration<Date.now()){for(a=0;a<this.a.length;++a)if(this.a[a].pa==b){this.a.splice(a,1);break}b.close()}this.F(c)};
function mc(){var a={basic:!!window.MediaKeys&&!!window.navigator&&!!window.navigator.requestMediaKeySystemAccess&&!!window.MediaKeySystemAccess&&!!window.MediaKeySystemAccess.prototype.getConfiguration},b=[];a.basic&&"org.w3.clearkey com.widevine.alpha com.microsoft.playready com.apple.fps.2_0 com.apple.fps.1_0 com.apple.fps com.adobe.primetime".split(" ").forEach(function(c){var d=navigator.requestMediaKeySystemAccess(c,[{}]).then(function(){a[c]=!0},function(){a[c]=!1});b.push(d)});return Promise.all(b).then(function(){return a})}
;function nc(a,b){try{var c=new oc(a,b);return Promise.resolve(c)}catch(d){return Promise.reject(d)}}function pc(a){var b=this.mediaKeys;b&&b!=a&&qc(b,null);delete this.mediaKeys;(this.mediaKeys=a)&&qc(a,this);return Promise.resolve()}
function oc(a,b){this.a=this.keySystem=a;var c=!0;"org.w3.clearkey"==a&&(this.a="webkit-org.w3.clearkey",c=!1);var d=!1,e;e=document.getElementsByTagName("video");e=e.length?e[0]:document.createElement("video");for(var f=0;f<b.length;++f){var g=b[f],l={audioCapabilities:[],videoCapabilities:[],persistentState:"optional",distinctiveIdentifier:"optional",initDataTypes:g.initDataTypes,sessionTypes:["temporary"],label:g.label},h=!1;if(g.audioCapabilities)for(var p=0;p<g.audioCapabilities.length;++p){var q=
g.audioCapabilities[p];q.contentType&&(h=!0,e.canPlayType(q.contentType.split(";")[0],this.a)&&(l.audioCapabilities.push(q),d=!0))}if(g.videoCapabilities)for(p=0;p<g.videoCapabilities.length;++p)q=g.videoCapabilities[p],q.contentType&&(h=!0,e.canPlayType(q.contentType,this.a)&&(l.videoCapabilities.push(q),d=!0));h||(d=e.canPlayType("video/mp4",this.a)||e.canPlayType("video/webm",this.a));"required"==g.persistentState&&(c?(l.persistentState="required",l.sessionTypes=["persistent-license"]):d=!1);if(d){this.b=
l;return}}c="Unsupported keySystem";if("org.w3.clearkey"==a||"com.widevine.alpha"==a)c="None of the requested configurations were supported.";c=Error(c);c.name="NotSupportedError";c.code=DOMException.NOT_SUPPORTED_ERR;throw c;}oc.prototype.createMediaKeys=function(){var a=new rc(this.a);return Promise.resolve(a)};oc.prototype.getConfiguration=function(){return this.b};function rc(a){this.g=a;this.b=null;this.a=new M;this.c=[];this.f={}}
function qc(a,b){a.b=b;sb(a.a);b&&(N(a.a,b,"webkitneedkey",a.lb.bind(a)),N(a.a,b,"webkitkeymessage",a.kb.bind(a)),N(a.a,b,"webkitkeyadded",a.ib.bind(a)),N(a.a,b,"webkitkeyerror",a.jb.bind(a)))}k=rc.prototype;k.createSession=function(a){var b=a||"temporary";if("temporary"!=b&&"persistent-license"!=b)throw new TypeError("Session type "+a+" is unsupported on this platform.");a=this.b||document.createElement("video");a.src||(a.src="about:blank");b=new sc(a,this.g,b);this.c.push(b);return b};
k.setServerCertificate=function(){return Promise.reject(Error("setServerCertificate not supported on this platform."))};k.lb=function(a){this.b.dispatchEvent(new F("encrypted",{initDataType:"webm",initData:a.initData}))};k.kb=function(a){var b=tc(this,a.sessionId);b&&(a=new F("message",{messageType:void 0==b.keyStatuses.wa()?"licenserequest":"licenserenewal",message:a.message}),b.b&&(b.b.resolve(),b.b=null),b.dispatchEvent(a))};
k.ib=function(a){if(a=tc(this,a.sessionId))uc(a,"usable"),a.a&&a.a.resolve(),a.a=null};
k.jb=function(a){var b=tc(this,a.sessionId);if(b){var c=Error("EME v0.1b key error");c.errorCode=a.errorCode;c.errorCode.systemCode=a.systemCode;!a.sessionId&&b.b?(c.method="generateRequest",45==a.systemCode&&(c.message="Unsupported session type."),b.b.reject(c),b.b=null):a.sessionId&&b.a?(c.method="update",b.a.reject(c),b.a=null):(c=a.systemCode,a.errorCode.code==MediaKeyError.MEDIA_KEYERR_OUTPUT?uc(b,"output-restricted"):1==c?uc(b,"expired"):uc(b,"internal-error"))}};
function tc(a,b){var c=a.f[b];return c?c:(c=a.c.shift())?(c.sessionId=b,a.f[b]=c):null}function sc(a,b,c){this.w=new L;this.f=a;this.h=!1;this.a=this.b=null;this.c=b;this.g=c;this.sessionId="";this.expiration=NaN;this.closed=new O;this.keyStatuses=new vc}ba(sc);
function wc(a,b,c){if(a.h)return Promise.reject(Error("The session is already initialized."));a.h=!0;var d;try{if("persistent-license"==a.g)if(c)d=new Uint8Array(Ub("LOAD_SESSION|"+c));else{var e=Ub("PERSISTENT|"),f=new Uint8Array(e.byteLength+b.byteLength);f.set(new Uint8Array(e),0);f.set(new Uint8Array(b),e.byteLength);d=f}else d=new Uint8Array(b)}catch(g){return Promise.reject(g)}a.b=new O;try{a.f.webkitGenerateKeyRequest(a.c,d)}catch(g){if("InvalidStateError"!=g.name)return a.b=null,Promise.reject(g);
setTimeout(function(){try{this.f.webkitGenerateKeyRequest(this.c,d)}catch(a){this.b.reject(a),this.b=null}}.bind(a),10)}return a.b}k=sc.prototype;
k.Da=function(a,b){if(this.a)this.a.then(this.Da.bind(this,a,b))["catch"](this.Da.bind(this,a,b));else{this.a=a;var c,d;"webkit-org.w3.clearkey"==this.c?(c=Qb(b),d=JSON.parse(c),"oct"!=d.keys[0].kty&&(this.a.reject(Error("Response is not a valid JSON Web Key Set.")),this.a=null),c=Zb(d.keys[0].k),d=Zb(d.keys[0].kid)):(c=new Uint8Array(b),d=null);try{this.f.webkitAddKey(this.c,c,d,this.sessionId)}catch(e){this.a.reject(e),this.a=null}}};
function uc(a,b){a.keyStatuses.Aa(b);a.dispatchEvent(new F("keystatuseschange"))}k.generateRequest=function(a,b){return wc(this,b,null)};k.load=function(a){return"persistent-license"==this.g?wc(this,null,a):Promise.reject(Error("Not a persistent session."))};k.update=function(a){var b=new O;this.Da(b,a);return b};
k.close=function(){if("persistent-license"!=this.g){if(!this.sessionId)return this.closed.reject(Error("The session is not callable.")),this.closed;this.f.webkitCancelKeyRequest(this.c,this.sessionId)}this.closed.resolve();return this.closed};k.remove=function(){return"persistent-license"!=this.g?Promise.reject(Error("Not a persistent session.")):this.close()};function vc(){this.size=0;this.a=void 0}var xc;k=vc.prototype;k.Aa=function(a){this.size=void 0==a?0:1;this.a=a};k.wa=function(){return this.a};
k.forEach=function(a){this.a&&a(xc,this.a)};k.get=function(a){if(this.has(a))return this.a};k.has=function(a){var b=xc;return this.a&&E(new Uint8Array(a),new Uint8Array(b))?!0:!1};function yc(a){this.systemIds=[];this.cencKeyIds=[];this.a=[];for(a=new Ra(new DataView(a.buffer));Ta(a);){var b=a.a,c=A(a),d=A(a);1==c?c=Wa(a):0==c&&(c=a.b.byteLength-b);if(1886614376!=d)B(a,c-(a.a-b));else{var e=Ua(a);if(1<e)B(a,c-(a.a-b));else{B(a,3);var d=ac(Xa(a)),f=[];if(0<e)for(var e=A(a),g=0;g<e;++g){var l=ac(Xa(a));f.push(l)}e=A(a);B(a,e);this.cencKeyIds.push.apply(this.cencKeyIds,f);this.systemIds.push(d);this.a.push({start:b,end:a.a-1});a.a!=b+c&&B(a,c-(a.a-b))}}}};function zc(a,b){try{var c=new Ac(a,b);return Promise.resolve(c)}catch(d){return Promise.reject(d)}}
function Ac(a,b){this.keySystem=a;for(var c=!1,d=0;d<b.length;++d){var e=b[d],f={audioCapabilities:[],videoCapabilities:[],persistentState:"optional",distinctiveIdentifier:"optional",initDataTypes:e.initDataTypes,sessionTypes:["temporary"],label:e.label},g=!1;if(e.audioCapabilities)for(var l=0;l<e.audioCapabilities.length;++l){var h=e.audioCapabilities[l];if(h.contentType){var g=!0,p=h.contentType.split(";")[0];MSMediaKeys.isTypeSupported(this.keySystem,p)&&(f.audioCapabilities.push(h),c=!0)}}if(e.videoCapabilities)for(l=
0;l<e.videoCapabilities.length;++l)h=e.videoCapabilities[l],h.contentType&&(g=!0,p=h.contentType.split(";")[0],MSMediaKeys.isTypeSupported(this.keySystem,p)&&(f.videoCapabilities.push(h),c=!0));g||(c=MSMediaKeys.isTypeSupported(this.keySystem,"video/mp4"));"required"==e.persistentState&&(f.persistentState="required",f.sessionTypes=["persistent-license"]);if(c){this.a=f;return}}c=Error("Unsupported keySystem");c.name="NotSupportedError";c.code=DOMException.NOT_SUPPORTED_ERR;throw c;}
Ac.prototype.createMediaKeys=function(){var a=new Bc(this.keySystem);return Promise.resolve(a)};Ac.prototype.getConfiguration=function(){return this.a};function Cc(a){var b=this.mediaKeys;b&&b!=a&&Dc(b,null);delete this.mediaKeys;return(this.mediaKeys=a)?Dc(a,this):Promise.resolve()}function Bc(a){this.a=new MSMediaKeys(a);this.b=new M}Bc.prototype.createSession=function(a){if("temporary"!=(a||"temporary"))throw new TypeError("Session type "+a+" is unsupported on this platform.");return new Ec(this.a)};
Bc.prototype.setServerCertificate=function(){return Promise.reject(Error("setServerCertificate not supported on this platform."))};function Dc(a,b){function c(){b.msSetMediaKeys(d.a);b.removeEventListener("loadedmetadata",c)}sb(a.b);if(!b)return Promise.resolve();N(a.b,b,"msneedkey",Fc);var d=a;try{return 1<=b.readyState?b.msSetMediaKeys(a.a):b.addEventListener("loadedmetadata",c),Promise.resolve()}catch(e){return Promise.reject(e)}}
function Ec(a){this.w=new L;this.c=null;this.g=a;this.b=this.a=null;this.f=new M;this.sessionId="";this.expiration=NaN;this.closed=new O;this.keyStatuses=new Gc}ba(Ec);k=Ec.prototype;k.generateRequest=function(a,b){this.a=new O;try{this.c=this.g.createSession("video/mp4",new Uint8Array(b),null),N(this.f,this.c,"mskeymessage",this.bb.bind(this)),N(this.f,this.c,"mskeyadded",this.$a.bind(this)),N(this.f,this.c,"mskeyerror",this.ab.bind(this)),Hc(this,"status-pending")}catch(c){this.a.reject(c)}return this.a};
k.load=function(){return Promise.reject(Error("MediaKeySession.load not yet supported"))};k.update=function(a){this.b=new O;try{this.c.update(new Uint8Array(a))}catch(b){this.b.reject(b)}return this.b};k.close=function(){try{this.c.close(),this.closed.resolve(),sb(this.f)}catch(a){this.closed.reject(a)}return this.closed};k.remove=function(){return Promise.reject(Error("MediaKeySession.remove is only applicable for persistent licenses, which are not supported on this platform"))};
function Fc(a){var b=document.createEvent("CustomEvent");b.initCustomEvent("encrypted",!1,!1,null);b.initDataType="cenc";if(a=a.initData){var c=new yc(a);if(!(1>=c.a.length)){for(var d=[],e=0;e<c.a.length;e++)d.push(a.subarray(c.a[e].start,c.a[e].end+1));e=Ic;a=[];for(c=0;c<d.length;++c){for(var f=!1,g=0;g<a.length&&!(f=e?e(d[c],a[g]):d[c]===a[g]);++g);f||a.push(d[c])}for(e=d=0;e<a.length;e++)d+=a[e].length;d=new Uint8Array(d);for(e=c=0;e<a.length;e++)d.set(a[e],c),c+=a[e].length;a=d}}b.initData=
a;this.dispatchEvent(b)}function Ic(a,b){return E(a,b)}k.bb=function(a){this.a&&(this.a.resolve(),this.a=null);this.dispatchEvent(new F("message",{messageType:void 0==this.keyStatuses.wa()?"licenserequest":"licenserenewal",message:a.message.buffer}))};k.$a=function(){this.a?(Hc(this,"usable"),this.a.resolve(),this.a=null):this.b&&(Hc(this,"usable"),this.b.resolve(),this.b=null)};
k.ab=function(){var a=Error("EME v20140218 key error");a.errorCode=this.c.error;if(null!=this.a)this.a.reject(a),this.a=null;else if(null!=this.b)this.b.reject(a),this.b=null;else switch(this.c.error.code){case MSMediaKeyError.MS_MEDIA_KEYERR_OUTPUT:case MSMediaKeyError.MS_MEDIA_KEYERR_HARDWARECHANGE:Hc(this,"output-not-allowed");default:Hc(this,"internal-error")}};function Hc(a,b){a.keyStatuses.Aa(b);a.dispatchEvent(new F("keystatuseschange"))}function Gc(){this.size=0;this.a=void 0}var Jc;k=Gc.prototype;
k.Aa=function(a){this.size=void 0==a?0:1;this.a=a};k.wa=function(){return this.a};k.forEach=function(a){this.a&&a(Jc,this.a)};k.get=function(a){if(this.has(a))return this.a};k.has=function(a){var b=Jc;return this.a&&E(new Uint8Array(a),new Uint8Array(b))?!0:!1};wa(function(){!window.HTMLVideoElement||navigator.requestMediaKeySystemAccess&&MediaKeySystemAccess.prototype.getConfiguration||(HTMLMediaElement.prototype.webkitGenerateKeyRequest?(xc=(new Uint8Array([0])).buffer,navigator.requestMediaKeySystemAccess=nc,delete HTMLMediaElement.prototype.mediaKeys,HTMLMediaElement.prototype.mediaKeys=null,HTMLMediaElement.prototype.setMediaKeys=pc,window.MediaKeys=rc,window.MediaKeySystemAccess=oc):window.MSMediaKeys?(Jc=(new Uint8Array([0])).buffer,delete HTMLMediaElement.prototype.mediaKeys,
HTMLMediaElement.prototype.mediaKeys=null,HTMLMediaElement.prototype.setMediaKeys=Cc,window.MediaKeys=Bc,window.MediaKeySystemAccess=Ac,navigator.requestMediaKeySystemAccess=zc):(navigator.requestMediaKeySystemAccess=ya,delete HTMLMediaElement.prototype.mediaKeys,HTMLMediaElement.prototype.mediaKeys=null,HTMLMediaElement.prototype.setMediaKeys=za,window.MediaKeys=Aa,window.MediaKeySystemAccess=Ba))});function Kc(a,b){var c=R(a,b);return 1!=c.length?null:c[0]}function R(a,b){return Array.prototype.filter.call(a.childNodes,function(a){return a.tagName==b})}function Lc(a){return(a=a.firstChild)&&a.nodeType==Node.TEXT_NODE?a.nodeValue.trim():null}function S(a,b,c,d){var e=null;a=a.getAttribute(b);null!=a&&(e=c(a));return null==e?void 0!==d?d:null:e}function Mc(a){if(!a)return null;a=Date.parse(a);return isNaN(a)?null:Math.floor(a/1E3)}
function T(a){if(!a)return null;a=/^P(?:([0-9]*)Y)?(?:([0-9]*)M)?(?:([0-9]*)D)?(?:T(?:([0-9]*)H)?(?:([0-9]*)M)?(?:([0-9.]*)S)?)?$/.exec(a);if(!a)return null;a=31536E3*Number(a[1]||null)+2592E3*Number(a[2]||null)+86400*Number(a[3]||null)+3600*Number(a[4]||null)+60*Number(a[5]||null)+Number(a[6]||null);return isFinite(a)?a:null}function Nc(a){var b=/([0-9]+)-([0-9]+)/.exec(a);if(!b)return null;a=Number(b[1]);if(!isFinite(a))return null;b=Number(b[2]);return isFinite(b)?{start:a,end:b}:null}
function Oc(a){a=Number(a);return 0===a%1?a:null}function Pc(a){a=Number(a);return 0===a%1&&0<a?a:null}function Qc(a){a=Number(a);return 0===a%1&&0<=a?a:null};var Rc={"urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b":"org.w3.clearkey","urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed":"com.widevine.alpha","urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95":"com.microsoft.playready","urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb":"com.adobe.primetime"};
function Sc(a,b){var c=Uc(a),d=null,e=c.filter(function(a){return"urn:mpeg:dash:mp4protection:2011"==a.Ma?(d=a.init||d,!1):!0}),f=c.map(function(a){return a.keyId}).filter(db),g=null;if(0<f.length&&(g=f[0],f.some(eb(g))))throw new z(4,4010);f=[];0<e.length?(f=Vc(d,b,e),0==f.length&&(f=[Wc("",d)])):0<c.length&&(f=J(Rc).map(function(a){return Wc(a,d)}));return{Ga:g,Nb:d,drmInfos:f,Ha:!0}}
function Xc(a,b,c){var d=Sc(a,b);if(c.Ha){a=1==c.drmInfos.length&&!c.drmInfos[0].keySystem;b=0==d.drmInfos.length;if(0==c.drmInfos.length||a&&!b)c.drmInfos=d.drmInfos;c.Ha=!1}else if(0<d.drmInfos.length&&(c.drmInfos=c.drmInfos.filter(function(a){return d.drmInfos.some(function(b){return b.keySystem==a.keySystem})}),0==c.drmInfos.length))throw new z(4,4008);return d.Ga||c.Ga}
function Wc(a,b){return{keySystem:a,licenseServerUri:"",distinctiveIdentifierRequired:!1,persistentStateRequired:!1,audioRobustness:"",videoRobustness:"",serverCertificate:null,initData:b||[]}}function Vc(a,b,c){return c.map(function(c){var e=Rc[c.Ma];return e?[Wc(e,c.init||a)]:b(c.node)||[]}).reduce(cb,[])}
function Uc(a){return a.map(function(a){var c=a.getAttribute("schemeIdUri"),d=a.getAttribute("cenc:default_KID"),e=R(a,"cenc:pssh").map(Lc);if(!c)return null;c=c.toLowerCase();if(d&&(d=d.replace(/-/g,"").toLowerCase(),0<=d.indexOf(" ")))throw new z(4,4009);var f=[];try{f=e.map(function(a){return{initDataType:"cenc",initData:Zb(a)}})}catch(g){throw new z(4,4007);}return{node:a,Ma:c,keyId:d,init:0<f.length?f:null}}).filter(db)};var Yc=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#(.*))?$/;function U(a){var b;a instanceof U?(Zc(this,a.K),this.Z=a.Z,this.M=a.M,$c(this,a.ca),this.H=a.H,ad(this,bd(a.a)),this.V=a.V):a&&(b=String(a).match(Yc))?(Zc(this,b[1]||"",!0),this.Z=cd(b[2]||""),this.M=cd(b[3]||"",!0),$c(this,b[4]),this.H=cd(b[5]||"",!0),ad(this,b[6]||"",!0),this.V=cd(b[7]||"")):this.a=new V(null)}k=U.prototype;k.K="";k.Z="";k.M="";k.ca=null;k.H="";k.V="";
k.toString=function(){var a=[],b=this.K;b&&a.push(dd(b,ed,!0),":");if(b=this.M){a.push("//");var c=this.Z;c&&a.push(dd(c,ed,!0),"@");a.push(encodeURIComponent(b).replace(/%25([0-9a-fA-F]{2})/g,"%$1"));b=this.ca;null!=b&&a.push(":",String(b))}if(b=this.H)this.M&&"/"!=b.charAt(0)&&a.push("/"),a.push(dd(b,"/"==b.charAt(0)?fd:gd,!0));(b=this.a.toString())&&a.push("?",b);(b=this.V)&&a.push("#",dd(b,hd));return a.join("")};
k.resolve=function(a){var b=new U(this);"data"===b.K&&(b=new U);var c=!!a.K;c?Zc(b,a.K):c=!!a.Z;c?b.Z=a.Z:c=!!a.M;c?b.M=a.M:c=null!=a.ca;var d=a.H;if(c)$c(b,a.ca);else if(c=!!a.H){if("/"!=d.charAt(0))if(this.M&&!this.H)d="/"+d;else{var e=b.H.lastIndexOf("/");-1!=e&&(d=b.H.substr(0,e+1)+d)}if(".."==d||"."==d)d="";else if(-1!=d.indexOf("./")||-1!=d.indexOf("/.")){for(var e=0==d.lastIndexOf("/",0),d=d.split("/"),f=[],g=0;g<d.length;){var l=d[g++];"."==l?e&&g==d.length&&f.push(""):".."==l?((1<f.length||
1==f.length&&""!=f[0])&&f.pop(),e&&g==d.length&&f.push("")):(f.push(l),e=!0)}d=f.join("/")}}c?b.H=d:c=""!==a.a.toString();c?ad(b,bd(a.a)):c=!!a.V;c&&(b.V=a.V);return b};function Zc(a,b,c){a.K=c?cd(b,!0):b;a.K&&(a.K=a.K.replace(/:$/,""))}function $c(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.ca=b}else a.ca=null}function id(a){return a.H}function ad(a,b,c){b instanceof V?a.a=b:(c||(b=dd(b,jd)),a.a=new V(b))}
function cd(a,b){return a?b?decodeURI(a):decodeURIComponent(a):""}function dd(a,b,c){return"string"==typeof a?(a=encodeURI(a).replace(b,kd),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function kd(a){a=a.charCodeAt(0);return"%"+(a>>4&15).toString(16)+(a&15).toString(16)}var ed=/[#\/\?@]/g,gd=/[\#\?:]/g,fd=/[\#\?]/g,jd=/[\#\?@]/g,hd=/#/g;function V(a){this.b=a||null}V.prototype.a=null;V.prototype.c=null;
V.prototype.toString=function(){if(this.b)return this.b;if(!this.a)return"";var a=[],b;for(b in this.a)for(var c=encodeURIComponent(b),d=this.a[b],e=0;e<d.length;e++){var f=c;""!==d[e]&&(f+="="+encodeURIComponent(d[e]));a.push(f)}return this.b=a.join("&")};function bd(a){var b=new V;b.b=a.b;if(a.a){var c={},d;for(d in a.a)c[d]=a.a[d].concat();b.a=c;b.c=a.c}return b};var ld=1/15;function md(a,b,c,d,e){null!==e&&(e=Math.round(e));var f={RepresentationID:b,Number:c,Bandwidth:d,Time:e};return a.replace(/\$(RepresentationID|Number|Bandwidth|Time)?(?:%0([0-9]+)d)?\$/g,function(a,b,c){if("$$"==a)return"$";var d=f[b];if(null==d)return a;"RepresentationID"==b&&c&&(c=void 0);a=d.toString();c=window.parseInt(c,10)||1;return Array(Math.max(0,c-a.length)+1).join("0")+a})}
function nd(a,b){if(0!=b.length){var c=b[0];c.startTime<=ld&&(b[0]=new w(c.position,0,c.a,c.uris,c.c,c.b));null!=a&&a!=Number.POSITIVE_INFINITY&&(c=b[b.length-1],c.startTime>a||(b[b.length-1]=new w(c.position,c.startTime,a,c.uris,c.c,c.b)))}}function W(a,b){if(0==b.length)return a;var c=b.map(function(a){return new U(a)});return a.map(function(a){return new U(a)}).map(function(a){return c.map(a.resolve.bind(a))}).reduce(cb,[]).map(function(a){return a.toString()})}
function od(a,b){var c=X(a,b,"timescale"),d=1;c&&(d=Pc(c)||1);c=X(a,b,"duration");(c=Pc(c||""))&&(c/=d);var e=X(a,b,"startNumber"),f=X(a,b,"presentationTimeOffset"),g=Qc(e||"");if(null==e||null==g)g=1;var l=pd(a,b,"SegmentTimeline"),e=null;if(l){for(var e=d,h=Number(f),p=a.C.duration||Number.POSITIVE_INFINITY,l=R(l,"S"),q=[],t=0,I=0;I<l.length;++I){var u=l[I],y=S(u,"t",Qc),Q=S(u,"d",Qc),u=S(u,"r",Oc);null!=y&&(y-=h);if(!Q)break;y=null!=y?y:t;u=u||0;if(0>u)if(I+1<l.length){u=S(l[I+1],"t",Qc);if(null==
u)break;else if(y>=u)break;u=Math.ceil((u-y)/Q)-1}else{if(p==Number.POSITIVE_INFINITY)break;else if(y/e>=p)break;u=Math.ceil((p*e-y)/Q)-1}0<q.length&&y!=t&&(q[q.length-1].end=y/e);for(var ha=0;ha<=u;++ha)t=y+Q,q.push({start:y/e,end:t/e}),y=t}e=q}return{qa:d,L:c,ja:g,presentationTimeOffset:Number(f)/d||0,I:e}}function X(a,b,c){return[b(a.j),b(a.v),b(a.B)].filter(db).map(function(a){return a.getAttribute(c)}).reduce(function(a,b){return a||b})}
function pd(a,b,c){return[b(a.j),b(a.v),b(a.B)].filter(db).map(function(a){return Kc(a,c)}).reduce(function(a,b){return a||b})};function qd(a,b){var c=pd(a,b,"Initialization");if(!c)return null;var d=a.j.G,e=c.getAttribute("sourceURL");e&&(d=W(a.j.G,[e]));var e=0,f=null;if(c=S(c,"range",Nc))e=c.start,f=c.end;return new ta(d,e,f)}
function rd(a,b){var c=X(a,sd,"presentationTimeOffset"),d=qd(a,sd),e;e=Number(c);var f=a.j.mimeType.split("/")[1];if("text"!=a.j.contentType&&"mp4"!=f&&"webm"!=f)throw new z(4,4006);if("webm"==f&&!d)throw new z(4,4005);var g=pd(a,sd,"RepresentationIndex"),l=X(a,sd,"indexRange"),h=a.j.G,l=Nc(l||"");if(g){var p=g.getAttribute("sourceURL");p&&(h=W(a.j.G,[p]));l=S(g,"range",Nc,l)}if(!l)throw new z(4,4002);e=td(a,b,d,h,l.start,l.end,f,e);return{createSegmentIndex:e.createSegmentIndex,findSegmentPosition:e.findSegmentPosition,
getSegmentReference:e.getSegmentReference,initSegmentReference:d,presentationTimeOffset:Number(c)||0}}
function td(a,b,c,d,e,f,g,l){var h=a.presentationTimeline,p=a.C.start,q=a.C.duration,t=b,I=null;return{createSegmentIndex:function(){var a=[t(d,e,f),"webm"==g?t(c.uris,c.c,c.b):null];t=null;return Promise.all(a).then(function(a){var b,c,f,t=a[0];a=a[1]||null;var r=null;if("mp4"==g){a=[];var r=new Ra(new DataView(t)),u=A(r);if(1936286840!=A(r))throw new z(3,3004);1==u&&(u=Wa(r));t=Ua(r);B(r,3);B(r,4);b=A(r);if(0==b)throw new z(3,3005);var K;0==t?(c=A(r),K=A(r)):(c=Wa(r),K=Wa(r));B(r,2);try{var v=r.b.getUint16(r.a,
r.c)}catch(xe){Va()}r.a+=2;t=v;v=c-l;u=e+u+K;for(K=0;K<t;K++){f=A(r);c=(f&2147483648)>>>31;f&=2147483647;var Da=A(r);B(r,4);if(1==c)throw new z(3,3006);a.push(new w(a.length,v/b,(v+Da)/b,d,u,u+f-1));v+=Da;u+=f}r=a}else{a=new C(new DataView(a));if(440786851!=D(a).id)throw new z(3,3008);r=D(a);if(408125543!=r.id)throw new z(3,3009);a=r.a.byteOffset;r=new C(r.a);for(b=null;Ta(r.a);)if(v=D(r),357149030==v.id){b=v;break}if(!b)throw new z(3,3010);r=new C(b.a);b=1E6;for(v=null;Ta(r.a);)if(u=D(r),2807729==
u.id)b=ab(u);else if(17545==u.id)if(v=u,4==v.a.byteLength)v=v.a.getFloat32(0);else if(8==v.a.byteLength)v=v.a.getFloat64(0);else throw new z(3,3003);if(null==v)throw new z(3,3011);r=b/1E9;b=v*r;v=D(new C(new DataView(t)));if(475249515!=v.id)throw new z(3,3007);t=[];v=new C(v.a);for(K=u=-1;Ta(v.a);)if(c=D(v),187==c.id){f=new C(c.a);c=D(f);if(179!=c.id)throw new z(3,3013);c=ab(c);f=D(f);if(183!=f.id)throw new z(3,3012);Da=new C(f.a);for(f=0;Ta(Da.a);){var Tc=D(Da);if(241==Tc.id){f=ab(Tc);break}}c=r*
(c-l);f=a+f;0<=u&&t.push(new w(t.length,u,c,d,K,f-1));u=c;K=f}0<=u&&t.push(new w(t.length,u,b,d,K,null));r=t}nd(q,r);qa(h,p,r);I=new H(r)})},findSegmentPosition:function(a){return I.b(a)},getSegmentReference:function(a){return I.get(a)}}}function sd(a){return a.ha};function ud(a,b){var c,d,e,f,g,l=qd(a,vd),h=wd(a);g=od(a,vd);e=g.ja;0===e&&(e=1);f=0;g.L?f=g.L*(e-1)-g.presentationTimeOffset:g.I&&0<g.I.length&&(f=g.I[0].start);c=g.L;d=f;f=g.presentationTimeOffset;g=g.I;if(!c&&!g&&1<h.length)throw new z(4,4002);if(!c&&!a.C.duration&&!g&&1==h.length)throw new z(4,4002);if(g&&0==g.length)throw new z(4,4002);var p=null,q=null;a.B.id&&a.j.id&&(q=a.B.id+","+a.j.id,p=b[q]);var t=a.C.duration,I=a.j.G,u=h.length;g&&g.length!=h.length&&(u=Math.min(g.length,h.length));var y=
[],Q=d;for(d=0;d<u;d++){var ha=h[d],ee=W(I,[ha.Xa]),Jb;Jb=null!=c?Q+c:g?g[d].end:Q+t;y.push(new w(d+e,Q,Jb,ee,ha.start,ha.end));Q=Jb}nd(a.C.duration,y);p?(fb(p,y),gb(p,sa(a.presentationTimeline))):(qa(a.presentationTimeline,a.C.start,y),p=new H(y),q&&(b[q]=p));return{createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:p.b.bind(p),getSegmentReference:p.get.bind(p),initSegmentReference:l,presentationTimeOffset:f}}function vd(a){return a.S}
function wd(a){return[a.j.S,a.v.S,a.B.S].filter(db).map(function(a){return R(a,"SegmentURL")}).reduce(function(a,c){return 0<a.length?a:c}).map(function(a){var c=a.getAttribute("media");a=S(a,"mediaRange",Nc,{start:0,end:null});return{Xa:c,start:a.start,end:a.end}})};function xd(a,b,c,d){var e;(e=X(a,yd,"initialization"))?(e=md(e,a.j.id,null,a.bandwidth||null,null),e=W(a.j.G,[e]),e=new ta(e,0,null)):e=null;var f;f=od(a,yd);var g=X(a,yd,"media"),l=X(a,yd,"index");f={L:f.L,qa:f.qa,ja:f.ja,presentationTimeOffset:f.presentationTimeOffset,I:f.I,xa:g,fa:l};g=0+(f.fa?1:0);g+=f.I?1:0;g+=f.L?1:0;if(0==g)throw new z(4,4002);1!=g&&(f.fa&&(f.I=null),f.L=null);if(!f.fa&&!f.xa)throw new z(4,4002);g=null;if(f.fa){c=e;d=a.j.mimeType.split("/")[1];if("mp4"!=d&&"webm"!=d)throw new z(4,
4006);if("webm"==d&&!c)throw new z(4,4005);g=md(f.fa,a.j.id,null,a.bandwidth||null,null);g=W(a.j.G,[g]);g=td(a,b,c,g,0,null,d,f.presentationTimeOffset)}else if(f.L)d||(c=a.presentationTimeline,c.b=Math.max(c.b,f.L)),g=zd(a,f);else{d=b=null;a.B.id&&a.j.id&&(d=a.B.id+","+a.j.id,b=c[d]);g=[];for(l=0;l<f.I.length;l++){var h=f.I[l].start,p=f.I[l].end,q=l+f.ja,t=md(f.xa,a.j.id,q,a.bandwidth||null,(h+f.presentationTimeOffset)*f.qa),t=W(a.j.G,[t]);g.push(new w(q,h,p,t,0,null))}nd(a.C.duration,g);b?(fb(b,
g),gb(b,sa(a.presentationTimeline))):(qa(a.presentationTimeline,a.C.start,g),b=new H(g),d&&(c[d]=b));g={createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:b.b.bind(b),getSegmentReference:b.get.bind(b)}}return{createSegmentIndex:g.createSegmentIndex,findSegmentPosition:g.findSegmentPosition,getSegmentReference:g.getSegmentReference,initSegmentReference:e,presentationTimeOffset:f.presentationTimeOffset}}function yd(a){return a.ia}
function zd(a,b){var c=a.C.duration,d=b.L,e=b.ja,f=b.qa,g=b.xa,l=a.bandwidth||null,h=a.j.id,p=a.j.G;return{createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(a){return 0>a||c&&a>=c?null:Math.floor(a/d)},getSegmentReference:function(a){var b=a*d,c=md(g,h,a+e,l,b*f),c=W(p,[c]);return new w(a,b,b+d,c,0,null)}}};function Y(a){this.f=!1;this.a=[];this.b=[];this.c=[];this.h=a||null}var jc=2;m("shaka.net.NetworkingEngine.RequestType",{MANIFEST:0,SEGMENT:1,LICENSE:jc});var Ad={};m("shaka.net.NetworkingEngine.registerScheme",function(a,b){Ad[a]=b});m("shaka.net.NetworkingEngine.unregisterScheme",function(a){delete Ad[a]});Y.prototype.ob=function(a){this.b.push(a)};Y.prototype.registerRequestFilter=Y.prototype.ob;Y.prototype.Jb=function(a){var b=this.b;a=b.indexOf(a);0<=a&&b.splice(a,1)};
Y.prototype.unregisterRequestFilter=Y.prototype.Jb;Y.prototype.Ra=function(){this.b=[]};Y.prototype.clearAllRequestFilters=Y.prototype.Ra;Y.prototype.pb=function(a){this.c.push(a)};Y.prototype.registerResponseFilter=Y.prototype.pb;Y.prototype.Kb=function(a){var b=this.c;a=b.indexOf(a);0<=a&&b.splice(a,1)};Y.prototype.unregisterResponseFilter=Y.prototype.Kb;Y.prototype.Sa=function(){this.c=[]};Y.prototype.clearAllResponseFilters=Y.prototype.Sa;
function Bd(){return{maxAttempts:1,baseDelay:1E3,backoffFactor:2,fuzzFactor:.5,timeout:0}}function kc(a,b){return{uris:a,method:"GET",body:null,headers:{},allowCrossSiteCredentials:!1,retryParameters:b}}Y.prototype.s=function(){this.f=!0;this.b=[];this.c=[];for(var a=[],b=0;b<this.a.length;++b)a.push(this.a[b]["catch"](G));return Promise.all(a)};
Y.prototype.request=function(a,b){if(this.f)return Promise.reject();for(var c=Date.now(),d=this.b,e=0;e<d.length;e++)try{d[e](a,b)}catch(h){return Promise.reject(h)}for(var e=b.retryParameters||{},d=e.maxAttempts||1,f=e.backoffFactor||2,g=null==e.baseDelay?1E3:e.baseDelay,l=this.g(a,b,0),e=1;e<d;e++)l=l["catch"](this.i.bind(this,a,b,g,e%b.uris.length)),g*=f;this.a.push(l);return l.then(function(b){this.a.splice(this.a.indexOf(l),1);var d=Date.now();this.h&&1==a&&this.h(c,d,b.data.byteLength);return b}.bind(this))["catch"](function(a){this.a.splice(this.a.indexOf(l),
1);return Promise.reject(a)}.bind(this))};Y.prototype.request=Y.prototype.request;Y.prototype.g=function(a,b,c){if(this.f)return Promise.reject();var d=new U(b.uris[c]),e=d.K;e||(e=location.protocol,e=e.slice(0,-1),Zc(d,e),b.uris[c]=d.toString());return(e=Ad[e])?e(b.uris[c],b).then(function(b){for(var c=this.c,d=0;d<c.length;d++)c[d](a,b);return b}.bind(this)):Promise.reject(new z(1,1E3,d))};
Y.prototype.i=function(a,b,c,d){var e=new O,f=b.retryParameters||{};window.setTimeout(e.resolve,c*(1+(2*Math.random()-1)*(null==f.fuzzFactor?.5:f.fuzzFactor)));return e.then(this.g.bind(this,a,b,d))};function Cd(){this.m=this.l=this.c=this.a=null;this.g=[];this.b=null;this.h=[];this.u=1;this.i={};this.o=0;this.f=null}k=Cd.prototype;k.configure=function(a){this.c=a};k.start=function(a,b,c,d){this.g=[a];this.a=b;this.l=c;this.m=d;return Dd(this).then(function(){this.a&&Ed(this,0);return this.b}.bind(this))};k.stop=function(){this.c=this.m=this.l=this.a=null;this.g=[];this.b=null;this.h=[];this.i={};null!=this.f&&(window.clearTimeout(this.f),this.f=null);return Promise.resolve()};
function Dd(a){return a.a.request(0,kc(a.g,a.c.retryParameters)).then(function(a){if(this.a)return Fd(this,a.data,a.uri)}.bind(a))}
function Fd(a,b,c){var d=Tb(b),e=new DOMParser,f=null;b=null;try{f=e.parseFromString(d,"text/xml")}catch(q){}f&&"MPD"==f.documentElement.tagName&&(b=f.documentElement);if(!b)throw new z(4,4001);c=[c];d=R(b,"Location").map(Lc).filter(db);0<d.length&&(c=a.g=d);var d=R(b,"BaseURL").map(Lc),e=W(c,d),g=S(b,"minBufferTime",T);a.o=S(b,"minimumUpdatePeriod",T,-1);f=S(b,"availabilityStartTime",Mc);c=S(b,"timeShiftBufferDepth",T);var l=S(b,"suggestedPresentationDelay",T),d=S(b,"maxSegmentDuration",T),h;a.b?
h=a.b.presentationTimeline:(null!=f&&(f+=null!=l?l:5),h=new pa(f));var e=Gd(a,{presentationTimeline:h,B:null,C:null,v:null,j:null,bandwidth:void 0},e,b),p=e.periods;h.a=e.duration||Number.POSITIVE_INFINITY;h.c=null!=c?c:Number.POSITIVE_INFINITY;h.b=Math.max(h.b,d||1);if(a.b)return Promise.resolve();b=R(b,"UTCTiming");return Hd(a,b,h.aa()).then(function(a){this.a&&(h.g=a,this.b={presentationTimeline:h,periods:p,minBufferTime:g||0})}.bind(a))}
function Gd(a,b,c,d){var e=S(d,"mediaPresentationDuration",T),f=[],g=0;d=R(d,"Period");for(var l=0;l<d.length;l++){var h=d[l],g=S(h,"start",T,g),p=S(h,"duration",T);if(null==p)if(l+1!=d.length){var q=S(d[l+1],"start",T);null!=q&&(p=q-g)}else null!=e&&(p=e-g);var q=a,t=b,h={start:g,duration:p,node:h};t.B=Id(h.node,null,c);t.C=h;t.B.id||(t.B.id="__shaka_period_"+h.start);q=R(h.node,"AdaptationSet").map(q.mb.bind(q,t));if(0==q.length)throw new z(4,4004);q=Jd(q);h={startTime:h.start,streamSets:q};f.push(h);
q=b.B.id;a.h.every(eb(q))&&(a.l(h),a.h.push(q),a.b&&a.b.periods.push(h));if(null==p){g=null;break}g+=p}return null!=e?{periods:f,duration:e}:{periods:f,duration:g}}
k.mb=function(a,b){a.v=Id(b,a.B,null);a.v.contentType||(a.v.contentType=a.v.mimeType.split("/")[0]);var c=!1,d=Kc(b,"Role"),e=void 0;"text"==a.v.contentType&&(e="subtitle");if(d){var f=d.getAttribute("schemeIdUri");if(null==f||"urn:mpeg:dash:role:2011"==f)switch(d=d.getAttribute("value"),d){case "main":c=!0;break;case "caption":case "subtitle":e=d}}var g=[];R(b,"SupplementalProperty").forEach(function(a){"http://dashif.org/descriptor/AdaptationSetSwitching"==a.getAttribute("schemeIdURI")&&(a=a.getAttribute("value"))&&
g.push.apply(g,a.split(","))});d=R(b,"ContentProtection");d=Sc(d,this.c.dash.customScheme);e=R(b,"Representation").map(this.nb.bind(this,a,d,e));if(0==e.length)throw new z(4,4003);a.v.contentType||(a.v.contentType=e[0].mimeType.split("/")[0]);return{id:a.v.id||"__fake__"+this.u++,contentType:a.v.contentType,language:nb(b.getAttribute("lang")||"und"),Wa:c,streams:e,drmInfos:d.drmInfos,Hb:g}};
k.nb=function(a,b,c,d){a.j=Id(d,a.v,null);a.bandwidth=S(d,"bandwidth",Pc)||void 0;"text"!=a.j.contentType&&Kd(a.j);var e;e=this.qb.bind(this);if(a.j.ha)e=rd(a,e);else if(a.j.S)e=ud(a,this.i);else if(a.j.ia)e=xd(a,e,this.i,!!this.b);else{var f=a.j.G,g=a.C.duration||0;e={createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(a){return 0<=a&&a<g?1:null},getSegmentReference:function(a){return 1!=a?null:new w(1,0,g,f,0,null)},initSegmentReference:null,presentationTimeOffset:0}}d=
R(d,"ContentProtection");d=Xc(d,this.c.dash.customScheme,b);return{id:this.u++,createSegmentIndex:e.createSegmentIndex,findSegmentPosition:e.findSegmentPosition,getSegmentReference:e.getSegmentReference,initSegmentReference:e.initSegmentReference,presentationTimeOffset:e.presentationTimeOffset,mimeType:a.j.mimeType,codecs:a.j.ua,bandwidth:a.bandwidth,width:a.j.width,height:a.j.height,kind:c,encrypted:0<b.drmInfos.length,keyId:d,allowedByApplication:!0,allowedByKeySystem:!0}};
k.Eb=function(){this.f=null;var a=Date.now();Dd(this).then(function(){this.a&&Ed(this,(Date.now()-a)/1E3)}.bind(this))["catch"](function(a){this.m(a);this.a&&Ed(this,0)}.bind(this))};function Ed(a,b){0>a.o||(a.f=window.setTimeout(a.Eb.bind(a),1E3*Math.max(Math.max(3,a.o)-b,0)))}
function Id(a,b,c){b=b||{contentType:"",mimeType:"",ua:""};c=c||b.G;var d=R(a,"BaseURL").map(Lc);return{G:W(c,d),ha:Kc(a,"SegmentBase")||b.ha,S:Kc(a,"SegmentList")||b.S,ia:Kc(a,"SegmentTemplate")||b.ia,width:S(a,"width",Qc)||b.width,height:S(a,"height",Qc)||b.height,contentType:a.getAttribute("contentType")||b.contentType,mimeType:a.getAttribute("mimeType")||b.mimeType,ua:a.getAttribute("codecs")||b.ua,id:a.getAttribute("id")}}
function Jd(a){var b={};a.forEach(function(a){b[a.id]=[a]});a.forEach(function(a){var c=b[a.id];a.Hb.forEach(function(a){(a=b[a])&&a!=c&&(c.push.apply(c,a),a.forEach(function(a){b[a.id]=c}))})});var c=[],d=[];J(b).forEach(function(a){if(!(0<=d.indexOf(a))){d.push(a);var b=new L;a.forEach(function(a){b.push(a.contentType||"",a)});b.keys().forEach(function(a){var d=new L;b.get(a).forEach(function(a){d.push(a.language,a)});d.keys().forEach(function(b){var e=d.get(b);b={language:b,type:a,primary:e.some(function(a){return a.Wa}),
drmInfos:e.map(function(a){return a.drmInfos}).reduce(cb,[]),streams:e.map(function(a){return a.streams}).reduce(cb,[])};c.push(b)})})}});return c}function Kd(a){var b;b=0+(a.ha?1:0);b+=a.S?1:0;b+=a.ia?1:0;if(0==b)throw new z(4,4002);1!=b&&(a.ha&&(a.S=null),a.ia=null)}
function Ld(a,b,c){b=kc([b],a.c.retryParameters);b.method=c;return a.a.request(0,b).then(function(a){if("HEAD"==c){if(!a.headers||!a.headers.date)return 0;a=a.headers.date}else a=Tb(a.data);a=Date.parse(a);return isNaN(a)?0:a-Date.now()})}
function Hd(a,b,c){b=b.map(function(a){return{scheme:a.getAttribute("schemeIdUri"),value:a.getAttribute("value")}});var d=a.c.dash.clockSyncUri;c&&!b.length&&d&&b.push({scheme:"urn:mpeg:dash:utc:http-head:2014",value:d});return bb(b,function(a){var b=a.value;switch(a.scheme){case "urn:mpeg:dash:utc:http-head:2014":case "urn:mpeg:dash:utc:http-head:2012":return Ld(this,b,"HEAD");case "urn:mpeg:dash:utc:http-xsdate:2014":case "urn:mpeg:dash:utc:http-iso:2014":case "urn:mpeg:dash:utc:http-xsdate:2012":case "urn:mpeg:dash:utc:http-iso:2012":return Ld(this,
b,"GET");case "urn:mpeg:dash:utc:direct:2014":case "urn:mpeg:dash:utc:direct:2012":return a=Date.parse(b),isNaN(a)?0:a-Date.now();case "urn:mpeg:dash:utc:http-ntp:2014":case "urn:mpeg:dash:utc:ntp:2014":case "urn:mpeg:dash:utc:sntp:2014":return Promise.reject();default:return Promise.reject()}}.bind(a))["catch"](function(){return 0})}k.qb=function(a,b,c){a=kc(a,this.c.retryParameters);null!=b&&(a.headers.Range="bytes="+b+"-"+(null!=c?c:""));return this.a.request(1,a).then(function(a){return a.data})};
na.mpd=Cd;ma["application/dash+xml"]=Cd;function Md(a,b,c,d,e,f,g,l,h){this.h=a;this.c=b;this.R=c;this.a=d;this.O=e;this.u=f;this.m=g;this.w=l||null;this.A=h||null;this.l=null;this.F=Promise.resolve();this.g=[];this.i={};this.b={};this.f=this.o=!1}Md.prototype.s=function(){for(var a in this.b)Nd(this.b[a]);this.l=this.b=this.i=this.g=this.A=this.w=this.m=this.u=this.O=this.F=this.a=this.R=this.c=this.h=null;this.f=!0;return Promise.resolve()};Md.prototype.configure=function(a){this.l=a;this.h.i=Math.max(this.a.minBufferTime||0,this.l.rebufferingGoal)};
Md.prototype.init=function(){var a=this.O(this.a.periods[Od(this,vb(this.h))]);return a&&0!=Object.keys(a).length?Pd(this,a).then(function(){this.w&&this.w()}.bind(this)):Promise.reject(new z(5,5005))};function Qd(a){return a.a.periods[Od(a,vb(a.h))]}function Rd(a){return pb(a.b,function(a){return a.stream})}function Sd(a,b){var c={};c.text=b;return Pd(a,c)}
function Td(a,b,c,d){if(b=a.b[b]){var e=a.g[Ud(a,c)];e&&e.da&&(e=a.i[c.id])&&e.da&&b.stream!=c&&(b.stream=c,b.ya=!0,!d||b.P||b.U||(b.ba?b.P=!0:(Nd(b),Vd(a,b))))}}
function Pd(a,b){var c=Od(a,vb(a.h)),d=pb(b,function(a){return a.mimeType+(a.codecs?'; codecs="'+a.codecs+'"':"")});a.c.init(d);Wd(a);d=J(b);return Xd(a,d).then(function(){for(var a in b){var d=b[a];this.b[a]||(this.b[a]={stream:d,type:a,W:null,J:null,ya:!0,ga:!1,oa:c,endOfStream:!1,ba:!1,T:null,P:!1,U:!1},Yd(this,this.b[a],0))}}.bind(a))}
function Zd(a,b){var c=a.g[b];if(c)return c.D;c={D:new O,da:!1};a.g[b]=c;var d=a.a.periods[b].streamSets.map(function(a){return a.streams}).reduce(cb,[]);a.F=a.F.then(function(){if(!this.f)return Xd(this,d)}.bind(a)).then(function(){this.f||(this.g[b].D.resolve(),this.g[b].da=!0)}.bind(a))["catch"](function(a){this.f||(this.g[b].D.reject(),delete this.g[b],this.m(a))}.bind(a));return c.D}
function Xd(a,b){for(var c=[],d=0;d<b.length;++d){var e=b[d],f=a.i[e.id];f?c.push(f.D):(a.i[e.id]={D:new O,da:!1},c.push(e.createSegmentIndex()))}return Promise.all(c).then(function(){if(!this.f)for(var a=0;a<b.length;++a){var c=this.i[b[a].id];c.da||(c.D.resolve(),c.da=!0)}}.bind(a))["catch"](function(a){if(!this.f)return this.i[e.id].D.reject(),delete this.i[e.id],Promise.reject(a)}.bind(a))}
function Wd(a){var b=a.a.presentationTimeline.a;b<Number.POSITIVE_INFINITY?Ob(a.c,b):Ob(a.c,Math.pow(2,32))}Md.prototype.$=function(a){if(!this.f&&!a.ba&&null!=a.T&&!a.U)if(a.T=null,a.P)Vd(this,a);else{try{var b=$d(this,a);null!=b&&Yd(this,a,b)}catch(c){this.m(c);return}b=J(this.b);yb(this.h,b.some(function(a){return a.ga}));ae(this,a);b.every(function(a){return a.endOfStream})&&this.c.endOfStream()}};
function $d(a,b){var c=vb(a.h),d=Fb(a.c,b.type,c),e=Math.max(a.a.minBufferTime||0,a.l.rebufferingGoal);if(d>=Math.max(e,a.l.bufferingGoal))return b.ga=!1,.5;var f=a.c,g=b.type;f="text"==g?f.b.a:(f=f.c[g].buffered)?f.length?f.end(f.length-1):null:null;if(0==d&&null==f){if(null!=b.W||b.J)throw new z(5,5E3,b.type);f=c}else{if(null==b.W||null==b.J)throw new z(5,5E3,b.type);f=a.a.periods[Ud(a,b.W)].startTime+b.J.a}if(f>=a.a.presentationTimeline.a)return b.ga=!1,b.endOfStream=!0,null;b.endOfStream=!1;!a.o&&
d<e||1>=d?b.ga=!0:d>=e&&(b.ga=!1);d=Ud(a,b.stream);e=Od(a,f);if(e!=d)return b.oa=e,null;b.J&&b.stream==b.W?(e=b.J.position+1,e=be(a,b,d,e)):(e=b.J?b.stream.findSegmentPosition(Math.max(0,a.a.periods[Ud(a,b.W)].startTime+b.J.a-a.a.periods[d].startTime)):b.stream.findSegmentPosition(Math.max(0,c-a.a.periods[d].startTime)),e=null==e?null:be(a,b,d,Math.max(0,e-1))||be(a,b,d,e));if(!e)return 1;ce(a,b,c,d,e);return null}
function be(a,b,c,d){c=a.a.periods[c];b=b.stream.getSegmentReference(d);if(!b)return null;a=a.a.presentationTimeline;d=n(a);return c.startTime+b.a<sa(a)||c.startTime+b.startTime>d?null:b}
function ce(a,b,c,d,e){var f=b.stream,g=a.a.periods[d+1],l=null,l=g?g.startTime:a.a.presentationTimeline.a;d=de(a,b,d,l);b.ba=!0;b.ya=!1;g=fe(a,e);Promise.all([d,g]).then(function(a){if(!this.f)return ge(this,b,c,f,e,a[1])}.bind(a)).then(function(){b.ba=!1;Yd(this,b,0);this.f||he(this,f)}.bind(a))["catch"](function(a){this.f||this.m(a)}.bind(a))}
function de(a,b,c,d){if(!b.ya)return Promise.resolve();c=Kb(a.c,b.type,a.a.periods[c].startTime-b.stream.presentationTimeOffset);d=null!=d?Mb(a.c,b.type,d):Promise.resolve();if(!b.stream.initSegmentReference)return Promise.all([c,d]);a=fe(a,b.stream.initSegmentReference).then(function(a){if(!this.f)return Gb(this.c,b.type,a,null,null)}.bind(a));return Promise.all([c,d,a])}
function ge(a,b,c,d,e,f){return ie(a,b,c).then(function(){if(!this.f)return Gb(this.c,b.type,f,e.startTime,e.a)}.bind(a)).then(function(){if(!this.f)return b.W=d,b.J=e,Promise.resolve()}.bind(a))}function ie(a,b,c){var d=Eb(a.c,b.type);if(null==d)return Promise.resolve();c=c-d-a.l.bufferBehind;return 0>=c?Promise.resolve():Ib(a.c,b.type,d,d+c).then(function(){}.bind(a))}
function he(a,b){if(!a.o&&(a.o=J(a.b).every(function(a){return!a.P&&!a.U&&a.J}),a.o)){var c=Ud(a,b);a.g[c]||Zd(a,c).then(function(){this.u()}.bind(a))["catch"](G);for(c=0;c<a.a.periods.length;++c)Zd(a,c)["catch"](G);a.A&&a.A()}}
function ae(a,b){if(b.oa!=Ud(a,b.stream)){var c=b.oa,d=J(a.b);d.every(function(a){return a.oa==c})&&d.every(je)&&Zd(a,c).then(function(){if(!this.f){var a=this.O(this.a.periods[c]),b;for(b in this.b)if(!a[b]){this.m(new z(5,5005));return}for(b in a)if(!this.b[b]){this.m(new z(5,5005));return}for(b in this.b){Td(this,b,a[b]);var d=this.b[b];je(d)&&Yd(this,d,0)}this.u()}}.bind(a))["catch"](G)}}function je(a){return!a.ba&&null==a.T&&!a.P&&!a.U}
function Od(a,b){for(var c=a.a.periods.length-1;0<c;--c)if(b>=a.a.periods[c].startTime)return c;return 0}function Ud(a,b){for(var c=0;c<a.a.periods.length;++c)for(var d=a.a.periods[c],e=0;e<d.streamSets.length;++e)if(0<=d.streamSets[e].streams.indexOf(b))return c;return-1}function fe(a,b){var c=kc(b.uris,a.l.retryParameters);if(0!=b.c||null!=b.b){var d="bytes="+b.c+"-";null!=b.b&&(d+=b.b);c.headers.Range=d}return a.R.request(1,c).then(function(a){return a.data})}
function Vd(a,b){b.P=!1;b.U=!0;a.c.clear(b.type).then(function(){this.f||(b.W=null,b.J=null,b.U=!1,Yd(this,b,0))}.bind(a))}function Yd(a,b,c){b.T=window.setTimeout(a.$.bind(a,b),1E3*c)}function Nd(a){null!=a.T&&(window.clearTimeout(a.T),a.T=null)};Ad.data=function(a){return new Promise(function(b){var c=a.split(":");if(2>c.length||"data"!=c[0])throw new z(1,1004,a);c=c.slice(1).join(":").split(",");if(2>c.length)throw new z(1,1004,a);var d=c[0],c=window.decodeURIComponent(c.slice(1).join(",")),d=d.split(";"),e=null;1<d.length&&(e=d[1]);if("base64"==e)c=Zb(c).buffer;else{if(e)throw new z(1,1005,a);c=Ub(c)}b({uri:a,data:c,headers:{}})})};function ke(a,b){return new Promise(function(c,d){var e=new XMLHttpRequest;e.open(b.method,a,!0);e.responseType="arraybuffer";e.timeout=b.retryParameters.timeout;e.withCredentials=b.allowCrossSiteCredentials;e.onload=function(b){b=b.target;if(200<=b.status&&299>=b.status){var e=b.getAllResponseHeaders().split("\r\n").reduce(function(a,b){var c=b.split(": ");a[c[0].toLowerCase()]=c.slice(1).join(": ");return a},{});b.sb&&(a=b.sb);c({uri:a,data:b.response,headers:e})}else{e=null;try{e=Tb(b.response)}catch(f){}d(new z(1,
1001,a,b.status,e))}};e.onerror=function(){d(new z(1,1002,a))};e.ontimeout=function(){d(new z(1,1003,a))};for(var f in b.headers)e.setRequestHeader(f,b.headers[f]);e.send(b.body)})}Ad.http=ke;Ad.https=ke;function Z(a){this.w=new L;this.c=a;this.i=null;this.u=new M;this.Ea=new ja;this.m=new Y(this.Db.bind(this));this.f=this.o=this.b=this.h=this.la=this.O=this.A=this.g=null;this.Oa=1E9;this.sa=!1;this.F=!0;this.na=!1;this.l={};this.a=le(this);this.R=[];this.ka=this.$=this.ma=0;this.la=me(this);for(a=0;a<this.c.textTracks.length;++a){var b=this.c.textTracks[a];b.mode="disabled";"Shaka Player TextTrack"==b.label&&(this.i=b)}this.i||(this.i=this.c.addTextTrack("subtitles","Shaka Player TextTrack"));this.i.mode=
"hidden";N(this.u,this.c,"error",this.gb.bind(this))}ba(Z);m("shaka.Player",Z);Z.prototype.s=function(){var a=Promise.all([ne(this),this.u?this.u.s():null,this.m?this.m.s():null]);this.a=this.m=this.Ea=this.u=this.i=this.c=null;return a};Z.prototype.destroy=Z.prototype.s;Z.version="v2.0.0-beta2";Z.support=function(){if(window.Promise&&window.Uint8Array&&Array.prototype.forEach){var a=oa(),b=Db();return mc().then(function(c){return{manifest:a,media:b,drm:c,supported:a.basic&&b.basic&&c.basic}})}return{then:function(a){a({supported:!1})}}};
Z.prototype.load=function(a,b,c){var d=c;c=Promise.resolve();var e;d||(e=id(new U(a)).split("/").pop().split("."),1<e.length&&(e=e.pop().toLowerCase(),d=na[e]));d||(c=kc([a],this.a.manifest.retryParameters),c.method="HEAD",c=this.m.request(0,c).then(function(b){(b=b.headers["content-type"])&&(b=b.toLowerCase());d=ma[b];if(!d)return Promise.reject(new z(4,4E3,a))},function(){return Promise.reject(new z(4,4E3,a))}));c=c.then(function(){this.o=new d;this.o.configure(this.a.manifest);return this.o.start(a,
this.m,this.Ba.bind(this),this.ea.bind(this))}.bind(this)).then(function(a){this.f=a;this.ka=Date.now()/1E3}.bind(this));e=Promise.resolve();this.c.src&&(e=this.Na());this.na=!0;return Promise.all([e,c]).then(function(){this.g=new bc(this.m,this.ea.bind(this),this.Bb.bind(this));this.g.configure(this.a.drm);return this.g.init(this.f,!1)}.bind(this)).then(function(){this.f.periods.forEach(this.Ba.bind(this));return Promise.all([ec(this.g,this.c),this.la])}.bind(this)).then(function(){this.h=new ub(this.c,
this.f.presentationTimeline,Math.max(this.f.minBufferTime||0,this.a.streaming.rebufferingGoal),b||null,this.zb.bind(this),this.Cb.bind(this));this.O=new Cb(this.c,this.A,this.i);this.b=new Md(this.h,this.O,this.m,this.f,this.Ab.bind(this),this.Pa.bind(this),this.ea.bind(this));this.b.configure(this.a.streaming);return this.b.init()}.bind(this)).then(function(){this.f.periods.forEach(this.Ba.bind(this));oe(this);pe(this);this.na=!1;this.a.abr.manager.init(this.Ca.bind(this))}.bind(this))["catch"](function(a){this.na=
!1;return Promise.reject(a)})};Z.prototype.load=Z.prototype.load;function me(a){a.A=new MediaSource;var b=new O;N(a.u,a.A,"sourceopen",b.resolve);a.c.src=window.URL.createObjectURL(a.A);return b}
Z.prototype.configure=function(a){var b=a.preferredAudioLanguage?a.preferredAudioLanguage!==this.a.preferredAudioLanguage:!1,c=a.preferredTextLanguage?a.preferredTextLanguage!==this.a.preferredTextLanguage:!1;a.abr&&a.abr.manager&&a.abr.manager!=this.a.abr.manager&&(this.a.abr.manager.stop(),a.abr.manager.init(this.Ca.bind(this)));qe(this,this.a,a,le(this),"");re(this,b,c)};Z.prototype.configure=Z.prototype.configure;
function re(a,b,c){a.o&&a.o.configure(a.a.manifest);a.g&&a.g.configure(a.a.drm);if(a.b){a.b.configure(a.a.streaming);a.f.periods.forEach(a.Fa.bind(a));var d=se(a,Qd(a.b)),e=Rd(a.b),d=qb(d,function(a){return"audio"==a&&b||"text"==a&&c||e[a]&&(!e[a].allowedByApplication||!e[a].allowedByKeySystem)});te(a,d,!0)}a.a.abr.enabled&&!a.F?a.a.abr.manager.enable():a.a.abr.manager.disable();a.a.abr.manager.setDefaultEstimate(a.a.abr.defaultBandwidthEstimate)}
Z.prototype.getConfiguration=function(){var a=le(this);qe(this,a,this.a,le(this),"");return a};Z.prototype.getConfiguration=Z.prototype.getConfiguration;
Z.prototype.rb=function(){var a=le(this),b=a.preferredAudioLanguage?a.preferredAudioLanguage!==this.a.preferredAudioLanguage:!1,c=a.preferredTextLanguage?a.preferredTextLanguage!==this.a.preferredTextLanguage:!1;a.abr&&a.abr.manager&&a.abr.manager!=this.a.abr.manager&&(this.a.abr.manager.stop(),a.abr.manager.init(this.Ca.bind(this)));this.a=le(this);re(this,b,c)};Z.prototype.resetConfiguration=Z.prototype.rb;Z.prototype.Ta=function(){return this.m};Z.prototype.getNetworkingEngine=Z.prototype.Ta;
Z.prototype.aa=function(){return this.f?this.f.presentationTimeline.aa():!1};Z.prototype.isLive=Z.prototype.aa;Z.prototype.ub=function(){var a=0,b=0;this.f&&(b=this.f.presentationTimeline,a=sa(b),b=n(b));return{start:a,end:b}};Z.prototype.seekRange=Z.prototype.ub;Z.prototype.Ua=function(){return this.sa};Z.prototype.isBuffering=Z.prototype.Ua;Z.prototype.Na=function(){return ne(this).then(function(){this.la=me(this)}.bind(this))};Z.prototype.unload=Z.prototype.Na;
Z.prototype.va=function(){return this.h?this.h.va():0};Z.prototype.getPlaybackRate=Z.prototype.va;Z.prototype.Ib=function(a){this.h&&zb(this.h,a)};Z.prototype.trickPlay=Z.prototype.Ib;Z.prototype.Qa=function(){this.h&&zb(this.h,1)};Z.prototype.cancelTrickPlay=Z.prototype.Qa;
Z.prototype.getTracks=function(){if(!this.b)return[];var a=Rd(this.b);return Qd(this.b).streamSets.map(function(b){var c=a[b.type];return b.streams.filter(function(a){return a.allowedByApplication&&a.allowedByKeySystem}).map(function(a){return{id:a.id,active:c==a,type:b.type,bandwidth:a.bandwidth,language:b.language,kind:a.kind||null,width:a.width||null,height:a.height||null}})}).reduce(cb,[])};Z.prototype.getTracks=Z.prototype.getTracks;
Z.prototype.vb=function(a,b){if(this.b){var c;Qd(this.b).streamSets.forEach(function(b){b.streams.forEach(function(b){b.id==a.id&&(c=b)})});if(c&&c.allowedByApplication&&c.allowedByKeySystem){this.R.push({timestamp:Date.now()/1E3,id:c.id,type:a.type,fromAdaptation:!1});"text"!=a.type&&this.configure({abr:{enabled:!1}});var d={};d[a.type]=c;te(this,d,b)}}};Z.prototype.selectTrack=Z.prototype.vb;Z.prototype.Va=function(){return"showing"==this.i.mode};Z.prototype.isTextTrackVisible=Z.prototype.Va;
Z.prototype.xb=function(a){this.i.mode=a?"showing":"hidden";ue(this)};Z.prototype.setTextTrackVisibility=Z.prototype.xb;
Z.prototype.getStats=function(){ve(this);var a={},b={},c=this.c&&this.c.getVideoPlaybackQuality?this.c.getVideoPlaybackQuality():{};this.b&&(b=Rd(this.b),a=b.video||{},b=b.audio||{});return{width:a.width||0,height:a.height||0,streamBandwidth:a.bandwidth+b.bandwidth||0,decodedFrames:Number(c.totalVideoFrames),droppedFrames:Number(c.droppedVideoFrames),estimatedBandwidth:this.a.abr.manager.getBandwidthEstimate(),playTime:this.ma,bufferingTime:this.$,switchHistory:this.R.slice(0)}};
Z.prototype.getStats=Z.prototype.getStats;
Z.prototype.addTextTrack=function(a,b,c,d,e){if(!this.b)return Promise.reject();for(var f=Qd(this.b),g,l=0;l<this.f.periods.length;l++)if(this.f.periods[l]==f){if(l==this.f.periods.length-1){if(g=this.f.presentationTimeline.a-f.startTime,g==Number.POSITIVE_INFINITY)return Promise.reject()}else g=this.f.periods[l+1].startTime-f.startTime;break}var h={id:this.Oa++,createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(){return 1},getSegmentReference:function(b){return 1!=b?null:
new w(1,0,g,[a],0,null)},initSegmentReference:null,presentationTimeOffset:0,mimeType:d,codecs:e||"",bandwidth:0,kind:c,encrypted:!1,keyId:null,allowedByApplication:!0,allowedByKeySystem:!0},p={language:b,type:"text",primary:!1,drmInfos:[],streams:[h]};return Sd(this.b,h).then(function(){f.streamSets.push(p);se(this,f).text==h&&te(this,{text:h});this.a.abr.enabled&&!this.F?this.a.abr.manager.enable():this.a.abr.manager.disable();oe(this);return{id:h.id,active:!1,type:"text",bandwidth:0,language:b,
kind:c,width:null,height:null}}.bind(this))};Z.prototype.addTextTrack=Z.prototype.addTextTrack;function ne(a){a.u&&a.u.Y(a.A,"sourceopen");a.c&&(a.c.removeAttribute("src"),a.c.load());var b=Promise.all([a.a.abr.manager.stop(),a.g?a.g.s():null,a.O?a.O.s():null,a.h?a.h.s():null,a.b?a.b.s():null,a.o?a.o.stop():null]);a.g=null;a.O=null;a.h=null;a.b=null;a.o=null;a.f=null;a.la=null;a.A=null;a.l={};a.R=[];a.ma=0;a.$=0;return b}
function we(a){return a.streams.some(function(a){return a.allowedByApplication&&a.allowedByKeySystem})}
function qe(a,b,c,d,e){var f=!!{".drm.servers":!0,".drm.clearKeys":!0,".drm.advanced":!0}[e],g={".drm.servers":"string",".drm.clearKeys":"string"}[e]||"",l={".drm.advanced":{distinctiveIdentifierRequired:!1,persistentStateRequired:!1,videoRobustness:"",audioRobustness:"",serverCertificate:null}}[e],h;for(h in c){var p=e+"."+h,q=d[h];l&&(q=l);var t=!!{".abr.manager":!0}[p];(f||h in b)&&(void 0===c[h]?void 0===q?delete b[h]:b[h]=q:t?b[h]=c[h]:"object"==typeof b[h]&&"object"==typeof c[h]?qe(a,b[h],c[h],
q,p):(f||typeof c[h]==typeof b[h])&&(g&&typeof c[h]!=g||"function"==typeof b[h]&&b[h].length!=c[h].length||(b[h]=c[h])))}}
function le(a){return{drm:{retryParameters:Bd(),servers:{},clearKeys:{},advanced:{}},manifest:{retryParameters:Bd(),dash:{customScheme:function(a){if(a)return null},clockSyncUri:""}},streaming:{retryParameters:Bd(),rebufferingGoal:2,bufferingGoal:30,bufferBehind:30},abr:{manager:a.Ea,enabled:!0,defaultBandwidthEstimate:5E5},preferredAudioLanguage:"",preferredTextLanguage:"",restrictions:{minWidth:0,maxWidth:Number.POSITIVE_INFINITY,minHeight:0,maxHeight:Number.POSITIVE_INFINITY,minPixels:0,maxPixels:Number.POSITIVE_INFINITY,
minAudioBandwidth:0,maxAudioBandwidth:Number.POSITIVE_INFINITY,minVideoBandwidth:0,maxVideoBandwidth:Number.POSITIVE_INFINITY}}}k=Z.prototype;
k.Fa=function(a){var b=this.a.restrictions,c=!1;a.streamSets.forEach(function(a){a.streams.forEach(function(e){var f=e.allowedByApplication;e.allowedByApplication=!0;if("video"==a.type){if(e.width<b.minWidth||e.width>b.maxWidth||e.height<b.minHeight||e.height>b.maxHeight||e.width*e.height<b.minPixels||e.width*e.height>b.maxPixels||e.bandwidth<b.minVideoBandwidth||e.bandwidth>b.maxVideoBandwidth)e.allowedByApplication=!1}else"audio"==a.type&&(e.bandwidth<b.minAudioBandwidth||e.bandwidth>b.maxAudioBandwidth)&&
(e.allowedByApplication=!1);f!=e.allowedByApplication&&(c=!0)})});c&&oe(this)};
k.Ba=function(a){var b="",c=null;this.g&&this.g.u&&(b=this.g.keySystem(),c=this.g.m);var d={};this.b&&(d=Rd(this.b));for(var e=0;e<a.streamSets.length;++e){var f=a.streamSets[e];if(b&&0!=f.drmInfos.length&&!f.drmInfos.some(function(a){return a.keySystem==b}))a.streamSets.splice(e,1),--e;else{for(var g=d[f.type],l=0;l<f.streams.length;++l){var h=f.streams[l];if(g&&"text"!=f.type&&h.mimeType!=g.mimeType)f.streams.splice(l,1),--l;else{var p=h.mimeType;h.codecs&&(p+='; codecs="'+h.codecs+'"');ib[p]||
MediaSource.isTypeSupported(p)?c&&h.encrypted&&0>c.indexOf(p)&&(f.streams.splice(l,1),--l):(f.streams.splice(l,1),--l)}}0==f.streams.length&&(a.streamSets.splice(e,1),--e)}}this.Fa(a);a.streamSets.some(we)||this.ea(new z(4,4011))};function te(a,b,c){for(var d in b){var e=b[d],f=c||"text"==d;a.F?a.l[d]={stream:e,clear:f}:Td(a.b,d,e,f)}}function ve(a){if(a.f){var b=Date.now()/1E3;a.sa?a.$+=b-a.ka:a.ma+=b-a.ka;a.ka=b}}k.Db=function(a,b,c){this.a.abr.manager.segmentDownloaded(a,b,c)};
k.zb=function(a){ve(this);this.sa=a;this.dispatchEvent(new F("buffering",{buffering:a}))};k.Cb=function(){if(this.b){var a=this.b,b;for(b in a.b){var c=a.b[b];c.U||(0<Fb(a.c,b,vb(a.h))?c.P=!1:c.P||(c.ba?c.P=!0:null==Eb(a.c,b)?null==c.T&&Yd(a,c,0):(Nd(c),Vd(a,c))))}}};
function se(a,b){var c={};b.streamSets.forEach(function(a){!we(a)||a.type in c||(c[a.type]=a)});b.streamSets.forEach(function(a){we(a)&&a.primary&&(c[a.type]=a)});var d={audio:!1,text:!1};[2,1,0].forEach(function(a){b.streamSets.forEach(function(b){if(we(b)){var e;"audio"==b.type?e=this.a.preferredAudioLanguage:"text"==b.type&&(e=this.a.preferredTextLanguage);if(e){e=nb(e);var h=nb(b.language);if(h==e||1<=a&&h==e.split("-")[0]||2<=a&&h.split("-")[0]==e.split("-")[0])d[b.type]=!0,c[b.type]=b}}}.bind(this))}.bind(a));
J(c).some(we)||a.ea(new z(4,4012));var e=a.a.abr.manager.chooseStreams(c);c.text&&(e.text=c.text.streams[0],c.audio&&d.text&&c.text.language!=c.audio.language&&(a.i.mode="showing",ue(a)));return e}k.Ab=function(a){this.F=!0;a=se(this,a);for(var b in this.l)a[b]=this.l[b].stream;this.l={};for(b in a)this.R.push({timestamp:Date.now()/1E3,id:a[b].id,type:b,fromAdaptation:!0});this.na||oe(this);return a};
k.Pa=function(){this.F=!1;this.a.abr.enabled&&this.a.abr.manager.enable();for(var a in this.l){var b=this.l[a];Td(this.b,a,b.stream,b.clear)}this.l={}};k.Ca=function(a){var b=Rd(this.b),c;for(c in a){var d=a[c];b[c]!=d&&this.R.push({timestamp:Date.now()/1E3,id:d.id,type:c,fromAdaptation:!0})}if(this.b){for(c in a)Td(this.b,c,a[c]);pe(this)}};function pe(a){Promise.resolve().then(function(){this.c&&this.dispatchEvent(new F("adaptation"))}.bind(a))}
function oe(a){Promise.resolve().then(function(){this.c&&this.dispatchEvent(new F("trackschanged"))}.bind(a))}function ue(a){a.dispatchEvent(new F("texttrackvisibility"))}k.ea=function(a){this.dispatchEvent(new F("error",{detail:a}))};k.gb=function(){if(this.c.error){var a=this.c.error.code;if(1!=a){var b=this.c.error.msExtendedCode;b&&(0>b&&(b+=Math.pow(2,32)),b=b.toString(16));this.ea(new z(3,3016,a,b))}}};
k.Bb=function(a){var b=["usable","status-pending","output-downscaled"],c=Qd(this.b),d=!1;c.streamSets.forEach(function(c){c.streams.forEach(function(c){var e=c.allowedByKeySystem;c.keyId&&c.keyId in a&&(c.allowedByKeySystem=0<=b.indexOf(a[c.keyId]));e!=c.allowedByKeySystem&&(d=!0)})});c=se(this,c);this.a.abr.enabled&&!this.F&&this.a.abr.manager.enable();var e=Rd(this.b),c=qb(c,function(a){return e[a]&&!e[a].allowedByKeySystem});te(this,c,!0);d&&oe(this)};}.call(g,this));
if (typeof(module)!="undefined"&&module.exports)module.exports=g.shaka;
else if (typeof(define)!="undefined" && define.amd)define(function(){return g.shaka});
else this.shaka=g.shaka;
})();


},{}],3:[function(require,module,exports){
// stats.js - http://github.com/mrdoob/stats.js
var Stats=function(){var l=Date.now(),m=l,g=0,n=Infinity,o=0,h=0,p=Infinity,q=0,r=0,s=0,f=document.createElement("div");f.id="stats";f.addEventListener("mousedown",function(b){b.preventDefault();t(++s%2)},!1);f.style.cssText="width:80px;opacity:0.9;cursor:pointer";var a=document.createElement("div");a.id="fps";a.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#002";f.appendChild(a);var i=document.createElement("div");i.id="fpsText";i.style.cssText="color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
i.innerHTML="FPS";a.appendChild(i);var c=document.createElement("div");c.id="fpsGraph";c.style.cssText="position:relative;width:74px;height:30px;background-color:#0ff";for(a.appendChild(c);74>c.children.length;){var j=document.createElement("span");j.style.cssText="width:1px;height:30px;float:left;background-color:#113";c.appendChild(j)}var d=document.createElement("div");d.id="ms";d.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#020;display:none";f.appendChild(d);var k=document.createElement("div");
k.id="msText";k.style.cssText="color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";k.innerHTML="MS";d.appendChild(k);var e=document.createElement("div");e.id="msGraph";e.style.cssText="position:relative;width:74px;height:30px;background-color:#0f0";for(d.appendChild(e);74>e.children.length;)j=document.createElement("span"),j.style.cssText="width:1px;height:30px;float:left;background-color:#131",e.appendChild(j);var t=function(b){s=b;switch(s){case 0:a.style.display=
"block";d.style.display="none";break;case 1:a.style.display="none",d.style.display="block"}};return{REVISION:12,domElement:f,setMode:t,begin:function(){l=Date.now()},end:function(){var b=Date.now();g=b-l;n=Math.min(n,g);o=Math.max(o,g);k.textContent=g+" MS ("+n+"-"+o+")";var a=Math.min(30,30-30*(g/200));e.appendChild(e.firstChild).style.height=a+"px";r++;b>m+1E3&&(h=Math.round(1E3*r/(b-m)),p=Math.min(p,h),q=Math.max(q,h),i.textContent=h+" FPS ("+p+"-"+q+")",a=Math.min(30,30-30*(h/100)),c.appendChild(c.firstChild).style.height=
a+"px",m=b,r=0);return b},update:function(){l=this.end()}}};"object"===typeof module&&(module.exports=Stats);

},{}],4:[function(require,module,exports){
(function (global){
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.WebVRManager = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Emitter = _dereq_('./emitter.js');
var Modes = _dereq_('./modes.js');
var Util = _dereq_('./util.js');

/**
 * Everything having to do with the WebVR button.
 * Emits a 'click' event when it's clicked.
 */
function ButtonManager(opt_root) {
  var root = opt_root || document.body;
  this.loadIcons_();

  // Make the fullscreen button.
  var fsButton = this.createButton();
  fsButton.src = this.ICONS.fullscreen;
  fsButton.title = 'Fullscreen mode';
  var s = fsButton.style;
  s.bottom = 0;
  s.right = 0;
  fsButton.addEventListener('click', this.createClickHandler_('fs'));
  root.appendChild(fsButton);
  this.fsButton = fsButton;

  // Make the VR button.
  var vrButton = this.createButton();
  vrButton.src = this.ICONS.cardboard;
  vrButton.title = 'Virtual reality mode';
  var s = vrButton.style;
  s.bottom = 0;
  s.right = '48px';
  vrButton.addEventListener('click', this.createClickHandler_('vr'));
  root.appendChild(vrButton);
  this.vrButton = vrButton;

  this.isVisible = true;

}
ButtonManager.prototype = new Emitter();

ButtonManager.prototype.createButton = function() {
  var button = document.createElement('img');
  button.className = 'webvr-button';
  var s = button.style;
  s.position = 'fixed';
  s.width = '24px'
  s.height = '24px';
  s.backgroundSize = 'cover';
  s.backgroundColor = 'transparent';
  s.border = 0;
  s.userSelect = 'none';
  s.webkitUserSelect = 'none';
  s.MozUserSelect = 'none';
  s.cursor = 'pointer';
  s.padding = '12px';
  s.zIndex = 1;
  s.display = 'none';
  s.boxSizing = 'content-box';

  // Prevent button from being selected and dragged.
  button.draggable = false;
  button.addEventListener('dragstart', function(e) {
    e.preventDefault();
  });

  // Style it on hover.
  button.addEventListener('mouseenter', function(e) {
    s.filter = s.webkitFilter = 'drop-shadow(0 0 5px rgba(255,255,255,1))';
  });
  button.addEventListener('mouseleave', function(e) {
    s.filter = s.webkitFilter = '';
  });
  return button;
};

ButtonManager.prototype.setMode = function(mode, isVRCompatible) {
  isVRCompatible = isVRCompatible || WebVRConfig.FORCE_ENABLE_VR;
  if (!this.isVisible) {
    return;
  }
  switch (mode) {
    case Modes.NORMAL:
      this.fsButton.style.display = 'block';
      this.fsButton.src = this.ICONS.fullscreen;
      this.vrButton.style.display = (isVRCompatible ? 'block' : 'none');
      break;
    case Modes.MAGIC_WINDOW:
      this.fsButton.style.display = 'block';
      this.fsButton.src = this.ICONS.exitFullscreen;
      this.vrButton.style.display = (isVRCompatible ? 'block' : 'none');
      break;
    case Modes.VR:
      this.fsButton.style.display = 'none';
      this.vrButton.style.display = 'none';
      break;
  }

  // Hack for Safari Mac/iOS to force relayout (svg-specific issue)
  // http://goo.gl/hjgR6r
  var oldValue = this.fsButton.style.display;
  this.fsButton.style.display = 'inline-block';
  this.fsButton.offsetHeight;
  this.fsButton.style.display = oldValue;
};

ButtonManager.prototype.setVisibility = function(isVisible) {
  this.isVisible = isVisible;
  this.fsButton.style.display = isVisible ? 'block' : 'none';
  this.vrButton.style.display = isVisible ? 'block' : 'none';
};

ButtonManager.prototype.createClickHandler_ = function(eventName) {
  return function(e) {
    e.stopPropagation();
    e.preventDefault();
    this.emit(eventName);
  }.bind(this);
};

ButtonManager.prototype.loadIcons_ = function() {
  // Preload some hard-coded SVG.
  this.ICONS = {};
  this.ICONS.cardboard = Util.base64('image/svg+xml', 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNHB4IiBoZWlnaHQ9IjI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0iI0ZGRkZGRiI+CiAgICA8cGF0aCBkPSJNMjAuNzQgNkgzLjIxQzIuNTUgNiAyIDYuNTcgMiA3LjI4djEwLjQ0YzAgLjcuNTUgMS4yOCAxLjIzIDEuMjhoNC43OWMuNTIgMCAuOTYtLjMzIDEuMTQtLjc5bDEuNC0zLjQ4Yy4yMy0uNTkuNzktMS4wMSAxLjQ0LTEuMDFzMS4yMS40MiAxLjQ1IDEuMDFsMS4zOSAzLjQ4Yy4xOS40Ni42My43OSAxLjExLjc5aDQuNzljLjcxIDAgMS4yNi0uNTcgMS4yNi0xLjI4VjcuMjhjMC0uNy0uNTUtMS4yOC0xLjI2LTEuMjh6TTcuNSAxNC42MmMtMS4xNyAwLTIuMTMtLjk1LTIuMTMtMi4xMiAwLTEuMTcuOTYtMi4xMyAyLjEzLTIuMTMgMS4xOCAwIDIuMTIuOTYgMi4xMiAyLjEzcy0uOTUgMi4xMi0yLjEyIDIuMTJ6bTkgMGMtMS4xNyAwLTIuMTMtLjk1LTIuMTMtMi4xMiAwLTEuMTcuOTYtMi4xMyAyLjEzLTIuMTNzMi4xMi45NiAyLjEyIDIuMTMtLjk1IDIuMTItMi4xMiAyLjEyeiIvPgogICAgPHBhdGggZmlsbD0ibm9uZSIgZD0iTTAgMGgyNHYyNEgwVjB6Ii8+Cjwvc3ZnPgo=');
  this.ICONS.fullscreen = Util.base64('image/svg+xml', 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNHB4IiBoZWlnaHQ9IjI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0iI0ZGRkZGRiI+CiAgICA8cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+CiAgICA8cGF0aCBkPSJNNyAxNEg1djVoNXYtMkg3di0zem0tMi00aDJWN2gzVjVINXY1em0xMiA3aC0zdjJoNXYtNWgtMnYzek0xNCA1djJoM3YzaDJWNWgtNXoiLz4KPC9zdmc+Cg==');
  this.ICONS.exitFullscreen = Util.base64('image/svg+xml', 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNHB4IiBoZWlnaHQ9IjI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0iI0ZGRkZGRiI+CiAgICA8cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+CiAgICA8cGF0aCBkPSJNNSAxNmgzdjNoMnYtNUg1djJ6bTMtOEg1djJoNVY1SDh2M3ptNiAxMWgydi0zaDN2LTJoLTV2NXptMi0xMVY1aC0ydjVoNVY4aC0zeiIvPgo8L3N2Zz4K');
  this.ICONS.settings = Util.base64('image/svg+xml', 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNHB4IiBoZWlnaHQ9IjI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0iI0ZGRkZGRiI+CiAgICA8cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+CiAgICA8cGF0aCBkPSJNMTkuNDMgMTIuOThjLjA0LS4zMi4wNy0uNjQuMDctLjk4cy0uMDMtLjY2LS4wNy0uOThsMi4xMS0xLjY1Yy4xOS0uMTUuMjQtLjQyLjEyLS42NGwtMi0zLjQ2Yy0uMTItLjIyLS4zOS0uMy0uNjEtLjIybC0yLjQ5IDFjLS41Mi0uNC0xLjA4LS43My0xLjY5LS45OGwtLjM4LTIuNjVDMTQuNDYgMi4xOCAxNC4yNSAyIDE0IDJoLTRjLS4yNSAwLS40Ni4xOC0uNDkuNDJsLS4zOCAyLjY1Yy0uNjEuMjUtMS4xNy41OS0xLjY5Ljk4bC0yLjQ5LTFjLS4yMy0uMDktLjQ5IDAtLjYxLjIybC0yIDMuNDZjLS4xMy4yMi0uMDcuNDkuMTIuNjRsMi4xMSAxLjY1Yy0uMDQuMzItLjA3LjY1LS4wNy45OHMuMDMuNjYuMDcuOThsLTIuMTEgMS42NWMtLjE5LjE1LS4yNC40Mi0uMTIuNjRsMiAzLjQ2Yy4xMi4yMi4zOS4zLjYxLjIybDIuNDktMWMuNTIuNCAxLjA4LjczIDEuNjkuOThsLjM4IDIuNjVjLjAzLjI0LjI0LjQyLjQ5LjQyaDRjLjI1IDAgLjQ2LS4xOC40OS0uNDJsLjM4LTIuNjVjLjYxLS4yNSAxLjE3LS41OSAxLjY5LS45OGwyLjQ5IDFjLjIzLjA5LjQ5IDAgLjYxLS4yMmwyLTMuNDZjLjEyLS4yMi4wNy0uNDktLjEyLS42NGwtMi4xMS0xLjY1ek0xMiAxNS41Yy0xLjkzIDAtMy41LTEuNTctMy41LTMuNXMxLjU3LTMuNSAzLjUtMy41IDMuNSAxLjU3IDMuNSAzLjUtMS41NyAzLjUtMy41IDMuNXoiLz4KPC9zdmc+Cg==');
};

module.exports = ButtonManager;

},{"./emitter.js":2,"./modes.js":3,"./util.js":4}],2:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function Emitter() {
  this.callbacks = {};
}

Emitter.prototype.emit = function(eventName) {
  var callbacks = this.callbacks[eventName];
  if (!callbacks) {
    //console.log('No valid callback specified.');
    return;
  }
  var args = [].slice.call(arguments);
  // Eliminate the first param (the callback).
  args.shift();
  for (var i = 0; i < callbacks.length; i++) {
    callbacks[i].apply(this, args);
  }
};

Emitter.prototype.on = function(eventName, callback) {
  if (eventName in this.callbacks) {
    this.callbacks[eventName].push(callback);
  } else {
    this.callbacks[eventName] = [callback];
  }
};

module.exports = Emitter;

},{}],3:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Modes = {
  UNKNOWN: 0,
  // Not fullscreen, just tracking.
  NORMAL: 1,
  // Magic window immersive mode.
  MAGIC_WINDOW: 2,
  // Full screen split screen VR mode.
  VR: 3,
};

module.exports = Modes;

},{}],4:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = {};

Util.base64 = function(mimeType, base64) {
  return 'data:' + mimeType + ';base64,' + base64;
};

Util.isMobile = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

Util.isFirefox = function() {
  return /firefox/i.test(navigator.userAgent);
};

Util.isIOS = function() {
  return /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
};

Util.isIFrame = function() {
  try {
    return window.self !== window.top;
  } catch (e) {
    return true;
  }
};

Util.appendQueryParameter = function(url, key, value) {
  // Determine delimiter based on if the URL already GET parameters in it.
  var delimiter = (url.indexOf('?') < 0 ? '?' : '&');
  url += delimiter + key + '=' + value;
  return url;
};

// From http://goo.gl/4WX3tg
Util.getQueryParameter = function(name) {
  var name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
  var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(location.search);
  return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
};

Util.isLandscapeMode = function() {
  return (window.orientation == 90 || window.orientation == -90);
};

Util.getScreenWidth = function() {
  return Math.max(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

Util.getScreenHeight = function() {
  return Math.min(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

module.exports = Util;

},{}],5:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ButtonManager = _dereq_('./button-manager.js');
var Emitter = _dereq_('./emitter.js');
var Modes = _dereq_('./modes.js');
var Util = _dereq_('./util.js');

/**
 * Helper for getting in and out of VR mode.
 */
function WebVRManager(renderer, effect, params) {
  this.params = params || {};

  this.mode = Modes.UNKNOWN;

  // Set option to hide the button.
  this.hideButton = this.params.hideButton || false;
  // Whether or not the FOV should be distorted or un-distorted. By default, it
  // should be distorted, but in the case of vertex shader based distortion,
  // ensure that we use undistorted parameters.
  this.predistorted = !!this.params.predistorted;

  // Save the THREE.js renderer and effect for later.
  this.renderer = renderer;
  this.effect = effect;
  var polyfillWrapper = document.querySelector('.webvr-polyfill-fullscreen-wrapper');
  this.button = new ButtonManager(polyfillWrapper);

  this.isFullscreenDisabled = !!Util.getQueryParameter('no_fullscreen');
  this.startMode = Modes.NORMAL;
  var startModeParam = parseInt(Util.getQueryParameter('start_mode'));
  if (!isNaN(startModeParam)) {
    this.startMode = startModeParam;
  }

  if (this.hideButton) {
    this.button.setVisibility(false);
  }

  // Check if the browser is compatible with WebVR.
  this.getDeviceByType_(VRDisplay).then(function(hmd) {
    this.hmd = hmd;

    // Only enable VR mode if there's a VR device attached or we are running the
    // polyfill on mobile.
    if (!this.isVRCompatibleOverride) {
      this.isVRCompatible =  !hmd.isPolyfilled || Util.isMobile();
    }

    switch (this.startMode) {
      case Modes.MAGIC_WINDOW:
        this.setMode_(Modes.MAGIC_WINDOW);
        break;
      case Modes.VR:
        this.enterVRMode_();
        this.setMode_(Modes.VR);
        break;
      default:
        this.setMode_(Modes.NORMAL);
    }

    this.emit('initialized');
  }.bind(this));

  // Hook up button listeners.
  this.button.on('fs', this.onFSClick_.bind(this));
  this.button.on('vr', this.onVRClick_.bind(this));

  // Bind to fullscreen events.
  document.addEventListener('webkitfullscreenchange',
      this.onFullscreenChange_.bind(this));
  document.addEventListener('mozfullscreenchange',
      this.onFullscreenChange_.bind(this));
  document.addEventListener('msfullscreenchange',
      this.onFullscreenChange_.bind(this));

  // Bind to VR* specific events.
  window.addEventListener('vrdisplaypresentchange',
      this.onVRDisplayPresentChange_.bind(this));
  window.addEventListener('vrdisplaydeviceparamschange',
      this.onVRDisplayDeviceParamsChange_.bind(this));
}

WebVRManager.prototype = new Emitter();

// Expose these values externally.
WebVRManager.Modes = Modes;

WebVRManager.prototype.render = function(scene, camera, timestamp) {
  // Scene may be an array of two scenes, one for each eye.
  if (scene instanceof Array) {
    this.effect.render(scene[0], camera);
  } else {
    this.effect.render(scene, camera);
  }
};

WebVRManager.prototype.setVRCompatibleOverride = function(isVRCompatible) {
  this.isVRCompatible = isVRCompatible;
  this.isVRCompatibleOverride = true;

  // Don't actually change modes, just update the buttons.
  this.button.setMode(this.mode, this.isVRCompatible);
};

/**
 * Promise returns true if there is at least one HMD device available.
 */
WebVRManager.prototype.getDeviceByType_ = function(type) {
  return new Promise(function(resolve, reject) {
    navigator.getVRDisplays().then(function(displays) {
      // Promise succeeds, but check if there are any displays actually.
      for (var i = 0; i < displays.length; i++) {
        if (displays[i] instanceof type) {
          resolve(displays[i]);
          break;
        }
      }
      resolve(null);
    }, function() {
      // No displays are found.
      resolve(null);
    });
  });
};

/**
 * Helper for entering VR mode.
 */
WebVRManager.prototype.enterVRMode_ = function() {
  this.hmd.requestPresent({
    source: this.renderer.domElement,
    predistorted: this.predistorted
  });
};

WebVRManager.prototype.setMode_ = function(mode) {
  var oldMode = this.mode;
  if (mode == this.mode) {
    console.warn('Not changing modes, already in %s', mode);
    return;
  }
  console.log('Mode change: %s => %s', this.mode, mode);
  this.mode = mode;
  this.button.setMode(mode, this.isVRCompatible);

  // Emit an event indicating the mode changed.
  this.emit('modechange', mode, oldMode);
};

/**
 * Main button was clicked.
 */
WebVRManager.prototype.onFSClick_ = function() {
  switch (this.mode) {
    case Modes.NORMAL:
      // TODO: Remove this hack if/when iOS gets real fullscreen mode.
      // If this is an iframe on iOS, break out and open in no_fullscreen mode.
      if (Util.isIOS() && Util.isIFrame()) {
        var url = window.location.href;
        url = Util.appendQueryParameter(url, 'no_fullscreen', 'true');
        url = Util.appendQueryParameter(url, 'start_mode', Modes.MAGIC_WINDOW);
        top.location.href = url;
        return;
      }
      this.setMode_(Modes.MAGIC_WINDOW);
      this.requestFullscreen_();
      break;
    case Modes.MAGIC_WINDOW:
      if (this.isFullscreenDisabled) {
        window.history.back();
        return;
      }
      this.setMode_(Modes.NORMAL);
      this.exitFullscreen_();
      break;
  }
};

/**
 * The VR button was clicked.
 */
WebVRManager.prototype.onVRClick_ = function() {
  // TODO: Remove this hack when iOS has fullscreen mode.
  // If this is an iframe on iOS, break out and open in no_fullscreen mode.
  if (this.mode == Modes.NORMAL && Util.isIOS() && Util.isIFrame()) {
    var url = window.location.href;
    url = Util.appendQueryParameter(url, 'no_fullscreen', 'true');
    url = Util.appendQueryParameter(url, 'start_mode', Modes.VR);
    top.location.href = url;
    return;
  }
  this.enterVRMode_();
};

WebVRManager.prototype.requestFullscreen_ = function() {
  var canvas = document.body;
  //var canvas = this.renderer.domElement;
  if (canvas.requestFullscreen) {
    canvas.requestFullscreen();
  } else if (canvas.mozRequestFullScreen) {
    canvas.mozRequestFullScreen();
  } else if (canvas.webkitRequestFullscreen) {
    canvas.webkitRequestFullscreen();
  } else if (canvas.msRequestFullscreen) {
    canvas.msRequestFullscreen();
  }
};

WebVRManager.prototype.exitFullscreen_ = function() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  } else if (document.msExitFullscreen) {
    document.msExitFullscreen();
  }
};

WebVRManager.prototype.onVRDisplayPresentChange_ = function(e) {
  console.log('onVRDisplayPresentChange_', e);
  if (this.hmd.isPresenting) {
    this.setMode_(Modes.VR);
  } else {
    this.setMode_(Modes.NORMAL);
  }
};

WebVRManager.prototype.onVRDisplayDeviceParamsChange_ = function(e) {
  console.log('onVRDisplayDeviceParamsChange_', e);
};

WebVRManager.prototype.onFullscreenChange_ = function(e) {
  // If we leave full-screen, go back to normal mode.
  if (document.webkitFullscreenElement === null ||
      document.mozFullScreenElement === null) {
    this.setMode_(Modes.NORMAL);
  }
};

module.exports = WebVRManager;

},{"./button-manager.js":1,"./emitter.js":2,"./modes.js":3,"./util.js":4}]},{},[5])(5)
});


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],5:[function(require,module,exports){
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
'use strict';
/* eslint-disable no-unused-vars */
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],2:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = _dereq_('./util.js');
var WakeLock = _dereq_('./wakelock.js');

// Start at a higher number to reduce chance of conflict.
var nextDisplayId = 1000;
var hasShowDeprecationWarning = false;

/**
 * The base class for all VR displays.
 */
function VRDisplay() {
  this.isPolyfilled = true;
  this.displayId = nextDisplayId++;
  this.displayName = 'webvr-polyfill displayName';

  this.isConnected = true;
  this.isPresenting = false;
  this.capabilities = {
    hasPosition: false,
    hasOrientation: false,
    hasExternalDisplay: false,
    canPresent: false,
    maxLayers: 1
  };
  this.stageParameters = null;

  // "Private" members.
  this.waitingForPresent_ = false;
  this.layer_ = null;

  this.fullscreenElement_ = null;
  this.fullscreenWrapper_ = null;
  this.fullscreenElementCachedStyle_ = null;

  this.fullscreenEventTarget_ = null;
  this.fullscreenChangeHandler_ = null;
  this.fullscreenErrorHandler_ = null;

  this.wakelock_ = new WakeLock();
}

VRDisplay.prototype.getPose = function() {
  // TODO: Technically this should retain it's value for the duration of a frame
  // but I doubt that's practical to do in javascript.
  return this.getImmediatePose();
};

VRDisplay.prototype.requestAnimationFrame = function(callback) {
  return window.requestAnimationFrame(callback);
};

VRDisplay.prototype.cancelAnimationFrame = function(id) {
  return window.cancelAnimationFrame(id);
};

VRDisplay.prototype.wrapForFullscreen = function(element) {
  // Don't wrap in iOS.
  if (Util.isIOS()) {
    return element;
  }
  if (!this.fullscreenWrapper_) {
    this.fullscreenWrapper_ = document.createElement('div');
    var cssProperties = [
      'height: ' + Math.min(screen.height, screen.width) + 'px !important',
      'top: 0 !important',
      'left: 0 !important',
      'right: 0 !important',
      'border: 0',
      'margin: 0',
      'padding: 0',
      'z-index: 999999 !important',
      'position: fixed',
    ];
    this.fullscreenWrapper_.setAttribute('style', cssProperties.join('; ') + ';');
    this.fullscreenWrapper_.classList.add('webvr-polyfill-fullscreen-wrapper');
  }

  if (this.fullscreenElement_ == element) {
    return this.fullscreenWrapper_;
  }

  // Remove any previously applied wrappers
  this.removeFullscreenWrapper();

  this.fullscreenElement_ = element;
  var parent = this.fullscreenElement_.parentElement;
  parent.insertBefore(this.fullscreenWrapper_, this.fullscreenElement_);
  parent.removeChild(this.fullscreenElement_);
  this.fullscreenWrapper_.insertBefore(this.fullscreenElement_, this.fullscreenWrapper_.firstChild);
  this.fullscreenElementCachedStyle_ = this.fullscreenElement_.getAttribute('style');

  var self = this;
  function applyFullscreenElementStyle() {
    if (!self.fullscreenElement_) {
      return;
    }

    var cssProperties = [
      'position: absolute',
      'top: 0',
      'left: 0',
      'width: ' + Math.max(screen.width, screen.height) + 'px',
      'height: ' + Math.min(screen.height, screen.width) + 'px',
      'border: 0',
      'margin: 0',
      'padding: 0',
    ];
    self.fullscreenElement_.setAttribute('style', cssProperties.join('; ') + ';');
  }

  applyFullscreenElementStyle();

  return this.fullscreenWrapper_;
};

VRDisplay.prototype.removeFullscreenWrapper = function() {
  if (!this.fullscreenElement_) {
    return;
  }

  var element = this.fullscreenElement_;
  if (this.fullscreenElementCachedStyle_) {
    element.setAttribute('style', this.fullscreenElementCachedStyle_);
  } else {
    element.removeAttribute('style');
  }
  this.fullscreenElement_ = null;
  this.fullscreenElementCachedStyle_ = null;

  var parent = this.fullscreenWrapper_.parentElement;
  this.fullscreenWrapper_.removeChild(element);
  parent.insertBefore(element, this.fullscreenWrapper_);
  parent.removeChild(this.fullscreenWrapper_);

  return element;
};

VRDisplay.prototype.requestPresent = function(layers) {
  if (this.isPresenting) {
    console.error('Already presenting!');
    return;
  }
  var self = this;

  if (!(layers instanceof Array)) {
    if (!hasShowDeprecationWarning) {
      console.warn("Using a deprecated form of requestPresent. Should pass in an array of VRLayers.");
      hasShowDeprecationWarning = true;
    }
    layers = [layers];
  }

  return new Promise(function(resolve, reject) {
    if (!self.capabilities.canPresent) {
      reject(new Error('VRDisplay is not capable of presenting.'));
      return;
    }

    if (layers.length == 0 || layers.length > self.capabilities.maxLayers) {
      reject(new Error('Invalid number of layers.'));
      return;
    }

    self.layer_ = layers[0];

    self.waitingForPresent_ = false;
    if (self.layer_ && self.layer_.source) {
      var fullscreenElement = self.wrapForFullscreen(self.layer_.source);

      function onFullscreenChange() {
        var actualFullscreenElement = Util.getFullscreenElement();

        self.isPresenting = (fullscreenElement === actualFullscreenElement);
        if (self.isPresenting) {
          if (screen.orientation && screen.orientation.lock) {
            screen.orientation.lock('landscape-primary').catch(function(error){
                    console.error('screen.orientation.lock() failed due to', error.message)
            });
          }
          self.waitingForPresent_ = false;
          self.beginPresent_();
          resolve();
        } else {
          if (screen.orientation && screen.orientation.unlock) {
            screen.orientation.unlock();
          }
          self.removeFullscreenWrapper();
          self.wakelock_.release();
          self.endPresent_();
          self.removeFullscreenListeners_();
        }
        self.fireVRDisplayPresentChange_();
      }
      function onFullscreenError() {
        if (!self.waitingForPresent_) {
          return;
        }

        self.removeFullscreenWrapper();
        self.removeFullscreenListeners_();

        self.wakelock_.release();
        self.waitingForPresent_ = false;
        self.isPresenting = false;

        reject(new Error('Unable to present.'));
      }

      self.addFullscreenListeners_(fullscreenElement,
          onFullscreenChange, onFullscreenError);

      if (Util.requestFullscreen(fullscreenElement)) {
        self.wakelock_.request();
        self.waitingForPresent_ = true;
      } else if (Util.isIOS()) {
        // *sigh* Just fake it.
        self.wakelock_.request();
        self.isPresenting = true;
        self.beginPresent_();
        self.fireVRDisplayPresentChange_();
        resolve();
      }
    }

    if (!self.waitingForPresent_ && !Util.isIOS()) {
      Util.exitFullscreen();
      reject(new Error('Unable to present.'));
    }
  });
};

VRDisplay.prototype.exitPresent = function() {
  var wasPresenting = this.isPresenting;
  var self = this;
  this.isPresenting = false;
  this.layer_ = null;
  this.wakelock_.release();

  return new Promise(function(resolve, reject) {
    if (wasPresenting) {
      if (!Util.exitFullscreen() && Util.isIOS()) {
        self.endPresent_();
        self.fireVRDisplayPresentChange_();
      }

      resolve();
    } else {
      reject(new Error('Was not presenting to VRDisplay.'));
    }
  });
};

VRDisplay.prototype.getLayers = function() {
  if (this.layer_) {
    return [this.layer_];
  }
  return [];
};

VRDisplay.prototype.fireVRDisplayPresentChange_ = function() {
  var event = new CustomEvent('vrdisplaypresentchange', {detail: {vrdisplay: this}});
  window.dispatchEvent(event);
};

VRDisplay.prototype.addFullscreenListeners_ = function(element, changeHandler, errorHandler) {
  this.removeFullscreenListeners_();

  this.fullscreenEventTarget_ = element;
  this.fullscreenChangeHandler_ = changeHandler;
  this.fullscreenErrorHandler_ = errorHandler;

  if (changeHandler) {
    element.addEventListener('fullscreenchange', changeHandler, false);
    element.addEventListener('webkitfullscreenchange', changeHandler, false);
    document.addEventListener('mozfullscreenchange', changeHandler, false);
    element.addEventListener('msfullscreenchange', changeHandler, false);
  }

  if (errorHandler) {
    element.addEventListener('fullscreenerror', errorHandler, false);
    element.addEventListener('webkitfullscreenerror', errorHandler, false);
    document.addEventListener('mozfullscreenerror', errorHandler, false);
    element.addEventListener('msfullscreenerror', errorHandler, false);
  }
};

VRDisplay.prototype.removeFullscreenListeners_ = function() {
  if (!this.fullscreenEventTarget_)
    return;

  var element = this.fullscreenEventTarget_;

  if (this.fullscreenChangeHandler_) {
    var changeHandler = this.fullscreenChangeHandler_;
    element.removeEventListener('fullscreenchange', changeHandler, false);
    element.removeEventListener('webkitfullscreenchange', changeHandler, false);
    document.removeEventListener('mozfullscreenchange', changeHandler, false);
    element.removeEventListener('msfullscreenchange', changeHandler, false);
  }

  if (this.fullscreenErrorHandler_) {
    var errorHandler = this.fullscreenErrorHandler_;
    element.removeEventListener('fullscreenerror', errorHandler, false);
    element.removeEventListener('webkitfullscreenerror', errorHandler, false);
    document.removeEventListener('mozfullscreenerror', errorHandler, false);
    element.removeEventListener('msfullscreenerror', errorHandler, false);
  }

  this.fullscreenEventTarget_ = null;
  this.fullscreenChangeHandler_ = null;
  this.fullscreenErrorHandler_ = null;
};

VRDisplay.prototype.beginPresent_ = function() {
  // Override to add custom behavior when presentation begins.
};

VRDisplay.prototype.endPresent_ = function() {
  // Override to add custom behavior when presentation ends.
};

VRDisplay.prototype.submitFrame = function(pose) {
  // Override to add custom behavior for frame submission.
};

VRDisplay.prototype.getEyeParameters = function(whichEye) {
  // Override to return accurate eye parameters if canPresent is true.
  return null;
};

/*
 * Deprecated classes
 */

/**
 * The base class for all VR devices. (Deprecated)
 */
function VRDevice() {
  this.isPolyfilled = true;
  this.hardwareUnitId = 'webvr-polyfill hardwareUnitId';
  this.deviceId = 'webvr-polyfill deviceId';
  this.deviceName = 'webvr-polyfill deviceName';
}

/**
 * The base class for all VR HMD devices. (Deprecated)
 */
function HMDVRDevice() {
}
HMDVRDevice.prototype = new VRDevice();

/**
 * The base class for all VR position sensor devices. (Deprecated)
 */
function PositionSensorVRDevice() {
}
PositionSensorVRDevice.prototype = new VRDevice();

module.exports.VRDisplay = VRDisplay;
module.exports.VRDevice = VRDevice;
module.exports.HMDVRDevice = HMDVRDevice;
module.exports.PositionSensorVRDevice = PositionSensorVRDevice;

},{"./util.js":22,"./wakelock.js":24}],3:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var CardboardUI = _dereq_('./cardboard-ui.js');
var Util = _dereq_('./util.js');
var WGLUPreserveGLState = _dereq_('./deps/wglu-preserve-state.js');

var distortionVS = [
  'attribute vec2 position;',
  'attribute vec3 texCoord;',

  'varying vec2 vTexCoord;',

  'uniform vec4 viewportOffsetScale[2];',

  'void main() {',
  '  vec4 viewport = viewportOffsetScale[int(texCoord.z)];',
  '  vTexCoord = (texCoord.xy * viewport.zw) + viewport.xy;',
  '  gl_Position = vec4( position, 1.0, 1.0 );',
  '}',
].join('\n');

var distortionFS = [
  'precision mediump float;',
  'uniform sampler2D diffuse;',

  'varying vec2 vTexCoord;',

  'void main() {',
  '  gl_FragColor = texture2D(diffuse, vTexCoord);',
  '}',
].join('\n');

/**
 * A mesh-based distorter.
 */
function CardboardDistorter(gl) {
  this.gl = gl;
  this.ctxAttribs = gl.getContextAttributes();

  this.meshWidth = 20;
  this.meshHeight = 20;

  this.bufferScale = WebVRConfig.BUFFER_SCALE;

  this.bufferWidth = gl.drawingBufferWidth;
  this.bufferHeight = gl.drawingBufferHeight;

  // Patching support
  this.realBindFramebuffer = gl.bindFramebuffer;
  this.realEnable = gl.enable;
  this.realDisable = gl.disable;
  this.realColorMask = gl.colorMask;
  this.realClearColor = gl.clearColor;
  this.realViewport = gl.viewport;

  if (!Util.isIOS()) {
    this.realCanvasWidth = Object.getOwnPropertyDescriptor(gl.canvas.__proto__, 'width');
    this.realCanvasHeight = Object.getOwnPropertyDescriptor(gl.canvas.__proto__, 'height');
  }

  this.isPatched = false;

  // State tracking
  this.lastBoundFramebuffer = null;
  this.cullFace = false;
  this.depthTest = false;
  this.blend = false;
  this.scissorTest = false;
  this.stencilTest = false;
  this.viewport = [0, 0, 0, 0];
  this.colorMask = [true, true, true, true];
  this.clearColor = [0, 0, 0, 0];

  this.attribs = {
    position: 0,
    texCoord: 1
  };
  this.program = Util.linkProgram(gl, distortionVS, distortionFS, this.attribs);
  this.uniforms = Util.getProgramUniforms(gl, this.program);

  this.viewportOffsetScale = new Float32Array(8);
  this.setTextureBounds();

  this.vertexBuffer = gl.createBuffer();
  this.indexBuffer = gl.createBuffer();
  this.indexCount = 0;

  this.renderTarget = gl.createTexture();
  this.framebuffer = gl.createFramebuffer();

  this.depthStencilBuffer = null;
  this.depthBuffer = null;
  this.stencilBuffer = null;

  if (this.ctxAttribs.depth && this.ctxAttribs.stencil) {
    this.depthStencilBuffer = gl.createRenderbuffer();
  } else if (this.ctxAttribs.depth) {
    this.depthBuffer = gl.createRenderbuffer();
  } else if (this.ctxAttribs.stencil) {
    this.stencilBuffer = gl.createRenderbuffer();
  }

  this.patch();

  this.onResize();

  if (!WebVRConfig.CARDBOARD_UI_DISABLED) {
    this.cardboardUI = new CardboardUI(gl);
  }
};

/**
 * Tears down all the resources created by the distorter and removes any
 * patches.
 */
CardboardDistorter.prototype.destroy = function() {
  var gl = this.gl;

  this.unpatch();

  gl.deleteProgram(this.program);
  gl.deleteBuffer(this.vertexBuffer);
  gl.deleteBuffer(this.indexBuffer);
  gl.deleteTexture(this.renderTarget);
  gl.deleteFramebuffer(this.framebuffer);
  if (this.depthStencilBuffer) {
    gl.deleteRenderbuffer(this.depthStencilBuffer);
  }
  if (this.depthBuffer) {
    gl.deleteRenderbuffer(this.depthBuffer);
  }
  if (this.stencilBuffer) {
    gl.deleteRenderbuffer(this.stencilBuffer);
  }

  if (this.cardboardUI) {
    this.cardboardUI.destroy();
  }
};


/**
 * Resizes the backbuffer to match the canvas width and height.
 */
CardboardDistorter.prototype.onResize = function() {
  var gl = this.gl;
  var self = this;

  var glState = [
    gl.RENDERBUFFER_BINDING,
    gl.TEXTURE_BINDING_2D, gl.TEXTURE0
  ];

  WGLUPreserveGLState(gl, glState, function(gl) {
    // Bind real backbuffer and clear it once. We don't need to clear it again
    // after that because we're overwriting the same area every frame.
    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, null);

    // Put things in a good state
    if (self.scissorTest) { self.realDisable.call(gl, gl.SCISSOR_TEST); }
    self.realColorMask.call(gl, true, true, true, true);
    self.realViewport.call(gl, 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
    self.realClearColor.call(gl, 0, 0, 0, 1);

    gl.clear(gl.COLOR_BUFFER_BIT);

    // Now bind and resize the fake backbuffer
    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.framebuffer);

    gl.bindTexture(gl.TEXTURE_2D, self.renderTarget);
    gl.texImage2D(gl.TEXTURE_2D, 0, self.ctxAttribs.alpha ? gl.RGBA : gl.RGB,
        self.bufferWidth, self.bufferHeight, 0,
        self.ctxAttribs.alpha ? gl.RGBA : gl.RGB, gl.UNSIGNED_BYTE, null);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, self.renderTarget, 0);

    if (self.ctxAttribs.depth && self.ctxAttribs.stencil) {
      gl.bindRenderbuffer(gl.RENDERBUFFER, self.depthStencilBuffer);
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL,
          self.bufferWidth, self.bufferHeight);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT,
          gl.RENDERBUFFER, self.depthStencilBuffer);
    } else if (self.ctxAttribs.depth) {
      gl.bindRenderbuffer(gl.RENDERBUFFER, self.depthBuffer);
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16,
          self.bufferWidth, self.bufferHeight);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT,
          gl.RENDERBUFFER, self.depthBuffer);
    } else if (self.ctxAttribs.stencil) {
      gl.bindRenderbuffer(gl.RENDERBUFFER, self.stencilBuffer);
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.STENCIL_INDEX8,
          self.bufferWidth, self.bufferHeight);
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT,
          gl.RENDERBUFFER, self.stencilBuffer);
    }

    if (!gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {
      console.error('Framebuffer incomplete!');
    }

    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.lastBoundFramebuffer);

    if (self.scissorTest) { self.realEnable.call(gl, gl.SCISSOR_TEST); }

    self.realColorMask.apply(gl, self.colorMask);
    self.realViewport.apply(gl, self.viewport);
    self.realClearColor.apply(gl, self.clearColor);
  });

  if (this.cardboardUI) {
    this.cardboardUI.onResize();
  }
};

CardboardDistorter.prototype.patch = function() {
  if (this.isPatched) {
    return;
  }

  var self = this;
  var canvas = this.gl.canvas;
  var gl = this.gl;

  if (!Util.isIOS()) {
    canvas.width = Util.getScreenWidth() * this.bufferScale;
    canvas.height = Util.getScreenHeight() * this.bufferScale;

    Object.defineProperty(canvas, 'width', {
      configurable: true,
      enumerable: true,
      get: function() {
        return self.bufferWidth;
      },
      set: function(value) {
        self.bufferWidth = value;
        self.onResize();
      }
    });

    Object.defineProperty(canvas, 'height', {
      configurable: true,
      enumerable: true,
      get: function() {
        return self.bufferHeight;
      },
      set: function(value) {
        self.bufferHeight = value;
        self.onResize();
      }
    });
  }

  this.lastBoundFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);

  if (this.lastBoundFramebuffer == null) {
    this.lastBoundFramebuffer = this.framebuffer;
    this.gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
  }

  this.gl.bindFramebuffer = function(target, framebuffer) {
    self.lastBoundFramebuffer = framebuffer ? framebuffer : self.framebuffer;
    // Silently make calls to bind the default framebuffer bind ours instead.
    self.realBindFramebuffer.call(gl, target, self.lastBoundFramebuffer);
  };

  this.cullFace = gl.getParameter(gl.CULL_FACE);
  this.depthTest = gl.getParameter(gl.DEPTH_TEST);
  this.blend = gl.getParameter(gl.BLEND);
  this.scissorTest = gl.getParameter(gl.SCISSOR_TEST);
  this.stencilTest = gl.getParameter(gl.STENCIL_TEST);

  gl.enable = function(pname) {
    switch (pname) {
      case gl.CULL_FACE: self.cullFace = true; break;
      case gl.DEPTH_TEST: self.depthTest = true; break;
      case gl.BLEND: self.blend = true; break;
      case gl.SCISSOR_TEST: self.scissorTest = true; break;
      case gl.STENCIL_TEST: self.stencilTest = true; break;
    }
    self.realEnable.call(gl, pname);
  };

  gl.disable = function(pname) {
    switch (pname) {
      case gl.CULL_FACE: self.cullFace = false; break;
      case gl.DEPTH_TEST: self.depthTest = false; break;
      case gl.BLEND: self.blend = false; break;
      case gl.SCISSOR_TEST: self.scissorTest = false; break;
      case gl.STENCIL_TEST: self.stencilTest = false; break;
    }
    self.realDisable.call(gl, pname);
  };

  this.colorMask = gl.getParameter(gl.COLOR_WRITEMASK);
  gl.colorMask = function(r, g, b, a) {
    self.colorMask[0] = r;
    self.colorMask[1] = g;
    self.colorMask[2] = b;
    self.colorMask[3] = a;
    self.realColorMask.call(gl, r, g, b, a);
  };

  this.clearColor = gl.getParameter(gl.COLOR_CLEAR_VALUE);
  gl.clearColor = function(r, g, b, a) {
    self.clearColor[0] = r;
    self.clearColor[1] = g;
    self.clearColor[2] = b;
    self.clearColor[3] = a;
    self.realClearColor.call(gl, r, g, b, a);
  };

  this.viewport = gl.getParameter(gl.VIEWPORT);
  gl.viewport = function(x, y, w, h) {
    self.viewport[0] = x;
    self.viewport[1] = y;
    self.viewport[2] = w;
    self.viewport[3] = h;
    self.realViewport.call(gl, x, y, w, h);
  };

  this.isPatched = true;
  Util.safariCssSizeWorkaround(canvas);
};

CardboardDistorter.prototype.unpatch = function() {
  if (!this.isPatched) {
    return;
  }

  var gl = this.gl;
  var canvas = this.gl.canvas;

  if (!Util.isIOS()) {
    Object.defineProperty(canvas, 'width', this.realCanvasWidth);
    Object.defineProperty(canvas, 'height', this.realCanvasHeight);
  }
  canvas.width = this.bufferWidth;
  canvas.height = this.bufferHeight;

  gl.bindFramebuffer = this.realBindFramebuffer;
  gl.enable = this.realEnable;
  gl.disable = this.realDisable;
  gl.colorMask = this.realColorMask;
  gl.clearColor = this.realClearColor;
  gl.viewport = this.realViewport;

  // Check to see if our fake backbuffer is bound and bind the real backbuffer
  // if that's the case.
  if (this.lastBoundFramebuffer == this.framebuffer) {
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  }

  this.isPatched = false;

  setTimeout(function() {
    Util.safariCssSizeWorkaround(canvas);
  }, 1);
};

CardboardDistorter.prototype.setTextureBounds = function(leftBounds, rightBounds) {
  if (!leftBounds) {
    leftBounds = [0, 0, 0.5, 1];
  }

  if (!rightBounds) {
    rightBounds = [0.5, 0, 0.5, 1];
  }

  // Left eye
  this.viewportOffsetScale[0] = leftBounds[0]; // X
  this.viewportOffsetScale[1] = leftBounds[1]; // Y
  this.viewportOffsetScale[2] = leftBounds[2]; // Width
  this.viewportOffsetScale[3] = leftBounds[3]; // Height

  // Right eye
  this.viewportOffsetScale[4] = rightBounds[0]; // X
  this.viewportOffsetScale[5] = rightBounds[1]; // Y
  this.viewportOffsetScale[6] = rightBounds[2]; // Width
  this.viewportOffsetScale[7] = rightBounds[3]; // Height
};

/**
 * Performs distortion pass on the injected backbuffer, rendering it to the real
 * backbuffer.
 */
CardboardDistorter.prototype.submitFrame = function() {
  var gl = this.gl;
  var self = this;

  var glState = [];

  if (!WebVRConfig.DIRTY_SUBMIT_FRAME_BINDINGS) {
    glState.push(
      gl.CURRENT_PROGRAM,
      gl.ARRAY_BUFFER_BINDING,
      gl.ELEMENT_ARRAY_BUFFER_BINDING,
      gl.TEXTURE_BINDING_2D, gl.TEXTURE0
    );
  }

  WGLUPreserveGLState(gl, glState, function(gl) {
    // Bind the real default framebuffer
    self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, null);

    // Make sure the GL state is in a good place
    if (self.cullFace) { self.realDisable.call(gl, gl.CULL_FACE); }
    if (self.depthTest) { self.realDisable.call(gl, gl.DEPTH_TEST); }
    if (self.blend) { self.realDisable.call(gl, gl.BLEND); }
    if (self.scissorTest) { self.realDisable.call(gl, gl.SCISSOR_TEST); }
    if (self.stencilTest) { self.realDisable.call(gl, gl.STENCIL_TEST); }
    self.realColorMask.call(gl, true, true, true, true);
    self.realViewport.call(gl, 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

    // If the backbuffer has an alpha channel clear every frame so the page
    // doesn't show through.
    if (self.ctxAttribs.alpha || Util.isIOS()) {
      self.realClearColor.call(gl, 0, 0, 0, 1);
      gl.clear(gl.COLOR_BUFFER_BIT);
    }

    // Bind distortion program and mesh
    gl.useProgram(self.program);

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, self.indexBuffer);

    gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
    gl.enableVertexAttribArray(self.attribs.position);
    gl.enableVertexAttribArray(self.attribs.texCoord);
    gl.vertexAttribPointer(self.attribs.position, 2, gl.FLOAT, false, 20, 0);
    gl.vertexAttribPointer(self.attribs.texCoord, 3, gl.FLOAT, false, 20, 8);

    gl.activeTexture(gl.TEXTURE0);
    gl.uniform1i(self.uniforms.diffuse, 0);
    gl.bindTexture(gl.TEXTURE_2D, self.renderTarget);

    gl.uniform4fv(self.uniforms.viewportOffsetScale, self.viewportOffsetScale);

    // Draws both eyes
    gl.drawElements(gl.TRIANGLES, self.indexCount, gl.UNSIGNED_SHORT, 0);

    if (self.cardboardUI) {
      self.cardboardUI.renderNoState();
    }

    // Bind the fake default framebuffer again
    self.realBindFramebuffer.call(self.gl, gl.FRAMEBUFFER, self.framebuffer);

    // If preserveDrawingBuffer == false clear the framebuffer
    if (!self.ctxAttribs.preserveDrawingBuffer) {
      self.realClearColor.call(gl, 0, 0, 0, 0);
      gl.clear(gl.COLOR_BUFFER_BIT);
    }

    if (!WebVRConfig.DIRTY_SUBMIT_FRAME_BINDINGS) {
      self.realBindFramebuffer.call(gl, gl.FRAMEBUFFER, self.lastBoundFramebuffer);
    }

    // Restore state
    if (self.cullFace) { self.realEnable.call(gl, gl.CULL_FACE); }
    if (self.depthTest) { self.realEnable.call(gl, gl.DEPTH_TEST); }
    if (self.blend) { self.realEnable.call(gl, gl.BLEND); }
    if (self.scissorTest) { self.realEnable.call(gl, gl.SCISSOR_TEST); }
    if (self.stencilTest) { self.realEnable.call(gl, gl.STENCIL_TEST); }

    self.realColorMask.apply(gl, self.colorMask);
    self.realViewport.apply(gl, self.viewport);
    if (self.ctxAttribs.alpha || !self.ctxAttribs.preserveDrawingBuffer) {
      self.realClearColor.apply(gl, self.clearColor);
    }
  });

  // Workaround for the fact that Safari doesn't allow us to patch the canvas
  // width and height correctly. After each submit frame check to see what the
  // real backbuffer size has been set to and resize the fake backbuffer size
  // to match.
  if (Util.isIOS()) {
    var canvas = gl.canvas;
    if (canvas.width != self.bufferWidth || canvas.height != self.bufferHeight) {
      self.bufferWidth = canvas.width;
      self.bufferHeight = canvas.height;
      self.onResize();
    }
  }
};

/**
 * Call when the deviceInfo has changed. At this point we need
 * to re-calculate the distortion mesh.
 */
CardboardDistorter.prototype.updateDeviceInfo = function(deviceInfo) {
  var gl = this.gl;
  var self = this;

  var glState = [gl.ARRAY_BUFFER_BINDING, gl.ELEMENT_ARRAY_BUFFER_BINDING];
  WGLUPreserveGLState(gl, glState, function(gl) {
    var vertices = self.computeMeshVertices_(self.meshWidth, self.meshHeight, deviceInfo);
    gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

    // Indices don't change based on device parameters, so only compute once.
    if (!self.indexCount) {
      var indices = self.computeMeshIndices_(self.meshWidth, self.meshHeight);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, self.indexBuffer);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
      self.indexCount = indices.length;
    }
  });
};

/**
 * Build the distortion mesh vertices.
 * Based on code from the Unity cardboard plugin.
 */
CardboardDistorter.prototype.computeMeshVertices_ = function(width, height, deviceInfo) {
  var vertices = new Float32Array(2 * width * height * 5);

  var lensFrustum = deviceInfo.getLeftEyeVisibleTanAngles();
  var noLensFrustum = deviceInfo.getLeftEyeNoLensTanAngles();
  var viewport = deviceInfo.getLeftEyeVisibleScreenRect(noLensFrustum);
  var vidx = 0;
  var iidx = 0;
  for (var e = 0; e < 2; e++) {
    for (var j = 0; j < height; j++) {
      for (var i = 0; i < width; i++, vidx++) {
        var u = i / (width - 1);
        var v = j / (height - 1);

        // Grid points regularly spaced in StreoScreen, and barrel distorted in
        // the mesh.
        var s = u;
        var t = v;
        var x = Util.lerp(lensFrustum[0], lensFrustum[2], u);
        var y = Util.lerp(lensFrustum[3], lensFrustum[1], v);
        var d = Math.sqrt(x * x + y * y);
        var r = deviceInfo.distortion.distortInverse(d);
        var p = x * r / d;
        var q = y * r / d;
        u = (p - noLensFrustum[0]) / (noLensFrustum[2] - noLensFrustum[0]);
        v = (q - noLensFrustum[3]) / (noLensFrustum[1] - noLensFrustum[3]);

        // Convert u,v to mesh screen coordinates.
        var aspect = deviceInfo.device.widthMeters / deviceInfo.device.heightMeters;

        // FIXME: The original Unity plugin multiplied U by the aspect ratio
        // and didn't multiply either value by 2, but that seems to get it
        // really close to correct looking for me. I hate this kind of "Don't
        // know why it works" code though, and wold love a more logical
        // explanation of what needs to happen here.
        u = (viewport.x + u * viewport.width - 0.5) * 2.0; //* aspect;
        v = (viewport.y + v * viewport.height - 0.5) * 2.0;

        vertices[(vidx * 5) + 0] = u; // position.x
        vertices[(vidx * 5) + 1] = v; // position.y
        vertices[(vidx * 5) + 2] = s; // texCoord.x
        vertices[(vidx * 5) + 3] = t; // texCoord.y
        vertices[(vidx * 5) + 4] = e; // texCoord.z (viewport index)
      }
    }
    var w = lensFrustum[2] - lensFrustum[0];
    lensFrustum[0] = -(w + lensFrustum[0]);
    lensFrustum[2] = w - lensFrustum[2];
    w = noLensFrustum[2] - noLensFrustum[0];
    noLensFrustum[0] = -(w + noLensFrustum[0]);
    noLensFrustum[2] = w - noLensFrustum[2];
    viewport.x = 1 - (viewport.x + viewport.width);
  }
  return vertices;
}

/**
 * Build the distortion mesh indices.
 * Based on code from the Unity cardboard plugin.
 */
CardboardDistorter.prototype.computeMeshIndices_ = function(width, height) {
  var indices = new Uint16Array(2 * (width - 1) * (height - 1) * 6);
  var halfwidth = width / 2;
  var halfheight = height / 2;
  var vidx = 0;
  var iidx = 0;
  for (var e = 0; e < 2; e++) {
    for (var j = 0; j < height; j++) {
      for (var i = 0; i < width; i++, vidx++) {
        if (i == 0 || j == 0)
          continue;
        // Build a quad.  Lower right and upper left quadrants have quads with
        // the triangle diagonal flipped to get the vignette to interpolate
        // correctly.
        if ((i <= halfwidth) == (j <= halfheight)) {
          // Quad diagonal lower left to upper right.
          indices[iidx++] = vidx;
          indices[iidx++] = vidx - width - 1;
          indices[iidx++] = vidx - width;
          indices[iidx++] = vidx - width - 1;
          indices[iidx++] = vidx;
          indices[iidx++] = vidx - 1;
        } else {
          // Quad diagonal upper left to lower right.
          indices[iidx++] = vidx - 1;
          indices[iidx++] = vidx - width;
          indices[iidx++] = vidx;
          indices[iidx++] = vidx - width;
          indices[iidx++] = vidx - 1;
          indices[iidx++] = vidx - width - 1;
        }
      }
    }
  }
  return indices;
};

CardboardDistorter.prototype.getOwnPropertyDescriptor_ = function(proto, attrName) {
  var descriptor = Object.getOwnPropertyDescriptor(proto, attrName);
  // In some cases (ahem... Safari), the descriptor returns undefined get and
  // set fields. In this case, we need to create a synthetic property
  // descriptor. This works around some of the issues in
  // https://github.com/borismus/webvr-polyfill/issues/46
  if (descriptor.get === undefined || descriptor.set === undefined) {
    descriptor.configurable = true;
    descriptor.enumerable = true;
    descriptor.get = function() {
      return this.getAttribute(attrName);
    };
    descriptor.set = function(val) {
      this.setAttribute(attrName, val);
    };
  }
  return descriptor;
};

module.exports = CardboardDistorter;

},{"./cardboard-ui.js":4,"./deps/wglu-preserve-state.js":6,"./util.js":22}],4:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = _dereq_('./util.js');
var WGLUPreserveGLState = _dereq_('./deps/wglu-preserve-state.js');

var uiVS = [
  'attribute vec2 position;',

  'uniform mat4 projectionMat;',

  'void main() {',
  '  gl_Position = projectionMat * vec4( position, -1.0, 1.0 );',
  '}',
].join('\n');

var uiFS = [
  'precision mediump float;',

  'uniform vec4 color;',

  'void main() {',
  '  gl_FragColor = color;',
  '}',
].join('\n');

var DEG2RAD = Math.PI/180.0;

// The gear has 6 identical sections, each spanning 60 degrees.
var kAnglePerGearSection = 60;

// Half-angle of the span of the outer rim.
var kOuterRimEndAngle = 12;

// Angle between the middle of the outer rim and the start of the inner rim.
var kInnerRimBeginAngle = 20;

// Distance from center to outer rim, normalized so that the entire model
// fits in a [-1, 1] x [-1, 1] square.
var kOuterRadius = 1;

// Distance from center to depressed rim, in model units.
var kMiddleRadius = 0.75;

// Radius of the inner hollow circle, in model units.
var kInnerRadius = 0.3125;

// Center line thickness in DP.
var kCenterLineThicknessDp = 4;

// Button width in DP.
var kButtonWidthDp = 28;

// Factor to scale the touch area that responds to the touch.
var kTouchSlopFactor = 1.5;

var Angles = [
  0, kOuterRimEndAngle, kInnerRimBeginAngle,
  kAnglePerGearSection - kInnerRimBeginAngle,
  kAnglePerGearSection - kOuterRimEndAngle
];

/**
 * Renders the alignment line and "options" gear. It is assumed that the canvas
 * this is rendered into covers the entire screen (or close to it.)
 */
function CardboardUI(gl) {
  this.gl = gl;

  this.attribs = {
    position: 0
  };
  this.program = Util.linkProgram(gl, uiVS, uiFS, this.attribs);
  this.uniforms = Util.getProgramUniforms(gl, this.program);

  this.vertexBuffer = gl.createBuffer();
  this.gearOffset = 0;
  this.gearVertexCount = 0;
  this.arrowOffset = 0;
  this.arrowVertexCount = 0;

  this.projMat = new Float32Array(16);

  this.listener = null;

  this.onResize();
};

/**
 * Tears down all the resources created by the UI renderer.
 */
CardboardUI.prototype.destroy = function() {
  var gl = this.gl;

  if (this.listener) {
    gl.canvas.removeEventListener('click', this.listener, false);
  }

  gl.deleteProgram(this.program);
  gl.deleteBuffer(this.vertexBuffer);
};

/**
 * Adds a listener to clicks on the gear and back icons
 */
CardboardUI.prototype.listen = function(optionsCallback, backCallback) {
  var canvas = this.gl.canvas;
  this.listener = function(event) {
    var midline = canvas.clientWidth / 2;
    var buttonSize = kButtonWidthDp * kTouchSlopFactor;
    // Check to see if the user clicked on (or around) the gear icon
    if (event.clientX > midline - buttonSize &&
        event.clientX < midline + buttonSize &&
        event.clientY > canvas.clientHeight - buttonSize) {
      optionsCallback(event);
    }
    // Check to see if the user clicked on (or around) the back icon
    else if (event.clientX < buttonSize && event.clientY < buttonSize) {
      backCallback(event);
    }
  };
  canvas.addEventListener('click', this.listener, false);
};

/**
 * Builds the UI mesh.
 */
CardboardUI.prototype.onResize = function() {
  var gl = this.gl;
  var self = this;

  var glState = [
    gl.ARRAY_BUFFER_BINDING
  ];

  WGLUPreserveGLState(gl, glState, function(gl) {
    var vertices = [];

    var midline = gl.drawingBufferWidth / 2;

    // Assumes your canvas width and height is scaled proportionately.
    // TODO(smus): The following causes buttons to become huge on iOS, but seems
    // like the right thing to do. For now, added a hack. But really, investigate why.
    var dps = (gl.drawingBufferWidth / (screen.width * window.devicePixelRatio));
    if (!Util.isIOS()) {
      dps *= window.devicePixelRatio;
    }

    var lineWidth = kCenterLineThicknessDp * dps / 2;
    var buttonSize = kButtonWidthDp * kTouchSlopFactor * dps;
    var buttonScale = kButtonWidthDp * dps / 2;
    var buttonBorder = ((kButtonWidthDp * kTouchSlopFactor) - kButtonWidthDp) * dps;

    // Build centerline
    vertices.push(midline - lineWidth, buttonSize);
    vertices.push(midline - lineWidth, gl.drawingBufferHeight);
    vertices.push(midline + lineWidth, buttonSize);
    vertices.push(midline + lineWidth, gl.drawingBufferHeight);

    // Build gear
    self.gearOffset = (vertices.length / 2);

    function addGearSegment(theta, r) {
      var angle = (90 - theta) * DEG2RAD;
      var x = Math.cos(angle);
      var y = Math.sin(angle);
      vertices.push(kInnerRadius * x * buttonScale + midline, kInnerRadius * y * buttonScale + buttonScale);
      vertices.push(r * x * buttonScale + midline, r * y * buttonScale + buttonScale);
    }

    for (var i = 0; i <= 6; i++) {
      var segmentTheta = i * kAnglePerGearSection;

      addGearSegment(segmentTheta, kOuterRadius);
      addGearSegment(segmentTheta + kOuterRimEndAngle, kOuterRadius);
      addGearSegment(segmentTheta + kInnerRimBeginAngle, kMiddleRadius);
      addGearSegment(segmentTheta + (kAnglePerGearSection - kInnerRimBeginAngle), kMiddleRadius);
      addGearSegment(segmentTheta + (kAnglePerGearSection - kOuterRimEndAngle), kOuterRadius);
    }

    self.gearVertexCount = (vertices.length / 2) - self.gearOffset;

    // Build back arrow
    self.arrowOffset = (vertices.length / 2);

    function addArrowVertex(x, y) {
      vertices.push(buttonBorder + x, gl.drawingBufferHeight - buttonBorder - y);
    }

    var angledLineWidth = lineWidth / Math.sin(45 * DEG2RAD);

    addArrowVertex(0, buttonScale);
    addArrowVertex(buttonScale, 0);
    addArrowVertex(buttonScale + angledLineWidth, angledLineWidth);
    addArrowVertex(angledLineWidth, buttonScale + angledLineWidth);

    addArrowVertex(angledLineWidth, buttonScale - angledLineWidth);
    addArrowVertex(0, buttonScale);
    addArrowVertex(buttonScale, buttonScale * 2);
    addArrowVertex(buttonScale + angledLineWidth, (buttonScale * 2) - angledLineWidth);

    addArrowVertex(angledLineWidth, buttonScale - angledLineWidth);
    addArrowVertex(0, buttonScale);

    addArrowVertex(angledLineWidth, buttonScale - lineWidth);
    addArrowVertex(kButtonWidthDp * dps, buttonScale - lineWidth);
    addArrowVertex(angledLineWidth, buttonScale + lineWidth);
    addArrowVertex(kButtonWidthDp * dps, buttonScale + lineWidth);

    self.arrowVertexCount = (vertices.length / 2) - self.arrowOffset;

    // Buffer data
    gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
  });
};

/**
 * Performs distortion pass on the injected backbuffer, rendering it to the real
 * backbuffer.
 */
CardboardUI.prototype.render = function() {
  var gl = this.gl;
  var self = this;

  var glState = [
    gl.CULL_FACE,
    gl.DEPTH_TEST,
    gl.BLEND,
    gl.SCISSOR_TEST,
    gl.STENCIL_TEST,
    gl.COLOR_WRITEMASK,
    gl.VIEWPORT,

    gl.CURRENT_PROGRAM,
    gl.ARRAY_BUFFER_BINDING
  ];

  WGLUPreserveGLState(gl, glState, function(gl) {
    // Make sure the GL state is in a good place
    gl.disable(gl.CULL_FACE);
    gl.disable(gl.DEPTH_TEST);
    gl.disable(gl.BLEND);
    gl.disable(gl.SCISSOR_TEST);
    gl.disable(gl.STENCIL_TEST);
    gl.colorMask(true, true, true, true);
    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

    self.renderNoState();
  });
};

CardboardUI.prototype.renderNoState = function() {
  var gl = this.gl;

  // Bind distortion program and mesh
  gl.useProgram(this.program);

  gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
  gl.enableVertexAttribArray(this.attribs.position);
  gl.vertexAttribPointer(this.attribs.position, 2, gl.FLOAT, false, 8, 0);

  gl.uniform4f(this.uniforms.color, 1.0, 1.0, 1.0, 1.0);

  Util.orthoMatrix(this.projMat, 0, gl.drawingBufferWidth, 0, gl.drawingBufferHeight, 0.1, 1024.0);
  gl.uniformMatrix4fv(this.uniforms.projectionMat, false, this.projMat);

  // Draws UI element
  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  gl.drawArrays(gl.TRIANGLE_STRIP, this.gearOffset, this.gearVertexCount);
  gl.drawArrays(gl.TRIANGLE_STRIP, this.arrowOffset, this.arrowVertexCount);
};

module.exports = CardboardUI;

},{"./deps/wglu-preserve-state.js":6,"./util.js":22}],5:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var CardboardDistorter = _dereq_('./cardboard-distorter.js');
var CardboardUI = _dereq_('./cardboard-ui.js');
var DeviceInfo = _dereq_('./device-info.js');
var Dpdb = _dereq_('./dpdb/dpdb.js');
var FusionPoseSensor = _dereq_('./sensor-fusion/fusion-pose-sensor.js');
var RotateInstructions = _dereq_('./rotate-instructions.js');
var ViewerSelector = _dereq_('./viewer-selector.js');
var VRDisplay = _dereq_('./base.js').VRDisplay;
var Util = _dereq_('./util.js');

var Eye = {
  LEFT: 'left',
  RIGHT: 'right'
};

/**
 * VRDisplay based on mobile device parameters and DeviceMotion APIs.
 */
function CardboardVRDisplay() {
  this.displayName = 'Cardboard VRDisplay (webvr-polyfill)';

  this.capabilities.hasOrientation = true;
  this.capabilities.canPresent = true;

  // "Private" members.
  this.bufferScale_ = WebVRConfig.BUFFER_SCALE;
  this.poseSensor_ = new FusionPoseSensor();
  this.distorter_ = null;
  this.cardboardUI_ = null;

  this.dpdb_ = new Dpdb(true, this.onDeviceParamsUpdated_.bind(this));
  this.deviceInfo_ = new DeviceInfo(this.dpdb_.getDeviceParams());

  this.viewerSelector_ = new ViewerSelector();
  this.viewerSelector_.on('change', this.onViewerChanged_.bind(this));

  // Set the correct initial viewer.
  this.deviceInfo_.setViewer(this.viewerSelector_.getCurrentViewer());

  if (!WebVRConfig.ROTATE_INSTRUCTIONS_DISABLED) {
    this.rotateInstructions_ = new RotateInstructions();
  }

  if (Util.isIOS()) {
    // Listen for resize events to workaround this awful Safari bug.
    window.addEventListener('resize', this.onResize_.bind(this));
  }
}
CardboardVRDisplay.prototype = new VRDisplay();

CardboardVRDisplay.prototype.getImmediatePose = function() {
  return {
    position: this.poseSensor_.getPosition(),
    orientation: this.poseSensor_.getOrientation(),
    linearVelocity: null,
    linearAcceleration: null,
    angularVelocity: null,
    angularAcceleration: null
  };
};

CardboardVRDisplay.prototype.resetPose = function() {
  this.poseSensor_.resetPose();
};

CardboardVRDisplay.prototype.getEyeParameters = function(whichEye) {
  var offset = [this.deviceInfo_.viewer.interLensDistance * 0.5, 0.0, 0.0];
  var fieldOfView;

  // TODO: FoV can be a little expensive to compute. Cache when device params change.
  if (whichEye == Eye.LEFT) {
    offset[0] *= -1.0;
    fieldOfView = this.deviceInfo_.getFieldOfViewLeftEye();
  } else if (whichEye == Eye.RIGHT) {
    fieldOfView = this.deviceInfo_.getFieldOfViewRightEye();
  } else {
    console.error('Invalid eye provided: %s', whichEye);
    return null;
  }

  return {
    fieldOfView: fieldOfView,
    offset: offset,
    // TODO: Should be able to provide better values than these.
    renderWidth: this.deviceInfo_.device.width * 0.5 * this.bufferScale_,
    renderHeight: this.deviceInfo_.device.height * this.bufferScale_,
  };
};

CardboardVRDisplay.prototype.onDeviceParamsUpdated_ = function(newParams) {
  console.log('DPDB reported that device params were updated.');
  this.deviceInfo_.updateDeviceParams(newParams);

  if (this.distorter_) {
    this.distorter.updateDeviceInfo(this.deviceInfo_);
  }
};

CardboardVRDisplay.prototype.beginPresent_ = function() {
  var gl = this.layer_.source.getContext('webgl');
  if (!gl)
    gl = this.layer_.source.getContext('experimental-webgl');
  if (!gl)
    gl = this.layer_.source.getContext('webgl2');

  if (!gl)
    return; // Can't do distortion without a WebGL context.

  // Provides a way to opt out of distortion
  if (this.layer_.predistorted) {
    if (!WebVRConfig.CARDBOARD_UI_DISABLED) {
      gl.canvas.width = Util.getScreenWidth() * this.bufferScale_;
      gl.canvas.height = Util.getScreenHeight() * this.bufferScale_;
      this.cardboardUI_ = new CardboardUI(gl);
    }
  } else {
    // Create a new distorter for the target context
    this.distorter_ = new CardboardDistorter(gl);
    this.distorter_.updateDeviceInfo(this.deviceInfo_);
    this.cardboardUI_ = this.distorter_.cardboardUI;

    if (this.layer_.leftBounds || this.layer_.rightBounds) {
      this.distorter_.setTextureBounds(this.layer_.leftBounds, this.layer_.rightBounds);
    }
  }

  if (this.cardboardUI_) {
    this.cardboardUI_.listen(function(e) {
      // Options clicked.
      this.viewerSelector_.show(this.layer_.source.parentElement);
      e.stopPropagation();
      e.preventDefault();
    }.bind(this), function(e) {
      // Back clicked.
      this.exitPresent();
      e.stopPropagation();
      e.preventDefault();
    }.bind(this));
  }

  if (this.rotateInstructions_) {
    if (Util.isLandscapeMode() && Util.isMobile()) {
      // In landscape mode, temporarily show the "put into Cardboard"
      // interstitial. Otherwise, do the default thing.
      this.rotateInstructions_.showTemporarily(3000, this.layer_.source.parentElement);
    } else {
      this.rotateInstructions_.update();
    }
  }

  // Listen for orientation change events in order to show interstitial.
  this.orientationHandler = this.onOrientationChange_.bind(this);
  window.addEventListener('orientationchange', this.orientationHandler);

  // Fire this event initially, to give geometry-distortion clients the chance
  // to do something custom.
  this.fireVRDisplayDeviceParamsChange_();
};

CardboardVRDisplay.prototype.endPresent_ = function() {
  if (this.distorter_) {
    this.distorter_.destroy();
    this.distorter_ = null;
  }
  if (this.cardboardUI_) {
    this.cardboardUI_.destroy();
    this.cardboardUI_ = null;
  }

  if (this.rotateInstructions_) {
    this.rotateInstructions_.hide();
  }
  this.viewerSelector_.hide();

  window.removeEventListener('orientationchange', this.orientationHandler);
};

CardboardVRDisplay.prototype.submitFrame = function(pose) {
  if (this.distorter_) {
    this.distorter_.submitFrame();
  } else if (this.cardboardUI_ && this.layer_) {
    // Hack for predistorted: true.
    var canvas = this.layer_.source.getContext('webgl').canvas;
    if (canvas.width != this.lastWidth || canvas.height != this.lastHeight) {
      this.cardboardUI_.onResize();
    }
    this.lastWidth = canvas.width;
    this.lastHeight = canvas.height;

    // Render the Cardboard UI.
    this.cardboardUI_.render();
  }
};

CardboardVRDisplay.prototype.onOrientationChange_ = function(e) {
  console.log('onOrientationChange_');

  // Hide the viewer selector.
  this.viewerSelector_.hide();

  // Update the rotate instructions.
  if (this.rotateInstructions_) {
    this.rotateInstructions_.update();
  }

  this.onResize_();
};

CardboardVRDisplay.prototype.onResize_ = function(e) {
  if (this.layer_) {
    var gl = this.layer_.source.getContext('webgl');
    // Size the CSS canvas.
    // Added padding on right and bottom because iPhone 5 will not
    // hide the URL bar unless content is bigger than the screen.
    // This will not be visible as long as the container element (e.g. body)
    // is set to 'overflow: hidden'.
    var cssProperties = [
      'position: absolute',
      'top: 0',
      'left: 0',
      'width: ' + Math.max(screen.width, screen.height) + 'px',
      'height: ' + Math.min(screen.height, screen.width) + 'px',
      'border: 0',
      'margin: 0',
      'padding: 0 10px 10px 0',
    ];
    gl.canvas.setAttribute('style', cssProperties.join('; ') + ';');

    Util.safariCssSizeWorkaround(gl.canvas);
  }
};

CardboardVRDisplay.prototype.onViewerChanged_ = function(viewer) {
  this.deviceInfo_.setViewer(viewer);

  if (this.distorter_) {
    // Update the distortion appropriately.
    this.distorter_.updateDeviceInfo(this.deviceInfo_);
  }

  // Fire a new event containing viewer and device parameters for clients that
  // want to implement their own geometry-based distortion.
  this.fireVRDisplayDeviceParamsChange_();
};

CardboardVRDisplay.prototype.fireVRDisplayDeviceParamsChange_ = function() {
  var event = new CustomEvent('vrdisplaydeviceparamschange', {
    detail: {
      vrdisplay: this,
      deviceInfo: this.deviceInfo_,
    }
  });
  window.dispatchEvent(event);
};

module.exports = CardboardVRDisplay;

},{"./base.js":2,"./cardboard-distorter.js":3,"./cardboard-ui.js":4,"./device-info.js":7,"./dpdb/dpdb.js":11,"./rotate-instructions.js":16,"./sensor-fusion/fusion-pose-sensor.js":18,"./util.js":22,"./viewer-selector.js":23}],6:[function(_dereq_,module,exports){
/*
Copyright (c) 2016, Brandon Jones.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/*
Caches specified GL state, runs a callback, and restores the cached state when
done.

Example usage:

var savedState = [
  gl.ARRAY_BUFFER_BINDING,

  // TEXTURE_BINDING_2D or _CUBE_MAP must always be followed by the texure unit.
  gl.TEXTURE_BINDING_2D, gl.TEXTURE0,

  gl.CLEAR_COLOR,
];
// After this call the array buffer, texture unit 0, active texture, and clear
// color will be restored. The viewport will remain changed, however, because
// gl.VIEWPORT was not included in the savedState list.
WGLUPreserveGLState(gl, savedState, function(gl) {
  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, ....);

  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texImage2D(gl.TEXTURE_2D, ...);

  gl.clearColor(1, 0, 0, 1);
  gl.clear(gl.COLOR_BUFFER_BIT);
});

Note that this is not intended to be fast. Managing state in your own code to
avoid redundant state setting and querying will always be faster. This function
is most useful for cases where you may not have full control over the WebGL
calls being made, such as tooling or effect injectors.
*/

function WGLUPreserveGLState(gl, bindings, callback) {
  if (!bindings) {
    callback(gl);
    return;
  }

  var boundValues = [];

  var activeTexture = null;
  for (var i = 0; i < bindings.length; ++i) {
    var binding = bindings[i];
    switch (binding) {
      case gl.TEXTURE_BINDING_2D:
      case gl.TEXTURE_BINDING_CUBE_MAP:
        var textureUnit = bindings[++i];
        if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31) {
          console.error("TEXTURE_BINDING_2D or TEXTURE_BINDING_CUBE_MAP must be followed by a valid texture unit");
          boundValues.push(null, null);
          break;
        }
        if (!activeTexture) {
          activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);
        }
        gl.activeTexture(textureUnit);
        boundValues.push(gl.getParameter(binding), null);
        break;
      case gl.ACTIVE_TEXTURE:
        activeTexture = gl.getParameter(gl.ACTIVE_TEXTURE);
        boundValues.push(null);
        break;
      default:
        boundValues.push(gl.getParameter(binding));
        break;
    }
  }

  callback(gl);

  for (var i = 0; i < bindings.length; ++i) {
    var binding = bindings[i];
    var boundValue = boundValues[i];
    switch (binding) {
      case gl.ACTIVE_TEXTURE:
        break; // Ignore this binding, since we special-case it to happen last.
      case gl.ARRAY_BUFFER_BINDING:
        gl.bindBuffer(gl.ARRAY_BUFFER, boundValue);
        break;
      case gl.COLOR_CLEAR_VALUE:
        gl.clearColor(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
        break;
      case gl.COLOR_WRITEMASK:
        gl.colorMask(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
        break;
      case gl.CURRENT_PROGRAM:
        gl.useProgram(boundValue);
        break;
      case gl.ELEMENT_ARRAY_BUFFER_BINDING:
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, boundValue);
        break;
      case gl.FRAMEBUFFER_BINDING:
        gl.bindFramebuffer(gl.FRAMEBUFFER, boundValue);
        break;
      case gl.RENDERBUFFER_BINDING:
        gl.bindRenderbuffer(gl.RENDERBUFFER, boundValue);
        break;
      case gl.TEXTURE_BINDING_2D:
        var textureUnit = bindings[++i];
        if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31)
          break;
        gl.activeTexture(textureUnit);
        gl.bindTexture(gl.TEXTURE_2D, boundValue);
        break;
      case gl.TEXTURE_BINDING_CUBE_MAP:
        var textureUnit = bindings[++i];
        if (textureUnit < gl.TEXTURE0 || textureUnit > gl.TEXTURE31)
          break;
        gl.activeTexture(textureUnit);
        gl.bindTexture(gl.TEXTURE_CUBE_MAP, boundValue);
        break;
      case gl.VIEWPORT:
        gl.viewport(boundValue[0], boundValue[1], boundValue[2], boundValue[3]);
        break;
      case gl.BLEND:
      case gl.CULL_FACE:
      case gl.DEPTH_TEST:
      case gl.SCISSOR_TEST:
      case gl.STENCIL_TEST:
        if (boundValue) {
          gl.enable(binding);
        } else {
          gl.disable(binding);
        }
        break;
      default:
        console.log("No GL restore behavior for 0x" + binding.toString(16));
        break;
    }

    if (activeTexture) {
      gl.activeTexture(activeTexture);
    }
  }
}

module.exports = WGLUPreserveGLState;
},{}],7:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Distortion = _dereq_('./distortion/distortion.js');
var MathUtil = _dereq_('./math-util.js');
var Util = _dereq_('./util.js');

function Device(params) {
  this.width = params.width || Util.getScreenWidth();
  this.height = params.height || Util.getScreenHeight();
  this.widthMeters = params.widthMeters;
  this.heightMeters = params.heightMeters;
  this.bevelMeters = params.bevelMeters;
}


// Fallback Android device (based on Nexus 5 measurements) for use when
// we can't recognize an Android device.
var DEFAULT_ANDROID = new Device({
  widthMeters: 0.110,
  heightMeters: 0.062,
  bevelMeters: 0.004
});

// Fallback iOS device (based on iPhone6) for use when
// we can't recognize an Android device.
var DEFAULT_IOS = new Device({
  widthMeters: 0.1038,
  heightMeters: 0.0584,
  bevelMeters: 0.004
});


var Viewers = {
  CardboardV1: new CardboardViewer({
    id: 'CardboardV1',
    label: 'Cardboard I/O 2014',
    fov: 40,
    interLensDistance: 0.060,
    baselineLensDistance: 0.035,
    screenLensDistance: 0.042,
    distortionCoefficients: [0.441, 0.156],
    inverseCoefficients: [-0.4410035, 0.42756155, -0.4804439, 0.5460139,
      -0.58821183, 0.5733938, -0.48303202, 0.33299083, -0.17573841,
      0.0651772, -0.01488963, 0.001559834]
  }),
  CardboardV2: new CardboardViewer({
    id: 'CardboardV2',
    label: 'Cardboard I/O 2015',
    fov: 60,
    interLensDistance: 0.064,
    baselineLensDistance: 0.035,
    screenLensDistance: 0.039,
    distortionCoefficients: [0.34, 0.55],
    inverseCoefficients: [-0.33836704, -0.18162185, 0.862655, -1.2462051,
      1.0560602, -0.58208317, 0.21609078, -0.05444823, 0.009177956,
      -9.904169E-4, 6.183535E-5, -1.6981803E-6]
  })
};


var DEFAULT_LEFT_CENTER = {x: 0.5, y: 0.5};
var DEFAULT_RIGHT_CENTER = {x: 0.5, y: 0.5};

/**
 * Manages information about the device and the viewer.
 *
 * deviceParams indicates the parameters of the device to use (generally
 * obtained from dpdb.getDeviceParams()). Can be null to mean no device
 * params were found.
 */
function DeviceInfo(deviceParams) {
  this.viewer = Viewers.CardboardV2;
  this.updateDeviceParams(deviceParams);
  this.distortion = new Distortion(this.viewer.distortionCoefficients);
}

DeviceInfo.prototype.updateDeviceParams = function(deviceParams) {
  this.device = this.determineDevice_(deviceParams) || this.device;
};

DeviceInfo.prototype.getDevice = function() {
  return this.device;
};

DeviceInfo.prototype.setViewer = function(viewer) {
  this.viewer = viewer;
  this.distortion = new Distortion(this.viewer.distortionCoefficients);
};

DeviceInfo.prototype.determineDevice_ = function(deviceParams) {
  if (!deviceParams) {
    // No parameters, so use a default.
    if (Util.isIOS()) {
      console.warn('Using fallback iOS device measurements.');
      return DEFAULT_IOS;
    } else {
      console.warn('Using fallback Android device measurements.');
      return DEFAULT_ANDROID;
    }
  }

  // Compute device screen dimensions based on deviceParams.
  var METERS_PER_INCH = 0.0254;
  var metersPerPixelX = METERS_PER_INCH / deviceParams.xdpi;
  var metersPerPixelY = METERS_PER_INCH / deviceParams.ydpi;
  var width = Util.getScreenWidth();
  var height = Util.getScreenHeight();
  return new Device({
    widthMeters: metersPerPixelX * width,
    heightMeters: metersPerPixelY * height,
    bevelMeters: deviceParams.bevelMm * 0.001,
  });
};

/**
 * Calculates field of view for the left eye.
 */
DeviceInfo.prototype.getDistortedFieldOfViewLeftEye = function() {
  var viewer = this.viewer;
  var device = this.device;
  var distortion = this.distortion;

  // Device.height and device.width for device in portrait mode, so transpose.
  var eyeToScreenDistance = viewer.screenLensDistance;

  var outerDist = (device.widthMeters - viewer.interLensDistance) / 2;
  var innerDist = viewer.interLensDistance / 2;
  var bottomDist = viewer.baselineLensDistance - device.bevelMeters;
  var topDist = device.heightMeters - bottomDist;

  var outerAngle = MathUtil.radToDeg * Math.atan(
      distortion.distort(outerDist / eyeToScreenDistance));
  var innerAngle = MathUtil.radToDeg * Math.atan(
      distortion.distort(innerDist / eyeToScreenDistance));
  var bottomAngle = MathUtil.radToDeg * Math.atan(
      distortion.distort(bottomDist / eyeToScreenDistance));
  var topAngle = MathUtil.radToDeg * Math.atan(
      distortion.distort(topDist / eyeToScreenDistance));

  return {
    leftDegrees: Math.min(outerAngle, viewer.fov),
    rightDegrees: Math.min(innerAngle, viewer.fov),
    downDegrees: Math.min(bottomAngle, viewer.fov),
    upDegrees: Math.min(topAngle, viewer.fov)
  };
};

/**
 * Calculates the tan-angles from the maximum FOV for the left eye for the
 * current device and screen parameters.
 */
DeviceInfo.prototype.getLeftEyeVisibleTanAngles = function() {
  var viewer = this.viewer;
  var device = this.device;
  var distortion = this.distortion;

  // Tan-angles from the max FOV.
  var fovLeft = Math.tan(-MathUtil.degToRad * viewer.fov);
  var fovTop = Math.tan(MathUtil.degToRad * viewer.fov);
  var fovRight = Math.tan(MathUtil.degToRad * viewer.fov);
  var fovBottom = Math.tan(-MathUtil.degToRad * viewer.fov);
  // Viewport size.
  var halfWidth = device.widthMeters / 4;
  var halfHeight = device.heightMeters / 2;
  // Viewport center, measured from left lens position.
  var verticalLensOffset = (viewer.baselineLensDistance - device.bevelMeters - halfHeight);
  var centerX = viewer.interLensDistance / 2 - halfWidth;
  var centerY = -verticalLensOffset;
  var centerZ = viewer.screenLensDistance;
  // Tan-angles of the viewport edges, as seen through the lens.
  var screenLeft = distortion.distort((centerX - halfWidth) / centerZ);
  var screenTop = distortion.distort((centerY + halfHeight) / centerZ);
  var screenRight = distortion.distort((centerX + halfWidth) / centerZ);
  var screenBottom = distortion.distort((centerY - halfHeight) / centerZ);
  // Compare the two sets of tan-angles and take the value closer to zero on each side.
  var result = new Float32Array(4);
  result[0] = Math.max(fovLeft, screenLeft);
  result[1] = Math.min(fovTop, screenTop);
  result[2] = Math.min(fovRight, screenRight);
  result[3] = Math.max(fovBottom, screenBottom);
  return result;
};

/**
 * Calculates the tan-angles from the maximum FOV for the left eye for the
 * current device and screen parameters, assuming no lenses.
 */
DeviceInfo.prototype.getLeftEyeNoLensTanAngles = function() {
  var viewer = this.viewer;
  var device = this.device;
  var distortion = this.distortion;

  var result = new Float32Array(4);
  // Tan-angles from the max FOV.
  var fovLeft = distortion.distortInverse(Math.tan(-MathUtil.degToRad * viewer.fov));
  var fovTop = distortion.distortInverse(Math.tan(MathUtil.degToRad * viewer.fov));
  var fovRight = distortion.distortInverse(Math.tan(MathUtil.degToRad * viewer.fov));
  var fovBottom = distortion.distortInverse(Math.tan(-MathUtil.degToRad * viewer.fov));
  // Viewport size.
  var halfWidth = device.widthMeters / 4;
  var halfHeight = device.heightMeters / 2;
  // Viewport center, measured from left lens position.
  var verticalLensOffset = (viewer.baselineLensDistance - device.bevelMeters - halfHeight);
  var centerX = viewer.interLensDistance / 2 - halfWidth;
  var centerY = -verticalLensOffset;
  var centerZ = viewer.screenLensDistance;
  // Tan-angles of the viewport edges, as seen through the lens.
  var screenLeft = (centerX - halfWidth) / centerZ;
  var screenTop = (centerY + halfHeight) / centerZ;
  var screenRight = (centerX + halfWidth) / centerZ;
  var screenBottom = (centerY - halfHeight) / centerZ;
  // Compare the two sets of tan-angles and take the value closer to zero on each side.
  result[0] = Math.max(fovLeft, screenLeft);
  result[1] = Math.min(fovTop, screenTop);
  result[2] = Math.min(fovRight, screenRight);
  result[3] = Math.max(fovBottom, screenBottom);
  return result;
};

/**
 * Calculates the screen rectangle visible from the left eye for the
 * current device and screen parameters.
 */
DeviceInfo.prototype.getLeftEyeVisibleScreenRect = function(undistortedFrustum) {
  var viewer = this.viewer;
  var device = this.device;

  var dist = viewer.screenLensDistance;
  var eyeX = (device.widthMeters - viewer.interLensDistance) / 2;
  var eyeY = viewer.baselineLensDistance - device.bevelMeters;
  var left = (undistortedFrustum[0] * dist + eyeX) / device.widthMeters;
  var top = (undistortedFrustum[1] * dist + eyeY) / device.heightMeters;
  var right = (undistortedFrustum[2] * dist + eyeX) / device.widthMeters;
  var bottom = (undistortedFrustum[3] * dist + eyeY) / device.heightMeters;
  return {
    x: left,
    y: bottom,
    width: right - left,
    height: top - bottom
  };
};

DeviceInfo.prototype.getFieldOfViewLeftEye = function(opt_isUndistorted) {
  return opt_isUndistorted ? this.getUndistortedFieldOfViewLeftEye() :
      this.getDistortedFieldOfViewLeftEye();
};

DeviceInfo.prototype.getFieldOfViewRightEye = function(opt_isUndistorted) {
  var fov = this.getFieldOfViewLeftEye(opt_isUndistorted);
  return {
    leftDegrees: fov.rightDegrees,
    rightDegrees: fov.leftDegrees,
    upDegrees: fov.upDegrees,
    downDegrees: fov.downDegrees
  };
};

/**
 * Calculates undistorted field of view for the left eye.
 */
DeviceInfo.prototype.getUndistortedFieldOfViewLeftEye = function() {
  var p = this.getUndistortedParams_();

  return {
    leftDegrees: MathUtil.radToDeg * Math.atan(p.outerDist),
    rightDegrees: MathUtil.radToDeg * Math.atan(p.innerDist),
    downDegrees: MathUtil.radToDeg * Math.atan(p.bottomDist),
    upDegrees: MathUtil.radToDeg * Math.atan(p.topDist)
  };
};

DeviceInfo.prototype.getUndistortedViewportLeftEye = function() {
  var p = this.getUndistortedParams_();
  var viewer = this.viewer;
  var device = this.device;

  // Distances stored in local variables are in tan-angle units unless otherwise
  // noted.
  var eyeToScreenDistance = viewer.screenLensDistance;
  var screenWidth = device.widthMeters / eyeToScreenDistance;
  var screenHeight = device.heightMeters / eyeToScreenDistance;
  var xPxPerTanAngle = device.width / screenWidth;
  var yPxPerTanAngle = device.height / screenHeight;

  var x = Math.round((p.eyePosX - p.outerDist) * xPxPerTanAngle);
  var y = Math.round((p.eyePosY - p.bottomDist) * yPxPerTanAngle);
  return {
    x: x,
    y: y,
    width: Math.round((p.eyePosX + p.innerDist) * xPxPerTanAngle) - x,
    height: Math.round((p.eyePosY + p.topDist) * yPxPerTanAngle) - y
  };
};

DeviceInfo.prototype.getUndistortedParams_ = function() {
  var viewer = this.viewer;
  var device = this.device;
  var distortion = this.distortion;

  // Most of these variables in tan-angle units.
  var eyeToScreenDistance = viewer.screenLensDistance;
  var halfLensDistance = viewer.interLensDistance / 2 / eyeToScreenDistance;
  var screenWidth = device.widthMeters / eyeToScreenDistance;
  var screenHeight = device.heightMeters / eyeToScreenDistance;

  var eyePosX = screenWidth / 2 - halfLensDistance;
  var eyePosY = (viewer.baselineLensDistance - device.bevelMeters) / eyeToScreenDistance;

  var maxFov = viewer.fov;
  var viewerMax = distortion.distortInverse(Math.tan(MathUtil.degToRad * maxFov));
  var outerDist = Math.min(eyePosX, viewerMax);
  var innerDist = Math.min(halfLensDistance, viewerMax);
  var bottomDist = Math.min(eyePosY, viewerMax);
  var topDist = Math.min(screenHeight - eyePosY, viewerMax);

  return {
    outerDist: outerDist,
    innerDist: innerDist,
    topDist: topDist,
    bottomDist: bottomDist,
    eyePosX: eyePosX,
    eyePosY: eyePosY
  };
};


function CardboardViewer(params) {
  // A machine readable ID.
  this.id = params.id;
  // A human readable label.
  this.label = params.label;

  // Field of view in degrees (per side).
  this.fov = params.fov;

  // Distance between lens centers in meters.
  this.interLensDistance = params.interLensDistance;
  // Distance between viewer baseline and lens center in meters.
  this.baselineLensDistance = params.baselineLensDistance;
  // Screen-to-lens distance in meters.
  this.screenLensDistance = params.screenLensDistance;

  // Distortion coefficients.
  this.distortionCoefficients = params.distortionCoefficients;
  // Inverse distortion coefficients.
  // TODO: Calculate these from distortionCoefficients in the future.
  this.inverseCoefficients = params.inverseCoefficients;
}

// Export viewer information.
DeviceInfo.Viewers = Viewers;
module.exports = DeviceInfo;

},{"./distortion/distortion.js":9,"./math-util.js":14,"./util.js":22}],8:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VRDisplay = _dereq_('./base.js').VRDisplay;
var HMDVRDevice = _dereq_('./base.js').HMDVRDevice;
var PositionSensorVRDevice = _dereq_('./base.js').PositionSensorVRDevice;

/**
 * Wraps a VRDisplay and exposes it as a HMDVRDevice
 */
function VRDisplayHMDDevice(display) {
  this.display = display;

  this.hardwareUnitId = display.displayId;
  this.deviceId = 'webvr-polyfill:HMD:' + display.displayId;
  this.deviceName = display.displayName + ' (HMD)';
}
VRDisplayHMDDevice.prototype = new HMDVRDevice();

VRDisplayHMDDevice.prototype.getEyeParameters = function(whichEye) {
  var eyeParameters = this.display.getEyeParameters(whichEye);

  return {
    currentFieldOfView: eyeParameters.fieldOfView,
    maximumFieldOfView: eyeParameters.fieldOfView,
    minimumFieldOfView: eyeParameters.fieldOfView,
    recommendedFieldOfView: eyeParameters.fieldOfView,
    eyeTranslation: { x: eyeParameters.offset[0], y: eyeParameters.offset[1], z: eyeParameters.offset[2] },
    renderRect: {
      x: (whichEye == 'right') ? eyeParameters.renderWidth : 0,
      y: 0,
      width: eyeParameters.renderWidth,
      height: eyeParameters.renderHeight
    }
  };
};

VRDisplayHMDDevice.prototype.setFieldOfView =
    function(opt_fovLeft, opt_fovRight, opt_zNear, opt_zFar) {
  // Not supported. getEyeParameters reports that the min, max, and recommended
  // FoV is all the same, so no adjustment can be made.
};

// TODO: Need to hook requestFullscreen to see if a wrapped VRDisplay was passed
// in as an option. If so we should prevent the default fullscreen behavior and
// call VRDisplay.requestPresent instead.

/**
 * Wraps a VRDisplay and exposes it as a PositionSensorVRDevice
 */
function VRDisplayPositionSensorDevice(display) {
  this.display = display;

  this.hardwareUnitId = display.displayId;
  this.deviceId = 'webvr-polyfill:PositionSensor: ' + display.displayId;
  this.deviceName = display.displayName + ' (PositionSensor)';
}
VRDisplayPositionSensorDevice.prototype = new PositionSensorVRDevice();

VRDisplayPositionSensorDevice.prototype.getState = function() {
  var pose = this.display.getPose();
  return {
    position: pose.position ? { x: pose.position[0], y: pose.position[1], z: pose.position[2] } : null,
    orientation: pose.orientation ? { x: pose.orientation[0], y: pose.orientation[1], z: pose.orientation[2], w: pose.orientation[3] } : null,
    linearVelocity: null,
    linearAcceleration: null,
    angularVelocity: null,
    angularAcceleration: null
  };
};

VRDisplayPositionSensorDevice.prototype.resetState = function() {
  return this.positionDevice.resetPose();
};


module.exports.VRDisplayHMDDevice = VRDisplayHMDDevice;
module.exports.VRDisplayPositionSensorDevice = VRDisplayPositionSensorDevice;


},{"./base.js":2}],9:[function(_dereq_,module,exports){
/**
 * TODO(smus): Implement coefficient inversion.
 */
function Distortion(coefficients) {
  this.coefficients = coefficients;
}

/**
 * Calculates the inverse distortion for a radius.
 * </p><p>
 * Allows to compute the original undistorted radius from a distorted one.
 * See also getApproximateInverseDistortion() for a faster but potentially
 * less accurate method.
 *
 * @param {Number} radius Distorted radius from the lens center in tan-angle units.
 * @return {Number} The undistorted radius in tan-angle units.
 */
Distortion.prototype.distortInverse = function(radius) {
  // Secant method.
  var r0 = 0;
  var r1 = 1;
  var dr0 = radius - this.distort(r0);
  while (Math.abs(r1 - r0) > 0.0001 /** 0.1mm */) {
    var dr1 = radius - this.distort(r1);
    var r2 = r1 - dr1 * ((r1 - r0) / (dr1 - dr0));
    r0 = r1;
    r1 = r2;
    dr0 = dr1;
  }
  return r1;
};

/**
 * Distorts a radius by its distortion factor from the center of the lenses.
 *
 * @param {Number} radius Radius from the lens center in tan-angle units.
 * @return {Number} The distorted radius in tan-angle units.
 */
Distortion.prototype.distort = function(radius) {
  var r2 = radius * radius;
  var ret = 0;
  for (var i = 0; i < this.coefficients.length; i++) {
    ret = r2 * (ret + this.coefficients[i]);
  }
  return (ret + 1) * radius;
};

// Functions below roughly ported from
// https://github.com/googlesamples/cardboard-unity/blob/master/Cardboard/Scripts/CardboardProfile.cs#L412

// Solves a small linear equation via destructive gaussian
// elimination and back substitution.  This isn't generic numeric
// code, it's just a quick hack to work with the generally
// well-behaved symmetric matrices for least-squares fitting.
// Not intended for reuse.
//
// @param a Input positive definite symmetrical matrix. Destroyed
//     during calculation.
// @param y Input right-hand-side values. Destroyed during calculation.
// @return Resulting x value vector.
//
Distortion.prototype.solveLinear_ = function(a, y) {
  var n = a.length;

  // Gaussian elimination (no row exchange) to triangular matrix.
  // The input matrix is a A^T A product which should be a positive
  // definite symmetrical matrix, and if I remember my linear
  // algebra right this implies that the pivots will be nonzero and
  // calculations sufficiently accurate without needing row
  // exchange.
  for (var j = 0; j < n - 1; ++j) {
    for (var k = j + 1; k < n; ++k) {
      var p = a[j][k] / a[j][j];
      for (var i = j + 1; i < n; ++i) {
        a[i][k] -= p * a[i][j];
      }
      y[k] -= p * y[j];
    }
  }
  // From this point on, only the matrix elements a[j][i] with i>=j are
  // valid. The elimination doesn't fill in eliminated 0 values.

  var x = new Array(n);

  // Back substitution.
  for (var j = n - 1; j >= 0; --j) {
    var v = y[j];
    for (var i = j + 1; i < n; ++i) {
      v -= a[i][j] * x[i];
    }
    x[j] = v / a[j][j];
  }

  return x;
};

// Solves a least-squares matrix equation.  Given the equation A * x = y, calculate the
// least-square fit x = inverse(A * transpose(A)) * transpose(A) * y.  The way this works
// is that, while A is typically not a square matrix (and hence not invertible), A * transpose(A)
// is always square.  That is:
//   A * x = y
//   transpose(A) * (A * x) = transpose(A) * y   <- multiply both sides by transpose(A)
//   (transpose(A) * A) * x = transpose(A) * y   <- associativity
//   x = inverse(transpose(A) * A) * transpose(A) * y  <- solve for x
// Matrix A's row count (first index) must match y's value count.  A's column count (second index)
// determines the length of the result vector x.
Distortion.prototype.solveLeastSquares_ = function(matA, vecY) {
  var i, j, k, sum;
  var numSamples = matA.length;
  var numCoefficients = matA[0].length;
  if (numSamples != vecY.Length) {
    throw new Error("Matrix / vector dimension mismatch");
  }

  // Calculate transpose(A) * A
  var matATA = new Array(numCoefficients);
  for (k = 0; k < numCoefficients; ++k) {
    matATA[k] = new Array(numCoefficients);
    for (j = 0; j < numCoefficients; ++j) {
      sum = 0;
      for (i = 0; i < numSamples; ++i) {
        sum += matA[j][i] * matA[k][i];
      }
      matATA[k][j] = sum;
    }
  }

  // Calculate transpose(A) * y
  var vecATY = new Array(numCoefficients);
  for (j = 0; j < numCoefficients; ++j) {
    sum = 0;
    for (i = 0; i < numSamples; ++i) {
      sum += matA[j][i] * vecY[i];
    }
    vecATY[j] = sum;
  }

  // Now solve (A * transpose(A)) * x = transpose(A) * y.
  return this.solveLinear_(matATA, vecATY);
};

/// Calculates an approximate inverse to the given radial distortion parameters.
Distortion.prototype.approximateInverse = function(maxRadius, numSamples) {
  maxRadius = maxRadius || 1;
  numSamples = numSamples || 100;
  var numCoefficients = 6;
  var i, j;

  // R + K1*R^3 + K2*R^5 = r, with R = rp = distort(r)
  // Repeating for numSamples:
  //   [ R0^3, R0^5 ] * [ K1 ] = [ r0 - R0 ]
  //   [ R1^3, R1^5 ]   [ K2 ]   [ r1 - R1 ]
  //   [ R2^3, R2^5 ]            [ r2 - R2 ]
  //   [ etc... ]                [ etc... ]
  // That is:
  //   matA * [K1, K2] = y
  // Solve:
  //   [K1, K2] = inverse(transpose(matA) * matA) * transpose(matA) * y
  var matA = new Array(numCoefficients);
  for (j = 0; j < numCoefficients; ++j) {
    matA[j] = new Array(numSamples);
  }
  var vecY = new Array(numSamples);

  for (i = 0; i < numSamples; ++i) {
    var r = maxRadius * (i + 1) / numSamples;
    var rp = this.distort(r);
    var v = rp;
    for (j = 0; j < numCoefficients; ++j) {
      v *= rp * rp;
      matA[j][i] = v;
    }
    vecY[i] = r - rp;
  }

  var inverseCoefficients = this.solveLeastSquares_(matA, vecY);

  return new Distortion(inverseCoefficients);
};

module.exports = Distortion;

},{}],10:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * DPDB cache.
 */
var DPDB_CACHE = {
  "format": 1,
  "last_updated": "2016-01-20T00:18:35Z",
  "devices": [

  {
    "type": "android",
    "rules": [
      { "mdmh": "asus/*/Nexus 7/*" },
      { "ua": "Nexus 7" }
    ],
    "dpi": [ 320.8, 323.0 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "asus/*/ASUS_Z00AD/*" },
      { "ua": "ASUS_Z00AD" }
    ],
    "dpi": [ 403.0, 404.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "HTC/*/HTC6435LVW/*" },
      { "ua": "HTC6435LVW" }
    ],
    "dpi": [ 449.7, 443.3 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "HTC/*/HTC One XL/*" },
      { "ua": "HTC One XL" }
    ],
    "dpi": [ 315.3, 314.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "htc/*/Nexus 9/*" },
      { "ua": "Nexus 9" }
    ],
    "dpi": 289.0,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "HTC/*/HTC One M9/*" },
      { "ua": "HTC One M9" }
    ],
    "dpi": [ 442.5, 443.3 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "HTC/*/HTC One_M8/*" },
      { "ua": "HTC One_M8" }
    ],
    "dpi": [ 449.7, 447.4 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "HTC/*/HTC One/*" },
      { "ua": "HTC One" }
    ],
    "dpi": 472.8,
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Huawei/*/Nexus 6P/*" },
      { "ua": "Nexus 6P" }
    ],
    "dpi": [ 515.1, 518.0 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/Nexus 5X/*" },
      { "ua": "Nexus 5X" }
    ],
    "dpi": [ 422.0, 419.9 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LGMS345/*" },
      { "ua": "LGMS345" }
    ],
    "dpi": [ 221.7, 219.1 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LG-D800/*" },
      { "ua": "LG-D800" }
    ],
    "dpi": [ 422.0, 424.1 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LG-D850/*" },
      { "ua": "LG-D850" }
    ],
    "dpi": [ 537.9, 541.9 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/VS985 4G/*" },
      { "ua": "VS985 4G" }
    ],
    "dpi": [ 537.9, 535.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/Nexus 5/*" },
      { "ua": "Nexus 5 " }
    ],
    "dpi": [ 442.4, 444.8 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/Nexus 4/*" },
      { "ua": "Nexus 4" }
    ],
    "dpi": [ 319.8, 318.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LG-P769/*" },
      { "ua": "LG-P769" }
    ],
    "dpi": [ 240.6, 247.5 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LGMS323/*" },
      { "ua": "LGMS323" }
    ],
    "dpi": [ 206.6, 204.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "LGE/*/LGLS996/*" },
      { "ua": "LGLS996" }
    ],
    "dpi": [ 403.4, 401.5 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Micromax/*/4560MMX/*" },
      { "ua": "4560MMX" }
    ],
    "dpi": [ 240.0, 219.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Micromax/*/A250/*" },
      { "ua": "Micromax A250" }
    ],
    "dpi": [ 480.0, 446.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Micromax/*/Micromax AQ4501/*" },
      { "ua": "Micromax AQ4501" }
    ],
    "dpi": 240.0,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/DROID RAZR/*" },
      { "ua": "DROID RAZR" }
    ],
    "dpi": [ 368.1, 256.7 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT830C/*" },
      { "ua": "XT830C" }
    ],
    "dpi": [ 254.0, 255.9 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1021/*" },
      { "ua": "XT1021" }
    ],
    "dpi": [ 254.0, 256.7 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1023/*" },
      { "ua": "XT1023" }
    ],
    "dpi": [ 254.0, 256.7 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1028/*" },
      { "ua": "XT1028" }
    ],
    "dpi": [ 326.6, 327.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1034/*" },
      { "ua": "XT1034" }
    ],
    "dpi": [ 326.6, 328.4 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1053/*" },
      { "ua": "XT1053" }
    ],
    "dpi": [ 315.3, 316.1 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1562/*" },
      { "ua": "XT1562" }
    ],
    "dpi": [ 403.4, 402.7 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/Nexus 6/*" },
      { "ua": "Nexus 6 " }
    ],
    "dpi": [ 494.3, 489.7 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1063/*" },
      { "ua": "XT1063" }
    ],
    "dpi": [ 295.0, 296.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1064/*" },
      { "ua": "XT1064" }
    ],
    "dpi": [ 295.0, 295.6 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1092/*" },
      { "ua": "XT1092" }
    ],
    "dpi": [ 422.0, 424.1 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "motorola/*/XT1095/*" },
      { "ua": "XT1095" }
    ],
    "dpi": [ 422.0, 423.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "OnePlus/*/A0001/*" },
      { "ua": "A0001" }
    ],
    "dpi": [ 403.4, 401.0 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "OnePlus/*/ONE E1005/*" },
      { "ua": "ONE E1005" }
    ],
    "dpi": [ 442.4, 441.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "OnePlus/*/ONE A2005/*" },
      { "ua": "ONE A2005" }
    ],
    "dpi": [ 391.9, 405.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "OPPO/*/X909/*" },
      { "ua": "X909" }
    ],
    "dpi": [ 442.4, 444.1 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9082/*" },
      { "ua": "GT-I9082" }
    ],
    "dpi": [ 184.7, 185.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G360P/*" },
      { "ua": "SM-G360P" }
    ],
    "dpi": [ 196.7, 205.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/Nexus S/*" },
      { "ua": "Nexus S" }
    ],
    "dpi": [ 234.5, 229.8 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9300/*" },
      { "ua": "GT-I9300" }
    ],
    "dpi": [ 304.8, 303.9 ],
    "bw": 5,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-T230NU/*" },
      { "ua": "SM-T230NU" }
    ],
    "dpi": 216.0,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SGH-T399/*" },
      { "ua": "SGH-T399" }
    ],
    "dpi": [ 217.7, 231.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-N9005/*" },
      { "ua": "SM-N9005" }
    ],
    "dpi": [ 386.4, 387.0 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SAMSUNG-SM-N900A/*" },
      { "ua": "SAMSUNG-SM-N900A" }
    ],
    "dpi": [ 386.4, 387.7 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9500/*" },
      { "ua": "GT-I9500" }
    ],
    "dpi": [ 442.5, 443.3 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9505/*" },
      { "ua": "GT-I9505" }
    ],
    "dpi": 439.4,
    "bw": 4,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G900F/*" },
      { "ua": "SM-G900F" }
    ],
    "dpi": [ 415.6, 431.6 ],
    "bw": 5,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G900M/*" },
      { "ua": "SM-G900M" }
    ],
    "dpi": [ 415.6, 431.6 ],
    "bw": 5,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G800F/*" },
      { "ua": "SM-G800F" }
    ],
    "dpi": 326.8,
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G906S/*" },
      { "ua": "SM-G906S" }
    ],
    "dpi": [ 562.7, 572.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9300/*" },
      { "ua": "GT-I9300" }
    ],
    "dpi": [ 306.7, 304.8 ],
    "bw": 5,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-T535/*" },
      { "ua": "SM-T535" }
    ],
    "dpi": [ 142.6, 136.4 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-N920C/*" },
      { "ua": "SM-N920C" }
    ],
    "dpi": [ 515.1, 518.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9300I/*" },
      { "ua": "GT-I9300I" }
    ],
    "dpi": [ 304.8, 305.8 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-I9195/*" },
      { "ua": "GT-I9195" }
    ],
    "dpi": [ 249.4, 256.7 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SPH-L520/*" },
      { "ua": "SPH-L520" }
    ],
    "dpi": [ 249.4, 255.9 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SAMSUNG-SGH-I717/*" },
      { "ua": "SAMSUNG-SGH-I717" }
    ],
    "dpi": 285.8,
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SPH-D710/*" },
      { "ua": "SPH-D710" }
    ],
    "dpi": [ 217.7, 204.2 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/GT-N7100/*" },
      { "ua": "GT-N7100" }
    ],
    "dpi": 265.1,
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SCH-I605/*" },
      { "ua": "SCH-I605" }
    ],
    "dpi": 265.1,
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/Galaxy Nexus/*" },
      { "ua": "Galaxy Nexus" }
    ],
    "dpi": [ 315.3, 314.2 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-N910H/*" },
      { "ua": "SM-N910H" }
    ],
    "dpi": [ 515.1, 518.0 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-N910C/*" },
      { "ua": "SM-N910C" }
    ],
    "dpi": [ 515.2, 520.2 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G130M/*" },
      { "ua": "SM-G130M" }
    ],
    "dpi": [ 165.9, 164.8 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G928I/*" },
      { "ua": "SM-G928I" }
    ],
    "dpi": [ 515.1, 518.4 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G920F/*" },
      { "ua": "SM-G920F" }
    ],
    "dpi": 580.6,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G920P/*" },
      { "ua": "SM-G920P" }
    ],
    "dpi": [ 522.5, 577.0 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G925F/*" },
      { "ua": "SM-G925F" }
    ],
    "dpi": 580.6,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "samsung/*/SM-G925V/*" },
      { "ua": "SM-G925V" }
    ],
    "dpi": [ 522.5, 576.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Sony/*/C6903/*" },
      { "ua": "C6903" }
    ],
    "dpi": [ 442.5, 443.3 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Sony/*/D6653/*" },
      { "ua": "D6653" }
    ],
    "dpi": [ 428.6, 427.6 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Sony/*/E6653/*" },
      { "ua": "E6653" }
    ],
    "dpi": [ 428.6, 425.7 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Sony/*/E6853/*" },
      { "ua": "E6853" }
    ],
    "dpi": [ 403.4, 401.9 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "Sony/*/SGP321/*" },
      { "ua": "SGP321" }
    ],
    "dpi": [ 224.7, 224.1 ],
    "bw": 3,
    "ac": 500
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "TCT/*/ALCATEL ONE TOUCH Fierce/*" },
      { "ua": "ALCATEL ONE TOUCH Fierce" }
    ],
    "dpi": [ 240.0, 247.5 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "THL/*/thl 5000/*" },
      { "ua": "thl 5000" }
    ],
    "dpi": [ 480.0, 443.3 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "android",
    "rules": [
      { "mdmh": "ZTE/*/ZTE Blade L2/*" },
      { "ua": "ZTE Blade L2" }
    ],
    "dpi": 240.0,
    "bw": 3,
    "ac": 500
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 640, 960 ] } ],
    "dpi": [ 325.1, 328.4 ],
    "bw": 4,
    "ac": 1000
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 640, 960 ] } ],
    "dpi": [ 325.1, 328.4 ],
    "bw": 4,
    "ac": 1000
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 640, 1136 ] } ],
    "dpi": [ 317.1, 320.2 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 640, 1136 ] } ],
    "dpi": [ 317.1, 320.2 ],
    "bw": 3,
    "ac": 1000
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 750, 1334 ] } ],
    "dpi": 326.4,
    "bw": 4,
    "ac": 1000
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 750, 1334 ] } ],
    "dpi": 326.4,
    "bw": 4,
    "ac": 1000
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 1242, 2208 ] } ],
    "dpi": [ 453.6, 458.4 ],
    "bw": 4,
    "ac": 1000
  },

  {
    "type": "ios",
    "rules": [ { "res": [ 1242, 2208 ] } ],
    "dpi": [ 453.6, 458.4 ],
    "bw": 4,
    "ac": 1000
  }
]};

module.exports = DPDB_CACHE;

},{}],11:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Offline cache of the DPDB, to be used until we load the online one (and
// as a fallback in case we can't load the online one).
var DPDB_CACHE = _dereq_('./dpdb-cache.js');
var Util = _dereq_('../util.js');

// Online DPDB URL.
var ONLINE_DPDB_URL = 'https://storage.googleapis.com/cardboard-dpdb/dpdb.json';

/**
 * Calculates device parameters based on the DPDB (Device Parameter Database).
 * Initially, uses the cached DPDB values.
 *
 * If fetchOnline == true, then this object tries to fetch the online version
 * of the DPDB and updates the device info if a better match is found.
 * Calls the onDeviceParamsUpdated callback when there is an update to the
 * device information.
 */
function Dpdb(fetchOnline, onDeviceParamsUpdated) {
  // Start with the offline DPDB cache while we are loading the real one.
  this.dpdb = DPDB_CACHE;

  // Calculate device params based on the offline version of the DPDB.
  this.recalculateDeviceParams_();

  // XHR to fetch online DPDB file, if requested.
  if (fetchOnline) {
    // Set the callback.
    this.onDeviceParamsUpdated = onDeviceParamsUpdated;

    console.log('Fetching DPDB...');
    var xhr = new XMLHttpRequest();
    var obj = this;
    xhr.open('GET', ONLINE_DPDB_URL, true);
    xhr.addEventListener('load', function() {
      obj.loading = false;
      if (xhr.status >= 200 && xhr.status <= 299) {
        // Success.
        console.log('Successfully loaded online DPDB.');
        obj.dpdb = JSON.parse(xhr.response);
        obj.recalculateDeviceParams_();
      } else {
        // Error loading the DPDB.
        console.error('Error loading online DPDB!');
      }
    });
    xhr.send();
  }
}

// Returns the current device parameters.
Dpdb.prototype.getDeviceParams = function() {
  return this.deviceParams;
};

// Recalculates this device's parameters based on the DPDB.
Dpdb.prototype.recalculateDeviceParams_ = function() {
  console.log('Recalculating device params.');
  var newDeviceParams = this.calcDeviceParams_();
  console.log('New device parameters:');
  console.log(newDeviceParams);
  if (newDeviceParams) {
    this.deviceParams = newDeviceParams;
    // Invoke callback, if it is set.
    if (this.onDeviceParamsUpdated) {
      this.onDeviceParamsUpdated(this.deviceParams);
    }
  } else {
    console.error('Failed to recalculate device parameters.');
  }
};

// Returns a DeviceParams object that represents the best guess as to this
// device's parameters. Can return null if the device does not match any
// known devices.
Dpdb.prototype.calcDeviceParams_ = function() {
  var db = this.dpdb; // shorthand
  if (!db) {
    console.error('DPDB not available.');
    return null;
  }
  if (db.format != 1) {
    console.error('DPDB has unexpected format version.');
    return null;
  }
  if (!db.devices || !db.devices.length) {
    console.error('DPDB does not have a devices section.');
    return null;
  }

  // Get the actual user agent and screen dimensions in pixels.
  var userAgent = navigator.userAgent || navigator.vendor || window.opera;
  var width = Util.getScreenWidth();
  var height = Util.getScreenHeight();
  console.log('User agent: ' + userAgent);
  console.log('Pixel width: ' + width);
  console.log('Pixel height: ' + height);

  if (!db.devices) {
    console.error('DPDB has no devices section.');
    return null;
  }

  for (var i = 0; i < db.devices.length; i++) {
    var device = db.devices[i];
    if (!device.rules) {
      console.warn('Device[' + i + '] has no rules section.');
      continue;
    }

    if (device.type != 'ios' && device.type != 'android') {
      console.warn('Device[' + i + '] has invalid type.');
      continue;
    }

    // See if this device is of the appropriate type.
    if (Util.isIOS() != (device.type == 'ios')) continue;

    // See if this device matches any of the rules:
    var matched = false;
    for (var j = 0; j < device.rules.length; j++) {
      var rule = device.rules[j];
      if (this.matchRule_(rule, userAgent, width, height)) {
        console.log('Rule matched:');
        console.log(rule);
        matched = true;
        break;
      }
    }
    if (!matched) continue;

    // device.dpi might be an array of [ xdpi, ydpi] or just a scalar.
    var xdpi = device.dpi[0] || device.dpi;
    var ydpi = device.dpi[1] || device.dpi;

    return new DeviceParams({ xdpi: xdpi, ydpi: ydpi, bevelMm: device.bw });
  }

  console.warn('No DPDB device match.');
  return null;
};

Dpdb.prototype.matchRule_ = function(rule, ua, screenWidth, screenHeight) {
  // We can only match 'ua' and 'res' rules, not other types like 'mdmh'
  // (which are meant for native platforms).
  if (!rule.ua && !rule.res) return false;

  // If our user agent string doesn't contain the indicated user agent string,
  // the match fails.
  if (rule.ua && ua.indexOf(rule.ua) < 0) return false;

  // If the rule specifies screen dimensions that don't correspond to ours,
  // the match fails.
  if (rule.res) {
    if (!rule.res[0] || !rule.res[1]) return false;
    var resX = rule.res[0];
    var resY = rule.res[1];
    // Compare min and max so as to make the order not matter, i.e., it should
    // be true that 640x480 == 480x640.
    if (Math.min(screenWidth, screenHeight) != Math.min(resX, resY) ||
        (Math.max(screenWidth, screenHeight) != Math.max(resX, resY))) {
      return false;
    }
  }

  return true;
}

function DeviceParams(params) {
  this.xdpi = params.xdpi;
  this.ydpi = params.ydpi;
  this.bevelMm = params.bevelMm;
}

module.exports = Dpdb;
},{"../util.js":22,"./dpdb-cache.js":10}],12:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function Emitter() {
  this.callbacks = {};
}

Emitter.prototype.emit = function(eventName) {
  var callbacks = this.callbacks[eventName];
  if (!callbacks) {
    //console.log('No valid callback specified.');
    return;
  }
  var args = [].slice.call(arguments);
  // Eliminate the first param (the callback).
  args.shift();
  for (var i = 0; i < callbacks.length; i++) {
    callbacks[i].apply(this, args);
  }
};

Emitter.prototype.on = function(eventName, callback) {
  if (eventName in this.callbacks) {
    this.callbacks[eventName].push(callback);
  } else {
    this.callbacks[eventName] = [callback];
  }
};

module.exports = Emitter;

},{}],13:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Util = _dereq_('./util.js');
var WebVRPolyfill = _dereq_('./webvr-polyfill.js');

// Initialize a WebVRConfig just in case.
window.WebVRConfig = Util.extend({
  // Forces availability of VR mode, even for non-mobile devices.
  FORCE_ENABLE_VR: false,

  // Complementary filter coefficient. 0 for accelerometer, 1 for gyro.
  K_FILTER: 0.98,

  // How far into the future to predict during fast motion (in seconds).
  PREDICTION_TIME_S: 0.040,

  // Flag to disable touch panner. In case you have your own touch controls.
  TOUCH_PANNER_DISABLED: false,

  // Flag to disabled the UI in VR Mode.
  CARDBOARD_UI_DISABLED: false, // Default: false

  // Flag to disable the instructions to rotate your device.
  ROTATE_INSTRUCTIONS_DISABLED: false, // Default: false.

  // Enable yaw panning only, disabling roll and pitch. This can be useful
  // for panoramas with nothing interesting above or below.
  YAW_ONLY: false,

  // To disable keyboard and mouse controls, if you want to use your own
  // implementation.
  MOUSE_KEYBOARD_CONTROLS_DISABLED: false,

  // Prevent the polyfill from initializing immediately. Requires the app
  // to call InitializeWebVRPolyfill() before it can be used.
  DEFER_INITIALIZATION: false,

  // Enable the deprecated version of the API (navigator.getVRDevices).
  ENABLE_DEPRECATED_API: false,

  // Scales the recommended buffer size reported by WebVR, which can improve
  // performance.
  // UPDATE(2016-05-03): Setting this to 0.5 by default since 1.0 does not
  // perform well on many mobile devices.
  BUFFER_SCALE: 0.5,

  // Allow VRDisplay.submitFrame to change gl bindings, which is more
  // efficient if the application code will re-bind its resources on the
  // next frame anyway. This has been seen to cause rendering glitches with
  // THREE.js.
  // Dirty bindings include: gl.FRAMEBUFFER_BINDING, gl.CURRENT_PROGRAM,
  // gl.ARRAY_BUFFER_BINDING, gl.ELEMENT_ARRAY_BUFFER_BINDING,
  // and gl.TEXTURE_BINDING_2D for texture unit 0.
  DIRTY_SUBMIT_FRAME_BINDINGS: false
}, window.WebVRConfig);

if (!window.WebVRConfig.DEFER_INITIALIZATION) {
  new WebVRPolyfill();
} else {
  window.InitializeWebVRPolyfill = function() {
    new WebVRPolyfill();
  }
}

},{"./util.js":22,"./webvr-polyfill.js":25}],14:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MathUtil = window.MathUtil || {};

MathUtil.degToRad = Math.PI / 180;
MathUtil.radToDeg = 180 / Math.PI;

// Some minimal math functionality borrowed from THREE.Math and stripped down
// for the purposes of this library.


MathUtil.Vector2 = function ( x, y ) {
  this.x = x || 0;
  this.y = y || 0;
};

MathUtil.Vector2.prototype = {
  constructor: MathUtil.Vector2,

  set: function ( x, y ) {
    this.x = x;
    this.y = y;

    return this;
  },

  copy: function ( v ) {
    this.x = v.x;
    this.y = v.y;

    return this;
  },

  subVectors: function ( a, b ) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;

    return this;
  },
};

MathUtil.Vector3 = function ( x, y, z ) {
  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;
};

MathUtil.Vector3.prototype = {
  constructor: MathUtil.Vector3,

  set: function ( x, y, z ) {
    this.x = x;
    this.y = y;
    this.z = z;

    return this;
  },

  copy: function ( v ) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;

    return this;
  },

  length: function () {
    return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
  },

  normalize: function () {
    var scalar = this.length();

    if ( scalar !== 0 ) {
      var invScalar = 1 / scalar;

      this.multiplyScalar(invScalar);
    } else {
      this.x = 0;
      this.y = 0;
      this.z = 0;
    }

    return this;
  },

  multiplyScalar: function ( scalar ) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
  },

  applyQuaternion: function ( q ) {
    var x = this.x;
    var y = this.y;
    var z = this.z;

    var qx = q.x;
    var qy = q.y;
    var qz = q.z;
    var qw = q.w;

    // calculate quat * vector
    var ix =  qw * x + qy * z - qz * y;
    var iy =  qw * y + qz * x - qx * z;
    var iz =  qw * z + qx * y - qy * x;
    var iw = - qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
    this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
    this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

    return this;
  },

  dot: function ( v ) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  },

  crossVectors: function ( a, b ) {
    var ax = a.x, ay = a.y, az = a.z;
    var bx = b.x, by = b.y, bz = b.z;

    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;

    return this;
  },
};

MathUtil.Quaternion = function ( x, y, z, w ) {
  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;
  this.w = ( w !== undefined ) ? w : 1;
};

MathUtil.Quaternion.prototype = {
  constructor: MathUtil.Quaternion,

  set: function ( x, y, z, w ) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;

    return this;
  },

  copy: function ( quaternion ) {
    this.x = quaternion.x;
    this.y = quaternion.y;
    this.z = quaternion.z;
    this.w = quaternion.w;

    return this;
  },

  setFromEulerXYZ: function( x, y, z ) {
    var c1 = Math.cos( x / 2 );
    var c2 = Math.cos( y / 2 );
    var c3 = Math.cos( z / 2 );
    var s1 = Math.sin( x / 2 );
    var s2 = Math.sin( y / 2 );
    var s3 = Math.sin( z / 2 );

    this.x = s1 * c2 * c3 + c1 * s2 * s3;
    this.y = c1 * s2 * c3 - s1 * c2 * s3;
    this.z = c1 * c2 * s3 + s1 * s2 * c3;
    this.w = c1 * c2 * c3 - s1 * s2 * s3;

    return this;
  },

  setFromEulerYXZ: function( x, y, z ) {
    var c1 = Math.cos( x / 2 );
    var c2 = Math.cos( y / 2 );
    var c3 = Math.cos( z / 2 );
    var s1 = Math.sin( x / 2 );
    var s2 = Math.sin( y / 2 );
    var s3 = Math.sin( z / 2 );

    this.x = s1 * c2 * c3 + c1 * s2 * s3;
    this.y = c1 * s2 * c3 - s1 * c2 * s3;
    this.z = c1 * c2 * s3 - s1 * s2 * c3;
    this.w = c1 * c2 * c3 + s1 * s2 * s3;

    return this;
  },

  setFromAxisAngle: function ( axis, angle ) {
    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
    // assumes axis is normalized

    var halfAngle = angle / 2, s = Math.sin( halfAngle );

    this.x = axis.x * s;
    this.y = axis.y * s;
    this.z = axis.z * s;
    this.w = Math.cos( halfAngle );

    return this;
  },

  multiply: function ( q ) {
    return this.multiplyQuaternions( this, q );
  },

  multiplyQuaternions: function ( a, b ) {
    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

    var qax = a.x, qay = a.y, qaz = a.z, qaw = a.w;
    var qbx = b.x, qby = b.y, qbz = b.z, qbw = b.w;

    this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

    return this;
  },

  inverse: function () {
    this.x *= -1;
    this.y *= -1;
    this.z *= -1;

    this.normalize();

    return this;
  },

  normalize: function () {
    var l = Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

    if ( l === 0 ) {
      this.x = 0;
      this.y = 0;
      this.z = 0;
      this.w = 1;
    } else {
      l = 1 / l;

      this.x = this.x * l;
      this.y = this.y * l;
      this.z = this.z * l;
      this.w = this.w * l;
    }

    return this;
  },

  slerp: function ( qb, t ) {
    if ( t === 0 ) return this;
    if ( t === 1 ) return this.copy( qb );

    var x = this.x, y = this.y, z = this.z, w = this.w;

    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

    var cosHalfTheta = w * qb.w + x * qb.x + y * qb.y + z * qb.z;

    if ( cosHalfTheta < 0 ) {
      this.w = - qb.w;
      this.x = - qb.x;
      this.y = - qb.y;
      this.z = - qb.z;

      cosHalfTheta = - cosHalfTheta;
    } else {
      this.copy( qb );
    }

    if ( cosHalfTheta >= 1.0 ) {
      this.w = w;
      this.x = x;
      this.y = y;
      this.z = z;

      return this;
    }

    var halfTheta = Math.acos( cosHalfTheta );
    var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

    if ( Math.abs( sinHalfTheta ) < 0.001 ) {
      this.w = 0.5 * ( w + this.w );
      this.x = 0.5 * ( x + this.x );
      this.y = 0.5 * ( y + this.y );
      this.z = 0.5 * ( z + this.z );

      return this;
    }

    var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
    ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

    this.w = ( w * ratioA + this.w * ratioB );
    this.x = ( x * ratioA + this.x * ratioB );
    this.y = ( y * ratioA + this.y * ratioB );
    this.z = ( z * ratioA + this.z * ratioB );

    return this;
  },

  setFromUnitVectors: function () {
    // http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final
    // assumes direction vectors vFrom and vTo are normalized

    var v1, r;
    var EPS = 0.000001;

    return function ( vFrom, vTo ) {
      if ( v1 === undefined ) v1 = new MathUtil.Vector3();

      r = vFrom.dot( vTo ) + 1;

      if ( r < EPS ) {
        r = 0;

        if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
          v1.set( - vFrom.y, vFrom.x, 0 );
        } else {
          v1.set( 0, - vFrom.z, vFrom.y );
        }
      } else {
        v1.crossVectors( vFrom, vTo );
      }

      this.x = v1.x;
      this.y = v1.y;
      this.z = v1.z;
      this.w = r;

      this.normalize();

      return this;
    }
  }(),
};

module.exports = MathUtil;

},{}],15:[function(_dereq_,module,exports){
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var VRDisplay = _dereq_('./base.js').VRDisplay;
var MathUtil = _dereq_('./math-util.js');
var Util = _dereq_('./util.js');

// How much to rotate per key stroke.
var KEY_SPEED = 0.15;
var KEY_ANIMATION_DURATION = 80;

// How much to rotate for mouse events.
var MOUSE_SPEED_X = 0.5;
var MOUSE_SPEED_Y = 0.3;

/**
 * VRDisplay based on mouse and keyboard input. Designed for desktops/laptops
 * where orientation events aren't supported. Cannot present.
 */
function MouseKeyboardVRDisplay() {
  this.displayName = 'Mouse and Keyboard VRDisplay (webvr-polyfill)';

  this.capabilities.hasOrientation = true;

  // Attach to mouse and keyboard events.
  window.addEventListener('keydown', this.onKeyDown_.bind(this));
  window.addEventListener('mousemove', this.onMouseMove_.bind(this));
  window.addEventListener('mousedown', this.onMouseDown_.bind(this));
  window.addEventListener('mouseup', this.onMouseUp_.bind(this));

  // "Private" members.
  this.phi_ = 0;
  this.theta_ = 0;

  // Variables for keyboard-based rotation animation.
  this.targetAngle_ = null;
  this.angleAnimation_ = null;

  // State variables for calculations.
  this.orientation_ = new MathUtil.Quaternion();

  // Variables for mouse-based rotation.
  this.rotateStart_ = new MathUtil.Vector2();
  this.rotateEnd_ = new MathUtil.Vector2();
  this.rotateDelta_ = new MathUtil.Vector2();
  this.isDragging_ = false;

  this.orientationOut_ = new Float32Array(4);
}
MouseKeyboardVRDisplay.prototype = new VRDisplay();

MouseKeyboardVRDisplay.prototype.getImmediatePose = function() {
  this.orientation_.setFromEulerYXZ(this.phi_, this.theta_, 0);

  this.orientationOut_[0] = this.orientation_.x;
  this.orientationOut_[1] = this.orientation_.y;
  this.orientationOut_[2] = this.orientation_.z;
  this.orientationOut_[3] = this.orientation_.w;

  return {
    position: null,
    orientation: this.orientationOut_,
    linearVelocity: null,
    linearAcceleration: null,
    angularVelocity: null,
    angularAcceleration: null
  };
};

MouseKeyboardVRDisplay.prototype.onKeyDown_ = function(e) {
  // Track WASD and arrow keys.
  if (e.keyCode == 38) { // Up key.
    this.animatePhi_(this.phi_ + KEY_SPEED);
  } else if (e.keyCode == 39) { // Right key.
    this.animateTheta_(this.theta_ - KEY_SPEED);
  } else if (e.keyCode == 40) { // Down key.
    this.animatePhi_(this.phi_ - KEY_SPEED);
  } else if (e.keyCode == 37) { // Left key.
    this.animateTheta_(this.theta_ + KEY_SPEED);
  }
};

MouseKeyboardVRDisplay.prototype.animateTheta_ = function(targetAngle) {
  this.animateKeyTransitions_('theta_', targetAngle);
};

MouseKeyboardVRDisplay.prototype.animatePhi_ = function(targetAngle) {
  // Prevent looking too far up or down.
  targetAngle = Util.clamp(targetAngle, -Math.PI/2, Math.PI/2);
  this.animateKeyTransitions_('phi_', targetAngle);
};

/**
 * Start an animation to transition an angle from one value to another.
 */
MouseKeyboardVRDisplay.prototype.animateKeyTransitions_ = function(angleName, targetAngle) {
  // If an animation is currently running, cancel it.
  if (this.angleAnimation_) {
    cancelAnimationFrame(this.angleAnimation_);
  }
  var startAngle = this[angleName];
  var startTime = new Date();
  // Set up an interval timer to perform the animation.
  this.angleAnimation_ = requestAnimationFrame(function animate() {
    // Once we're finished the animation, we're done.
    var elapsed = new Date() - startTime;
    if (elapsed >= KEY_ANIMATION_DURATION) {
      this[angleName] = targetAngle;
      cancelAnimationFrame(this.angleAnimation_);
      return;
    }
    // loop with requestAnimationFrame
    this.angleAnimation_ = requestAnimationFrame(animate.bind(this))
    // Linearly interpolate the angle some amount.
    var percent = elapsed / KEY_ANIMATION_DURATION;
    this[angleName] = startAngle + (targetAngle - startAngle) * percent;
  }.bind(this));
};

MouseKeyboardVRDisplay.prototype.onMouseDown_ = function(e) {
  this.rotateStart_.set(e.clientX, e.clientY);
  this.isDragging_ = true;
};

// Very similar to https://gist.github.com/mrflix/8351020
MouseKeyboardVRDisplay.prototype.onMouseMove_ = function(e) {
  if (!this.isDragging_ && !this.isPointerLocked_()) {
    return;
  }
  // Support pointer lock API.
  if (this.isPointerLocked_()) {
    var movementX = e.movementX || e.mozMovementX || 0;
    var movementY = e.movementY || e.mozMovementY || 0;
    this.rotateEnd_.set(this.rotateStart_.x - movementX, this.rotateStart_.y - movementY);
  } else {
    this.rotateEnd_.set(e.clientX, e.clientY);
  }
  // Calculate how much we moved in mouse space.
  this.rotateDelta_.subVectors(this.rotateEnd_, this.rotateStart_);
  this.rotateStart_.copy(this.rotateEnd_);

  // Keep track of the cumulative euler angles.
  this.phi_ += 2 * Math.PI * this.rotateDelta_.y / screen.height * MOUSE_SPEED_Y;
  this.theta_ += 2 * Math.PI * this.rotateDelta_.x / screen.width * MOUSE_SPEED_X;

  // Prevent looking too far up or down.
  this.phi_ = Util.clamp(this.phi_, -Math.PI/2, Math.PI/2);
};

MouseKeyboardVRDisplay.prototype.onMouseUp_ = function(e) {
  this.isDragging_ = false;
};

MouseKeyboardVRDisplay.prototype.isPointerLocked_ = function() {
  var el = document.pointerLockElement || document.mozPointerLockElement ||
      document.webkitPointerLockElement;
  return el !== undefined;
};

MouseKeyboardVRDisplay.prototype.resetPose = function() {
  this.phi_ = 0;
  this.theta_ = 0;
};

module.exports = MouseKeyboardVRDisplay;

},{"./base.js":2,"./math-util.js":14,"./util.js":22}],16:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = _dereq_('./util.js');

function RotateInstructions() {
  this.loadIcon_();

  var overlay = document.createElement('div');
  var s = overlay.style;
  s.position = 'fixed';
  s.top = 0;
  s.right = 0;
  s.bottom = 0;
  s.left = 0;
  s.backgroundColor = 'gray';
  s.fontFamily = 'sans-serif';
  // Force this to be above the fullscreen canvas, which is at zIndex: 999999.
  s.zIndex = 1000000;

  var img = document.createElement('img');
  img.src = this.icon;
  var s = img.style;
  s.marginLeft = '25%';
  s.marginTop = '25%';
  s.width = '50%';
  overlay.appendChild(img);

  var text = document.createElement('div');
  var s = text.style;
  s.textAlign = 'center';
  s.fontSize = '16px';
  s.lineHeight = '24px';
  s.margin = '24px 25%';
  s.width = '50%';
  text.innerHTML = 'Place your phone into your Cardboard viewer.';
  overlay.appendChild(text);

  var snackbar = document.createElement('div');
  var s = snackbar.style;
  s.backgroundColor = '#CFD8DC';
  s.position = 'fixed';
  s.bottom = 0;
  s.width = '100%';
  s.height = '48px';
  s.padding = '14px 24px';
  s.boxSizing = 'border-box';
  s.color = '#656A6B';
  overlay.appendChild(snackbar);

  var snackbarText = document.createElement('div');
  snackbarText.style.float = 'left';
  snackbarText.innerHTML = 'No Cardboard viewer?';

  var snackbarButton = document.createElement('a');
  snackbarButton.href = 'https://www.google.com/get/cardboard/get-cardboard/';
  snackbarButton.innerHTML = 'get one';
  snackbarButton.target = '_blank';
  var s = snackbarButton.style;
  s.float = 'right';
  s.fontWeight = 600;
  s.textTransform = 'uppercase';
  s.borderLeft = '1px solid gray';
  s.paddingLeft = '24px';
  s.textDecoration = 'none';
  s.color = '#656A6B';

  snackbar.appendChild(snackbarText);
  snackbar.appendChild(snackbarButton);

  this.overlay = overlay;
  this.text = text;

  this.hide();
}

RotateInstructions.prototype.show = function(parent) {
  if (!parent && !this.overlay.parentElement) {
    document.body.appendChild(this.overlay);
  } else if (parent) {
    if (this.overlay.parentElement && this.overlay.parentElement != parent)
      this.overlay.parentElement.removeChild(this.overlay);

    parent.appendChild(this.overlay);
  }

  this.overlay.style.display = 'block';

  var img = this.overlay.querySelector('img');
  var s = img.style;

  if (Util.isLandscapeMode()) {
    s.width = '20%';
    s.marginLeft = '40%';
    s.marginTop = '3%';
  } else {
    s.width = '50%';
    s.marginLeft = '25%';
    s.marginTop = '25%';
  }
};

RotateInstructions.prototype.hide = function() {
  this.overlay.style.display = 'none';
};

RotateInstructions.prototype.showTemporarily = function(ms, parent) {
  this.show(parent);
  this.timer = setTimeout(this.hide.bind(this), ms);
};

RotateInstructions.prototype.disableShowTemporarily = function() {
  clearTimeout(this.timer);
};

RotateInstructions.prototype.update = function() {
  this.disableShowTemporarily();
  // In portrait VR mode, tell the user to rotate to landscape. Otherwise, hide
  // the instructions.
  if (!Util.isLandscapeMode() && Util.isMobile()) {
    this.show();
  } else {
    this.hide();
  }
};

RotateInstructions.prototype.loadIcon_ = function() {
  // Encoded asset_src/rotate-instructions.svg
  this.icon = Util.base64('image/svg+xml', '');
};

module.exports = RotateInstructions;

},{"./util.js":22}],17:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * TODO: Fix up all "new THREE" instantiations to improve performance.
 */
var SensorSample = _dereq_('./sensor-sample.js');
var MathUtil = _dereq_('../math-util.js');
var Util = _dereq_('../util.js');

var DEBUG = false;

/**
 * An implementation of a simple complementary filter, which fuses gyroscope and
 * accelerometer data from the 'devicemotion' event.
 *
 * Accelerometer data is very noisy, but stable over the long term.
 * Gyroscope data is smooth, but tends to drift over the long term.
 *
 * This fusion is relatively simple:
 * 1. Get orientation estimates from accelerometer by applying a low-pass filter
 *    on that data.
 * 2. Get orientation estimates from gyroscope by integrating over time.
 * 3. Combine the two estimates, weighing (1) in the long term, but (2) for the
 *    short term.
 */
function ComplementaryFilter(kFilter) {
  this.kFilter = kFilter;

  // Raw sensor measurements.
  this.currentAccelMeasurement = new SensorSample();
  this.currentGyroMeasurement = new SensorSample();
  this.previousGyroMeasurement = new SensorSample();

  // Current filter orientation
  this.filterQ = new MathUtil.Quaternion();
  this.previousFilterQ = new MathUtil.Quaternion();

  // Orientation based on the accelerometer.
  this.accelQ = new MathUtil.Quaternion();
  // Whether or not the orientation has been initialized.
  this.isOrientationInitialized = false;
  // Running estimate of gravity based on the current orientation.
  this.estimatedGravity = new MathUtil.Vector3();
  // Measured gravity based on accelerometer.
  this.measuredGravity = new MathUtil.Vector3();

  // Debug only quaternion of gyro-based orientation.
  this.gyroIntegralQ = new MathUtil.Quaternion();
}

ComplementaryFilter.prototype.addAccelMeasurement = function(vector, timestampS) {
  this.currentAccelMeasurement.set(vector, timestampS);
};

ComplementaryFilter.prototype.addGyroMeasurement = function(vector, timestampS) {
  this.currentGyroMeasurement.set(vector, timestampS);

  var deltaT = timestampS - this.previousGyroMeasurement.timestampS;
  if (Util.isTimestampDeltaValid(deltaT)) {
    this.run_();
  }

  this.previousGyroMeasurement.copy(this.currentGyroMeasurement);
};

ComplementaryFilter.prototype.run_ = function() {

  if (!this.isOrientationInitialized) {
    this.accelQ = this.accelToQuaternion_(this.currentAccelMeasurement.sample);
    this.previousFilterQ.copy(this.accelQ);
    this.isOrientationInitialized = true;
    return;
  }

  var deltaT = this.currentGyroMeasurement.timestampS -
      this.previousGyroMeasurement.timestampS;

  // Convert gyro rotation vector to a quaternion delta.
  var gyroDeltaQ = this.gyroToQuaternionDelta_(this.currentGyroMeasurement.sample, deltaT);
  this.gyroIntegralQ.multiply(gyroDeltaQ);

  // filter_1 = K * (filter_0 + gyro * dT) + (1 - K) * accel.
  this.filterQ.copy(this.previousFilterQ);
  this.filterQ.multiply(gyroDeltaQ);

  // Calculate the delta between the current estimated gravity and the real
  // gravity vector from accelerometer.
  var invFilterQ = new MathUtil.Quaternion();
  invFilterQ.copy(this.filterQ);
  invFilterQ.inverse();

  this.estimatedGravity.set(0, 0, -1);
  this.estimatedGravity.applyQuaternion(invFilterQ);
  this.estimatedGravity.normalize();

  this.measuredGravity.copy(this.currentAccelMeasurement.sample);
  this.measuredGravity.normalize();

  // Compare estimated gravity with measured gravity, get the delta quaternion
  // between the two.
  var deltaQ = new MathUtil.Quaternion();
  deltaQ.setFromUnitVectors(this.estimatedGravity, this.measuredGravity);
  deltaQ.inverse();

  if (DEBUG) {
    console.log('Delta: %d deg, G_est: (%s, %s, %s), G_meas: (%s, %s, %s)',
                MathUtil.radToDeg * Util.getQuaternionAngle(deltaQ),
                (this.estimatedGravity.x).toFixed(1),
                (this.estimatedGravity.y).toFixed(1),
                (this.estimatedGravity.z).toFixed(1),
                (this.measuredGravity.x).toFixed(1),
                (this.measuredGravity.y).toFixed(1),
                (this.measuredGravity.z).toFixed(1));
  }

  // Calculate the SLERP target: current orientation plus the measured-estimated
  // quaternion delta.
  var targetQ = new MathUtil.Quaternion();
  targetQ.copy(this.filterQ);
  targetQ.multiply(deltaQ);

  // SLERP factor: 0 is pure gyro, 1 is pure accel.
  this.filterQ.slerp(targetQ, 1 - this.kFilter);

  this.previousFilterQ.copy(this.filterQ);
};

ComplementaryFilter.prototype.getOrientation = function() {
  return this.filterQ;
};

ComplementaryFilter.prototype.accelToQuaternion_ = function(accel) {
  var normAccel = new MathUtil.Vector3();
  normAccel.copy(accel);
  normAccel.normalize();
  var quat = new MathUtil.Quaternion();
  quat.setFromUnitVectors(new MathUtil.Vector3(0, 0, -1), normAccel);
  quat.inverse();
  return quat;
};

ComplementaryFilter.prototype.gyroToQuaternionDelta_ = function(gyro, dt) {
  // Extract axis and angle from the gyroscope data.
  var quat = new MathUtil.Quaternion();
  var axis = new MathUtil.Vector3();
  axis.copy(gyro);
  axis.normalize();
  quat.setFromAxisAngle(axis, gyro.length() * dt);
  return quat;
};


module.exports = ComplementaryFilter;

},{"../math-util.js":14,"../util.js":22,"./sensor-sample.js":20}],18:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ComplementaryFilter = _dereq_('./complementary-filter.js');
var PosePredictor = _dereq_('./pose-predictor.js');
var TouchPanner = _dereq_('../touch-panner.js');
var MathUtil = _dereq_('../math-util.js');
var Util = _dereq_('../util.js');

/**
 * The pose sensor, implemented using DeviceMotion APIs.
 */
function FusionPoseSensor() {
  this.deviceId = 'webvr-polyfill:fused';
  this.deviceName = 'VR Position Device (webvr-polyfill:fused)';

  this.accelerometer = new MathUtil.Vector3();
  this.gyroscope = new MathUtil.Vector3();

  window.addEventListener('devicemotion', this.onDeviceMotionChange_.bind(this));
  window.addEventListener('orientationchange', this.onScreenOrientationChange_.bind(this));

  this.filter = new ComplementaryFilter(WebVRConfig.K_FILTER);
  this.posePredictor = new PosePredictor(WebVRConfig.PREDICTION_TIME_S);
  this.touchPanner = new TouchPanner();

  this.filterToWorldQ = new MathUtil.Quaternion();

  // Set the filter to world transform, depending on OS.
  if (Util.isIOS()) {
    this.filterToWorldQ.setFromAxisAngle(new MathUtil.Vector3(1, 0, 0), Math.PI / 2);
  } else {
    this.filterToWorldQ.setFromAxisAngle(new MathUtil.Vector3(1, 0, 0), -Math.PI / 2);
  }

  this.inverseWorldToScreenQ = new MathUtil.Quaternion();
  this.worldToScreenQ = new MathUtil.Quaternion();
  this.originalPoseAdjustQ = new MathUtil.Quaternion();
  this.originalPoseAdjustQ.setFromAxisAngle(new MathUtil.Vector3(0, 0, 1),
                                           -window.orientation * Math.PI / 180);

  this.setScreenTransform_();
  // Adjust this filter for being in landscape mode.
  if (Util.isLandscapeMode()) {
    this.filterToWorldQ.multiply(this.inverseWorldToScreenQ);
  }

  // Keep track of a reset transform for resetSensor.
  this.resetQ = new MathUtil.Quaternion();

  this.isFirefoxAndroid = Util.isFirefoxAndroid();
  this.isIOS = Util.isIOS();

  this.orientationOut_ = new Float32Array(4);
}

FusionPoseSensor.prototype.getPosition = function() {
  // This PoseSensor doesn't support position
  return null;
};

FusionPoseSensor.prototype.getOrientation = function() {
  // Convert from filter space to the the same system used by the
  // deviceorientation event.
  var orientation = this.filter.getOrientation();

  // Predict orientation.
  this.predictedQ = this.posePredictor.getPrediction(orientation, this.gyroscope, this.previousTimestampS);

  // Convert to THREE coordinate system: -Z forward, Y up, X right.
  var out = new MathUtil.Quaternion();
  out.copy(this.filterToWorldQ);
  out.multiply(this.resetQ);
  if (!WebVRConfig.TOUCH_PANNER_DISABLED) {
    out.multiply(this.touchPanner.getOrientation());
  }
  out.multiply(this.predictedQ);
  out.multiply(this.worldToScreenQ);

  // Handle the yaw-only case.
  if (WebVRConfig.YAW_ONLY) {
    // Make a quaternion that only turns around the Y-axis.
    out.x = 0;
    out.z = 0;
    out.normalize();
  }

  this.orientationOut_[0] = out.x;
  this.orientationOut_[1] = out.y;
  this.orientationOut_[2] = out.z;
  this.orientationOut_[3] = out.w;
  return this.orientationOut_;
};

FusionPoseSensor.prototype.resetPose = function() {
  // Reduce to inverted yaw-only.
  this.resetQ.copy(this.filter.getOrientation());
  this.resetQ.x = 0;
  this.resetQ.y = 0;
  this.resetQ.z *= -1;
  this.resetQ.normalize();

  // Take into account extra transformations in landscape mode.
  if (Util.isLandscapeMode()) {
    this.resetQ.multiply(this.inverseWorldToScreenQ);
  }

  // Take into account original pose.
  this.resetQ.multiply(this.originalPoseAdjustQ);

  if (!WebVRConfig.TOUCH_PANNER_DISABLED) {
    this.touchPanner.resetSensor();
  }
};

FusionPoseSensor.prototype.onDeviceMotionChange_ = function(deviceMotion) {
  var accGravity = deviceMotion.accelerationIncludingGravity;
  var rotRate = deviceMotion.rotationRate;
  var timestampS = deviceMotion.timeStamp / 1000;

  // Firefox Android timeStamp returns one thousandth of a millisecond.
  if (this.isFirefoxAndroid) {
    timestampS /= 1000;
  }

  var deltaS = timestampS - this.previousTimestampS;
  if (deltaS <= Util.MIN_TIMESTEP || deltaS > Util.MAX_TIMESTEP) {
    console.warn('Invalid timestamps detected. Time step between successive ' +
                 'gyroscope sensor samples is very small or not monotonic');
    this.previousTimestampS = timestampS;
    return;
  }
  this.accelerometer.set(-accGravity.x, -accGravity.y, -accGravity.z);
  this.gyroscope.set(rotRate.alpha, rotRate.beta, rotRate.gamma);

  // With iOS and Firefox Android, rotationRate is reported in degrees,
  // so we first convert to radians.
  if (this.isIOS || this.isFirefoxAndroid) {
    this.gyroscope.multiplyScalar(Math.PI / 180);
  }

  this.filter.addAccelMeasurement(this.accelerometer, timestampS);
  this.filter.addGyroMeasurement(this.gyroscope, timestampS);

  this.previousTimestampS = timestampS;
};

FusionPoseSensor.prototype.onScreenOrientationChange_ =
    function(screenOrientation) {
  this.setScreenTransform_();
};

FusionPoseSensor.prototype.setScreenTransform_ = function() {
  this.worldToScreenQ.set(0, 0, 0, 1);
  switch (window.orientation) {
    case 0:
      break;
    case 90:
      this.worldToScreenQ.setFromAxisAngle(new MathUtil.Vector3(0, 0, 1), -Math.PI / 2);
      break;
    case -90:
      this.worldToScreenQ.setFromAxisAngle(new MathUtil.Vector3(0, 0, 1), Math.PI / 2);
      break;
    case 180:
      // TODO.
      break;
  }
  this.inverseWorldToScreenQ.copy(this.worldToScreenQ);
  this.inverseWorldToScreenQ.inverse();
};

module.exports = FusionPoseSensor;

},{"../math-util.js":14,"../touch-panner.js":21,"../util.js":22,"./complementary-filter.js":17,"./pose-predictor.js":19}],19:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var MathUtil = _dereq_('../math-util.js');
var DEBUG = false;

/**
 * Given an orientation and the gyroscope data, predicts the future orientation
 * of the head. This makes rendering appear faster.
 *
 * Also see: http://msl.cs.uiuc.edu/~lavalle/papers/LavYerKatAnt14.pdf
 *
 * @param {Number} predictionTimeS time from head movement to the appearance of
 * the corresponding image.
 */
function PosePredictor(predictionTimeS) {
  this.predictionTimeS = predictionTimeS;

  // The quaternion corresponding to the previous state.
  this.previousQ = new MathUtil.Quaternion();
  // Previous time a prediction occurred.
  this.previousTimestampS = null;

  // The delta quaternion that adjusts the current pose.
  this.deltaQ = new MathUtil.Quaternion();
  // The output quaternion.
  this.outQ = new MathUtil.Quaternion();
}

PosePredictor.prototype.getPrediction = function(currentQ, gyro, timestampS) {
  if (!this.previousTimestampS) {
    this.previousQ.copy(currentQ);
    this.previousTimestampS = timestampS;
    return currentQ;
  }

  // Calculate axis and angle based on gyroscope rotation rate data.
  var axis = new MathUtil.Vector3();
  axis.copy(gyro);
  axis.normalize();

  var angularSpeed = gyro.length();

  // If we're rotating slowly, don't do prediction.
  if (angularSpeed < MathUtil.degToRad * 20) {
    if (DEBUG) {
      console.log('Moving slowly, at %s deg/s: no prediction',
                  (MathUtil.radToDeg * angularSpeed).toFixed(1));
    }
    this.outQ.copy(currentQ);
    this.previousQ.copy(currentQ);
    return this.outQ;
  }

  // Get the predicted angle based on the time delta and latency.
  var deltaT = timestampS - this.previousTimestampS;
  var predictAngle = angularSpeed * this.predictionTimeS;

  this.deltaQ.setFromAxisAngle(axis, predictAngle);
  this.outQ.copy(this.previousQ);
  this.outQ.multiply(this.deltaQ);

  this.previousQ.copy(currentQ);

  return this.outQ;
};


module.exports = PosePredictor;

},{"../math-util.js":14}],20:[function(_dereq_,module,exports){
function SensorSample(sample, timestampS) {
  this.set(sample, timestampS);
};

SensorSample.prototype.set = function(sample, timestampS) {
  this.sample = sample;
  this.timestampS = timestampS;
};

SensorSample.prototype.copy = function(sensorSample) {
  this.set(sensorSample.sample, sensorSample.timestampS);
};

module.exports = SensorSample;

},{}],21:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var MathUtil = _dereq_('./math-util.js');
var Util = _dereq_('./util.js');

var ROTATE_SPEED = 0.5;
/**
 * Provides a quaternion responsible for pre-panning the scene before further
 * transformations due to device sensors.
 */
function TouchPanner() {
  window.addEventListener('touchstart', this.onTouchStart_.bind(this));
  window.addEventListener('touchmove', this.onTouchMove_.bind(this));
  window.addEventListener('touchend', this.onTouchEnd_.bind(this));

  this.isTouching = false;
  this.rotateStart = new MathUtil.Vector2();
  this.rotateEnd = new MathUtil.Vector2();
  this.rotateDelta = new MathUtil.Vector2();

  this.theta = 0;
  this.orientation = new MathUtil.Quaternion();
}

TouchPanner.prototype.getOrientation = function() {
  this.orientation.setFromEulerXYZ(0, 0, this.theta);
  return this.orientation;
};

TouchPanner.prototype.resetSensor = function() {
  this.theta = 0;
};

TouchPanner.prototype.onTouchStart_ = function(e) {
  // Only respond if there is exactly one touch.
  if (e.touches.length != 1) {
    return;
  }
  this.rotateStart.set(e.touches[0].pageX, e.touches[0].pageY);
  this.isTouching = true;
};

TouchPanner.prototype.onTouchMove_ = function(e) {
  if (!this.isTouching) {
    return;
  }
  this.rotateEnd.set(e.touches[0].pageX, e.touches[0].pageY);
  this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart);
  this.rotateStart.copy(this.rotateEnd);

  // On iOS, direction is inverted.
  if (Util.isIOS()) {
    this.rotateDelta.x *= -1;
  }

  var element = document.body;
  this.theta += 2 * Math.PI * this.rotateDelta.x / element.clientWidth * ROTATE_SPEED;
};

TouchPanner.prototype.onTouchEnd_ = function(e) {
  this.isTouching = false;
};

module.exports = TouchPanner;

},{"./math-util.js":14,"./util.js":22}],22:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var objectAssign = _dereq_('object-assign');

var Util = window.Util || {};

Util.MIN_TIMESTEP = 0.001;
Util.MAX_TIMESTEP = 1;

Util.base64 = function(mimeType, base64) {
  return 'data:' + mimeType + ';base64,' + base64;
};

Util.clamp = function(value, min, max) {
  return Math.min(Math.max(min, value), max);
};

Util.lerp = function(a, b, t) {
  return a + ((b - a) * t);
};

Util.isIOS = (function() {
  var isIOS = /iPad|iPhone|iPod/.test(navigator.platform);
  return function() {
    return isIOS;
  };
})();

Util.isSafari = (function() {
  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  return function() {
    return isSafari;
  };
})();

Util.isFirefoxAndroid = (function() {
  var isFirefoxAndroid = navigator.userAgent.indexOf('Firefox') !== -1 &&
      navigator.userAgent.indexOf('Android') !== -1;
  return function() {
    return isFirefoxAndroid;
  };
})();

Util.isLandscapeMode = function() {
  return (window.orientation == 90 || window.orientation == -90);
};

// Helper method to validate the time steps of sensor timestamps.
Util.isTimestampDeltaValid = function(timestampDeltaS) {
  if (isNaN(timestampDeltaS)) {
    return false;
  }
  if (timestampDeltaS <= Util.MIN_TIMESTEP) {
    return false;
  }
  if (timestampDeltaS > Util.MAX_TIMESTEP) {
    return false;
  }
  return true;
};

Util.getScreenWidth = function() {
  return Math.max(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

Util.getScreenHeight = function() {
  return Math.min(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

Util.requestFullscreen = function(element) {
  if (element.requestFullscreen) {
    element.requestFullscreen();
  } else if (element.webkitRequestFullscreen) {
    element.webkitRequestFullscreen();
  } else if (element.mozRequestFullScreen) {
    element.mozRequestFullScreen();
  } else if (element.msRequestFullscreen) {
    element.msRequestFullscreen();
  } else {
    return false;
  }

  return true;
};

Util.exitFullscreen = function() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if (document.msExitFullscreen) {
    document.msExitFullscreen();
  } else {
    return false;
  }

  return true;
};

Util.getFullscreenElement = function() {
  return document.fullscreenElement ||
      document.webkitFullscreenElement ||
      document.mozFullScreenElement ||
      document.msFullscreenElement;
};

Util.linkProgram = function(gl, vertexSource, fragmentSource, attribLocationMap) {
  // No error checking for brevity.
  var vertexShader = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(vertexShader, vertexSource);
  gl.compileShader(vertexShader);

  var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(fragmentShader, fragmentSource);
  gl.compileShader(fragmentShader);

  var program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);

  for (var attribName in attribLocationMap)
    gl.bindAttribLocation(program, attribLocationMap[attribName], attribName);

  gl.linkProgram(program);

  gl.deleteShader(vertexShader);
  gl.deleteShader(fragmentShader);

  return program;
};

Util.getProgramUniforms = function(gl, program) {
  var uniforms = {};
  var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
  var uniformName = '';
  for (var i = 0; i < uniformCount; i++) {
    var uniformInfo = gl.getActiveUniform(program, i);
    uniformName = uniformInfo.name.replace('[0]', '');
    uniforms[uniformName] = gl.getUniformLocation(program, uniformName);
  }
  return uniforms;
};

Util.orthoMatrix = function (out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right),
      bt = 1 / (bottom - top),
      nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
};

Util.isMobile = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

Util.extend = objectAssign;

Util.safariCssSizeWorkaround = function(canvas) {
  // TODO(smus): Remove this workaround when Safari for iOS is fixed.
  // iOS only workaround (for https://bugs.webkit.org/show_bug.cgi?id=152556).
  //
  // "To the last I grapple with thee;
  //  from hell's heart I stab at thee;
  //  for hate's sake I spit my last breath at thee."
  // -- Moby Dick, by Herman Melville
  if (Util.isIOS()) {
    var width = canvas.style.width;
    var height = canvas.style.height;
    canvas.style.width = (parseInt(width) + 1) + 'px';
    canvas.style.height = (parseInt(height)) + 'px';
    console.log('Resetting width to...', width);
    setTimeout(function() {
      console.log('Done. Width is now', width);
      canvas.style.width = width;
      canvas.style.height = height;
    }, 100);
  }

  // Debug only.
  window.Util = Util;
  window.canvas = canvas;
};

module.exports = Util;

},{"object-assign":1}],23:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Emitter = _dereq_('./emitter.js');
var Util = _dereq_('./util.js');
var DeviceInfo = _dereq_('./device-info.js');

var DEFAULT_VIEWER = 'CardboardV1';
var VIEWER_KEY = 'WEBVR_CARDBOARD_VIEWER';
var CLASS_NAME = 'webvr-polyfill-viewer-selector';

/**
 * Creates a viewer selector with the options specified. Supports being shown
 * and hidden. Generates events when viewer parameters change. Also supports
 * saving the currently selected index in localStorage.
 */
function ViewerSelector() {
  // Try to load the selected key from local storage. If none exists, use the
  // default key.
  try {
    this.selectedKey = localStorage.getItem(VIEWER_KEY) || DEFAULT_VIEWER;
  } catch (error) {
    console.error('Failed to load viewer profile: %s', error);
  }
  this.dialog = this.createDialog_(DeviceInfo.Viewers);
  this.root = null;
}
ViewerSelector.prototype = new Emitter();

ViewerSelector.prototype.show = function(root) {
  this.root = root;

  root.appendChild(this.dialog);
  //console.log('ViewerSelector.show');

  // Ensure the currently selected item is checked.
  var selected = this.dialog.querySelector('#' + this.selectedKey);
  selected.checked = true;

  // Show the UI.
  this.dialog.style.display = 'block';
};

ViewerSelector.prototype.hide = function() {
  if (this.root && this.root.contains(this.dialog)) {
    this.root.removeChild(this.dialog);
  }
  //console.log('ViewerSelector.hide');
  this.dialog.style.display = 'none';
};

ViewerSelector.prototype.getCurrentViewer = function() {
  return DeviceInfo.Viewers[this.selectedKey];
};

ViewerSelector.prototype.getSelectedKey_ = function() {
  var input = this.dialog.querySelector('input[name=field]:checked');
  if (input) {
    return input.id;
  }
  return null;
};

ViewerSelector.prototype.onSave_ = function() {
  this.selectedKey = this.getSelectedKey_();
  if (!this.selectedKey || !DeviceInfo.Viewers[this.selectedKey]) {
    console.error('ViewerSelector.onSave_: this should never happen!');
    return;
  }

  this.emit('change', DeviceInfo.Viewers[this.selectedKey]);

  // Attempt to save the viewer profile, but fails in private mode.
  try {
    localStorage.setItem(VIEWER_KEY, this.selectedKey);
  } catch(error) {
    console.error('Failed to save viewer profile: %s', error);
  }
  this.hide();
};

/**
 * Creates the dialog.
 */
ViewerSelector.prototype.createDialog_ = function(options) {
  var container = document.createElement('div');
  container.classList.add(CLASS_NAME);
  container.style.display = 'none';
  // Create an overlay that dims the background, and which goes away when you
  // tap it.
  var overlay = document.createElement('div');
  var s = overlay.style;
  s.position = 'fixed';
  s.left = 0;
  s.top = 0;
  s.width = '100%';
  s.height = '100%';
  s.background = 'rgba(0, 0, 0, 0.3)';
  overlay.addEventListener('click', this.hide.bind(this));

  var width = 280;
  var dialog = document.createElement('div');
  var s = dialog.style;
  s.boxSizing = 'border-box';
  s.position = 'fixed';
  s.top = '24px';
  s.left = '50%';
  s.marginLeft = (-width/2) + 'px';
  s.width = width + 'px';
  s.padding = '24px';
  s.overflow = 'hidden';
  s.background = '#fafafa';
  s.fontFamily = "'Roboto', sans-serif";
  s.boxShadow = '0px 5px 20px #666';

  dialog.appendChild(this.createH1_('Select your viewer'));
  for (var id in options) {
    dialog.appendChild(this.createChoice_(id, options[id].label));
  }
  dialog.appendChild(this.createButton_('Save', this.onSave_.bind(this)));

  container.appendChild(overlay);
  container.appendChild(dialog);

  return container;
};

ViewerSelector.prototype.createH1_ = function(name) {
  var h1 = document.createElement('h1');
  var s = h1.style;
  s.color = 'black';
  s.fontSize = '20px';
  s.fontWeight = 'bold';
  s.marginTop = 0;
  s.marginBottom = '24px';
  h1.innerHTML = name;
  return h1;
};

ViewerSelector.prototype.createChoice_ = function(id, name) {
  /*
  <div class="choice">
  <input id="v1" type="radio" name="field" value="v1">
  <label for="v1">Cardboard V1</label>
  </div>
  */
  var div = document.createElement('div');
  div.style.marginTop = '8px';
  div.style.color = 'black';

  var input = document.createElement('input');
  input.style.fontSize = '30px';
  input.setAttribute('id', id);
  input.setAttribute('type', 'radio');
  input.setAttribute('value', id);
  input.setAttribute('name', 'field');

  var label = document.createElement('label');
  label.style.marginLeft = '4px';
  label.setAttribute('for', id);
  label.innerHTML = name;

  div.appendChild(input);
  div.appendChild(label);

  return div;
};

ViewerSelector.prototype.createButton_ = function(label, onclick) {
  var button = document.createElement('button');
  button.innerHTML = label;
  var s = button.style;
  s.float = 'right';
  s.textTransform = 'uppercase';
  s.color = '#1094f7';
  s.fontSize = '14px';
  s.letterSpacing = 0;
  s.border = 0;
  s.background = 'none';
  s.marginTop = '16px';

  button.addEventListener('click', onclick);

  return button;
};

module.exports = ViewerSelector;

},{"./device-info.js":7,"./emitter.js":12,"./util.js":22}],24:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Util = _dereq_('./util.js');

/**
 * Android and iOS compatible wakelock implementation.
 *
 * Refactored thanks to dkovalev@.
 */
function AndroidWakeLock() {
  var video = document.createElement('video');

  video.addEventListener('ended', function() {
    video.play();
  });

  this.request = function() {
    if (video.paused) {
      // Base64 version of videos_src/no-sleep-120s.mp4.
      video.src = Util.base64('video/mp4', 'AAAAGGZ0eXBpc29tAAAAAG1wNDFhdmMxAAAIA21vb3YAAABsbXZoZAAAAADSa9v60mvb+gABX5AAlw/gAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAdkdHJhawAAAFx0a2hkAAAAAdJr2/rSa9v6AAAAAQAAAAAAlw/gAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAQAAAAHAAAAAAAJGVkdHMAAAAcZWxzdAAAAAAAAAABAJcP4AAAAAAAAQAAAAAG3G1kaWEAAAAgbWRoZAAAAADSa9v60mvb+gAPQkAGjneAFccAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAABodtaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAZHc3RibAAAAJdzdHNkAAAAAAAAAAEAAACHYXZjMQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAMABwASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAADFhdmNDAWQAC//hABlnZAALrNlfllw4QAAAAwBAAAADAKPFCmWAAQAFaOvssiwAAAAYc3R0cwAAAAAAAAABAAAAbgAPQkAAAAAUc3RzcwAAAAAAAAABAAAAAQAAA4BjdHRzAAAAAAAAAG4AAAABAD0JAAAAAAEAehIAAAAAAQA9CQAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEATEtAAAAAAQAehIAAAAABAAAAAAAAAAEAD0JAAAAAAQBMS0AAAAABAB6EgAAAAAEAAAAAAAAAAQAPQkAAAAABAExLQAAAAAEAHoSAAAAAAQAAAAAAAAABAA9CQAAAAAEALcbAAAAAHHN0c2MAAAAAAAAAAQAAAAEAAABuAAAAAQAAAcxzdHN6AAAAAAAAAAAAAABuAAADCQAAABgAAAAOAAAADgAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABIAAAAOAAAADAAAAAwAAAASAAAADgAAAAwAAAAMAAAAEgAAAA4AAAAMAAAADAAAABMAAAAUc3RjbwAAAAAAAAABAAAIKwAAACt1ZHRhAAAAI6llbmMAFwAAdmxjIDIuMi4xIHN0cmVhbSBvdXRwdXQAAAAId2lkZQAACRRtZGF0AAACrgX//6vcRem95tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTQyIC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENvcHlsZWZ0IDIwMDMtMjAxNCAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9wdGlvbnM6IGNhYmFjPTEgcmVmPTMgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MzoweDEzIG1lPWhleCBzdWJtZT03IHBzeT0xIHBzeV9yZD0xLjAwOjAuMDAgbWl4ZWRfcmVmPTEgbWVfcmFuZ2U9MTYgY2hyb21hX21lPTEgdHJlbGxpcz0xIDh4OGRjdD0xIGNxbT0wIGRlYWR6b25lPTIxLDExIGZhc3RfcHNraXA9MSBjaHJvbWFfcXBfb2Zmc2V0PS0yIHRocmVhZHM9MTIgbG9va2FoZWFkX3RocmVhZHM9MSBzbGljZWRfdGhyZWFkcz0wIG5yPTAgZGVjaW1hdGU9MSBpbnRlcmxhY2VkPTAgYmx1cmF5X2NvbXBhdD0wIGNvbnN0cmFpbmVkX2ludHJhPTAgYmZyYW1lcz0zIGJfcHlyYW1pZD0yIGJfYWRhcHQ9MSBiX2JpYXM9MCBkaXJlY3Q9MSB3ZWlnaHRiPTEgb3Blbl9nb3A9MCB3ZWlnaHRwPTIga2V5aW50PTI1MCBrZXlpbnRfbWluPTEgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVzaD0wIHJjX2xvb2thaGVhZD00MCByYz1hYnIgbWJ0cmVlPTEgYml0cmF0ZT0xMDAgcmF0ZXRvbD0xLjAgcWNvbXA9MC42MCBxcG1pbj0xMCBxcG1heD01MSBxcHN0ZXA9NCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAAU2WIhAAQ/8ltlOe+cTZuGkKg+aRtuivcDZ0pBsfsEi9p/i1yU9DxS2lq4dXTinViF1URBKXgnzKBd/Uh1bkhHtMrwrRcOJslD01UB+fyaL6ef+DBAAAAFEGaJGxBD5B+v+a+4QqF3MgBXz9MAAAACkGeQniH/+94r6EAAAAKAZ5hdEN/8QytwAAAAAgBnmNqQ3/EgQAAAA5BmmhJqEFomUwIIf/+4QAAAApBnoZFESw//76BAAAACAGepXRDf8SBAAAACAGep2pDf8SAAAAADkGarEmoQWyZTAgh//7gAAAACkGeykUVLD//voEAAAAIAZ7pdEN/xIAAAAAIAZ7rakN/xIAAAAAOQZrwSahBbJlMCCH//uEAAAAKQZ8ORRUsP/++gQAAAAgBny10Q3/EgQAAAAgBny9qQ3/EgAAAAA5BmzRJqEFsmUwIIf/+4AAAAApBn1JFFSw//76BAAAACAGfcXRDf8SAAAAACAGfc2pDf8SAAAAADkGbeEmoQWyZTAgh//7hAAAACkGflkUVLD//voAAAAAIAZ+1dEN/xIEAAAAIAZ+3akN/xIEAAAAOQZu8SahBbJlMCCH//uAAAAAKQZ/aRRUsP/++gQAAAAgBn/l0Q3/EgAAAAAgBn/tqQ3/EgQAAAA5Bm+BJqEFsmUwIIf/+4QAAAApBnh5FFSw//76AAAAACAGePXRDf8SAAAAACAGeP2pDf8SBAAAADkGaJEmoQWyZTAgh//7gAAAACkGeQkUVLD//voEAAAAIAZ5hdEN/xIAAAAAIAZ5jakN/xIEAAAAOQZpoSahBbJlMCCH//uEAAAAKQZ6GRRUsP/++gQAAAAgBnqV0Q3/EgQAAAAgBnqdqQ3/EgAAAAA5BmqxJqEFsmUwIIf/+4AAAAApBnspFFSw//76BAAAACAGe6XRDf8SAAAAACAGe62pDf8SAAAAADkGa8EmoQWyZTAgh//7hAAAACkGfDkUVLD//voEAAAAIAZ8tdEN/xIEAAAAIAZ8vakN/xIAAAAAOQZs0SahBbJlMCCH//uAAAAAKQZ9SRRUsP/++gQAAAAgBn3F0Q3/EgAAAAAgBn3NqQ3/EgAAAAA5Bm3hJqEFsmUwIIf/+4QAAAApBn5ZFFSw//76AAAAACAGftXRDf8SBAAAACAGft2pDf8SBAAAADkGbvEmoQWyZTAgh//7gAAAACkGf2kUVLD//voEAAAAIAZ/5dEN/xIAAAAAIAZ/7akN/xIEAAAAOQZvgSahBbJlMCCH//uEAAAAKQZ4eRRUsP/++gAAAAAgBnj10Q3/EgAAAAAgBnj9qQ3/EgQAAAA5BmiRJqEFsmUwIIf/+4AAAAApBnkJFFSw//76BAAAACAGeYXRDf8SAAAAACAGeY2pDf8SBAAAADkGaaEmoQWyZTAgh//7hAAAACkGehkUVLD//voEAAAAIAZ6ldEN/xIEAAAAIAZ6nakN/xIAAAAAOQZqsSahBbJlMCCH//uAAAAAKQZ7KRRUsP/++gQAAAAgBnul0Q3/EgAAAAAgBnutqQ3/EgAAAAA5BmvBJqEFsmUwIIf/+4QAAAApBnw5FFSw//76BAAAACAGfLXRDf8SBAAAACAGfL2pDf8SAAAAADkGbNEmoQWyZTAgh//7gAAAACkGfUkUVLD//voEAAAAIAZ9xdEN/xIAAAAAIAZ9zakN/xIAAAAAOQZt4SahBbJlMCCH//uEAAAAKQZ+WRRUsP/++gAAAAAgBn7V0Q3/EgQAAAAgBn7dqQ3/EgQAAAA5Bm7xJqEFsmUwIIf/+4AAAAApBn9pFFSw//76BAAAACAGf+XRDf8SAAAAACAGf+2pDf8SBAAAADkGb4EmoQWyZTAgh//7hAAAACkGeHkUVLD//voAAAAAIAZ49dEN/xIAAAAAIAZ4/akN/xIEAAAAOQZokSahBbJlMCCH//uAAAAAKQZ5CRRUsP/++gQAAAAgBnmF0Q3/EgAAAAAgBnmNqQ3/EgQAAAA5BmmhJqEFsmUwIIf/+4QAAAApBnoZFFSw//76BAAAACAGepXRDf8SBAAAACAGep2pDf8SAAAAADkGarEmoQWyZTAgh//7gAAAACkGeykUVLD//voEAAAAIAZ7pdEN/xIAAAAAIAZ7rakN/xIAAAAAPQZruSahBbJlMFEw3//7B');
      video.play();
    }
  };

  this.release = function() {
    video.pause();
    video.src = '';
  };
}

function iOSWakeLock() {
  var timer = null;

  this.request = function() {
    if (!timer) {
      timer = setInterval(function() {
        window.location = window.location;
        setTimeout(window.stop, 0);
      }, 30000);
    }
  }

  this.release = function() {
    if (timer) {
      clearInterval(timer);
      timer = null;
    }
  }
}


function getWakeLock() {
  var userAgent = navigator.userAgent || navigator.vendor || window.opera;
  if (userAgent.match(/iPhone/i) || userAgent.match(/iPod/i)) {
    return iOSWakeLock;
  } else {
    return AndroidWakeLock;
  }
}

module.exports = getWakeLock();
},{"./util.js":22}],25:[function(_dereq_,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var CardboardVRDisplay = _dereq_('./cardboard-vr-display.js');
var MouseKeyboardVRDisplay = _dereq_('./mouse-keyboard-vr-display.js');
// Uncomment to add positional tracking via webcam.
//var WebcamPositionSensorVRDevice = require('./webcam-position-sensor-vr-device.js');
var VRDisplay = _dereq_('./base.js').VRDisplay;
var HMDVRDevice = _dereq_('./base.js').HMDVRDevice;
var PositionSensorVRDevice = _dereq_('./base.js').PositionSensorVRDevice;
var VRDisplayHMDDevice = _dereq_('./display-wrappers.js').VRDisplayHMDDevice;
var VRDisplayPositionSensorDevice = _dereq_('./display-wrappers.js').VRDisplayPositionSensorDevice;

function WebVRPolyfill() {
  this.displays = [];
  this.devices = []; // For deprecated objects
  this.devicesPopulated = false;
  this.nativeWebVRAvailable = this.isWebVRAvailable();
  this.nativeLegacyWebVRAvailable = this.isDeprecatedWebVRAvailable();

  if (!this.nativeLegacyWebVRAvailable) {
    if (!this.nativeWebVRAvailable) {
      this.enablePolyfill();
    }
    if (WebVRConfig.ENABLE_DEPRECATED_API) {
      this.enableDeprecatedPolyfill();
    }
  }
}

WebVRPolyfill.prototype.isWebVRAvailable = function() {
  return ('getVRDisplays' in navigator);
};

WebVRPolyfill.prototype.isDeprecatedWebVRAvailable = function() {
  return ('getVRDevices' in navigator) || ('mozGetVRDevices' in navigator);
};

WebVRPolyfill.prototype.populateDevices = function() {
  if (this.devicesPopulated) {
    return;
  }

  // Initialize our virtual VR devices.
  var vrDisplay = null;

  // Add a Cardboard VRDisplay on compatible mobile devices
  if (this.isCardboardCompatible()) {
    vrDisplay = new CardboardVRDisplay();
    this.displays.push(vrDisplay);

    // For backwards compatibility
    if (WebVRConfig.ENABLE_DEPRECATED_API) {
      this.devices.push(new VRDisplayHMDDevice(vrDisplay));
      this.devices.push(new VRDisplayPositionSensorDevice(vrDisplay));
    }
  }

  // Add a Mouse and Keyboard driven VRDisplay for desktops/laptops
  if (!this.isMobile() && !WebVRConfig.MOUSE_KEYBOARD_CONTROLS_DISABLED) {
    vrDisplay = new MouseKeyboardVRDisplay();
    this.displays.push(vrDisplay);

    // For backwards compatibility
    if (WebVRConfig.ENABLE_DEPRECATED_API) {
      this.devices.push(new VRDisplayHMDDevice(vrDisplay));
      this.devices.push(new VRDisplayPositionSensorDevice(vrDisplay));
    }
  }

  // Uncomment to add positional tracking via webcam.
  //if (!this.isMobile() && WebVRConfig.ENABLE_DEPRECATED_API) {
  //  positionDevice = new WebcamPositionSensorVRDevice();
  //  this.devices.push(positionDevice);
  //}

  this.devicesPopulated = true;
};

WebVRPolyfill.prototype.enablePolyfill = function() {
  // Provide navigator.getVRDisplays.
  navigator.getVRDisplays = this.getVRDisplays.bind(this);

  // Provide the VRDisplay object.
  window.VRDisplay = VRDisplay;
};

WebVRPolyfill.prototype.enableDeprecatedPolyfill = function() {
  // Provide navigator.getVRDevices.
  navigator.getVRDevices = this.getVRDevices.bind(this);

  // Provide the CardboardHMDVRDevice and PositionSensorVRDevice objects.
  window.HMDVRDevice = HMDVRDevice;
  window.PositionSensorVRDevice = PositionSensorVRDevice;
};

WebVRPolyfill.prototype.getVRDisplays = function() {
  this.populateDevices();
  var displays = this.displays;
  return new Promise(function(resolve, reject) {
    try {
      resolve(displays);
    } catch (e) {
      reject(e);
    }
  });
};

WebVRPolyfill.prototype.getVRDevices = function() {
  console.warn('getVRDevices is deprecated. Please update your code to use getVRDisplays instead.');
  var self = this;
  return new Promise(function(resolve, reject) {
    try {
      if (!self.devicesPopulated) {
        if (self.nativeWebVRAvailable) {
          return navigator.getVRDisplays(function(displays) {
            for (var i = 0; i < displays.length; ++i) {
              self.devices.push(new VRDisplayHMDDevice(displays[i]));
              self.devices.push(new VRDisplayPositionSensorDevice(displays[i]));
            }
            self.devicesPopulated = true;
            resolve(self.devices);
          }, reject);
        }

        if (self.nativeLegacyWebVRAvailable) {
          return (navigator.getVRDDevices || navigator.mozGetVRDevices)(function(devices) {
            for (var i = 0; i < devices.length; ++i) {
              if (devices[i] instanceof HMDVRDevice) {
                self.devices.push(devices[i]);
              }
              if (devices[i] instanceof PositionSensorVRDevice) {
                self.devices.push(devices[i]);
              }
            }
            self.devicesPopulated = true;
            resolve(self.devices);
          }, reject);
        }
      }

      self.populateDevices();
      resolve(self.devices);
    } catch (e) {
      reject(e);
    }
  });
};

/**
 * Determine if a device is mobile.
 */
WebVRPolyfill.prototype.isMobile = function() {
  return /Android/i.test(navigator.userAgent) ||
      /iPhone|iPad|iPod/i.test(navigator.userAgent);
};

WebVRPolyfill.prototype.isCardboardCompatible = function() {
  // For now, support all iOS and Android devices.
  // Also enable the WebVRConfig.FORCE_VR flag for debugging.
  return this.isMobile() || WebVRConfig.FORCE_ENABLE_VR;
};

module.exports = WebVRPolyfill;

},{"./base.js":2,"./cardboard-vr-display.js":5,"./display-wrappers.js":8,"./mouse-keyboard-vr-display.js":15}]},{},[13]);

},{}],6:[function(require,module,exports){
var Emitter = require('./emitter');
var shaka = require('shaka-player');

var Types = {
  HLS: 1,
  DASH: 2,
  VIDEO: 3
}

/**
 * Supports regular video URLs (eg. mp4), as well as adaptive manifests like
 * DASH (.mpd) and soon HLS (.m3u8).
 *
 * Events: 
 *   load(video): When the video is loaded.
 *   error(message): If an error occurs.
 *
 * To play/pause/seek/etc, please use the underlying video element.
 */
function AdaptivePlayer() {
  // Install built-in polyfills to patch browser incompatibilities.
  shaka.polyfill.installAll();

  this.initPlayer_();
}
AdaptivePlayer.prototype = new Emitter();

AdaptivePlayer.prototype.load = function(url) {
  var self = this;
  // TODO(smus): Investigate whether or not differentiation is best done by
  // mimeType after all. Cursory research suggests that adaptive streaming
  // manifest mime types aren't properly supported.
  //
  // For now, make determination based on extension.
  var extension = Util.getExtension(url);
  switch (extension) {
    case 'm3u8': // HLS
      this.type = Types.HLS;
      console.error('HLS is not yet supported.');
      break;
    case 'mpd': // MPEG-DASH
      this.type = Types.DASH;
      this.player.load(url).then(function() {
        console.log('The video has now been loaded!');
        self.emit('load', self.video);
      }).catch(this.onError_.bind(this));
      break;
    default: // A regular video, not an adaptive manifest.
      this.type = Types.VIDEO;
      this.loadVideo_(url).then(function() {
        self.emit('load', self.video);
      }).catch(this.onError_.bind(this));
      break;
  }
};


/*** PRIVATE API ***/

AdaptivePlayer.prototype.initPlayer_ = function() {
  // Create a Player instance.
  var video = document.createElement('video');
  var player = new shaka.Player(video);

  // Listen for error events.
  player.addEventListener('error', this.onError_);

  // Save player.
  this.player = player;
  this.video = video;
}

AdaptivePlayer.prototype.onError_ = function(e) {
  console.error(e);
  this.emit('error', e);
};

AdaptivePlayer.prototype.loadVideo_ = function(url) {
  var video = this.video;
  return new Promise(function(resolve, reject) {
    video.loop = true;
    video.src = url;
    // Enable inline video playback in iOS 10+.
    video.setAttribute('webkit-playsinline', true);
    video.setAttribute('crossorigin', 'anonymous');
    video.addEventListener('canplaythrough', resolve);
    video.addEventListener('error', reject);
    video.load();
  });
};

module.exports = AdaptivePlayer;

},{"./emitter":8,"shaka-player":2}],7:[function(require,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Sits in an embedded iframe, receiving DeviceMotion messages from a containing
 * iFrame. These messages are converted into synthetic DeviceMotion events.
 *
 * This is a workaround for https://bugs.webkit.org/show_bug.cgi?id=150072.
 */
function DeviceMotionReceiver() {
  window.addEventListener('message', this.onMessage_.bind(this), false);
}

DeviceMotionReceiver.prototype.onMessage_ = function(event) {
  var message = event.data;
  if (message.type !== 'DeviceMotion') {
    console.warn('Got unknown message of type %s from %s', message.type, message.origin);
    return;
  }

  console.log('onMessage_', event);

  // Synthesize a DeviceMotion event.
  this.synthesizeDeviceMotionEvent_(message.deviceMotionEvent);
};

DeviceMotionReceiver.prototype.synthesizeDeviceMotionEvent_ = function(eventData) {
  var type = 'devicemotion-iframe';
  var canBubble = false;
  var cancelable = false;

  var dme = document.createEvent('DeviceMotionEvent');
  dme.initDeviceMotionEvent(type, canBubble, cancelable,
      eventData.acceleration,
      eventData.accelerationIncludingGravity,
      eventData.rotationRate,
      eventData.interval);

  window.dispatchEvent(dme);
};

module.exports = DeviceMotionReceiver;

},{}],8:[function(require,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function Emitter() {
  this.initEmitter();
}

Emitter.prototype.initEmitter = function() {
  this.callbacks = {};
};

Emitter.prototype.emit = function(eventName) {
  var callbacks = this.callbacks[eventName];
  if (!callbacks) {
    console.log('No valid callback specified.');
    return;
  }
  var args = [].slice.call(arguments)
  // Eliminate the first param (the callback).
  args.shift();
  for (var i = 0; i < callbacks.length; i++) {
    callbacks[i].apply(this, args);
  }
};

Emitter.prototype.on = function(eventName, callback) {
  if (eventName in this.callbacks) {
    var cbs = this.callbacks[eventName]
    if (cbs.indexOf(callback) == -1) {
      cbs.push(callback);
    }
  } else {
    this.callbacks[eventName] = [callback];
  }
};

Emitter.prototype.removeListener = function(eventName, callback) {
  if (!(eventName in this.callbacks)) {
    return;
  }
  var cbs = this.callbacks[eventName];
  var ind = cbs.indexOf(callback);
  if (ind == -1) {
    console.warn('No matching callback found');
    return;
  }
  cbs.splice(ind, 1);
};

module.exports = Emitter;

},{}],9:[function(require,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Eyes = {
  LEFT: 1,
  RIGHT: 2
};

module.exports = Eyes;

},{}],10:[function(require,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Shows a 2D loading indicator while various pieces of EmbedVR load.
 */
function LoadingIndicator() {
  this.el = this.build_();
  document.body.appendChild(this.el);
  this.show();
}

LoadingIndicator.prototype.build_ = function() {
  var overlay = document.createElement('div');
  var s = overlay.style;
  s.position = 'fixed';
  s.top = 0;
  s.left = 0;
  s.width = '100%';
  s.height = '100%';
  s.background = '#eee';
  var img = document.createElement('img');
  img.src = 'images/loading.gif';
  var s = img.style;
  s.position = 'absolute';
  s.top = '50%';
  s.left = '50%';
  s.transform = 'translate(-50%, -50%)';

  overlay.appendChild(img);
  return overlay;
};

LoadingIndicator.prototype.hide = function() {
  this.el.style.display = 'none';
};

LoadingIndicator.prototype.show = function() {
  this.el.style.display = 'block';
};

module.exports = LoadingIndicator;

},{}],11:[function(require,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Initialize the loading indicator as quickly as possible to give the user
// immediate feedback.
var LoadingIndicator = require('./loading-indicator');
var loadIndicator = new LoadingIndicator();

var ES6Promise = require('es6-promise');
// Polyfill ES6 promises for IE.
ES6Promise.polyfill();

var AdaptivePlayer = require('./adaptive-player');
var PhotosphereRenderer = require('./photosphere-renderer');
var SceneLoader = require('./scene-loader');
var Stats = require('../node_modules/stats-js/build/stats.min');
var Util = require('./util');
var VideoProxy = require('./video-proxy');
var WebVRPolyfill = require('webvr-polyfill');

// Include the DeviceMotionReceiver for the iOS cross domain iframe workaround.
// This is a workaround for https://bugs.webkit.org/show_bug.cgi?id=150072.
var DeviceMotionReceiver = require('./device-motion-receiver');
var dmr = new DeviceMotionReceiver();

window.addEventListener('load', init);

var stats = new Stats();

var loader = new SceneLoader();
loader.on('error', onSceneError);
loader.on('load', onSceneLoad);

var renderer = new PhotosphereRenderer();
renderer.on('error', onRenderError);

var videoProxy = null;
// TODO: Make this not global.
// Currently global in order to allow callbacks.
var loadedScene = null;

function init() {
  if (!Util.isWebGLEnabled()) {
    showError('WebGL not supported.');
    return;
  }
  // Load the scene.
  loader.loadScene();

  if (Util.getQueryParameter('debug')) {
    showStats();
  }
}

function loadImage(src, params) {
  renderer.on('load', onRenderLoad);
  renderer.setPhotosphere(src, params);
}

function onSceneLoad(scene) {
  if (!scene || !scene.isComplete()) {
    showError('Scene failed to load');
    return;
  }

  loadedScene = scene;

  var params = {
    isStereo: scene.isStereo,
  }
  renderer.setDefaultLookDirection(scene.yaw || 0);

  if (scene.preview) {
    var onPreviewLoad = function() {
      loadIndicator.hide();
      renderer.removeListener('load', onPreviewLoad);
      renderer.setPhotosphere(scene.image, params);
    }
    renderer.removeListener('load', onRenderLoad);
    renderer.on('load', onPreviewLoad);
    renderer.setPhotosphere(scene.preview, params);
  } else if (scene.video) {
    if (Util.isIE11()) {
      // On iOS and IE 11, if an 'image' param is provided, load it instead of
      // showing an error.
      //
      // TODO(smus): Once video textures are supported, remove this fallback.
      if (scene.image) {
        loadImage(scene.image, params);
      } else {
        showError('Video is not supported on IE11.');
      }
    } else {
      var player = new AdaptivePlayer();
      player.on('load', onVideoLoad);
      player.on('error', onVideoLoad);
      player.load(scene.video);

      videoProxy = new VideoProxy(player.video);
      // Debug only.
      window.videoProxy = videoProxy;
    }
  } else if (scene.image) {
    // Otherwise, just render the photosphere.
    loadImage(scene.image, params);
  }

  console.log('Loaded scene', scene);
}

function onVideoLoad(video) {
  console.log('onVideoLoad');
  // Render the stereo video.
  var params = {
    isStereo: loadedScene.isStereo,
  }
  loadIndicator.hide();

  renderer.set360Video(video, params);

  // On mobile, tell the user they need to tap to start. Otherwise, autoplay.
  if (Util.isMobile()) {
    // Tell user to tap to start.
    showPlayButton();
    document.body.addEventListener('touchend', onVideoTap);
  } else {
    video.play();
  }
}

function onVideoTap() {
  videoProxy.play();
  hidePlayButton();

  // Prevent multiple play() calls on the video element.
  document.body.removeEventListener('touchend', onVideoTap);
}

function onRenderLoad() {
  // Hide loading indicator.
  loadIndicator.hide();
}

function onSceneError(message) {
  showError('Loader: ' + message);
}

function onRenderError(message) {
  showError('Render: ' + message);
}

function onVideoError(e) {
  showError('Video load error');
  console.log(e);
}

function showError(message, opt_title) {
  // Hide loading indicator.
  loadIndicator.hide();

  var error = document.querySelector('#error');
  error.classList.add('visible');
  error.querySelector('.message').innerHTML = message;

  var title = (opt_title !== undefined ? opt_title : 'Error');
  error.querySelector('.title').innerHTML = title;
}

function hideError() {
  var error = document.querySelector('#error');
  error.classList.remove('visible');
}

function showPlayButton() {
  var playButton = document.querySelector('#play-overlay');
  playButton.classList.add('visible');
}

function hidePlayButton() {
  var playButton = document.querySelector('#play-overlay');
  playButton.classList.remove('visible');
}

function showStats() {
  stats.setMode(0); // 0: fps, 1: ms

  // Align bottom-left.
  stats.domElement.style.position = 'absolute';
  stats.domElement.style.left = '0px';
  stats.domElement.style.bottom = '0px';
  document.body.appendChild(stats.domElement);
}

function loop(time) {
  stats.begin();
  // Update the video if needed.
  if (videoProxy) {
    videoProxy.update(time);
  }
  renderer.render(time);
  stats.end();
  requestAnimationFrame(loop);
}
requestAnimationFrame(loop);

},{"../node_modules/stats-js/build/stats.min":3,"./adaptive-player":6,"./device-motion-receiver":7,"./loading-indicator":10,"./photosphere-renderer":12,"./scene-loader":14,"./util":15,"./video-proxy":17,"es6-promise":1,"webvr-polyfill":5}],12:[function(require,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Emitter = require('./emitter');
var Eyes = require('./eyes');
var Util = require('./util');
var VertexDistorter = require('./vertex-distorter');
var WebVRManager = require('webvr-boilerplate');

function PhotosphereRenderer() {
  this.init();
}
PhotosphereRenderer.prototype = new Emitter();

PhotosphereRenderer.prototype.init = function() {
  var container = document.querySelector('body');
  var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);
  camera.layers.enable(1);

  var cameraDummy = new THREE.Object3D();
  cameraDummy.add(camera);

  // Antialiasing temporarily disabled to improve performance.
  var renderer = new THREE.WebGLRenderer({antialias: false});
  renderer.setClearColor(0x000000, 0);
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);

  container.appendChild(renderer.domElement);

  var controls = new THREE.VRControls(camera);
  var effect = new THREE.VREffect(renderer);
  // Disable eye separation.
  effect.scale = 0;
  effect.setSize(window.innerWidth, window.innerHeight);

  this.camera = camera;
  this.renderer = renderer;
  this.effect = effect;
  this.controls = controls;
  this.manager = new WebVRManager(renderer, effect, {predistorted: true});

  this.initScenes_();

  // The vertex distorter.
  this.distorter = new VertexDistorter();

  // Watch the resize event.
  window.addEventListener('resize', this.onResize_.bind(this));

  // Watch the custom vrdisplaydeviceparamschange event, which fires whenever
  // the viewer parameters change.
  window.addEventListener('vrdisplaydeviceparamschange',
                          this.onVRDisplayParamsChange_.bind(this));

  window.addEventListener('vrdisplaypresentchange',
                          this.onVRDisplayPresentChange_.bind(this));
};

PhotosphereRenderer.prototype.render = function(timestamp) {
  this.controls.update();
  this.effect.render(this.scene, this.camera);
};

PhotosphereRenderer.prototype.setDefaultLookDirection = function(yaw) {
  // Rotate the camera parent to take into account the scene's rotation.
  // By default, it should be at the center of the image.
  this.camera.parent.rotation.y = (Math.PI / 2.0) + yaw;
};

/**
 * Sets the photosphere based on the image in the source. Supports stereo and
 * mono photospheres.
 *
 * Emits 'load' and 'error' events.
 */
PhotosphereRenderer.prototype.setPhotosphere = function(src, opt_params) {
  var params = opt_params || {};

  this.isStereo = !!params.isStereo;
  this.src = src;

  // Load texture.
  var loader = new THREE.TextureLoader();
  loader.crossOrigin = 'anonymous';
  loader.load(src, this.onTextureLoaded_.bind(this), undefined,
              this.onTextureError_.bind(this));
};

PhotosphereRenderer.prototype.set360Video = function(videoElement, opt_params) {
  // Disable video VR mode in iOS9 and below.
  if (Util.isIOS9OrLess()) {
    this.manager.setVRCompatibleOverride(false);
  }

  var params = opt_params || {};

  this.isStereo = !!params.isStereo;

  // Load the video texture.
  var videoTexture = new THREE.VideoTexture(videoElement);
  videoTexture.minFilter = THREE.NearestFilter;
  videoTexture.magFilter = THREE.NearestFilter;
  videoTexture.format = THREE.RGBFormat;
  videoTexture.generateMipmaps = false;
  videoTexture.needsUpdate = true;

  this.onTextureLoaded_(videoTexture);
};

PhotosphereRenderer.prototype.initScenes_ = function() {
  this.scene = this.createScene_();
  this.scene.add(this.camera.parent);
};

PhotosphereRenderer.prototype.onTextureLoaded_ = function(texture) {
  var sphereLeft;
  var sphereRight;
  if (this.isStereo) {
    sphereLeft = this.createPhotosphere_(texture, {offsetY: 0.5, scaleY: 0.5});
    sphereRight = this.createPhotosphere_(texture, {offsetY: 0, scaleY: 0.5});
  } else {
    sphereLeft = this.createPhotosphere_(texture);
    sphereRight = this.createPhotosphere_(texture);
  }

  // Display in left and right eye respectively.
  sphereLeft.layers.set(Eyes.LEFT);
  sphereLeft.eye = Eyes.LEFT;
  sphereRight.layers.set(Eyes.RIGHT);
  sphereRight.eye = Eyes.RIGHT;

  this.scene.getObjectByName('photo').children = [sphereLeft, sphereRight];

  this.emit('load');
};

PhotosphereRenderer.prototype.onTextureError_ = function(error) {
  this.emit('error', 'Unable to load texture from ' + this.src);
};


PhotosphereRenderer.prototype.createPhotosphere_ = function(texture, opt_params) {
  var p = opt_params || {};
  p.scaleX = p.scaleX || 1;
  p.scaleY = p.scaleY || 1;
  p.offsetX = p.offsetX || 0;
  p.offsetY = p.offsetY || 0;
  p.phiStart = p.phiStart || 0;
  p.phiLength = p.phiLength || Math.PI * 2;
  p.thetaStart = p.thetaStart || 0;
  p.thetaLength = p.thetaLength || Math.PI;

  var geometry = new THREE.SphereGeometry(1, 48, 48,
      p.phiStart, p.phiLength, p.thetaStart, p.thetaLength);
  geometry.applyMatrix(new THREE.Matrix4().makeScale(-1, 1, 1));
  var uvs = geometry.faceVertexUvs[0];
  for (var i = 0; i < uvs.length; i ++) {
    for (var j = 0; j < 3; j ++) {
      uvs[i][j].x *= p.scaleX;
      uvs[i][j].x += p.offsetX;
      uvs[i][j].y *= p.scaleY;
      uvs[i][j].y += p.offsetY;
    }
  }

  var material = new THREE.MeshBasicMaterial({ map: texture });
  this.distorter.setMap(texture);
  var out = new THREE.Mesh(geometry, material);
  out.renderOrder = -1;
  return out;
};

PhotosphereRenderer.prototype.createScene_ = function(opt_params) {
  var scene = new THREE.Scene();

  // Add a group for the photosphere.
  var photoGroup = new THREE.Object3D();
  photoGroup.name = 'photo';
  scene.add(photoGroup);

  return scene;
};

PhotosphereRenderer.prototype.updateMaterial_ = function() {
  var children = this.scene.getObjectByName('photo').children;
  for (var j = 0; j < children.length; j++) {
    var child = children[j];
    var material = this.distorter.getShaderMaterial(child.eye);
    child.material = material;
    child.material.needsUpdate = true;
  }
};

PhotosphereRenderer.prototype.onViewerChange_ = function(newViewer) {
  console.log('onViewerChange_', newViewer);

  // Reset the photosphere with new coefficients.
  this.updateMaterial_();
};

PhotosphereRenderer.prototype.onResize_ = function() {
  this.effect.setSize(window.innerWidth, window.innerHeight);
  this.camera.aspect = window.innerWidth / window.innerHeight;
  this.camera.updateProjectionMatrix();
};

PhotosphereRenderer.prototype.onVRDisplayParamsChange_ = function(e) {
  console.log('onVRDisplayParamsChange_');
  this.distorter.setDeviceInfo(e.detail.deviceInfo);
};

PhotosphereRenderer.prototype.onVRDisplayPresentChange_ = function(e) {
  console.log('onVRDisplayPresentChange_');
  var vrDisplay = e.detail.vrdisplay;
  var isVRMode = vrDisplay.isPresenting;
  if (vrDisplay.isPolyfilled) {
    this.distorter.setEnabled(isVRMode);
    this.updateMaterial_();
  }

  // Resize the renderer for good measure.
  this.onResize_();

  // Analytics.
  if (window.analytics) {
    analytics.logModeChanged(isVRMode ? 3 : 1);
  }
};

module.exports = PhotosphereRenderer;

},{"./emitter":8,"./eyes":9,"./util":15,"./vertex-distorter":16,"webvr-boilerplate":4}],13:[function(require,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Contains all information about a given scene, including the photosphere asset,
 * background music.
 */
function SceneInfo(opt_params) {
  var params = opt_params || {};
  this.id = params.id;
  this.title = params.title;
  this.image = params.image;
  this.preview = params.preview;
  this.isStereo = !!params.isStereo;
  this.audio = params.audio;
  this.video = params.video;
  this.yaw = params.yaw || 0;
  this.isYawOnly = params.isYawOnly;
}

SceneInfo.prototype.isComplete = function() {
  return !!this.image || !!this.video;
};

SceneInfo.prototype.toObject = function() {
  return {
    id: this.id || null,
    title: this.title || null,
    image: this.image,
    preview: this.preview,
    isStereo: this.isStereo,
    audio: this.audio,
    yaw: this.yaw || null,
    video: this.video || null,
  };
};

SceneInfo.prototype.isImageDataURI = function() {
  return this.image.indexOf('data:') == 0;
};


module.exports = SceneInfo;

},{}],14:[function(require,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Emitter = require('./emitter');
var SceneInfo = require('./scene-info');

var Query = {
  JSON_URL: 'url',
  VIDEO_URL: 'video',
  OBJECT_URL: 'object',
  IMAGE_URL: 'image',
  PREVIEW_URL: 'preview',
  IS_STEREO: 'is_stereo',
  AUDIO_URL: 'audio',
  START_YAW: 'start_yaw',
  IS_YAW_ONLY: 'is_yaw_only',
};

function SceneLoader() {
}
SceneLoader.prototype = new Emitter();

/**
 * Loads a scene from a JSON file.
 */
SceneLoader.prototype.loadFromJson_ = function(url, callback) {
  // XHR to fetch the JSON.
  var xhr = new XMLHttpRequest();
  xhr.open('GET', url);
  var that = this;
  xhr.onload = function(e) {
    try {
      var jsonObj = JSON.parse(this.response);
    } catch (e) {
      that.emit('error', 'Invalid JSON at ' + url + '.');
      return;
    }
    var labelObjects = {};
    var labels = jsonObj.labels || [];
    // Go through the labels in the data and objectify them.
    for (var i = 0; i < labels.length; i++) {
      var label = new Label(labels[i]);
      labelObjects[label.id] = label;
    }
    jsonObj.labels = labelObjects;
    var scene = new SceneInfo(jsonObj);
    that.emit('load', scene);
  };
  xhr.send();
};

/**
 * Parse out GET parameters from the URL string and load the scene.
 */
SceneLoader.prototype.loadFromGetParams_ = function() {
  var params = {
    image: Util.getQueryParameter(Query.IMAGE_URL),
    video: Util.getQueryParameter(Query.VIDEO_URL),
    object: Util.getQueryParameter(Query.OBJECT_URL),
    preview: Util.getQueryParameter(Query.PREVIEW_URL),
    isStereo: this.parseBoolean_(Util.getQueryParameter(Query.IS_STEREO)),
    audio: Util.getQueryParameter(Query.AUDIO_URL),
    isYawOnly: this.parseBoolean_(Util.getQueryParameter(Query.IS_YAW_ONLY)),
    yaw: THREE.Math.degToRad(Util.getQueryParameter(Query.START_YAW)),
  };

  var count = 0;
  count += (params[Query.IMAGE_URL] ? 1 : 0);
  count += (params[Query.VIDEO_URL] ? 1 : 0);
  count += (params[Query.OBJECT_URL] ? 1 : 0);
  // Validate this.
  if (count == 0) {
    this.emit('error', 'Either "image", "video", or "object" GET parameter is required.');
    return;
  }

  var scene = new SceneInfo(params);
  this.emit('load', scene);
};

SceneLoader.prototype.parseBoolean_ = function(value) {
  if (value == 'false') {
    return false;
  }
  return !!value;
};

SceneLoader.prototype.loadScene = function(callback) {
  // If there's a url param specified, try loading from JSON.
  var url = Util.getQueryParameter('url');
  var image = Util.getQueryParameter('image');
  var video = Util.getQueryParameter('video');
  var object = Util.getQueryParameter('object');
  if (url) {
    this.loadFromJson_(url);
  } else if (image || video || object) {
    // Otherwise, try loading from URL parameters.
    this.loadFromGetParams_();
  } else {
    // If it fails, throw an exception.
    this.emit('error', 'Unable to load scene. Required parameter missing.');
  }
};

module.exports = SceneLoader;

},{"./emitter":8,"./scene-info":13}],15:[function(require,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Util = window.Util || {};

Util.isDataURI = function(src) {
  return src && src.indexOf('data:') == 0;
};

Util.generateUUID = function() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
    .toString(16)
    .substring(1);
  }
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
    s4() + '-' + s4() + s4() + s4();
};

Util.isMobile = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

Util.isIOS = function() {
  return /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
};

Util.cloneObject = function(obj) {
  var out = {};
  for (key in obj) {
    out[key] = obj[key];
  }
  return out;
};

Util.hashCode = function(s) {
  return s.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
};

Util.loadTrackSrc = function(context, src, callback, opt_progressCallback) {
  var request = new XMLHttpRequest();
  request.open('GET', src, true);
  request.responseType = 'arraybuffer';

  // Decode asynchronously.
  request.onload = function() {
    context.decodeAudioData(request.response, function(buffer) {
      callback(buffer);
    }, function(e) {
      console.error(e);
    });
  };
  if (opt_progressCallback) {
    request.onprogress = function(e) {
      var percent = e.loaded / e.total;
      opt_progressCallback(percent);
    };
  }
  request.send();
};

Util.isPow2 = function(n) {
  return (n & (n - 1)) == 0;
};

Util.capitalize = function(s) {
  return s.charAt(0).toUpperCase() + s.slice(1);
};

Util.isIFrame = function() {
  try {
    return window.self !== window.top;
  } catch (e) {
    return true;
  }
};

// From http://goo.gl/4WX3tg
Util.getQueryParameter = function(name) {
  name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
  var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(location.search);
  return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
};


// From http://stackoverflow.com/questions/11871077/proper-way-to-detect-webgl-support.
Util.isWebGLEnabled = function() {
  var canvas = document.createElement('canvas');
  try { gl = canvas.getContext("webgl"); }
  catch (x) { gl = null; }

  if (gl == null) {
    try { gl = canvas.getContext("experimental-webgl"); experimental = true; }
    catch (x) { gl = null; }
  }
  return !!gl;
};

Util.clone = function(obj) {
  return JSON.parse(JSON.stringify(obj));
};

// From http://stackoverflow.com/questions/10140604/fastest-hypotenuse-in-javascript
Util.hypot = Math.hypot || function(x, y) {
  return Math.sqrt(x*x + y*y);
};

// From http://stackoverflow.com/a/17447718/693934
Util.isIE11 = function() {
  return navigator.userAgent.match(/Trident/);
};

Util.getRectCenter = function(rect) {
  return new THREE.Vector2(rect.x + rect.width/2, rect.y + rect.height/2);
};

Util.getScreenWidth = function() {
  return Math.max(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

Util.getScreenHeight = function() {
  return Math.min(window.screen.width, window.screen.height) *
      window.devicePixelRatio;
};

Util.isIOS9OrLess = function() {
  if (!Util.isIOS()) {
    return false;
  }
  var re = /(iPhone|iPad|iPod) OS ([\d_]+)/;
  var iOSVersion = navigator.userAgent.match(re);
  if (!iOSVersion) {
    return false;
  }
  // Get the last group.
  var versionString = iOSVersion[iOSVersion.length - 1];
  var majorVersion = parseFloat(versionString);
  return majorVersion <= 9;
};

Util.getExtension = function(url) {
  return url.split('.').pop();
};

module.exports = Util;

},{}],16:[function(require,module,exports){
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Eyes = require('./eyes');
var Util = require('./util');

var DEFAULT_FOV = 40;
var NO_DISTORTION = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
/**
 * Responsible for distortion correction by pre-distorting the vertex geometry
 * so that a second shader pass is not needed. This is intended to greatly
 * optimize the rendering process.
 */
function VertexDistorter() {
  this.texture = null;
  this.isEnabled = false;
}

VertexDistorter.prototype.setEnabled = function(isEnabled) {
  this.isEnabled = isEnabled;
};

VertexDistorter.prototype.setDeviceInfo = function(deviceInfo) {
  this.deviceInfo = deviceInfo;
};

/**
 * Sets the texture that is used to render this photosphere.
 */
VertexDistorter.prototype.setMap = function(texture) {
  this.texture = texture;
};

VertexDistorter.prototype.getVertexShader_ = function() {
  return [
		'#ifdef GL_ES',
		'precision highp float;',
		'#endif',

    'varying vec2 vUV;',

    this.getDistortionInclude_(),
    this.getViewportInclude_(),

    'void main() {',
      // Pass through texture coordinates to the fragment shader.
      'vUV = uv;',

      // Here, we want to ensure that we are using an undistorted projection
      // matrix. By setting isUndistorted: true in the WebVRManager, we
      // guarantee this.
      'vec4 pos = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',

      // First we apply distortion.
      'vec4 distortedPos = Distort(pos);',
      // Then constrain in a viewport.
      'gl_Position = Viewport(distortedPos);',
    '}'
  ].join('\n');
};

VertexDistorter.prototype.getNoopVertexShader_ = function() {
  return [
		'#ifdef GL_ES',
		'precision highp float;',
		'#endif',

    'varying vec2 vUV;',

    'void main() {',
      'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
      'vUV = uv;',
    '}'
  ].join('\n');
};

VertexDistorter.prototype.getFragmentShader_ = function() {
  return [
		'#ifdef GL_ES',
		'precision highp float;',
		'#endif',

    'varying vec2 vUV;',
    'uniform sampler2D texture;',

    'void main() {',
      'gl_FragColor = texture2D(texture, vUV);',
    '}'
  ].join('\n');
};

VertexDistorter.prototype.getNoopDistortionInclude_ = function() {
  return [
    'vec4 Distort(vec4 point) {',
      'return point;',
    '}'
  ].join('\n');
};

VertexDistorter.prototype.getDistortionInclude_ = function() {
  return [
    'uniform float uDistortionCoefficients[12];',
    'uniform float uDistortionMaxFovSquared;',
    'uniform vec2 uDistortionFovOffset;',
    'uniform vec2 uDistortionFovScale;',

    // Returns a scalar to distort a point; computed in reverse via the polynomial approximation:
    //   r' = 1 + Σ_i (uDistortionCoefficients[i] rSquared^(i+1))  i=[0..11]
    // where rSquared is the squared radius of an undistorted point in tan-angle space.
    // See {@link Distortion} for more information.
    'float DistortionFactor(float rSquared) {',
      'float ret = 0.0;',
      'rSquared = min(uDistortionMaxFovSquared, rSquared);',
      'ret = rSquared * (ret + uDistortionCoefficients[11]);',
      'ret = rSquared * (ret + uDistortionCoefficients[10]);',
      'ret = rSquared * (ret + uDistortionCoefficients[9]);',
      'ret = rSquared * (ret + uDistortionCoefficients[8]);',
      'ret = rSquared * (ret + uDistortionCoefficients[7]);',
      'ret = rSquared * (ret + uDistortionCoefficients[6]);',
      'ret = rSquared * (ret + uDistortionCoefficients[5]);',
      'ret = rSquared * (ret + uDistortionCoefficients[4]);',
      'ret = rSquared * (ret + uDistortionCoefficients[3]);',
      'ret = rSquared * (ret + uDistortionCoefficients[2]);',
      'ret = rSquared * (ret + uDistortionCoefficients[1]);',
      'ret = rSquared * (ret + uDistortionCoefficients[0]);',
      'return ret + 1.0;',
    '}',

    // Given a point in clip space, distort the point according to the coefficients stored in
    // uDistortionCoefficients and the field of view (FOV) specified in uDistortionFovOffset and
    // uDistortionFovScale.
    // Returns the distorted point in clip space, with its Z untouched.
    'vec4 Distort(vec4 point) {',
      // Put point into normalized device coordinates (NDC), [(-1, -1, -1) to (1, 1, 1)].
      'vec3 pointNdc = point.xyz / point.w;',
      // Throw away the Z coordinate and map the point to the unit square, [(0, 0) to (1, 1)].
      'vec2 pointUnitSquare = (pointNdc.xy + vec2(1.0)) / 2.0;',
      // Map the point into FOV tan-angle space.
      'vec2 pointTanAngle = pointUnitSquare * uDistortionFovScale - uDistortionFovOffset;',
      'float radiusSquared = dot(pointTanAngle, pointTanAngle);',
      'float distortionFactor = DistortionFactor(radiusSquared);',
      //'float distortionFactor = 2.0;',
      'vec2 distortedPointTanAngle = pointTanAngle * distortionFactor;',
      // Reverse the mappings above to bring the distorted point back into NDC space.
      'vec2 distortedPointUnitSquare = (distortedPointTanAngle + uDistortionFovOffset)',
          '/ uDistortionFovScale;',
      'vec3 distortedPointNdc = vec3(distortedPointUnitSquare * 2.0 - vec2(1.0), pointNdc.z);',
      // Convert the point into clip space before returning in case any operations are done after.
      'return vec4(distortedPointNdc, 1.0) * point.w;',
    '}',
  ].join('\n');
};

VertexDistorter.prototype.getViewportInclude_ = function() {
  return [
    'uniform mat4 uViewportTransform;',

    'vec4 Viewport(vec4 point) {',
      'return uViewportTransform * point;',
    '}'
  ].join('\n');
};

VertexDistorter.prototype.getDistortionMaxFovSquared_ = function() {
  var fov = this.getFov_();
  var maxFov = Util.hypot(
    Math.tan(THREE.Math.degToRad(Math.max(fov.leftDegrees, fov.rightDegrees))),
    Math.tan(THREE.Math.degToRad(Math.max(fov.downDegrees, fov.upDegrees))));
  return maxFov * maxFov;
};

VertexDistorter.prototype.getDistortionCoefficients_ = function() {
  var viewer = this.deviceInfo.viewer;
  return this.isEnabled ? viewer.inverseCoefficients : NO_DISTORTION;
};

VertexDistorter.prototype.getDistortionFovOffset_ = function(eye) {
  var fov = this.getFov_(eye);
  var left = Math.tan(THREE.Math.degToRad(fov.leftDegrees));
  var down = Math.tan(THREE.Math.degToRad(fov.downDegrees));
  return new THREE.Vector2(left, down);
};

VertexDistorter.prototype.getDistortionFovScale_ = function() {
  var fov = this.getFov_();
  var left = Math.tan(THREE.Math.degToRad(fov.leftDegrees));
  var right = Math.tan(THREE.Math.degToRad(fov.rightDegrees));
  var up = Math.tan(THREE.Math.degToRad(fov.upDegrees));
  var down = Math.tan(THREE.Math.degToRad(fov.downDegrees));
  return new THREE.Vector2(left + right, up + down);
};


VertexDistorter.prototype.getUniforms_ = function(eye) {
  return {
    texture: {
      type: 't',
      value: this.texture
    },
    uDistortionCoefficients: {
      type: 'fv1',
      value: this.getDistortionCoefficients_()
    },
    uDistortionMaxFovSquared: {
      type: 'f',
      value: this.getDistortionMaxFovSquared_()
    },
    uDistortionFovOffset: {
      type: 'v2',
      value: this.getDistortionFovOffset_(eye)
    },
    uDistortionFovScale: {
      type: 'v2',
      value: this.getDistortionFovScale_()
    },
    uViewportTransform: {
      type: 'm4',
      value: this.getViewportTransform_(eye)
    }
  };
};

VertexDistorter.prototype.getShaderMaterial = function(eye) {
  var uniforms = this.getUniforms_(eye);
  return new THREE.ShaderMaterial({
    uniforms: uniforms,
    vertexShader: this.getVertexShader_(),
    fragmentShader: this.getFragmentShader_()
  });
};

VertexDistorter.prototype.getFov_ = function(opt_eye) {
  var eye = opt_eye || Eyes.LEFT;

  if (eye == Eyes.LEFT) {
    return this.deviceInfo.getFieldOfViewLeftEye(true);
  }
  if (eye == Eyes.RIGHT) {
    return this.deviceInfo.getFieldOfViewRightEye(true);
  }
  return null;
};

/**
 * Returns the 4x4 transformation matrix to transform the viewport into NDC.
 */
VertexDistorter.prototype.getViewportTransform_ = function(opt_eye) {
  var eye = opt_eye || Eyes.LEFT;

  var leftRect = this.deviceInfo.getUndistortedViewportLeftEye();

  if (eye == Eyes.RIGHT) {
    leftRect.x = (Util.getScreenWidth() / 2 - leftRect.x) - leftRect.width;
  }

  var fullLeftRect = {
    x: 0,
    y: 0,
    width: Util.getScreenWidth() / 2,
    height: Util.getScreenHeight()
  };

  // Calculate the scaling from full to squashed rectangle.
  var scale = new THREE.Matrix4();
  scale.makeScale(leftRect.width / fullLeftRect.width,
                  leftRect.height / fullLeftRect.height, 1);

  // Calculate the translation of the eye center in NDC.
  var center = Util.getRectCenter(leftRect);
  var targetCenter = Util.getRectCenter(fullLeftRect);
  center.sub(targetCenter);
  var translate = new THREE.Matrix4();
  translate.makeTranslation(center.x / fullLeftRect.width,
                            center.y / fullLeftRect.height, 0);

  console.log('Translated x by %s, scaled by %s', center.x / fullLeftRect.width,
              leftRect.width / fullLeftRect.width);
  return scale.multiply(translate);
};

module.exports = VertexDistorter;

},{"./eyes":9,"./util":15}],17:[function(require,module,exports){
var Util = require('./util');

/**
 * A proxy class for working around the fact that as soon as a video is play()ed
 * on iOS, Safari auto-fullscreens the video.
 *
 * TODO(smus): The entire raison d'etre for this class is to work around this
 * issue. Once Safari implements some way to suppress this fullscreen player, we
 * can remove this code.
 */
function VideoProxy(videoElement) {
  this.videoElement = videoElement;
  // True if we're currently manually advancing the playhead (only on iOS).
  this.isFakePlayback = false;

  // When the video started playing.
  this.startTime = null;
}

VideoProxy.prototype.play = function() {
  if (Util.isIOS9OrLess()) {
    this.startTime = performance.now();
    this.isFakePlayback = true;

    // Make an audio element to playback just the audio part.
    this.audioElement = new Audio();
    this.audioElement.src = this.videoElement.src;
    this.audioElement.play();
  } else {
    this.videoElement.play().then(function(e) {
      console.log('Playing video.', e);
    });
  }
};

VideoProxy.prototype.stop = function() {
  if (Util.isIOS9OrLess() && this.isFakePlayback) {
    this.isFakePlayback = true;

    this.audioElement.stop();
  } else {
    this.videoElement.stop();
  }
};

/**
 * Called on RAF to progress playback.
 */
VideoProxy.prototype.update = function() {
  // Fakes playback for iOS only.
  if (!this.isFakePlayback) {
    return;
  }
  var duration = this.videoElement.duration;
  var now = performance.now();
  var delta = now - this.startTime;
  var deltaS = delta / 1000;
  this.videoElement.currentTime = deltaS;

  // Loop through the video
  if (deltaS > duration) {
    this.startTime = now;
    this.videoElement.currentTime = 0;
    // Also restart the audio.
    this.audioElement.currentTime = 0;
  }
};

module.exports = VideoProxy;

},{"./util":15}],18:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[11])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2hvbWVicmV3L2xpYi9ub2RlX21vZHVsZXMvd2F0Y2hpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIm5vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9kaXN0L2VzNi1wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL3NoYWthLXBsYXllci9kaXN0L3NoYWthLXBsYXllci5jb21waWxlZC5qcyIsIm5vZGVfbW9kdWxlcy9zdGF0cy1qcy9idWlsZC9zdGF0cy5taW4uanMiLCJub2RlX21vZHVsZXMvd2VidnItYm9pbGVycGxhdGUvYnVpbGQvbm9kZV9tb2R1bGVzL2hvbWVicmV3L2xpYi9ub2RlX21vZHVsZXMvd2F0Y2hpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIm5vZGVfbW9kdWxlcy93ZWJ2ci1ib2lsZXJwbGF0ZS9idWlsZC9ub2RlX21vZHVsZXMvd2VidnItYm9pbGVycGxhdGUvYnVpbGQvc3JjL2J1dHRvbi1tYW5hZ2VyLmpzIiwibm9kZV9tb2R1bGVzL3dlYnZyLWJvaWxlcnBsYXRlL2J1aWxkL25vZGVfbW9kdWxlcy93ZWJ2ci1ib2lsZXJwbGF0ZS9idWlsZC9zcmMvZW1pdHRlci5qcyIsIm5vZGVfbW9kdWxlcy93ZWJ2ci1ib2lsZXJwbGF0ZS9idWlsZC9ub2RlX21vZHVsZXMvd2VidnItYm9pbGVycGxhdGUvYnVpbGQvc3JjL21vZGVzLmpzIiwibm9kZV9tb2R1bGVzL3dlYnZyLWJvaWxlcnBsYXRlL2J1aWxkL25vZGVfbW9kdWxlcy93ZWJ2ci1ib2lsZXJwbGF0ZS9idWlsZC9zcmMvdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy93ZWJ2ci1ib2lsZXJwbGF0ZS9idWlsZC9ub2RlX21vZHVsZXMvd2VidnItYm9pbGVycGxhdGUvYnVpbGQvc3JjL3dlYnZyLW1hbmFnZXIuanMiLCJub2RlX21vZHVsZXMvd2VidnItcG9seWZpbGwvYnVpbGQvd2VidnItcG9seWZpbGwuanMiLCJzcmMvYWRhcHRpdmUtcGxheWVyLmpzIiwic3JjL2RldmljZS1tb3Rpb24tcmVjZWl2ZXIuanMiLCJzcmMvZW1pdHRlci5qcyIsInNyYy9leWVzLmpzIiwic3JjL2xvYWRpbmctaW5kaWNhdG9yLmpzIiwic3JjL21haW4uanMiLCJzcmMvcGhvdG9zcGhlcmUtcmVuZGVyZXIuanMiLCJzcmMvc2NlbmUtaW5mby5qcyIsInNyYy9zY2VuZS1sb2FkZXIuanMiLCJzcmMvdXRpbC5qcyIsInNyYy92ZXJ0ZXgtZGlzdG9ydGVyLmpzIiwic3JjL3ZpZGVvLXByb3h5LmpzIiwiLi4vLi4vaG9tZWJyZXcvbGliL25vZGVfbW9kdWxlcy93YXRjaGlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQy83QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDTkE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDaFFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbGhMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDblBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDclNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qIVxuICogQG92ZXJ2aWV3IGVzNi1wcm9taXNlIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLlxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTQgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnMgKENvbnZlcnNpb24gdG8gRVM2IEFQSSBieSBKYWtlIEFyY2hpYmFsZClcbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qYWtlYXJjaGliYWxkL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIDMuMi4xXG4gKi9cblxuKGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkb2JqZWN0T3JGdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB4ICE9PSBudWxsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzRnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkaXNNYXliZVRoZW5hYmxlKHgpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHV0aWxzJCRfaXNBcnJheTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkpIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkX2lzQXJyYXkgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGliJGVzNiRwcm9taXNlJHV0aWxzJCRfaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkaXNBcnJheSA9IGxpYiRlczYkcHJvbWlzZSR1dGlscyQkX2lzQXJyYXk7XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRsZW4gPSAwO1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkdmVydHhOZXh0O1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkY3VzdG9tU2NoZWR1bGVyRm47XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXAgPSBmdW5jdGlvbiBhc2FwKGNhbGxiYWNrLCBhcmcpIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRxdWV1ZVtsaWIkZXM2JHByb21pc2UkYXNhcCQkbGVuXSA9IGNhbGxiYWNrO1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHF1ZXVlW2xpYiRlczYkcHJvbWlzZSRhc2FwJCRsZW4gKyAxXSA9IGFyZztcbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRsZW4gKz0gMjtcbiAgICAgIGlmIChsaWIkZXM2JHByb21pc2UkYXNhcCQkbGVuID09PSAyKSB7XG4gICAgICAgIC8vIElmIGxlbiBpcyAyLCB0aGF0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byBzY2hlZHVsZSBhbiBhc3luYyBmbHVzaC5cbiAgICAgICAgLy8gSWYgYWRkaXRpb25hbCBjYWxsYmFja3MgYXJlIHF1ZXVlZCBiZWZvcmUgdGhlIHF1ZXVlIGlzIGZsdXNoZWQsIHRoZXlcbiAgICAgICAgLy8gd2lsbCBiZSBwcm9jZXNzZWQgYnkgdGhpcyBmbHVzaCB0aGF0IHdlIGFyZSBzY2hlZHVsaW5nLlxuICAgICAgICBpZiAobGliJGVzNiRwcm9taXNlJGFzYXAkJGN1c3RvbVNjaGVkdWxlckZuKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGN1c3RvbVNjaGVkdWxlckZuKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRmbHVzaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHNjaGVkdWxlRmx1c2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzZXRTY2hlZHVsZXIoc2NoZWR1bGVGbikge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGN1c3RvbVNjaGVkdWxlckZuID0gc2NoZWR1bGVGbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2V0QXNhcChhc2FwRm4pIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhc2FwID0gYXNhcEZuO1xuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkYnJvd3NlcldpbmRvdyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgPyB3aW5kb3cgOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRicm93c2VyR2xvYmFsID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJGJyb3dzZXJXaW5kb3cgfHwge307XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRCcm93c2VyTXV0YXRpb25PYnNlcnZlciA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRicm93c2VyR2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgbGliJGVzNiRwcm9taXNlJGFzYXAkJGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJGlzTm9kZSA9IHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYge30udG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xuXG4gICAgLy8gdGVzdCBmb3Igd2ViIHdvcmtlciBidXQgbm90IGluIElFMTBcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJGlzV29ya2VyID0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIGltcG9ydFNjcmlwdHMgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnO1xuXG4gICAgLy8gbm9kZVxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VOZXh0VGljaygpIHtcbiAgICAgIC8vIG5vZGUgdmVyc2lvbiAwLjEwLnggZGlzcGxheXMgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHdoZW4gbmV4dFRpY2sgaXMgdXNlZCByZWN1cnNpdmVseVxuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jdWpvanMvd2hlbi9pc3N1ZXMvNDEwIGZvciBkZXRhaWxzXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2sobGliJGVzNiRwcm9taXNlJGFzYXAkJGZsdXNoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gdmVydHhcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlVmVydHhUaW1lcigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHZlcnR4TmV4dChsaWIkZXM2JHByb21pc2UkYXNhcCQkZmx1c2gpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlTXV0YXRpb25PYnNlcnZlcigpIHtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBsaWIkZXM2JHByb21pc2UkYXNhcCQkQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIobGliJGVzNiRwcm9taXNlJGFzYXAkJGZsdXNoKTtcbiAgICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgbm9kZS5kYXRhID0gKGl0ZXJhdGlvbnMgPSArK2l0ZXJhdGlvbnMgJSAyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gd2ViIHdvcmtlclxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VNZXNzYWdlQ2hhbm5lbCgpIHtcbiAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRmbHVzaDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VTZXRUaW1lb3V0KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRUaW1lb3V0KGxpYiRlczYkcHJvbWlzZSRhc2FwJCRmbHVzaCwgMSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkcXVldWUgPSBuZXcgQXJyYXkoMTAwMCk7XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGFzYXAkJGZsdXNoKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaWIkZXM2JHByb21pc2UkYXNhcCQkbGVuOyBpKz0yKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRxdWV1ZVtpXTtcbiAgICAgICAgdmFyIGFyZyA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRxdWV1ZVtpKzFdO1xuXG4gICAgICAgIGNhbGxiYWNrKGFyZyk7XG5cbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHF1ZXVlW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkcXVldWVbaSsxXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGxlbiA9IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGFzYXAkJGF0dGVtcHRWZXJ0eCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByID0gcmVxdWlyZTtcbiAgICAgICAgdmFyIHZlcnR4ID0gcigndmVydHgnKTtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHZlcnR4TmV4dCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG4gICAgICAgIHJldHVybiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlVmVydHhUaW1lcigpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlU2V0VGltZW91dCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2NoZWR1bGVGbHVzaDtcbiAgICAvLyBEZWNpZGUgd2hhdCBhc3luYyBtZXRob2QgdG8gdXNlIHRvIHRyaWdnZXJpbmcgcHJvY2Vzc2luZyBvZiBxdWV1ZWQgY2FsbGJhY2tzOlxuICAgIGlmIChsaWIkZXM2JHByb21pc2UkYXNhcCQkaXNOb2RlKSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2NoZWR1bGVGbHVzaCA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VOZXh0VGljaygpO1xuICAgIH0gZWxzZSBpZiAobGliJGVzNiRwcm9taXNlJGFzYXAkJEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2NoZWR1bGVGbHVzaCA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VNdXRhdGlvbk9ic2VydmVyKCk7XG4gICAgfSBlbHNlIGlmIChsaWIkZXM2JHByb21pc2UkYXNhcCQkaXNXb3JrZXIpIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzY2hlZHVsZUZsdXNoID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJHVzZU1lc3NhZ2VDaGFubmVsKCk7XG4gICAgfSBlbHNlIGlmIChsaWIkZXM2JHByb21pc2UkYXNhcCQkYnJvd3NlcldpbmRvdyA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2NoZWR1bGVGbHVzaCA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhdHRlbXB0VmVydHgoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHNjaGVkdWxlRmx1c2ggPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlU2V0VGltZW91dCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkdGhlbiQkdGhlbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgIHZhciBjaGlsZCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5vb3ApO1xuXG4gICAgICBpZiAoY2hpbGRbbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUFJPTUlTRV9JRF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRtYWtlUHJvbWlzZShjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGF0ZSA9IHBhcmVudC5fc3RhdGU7XG5cbiAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbc3RhdGUgLSAxXTtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXAoZnVuY3Rpb24oKXtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRpbnZva2VDYWxsYmFjayhzdGF0ZSwgY2hpbGQsIGNhbGxiYWNrLCBwYXJlbnQuX3Jlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH1cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHRoZW4kJGRlZmF1bHQgPSBsaWIkZXM2JHByb21pc2UkdGhlbiQkdGhlbjtcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyZXNvbHZlJCRyZXNvbHZlKG9iamVjdCkge1xuICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgICAgIGlmIChvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0LmNvbnN0cnVjdG9yID09PSBDb25zdHJ1Y3Rvcikge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3RvcihsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRub29wKTtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlc29sdmUocHJvbWlzZSwgb2JqZWN0KTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmVzb2x2ZSQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlc29sdmUkJHJlc29sdmU7XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBST01JU0VfSUQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMTYpO1xuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkbm9vcCgpIHt9XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUEVORElORyAgID0gdm9pZCAwO1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRGVUxGSUxMRUQgPSAxO1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRSRUpFQ1RFRCAgPSAyO1xuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEdFVF9USEVOX0VSUk9SID0gbmV3IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEVycm9yT2JqZWN0KCk7XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRzZWxmRnVsZmlsbG1lbnQoKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBjYW5ub3QgcmVzb2x2ZSBhIHByb21pc2Ugd2l0aCBpdHNlbGZcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkY2Fubm90UmV0dXJuT3duKCkge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoJ0EgcHJvbWlzZXMgY2FsbGJhY2sgY2Fubm90IHJldHVybiB0aGF0IHNhbWUgcHJvbWlzZS4nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRnZXRUaGVuKHByb21pc2UpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlLnRoZW47XG4gICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEdFVF9USEVOX0VSUk9SLmVycm9yID0gZXJyb3I7XG4gICAgICAgIHJldHVybiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRHRVRfVEhFTl9FUlJPUjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCR0cnlUaGVuKHRoZW4sIHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUsIHRoZW4pIHtcbiAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkYXNhcChmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICAgIHZhciBzZWFsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yID0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkdHJ5VGhlbih0aGVuLCB0aGVuYWJsZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoc2VhbGVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKHRoZW5hYmxlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgaWYgKHNlYWxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBzZWFsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgICAgIH0sICdTZXR0bGU6ICcgKyAocHJvbWlzZS5fbGFiZWwgfHwgJyB1bmtub3duIHByb21pc2UnKSk7XG5cbiAgICAgICAgaWYgKCFzZWFsZWQgJiYgZXJyb3IpIHtcbiAgICAgICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0sIHByb21pc2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlKSB7XG4gICAgICBpZiAodGhlbmFibGUuX3N0YXRlID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRGVUxGSUxMRUQpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgICAgIH0gZWxzZSBpZiAodGhlbmFibGUuX3N0YXRlID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRSRUpFQ1RFRCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRzdWJzY3JpYmUodGhlbmFibGUsIHVuZGVmaW5lZCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbikge1xuICAgICAgaWYgKG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IgPT09IHByb21pc2UuY29uc3RydWN0b3IgJiZcbiAgICAgICAgICB0aGVuID09PSBsaWIkZXM2JHByb21pc2UkdGhlbiQkZGVmYXVsdCAmJlxuICAgICAgICAgIGNvbnN0cnVjdG9yLnJlc29sdmUgPT09IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlc29sdmUkJGRlZmF1bHQpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhlbiA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkR0VUX1RIRU5fRVJST1IpIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkR0VUX1RIRU5fRVJST1IuZXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgICAgIH0gZWxzZSBpZiAobGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc0Z1bmN0aW9uKHRoZW4pKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKSB7XG4gICAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHNlbGZGdWxmaWxsbWVudCgpKTtcbiAgICAgIH0gZWxzZSBpZiAobGliJGVzNiRwcm9taXNlJHV0aWxzJCRvYmplY3RPckZ1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIHZhbHVlLCBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRnZXRUaGVuKHZhbHVlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRwdWJsaXNoUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgICAgIHByb21pc2UuX29uZXJyb3IocHJvbWlzZS5fcmVzdWx0KTtcbiAgICAgIH1cblxuICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcHVibGlzaChwcm9taXNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKHByb21pc2UsIHZhbHVlKSB7XG4gICAgICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcpIHsgcmV0dXJuOyB9XG5cbiAgICAgIHByb21pc2UuX3Jlc3VsdCA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fc3RhdGUgPSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRGVUxGSUxMRUQ7XG5cbiAgICAgIGlmIChwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXAobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcHVibGlzaCwgcHJvbWlzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICAgICAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQRU5ESU5HKSB7IHJldHVybjsgfVxuICAgICAgcHJvbWlzZS5fc3RhdGUgPSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRSRUpFQ1RFRDtcbiAgICAgIHByb21pc2UuX3Jlc3VsdCA9IHJlYXNvbjtcblxuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXAobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gICAgICB2YXIgc3Vic2NyaWJlcnMgPSBwYXJlbnQuX3N1YnNjcmliZXJzO1xuICAgICAgdmFyIGxlbmd0aCA9IHN1YnNjcmliZXJzLmxlbmd0aDtcblxuICAgICAgcGFyZW50Ll9vbmVycm9yID0gbnVsbDtcblxuICAgICAgc3Vic2NyaWJlcnNbbGVuZ3RoXSA9IGNoaWxkO1xuICAgICAgc3Vic2NyaWJlcnNbbGVuZ3RoICsgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRlVMRklMTEVEXSA9IG9uRnVsZmlsbG1lbnQ7XG4gICAgICBzdWJzY3JpYmVyc1tsZW5ndGggKyBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRSRUpFQ1RFRF0gID0gb25SZWplY3Rpb247XG5cbiAgICAgIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkYXNhcChsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRwdWJsaXNoLCBwYXJlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHB1Ymxpc2gocHJvbWlzZSkge1xuICAgICAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gICAgICB2YXIgc2V0dGxlZCA9IHByb21pc2UuX3N0YXRlO1xuXG4gICAgICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuXG4gICAgICB2YXIgY2hpbGQsIGNhbGxiYWNrLCBkZXRhaWwgPSBwcm9taXNlLl9yZXN1bHQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgY2hpbGQgPSBzdWJzY3JpYmVyc1tpXTtcbiAgICAgICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07XG5cbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgY2hpbGQsIGNhbGxiYWNrLCBkZXRhaWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRFcnJvck9iamVjdCgpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRUUllfQ0FUQ0hfRVJST1IgPSBuZXcgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRXJyb3JPYmplY3QoKTtcblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhkZXRhaWwpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFRSWV9DQVRDSF9FUlJPUi5lcnJvciA9IGU7XG4gICAgICAgIHJldHVybiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRUUllfQ0FUQ0hfRVJST1I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgcHJvbWlzZSwgY2FsbGJhY2ssIGRldGFpbCkge1xuICAgICAgdmFyIGhhc0NhbGxiYWNrID0gbGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc0Z1bmN0aW9uKGNhbGxiYWNrKSxcbiAgICAgICAgICB2YWx1ZSwgZXJyb3IsIHN1Y2NlZWRlZCwgZmFpbGVkO1xuXG4gICAgICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICAgICAgdmFsdWUgPSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCR0cnlDYXRjaChjYWxsYmFjaywgZGV0YWlsKTtcblxuICAgICAgICBpZiAodmFsdWUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgICAgICAgZXJyb3IgPSB2YWx1ZS5lcnJvcjtcbiAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRjYW5ub3RSZXR1cm5Pd24oKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gZGV0YWlsO1xuICAgICAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcpIHtcbiAgICAgICAgLy8gbm9vcFxuICAgICAgfSBlbHNlIGlmIChoYXNDYWxsYmFjayAmJiBzdWNjZWVkZWQpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGZhaWxlZCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRGVUxGSUxMRUQpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFJFSkVDVEVEKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaW5pdGlhbGl6ZVByb21pc2UocHJvbWlzZSwgcmVzb2x2ZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc29sdmVyKGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHZhbHVlKXtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShyZWFzb24pIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRpZCA9IDA7XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkbmV4dElkKCkge1xuICAgICAgcmV0dXJuIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGlkKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkbWFrZVByb21pc2UocHJvbWlzZSkge1xuICAgICAgcHJvbWlzZVtsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQUk9NSVNFX0lEXSA9IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGlkKys7XG4gICAgICBwcm9taXNlLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHByb21pc2UuX3Jlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICAgIHByb21pc2UuX3N1YnNjcmliZXJzID0gW107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHByb21pc2UkYWxsJCRhbGwoZW50cmllcykge1xuICAgICAgcmV0dXJuIG5ldyBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkZGVmYXVsdCh0aGlzLCBlbnRyaWVzKS5wcm9taXNlO1xuICAgIH1cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHByb21pc2UkYWxsJCRkZWZhdWx0ID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkYWxsJCRhbGw7XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmFjZSQkcmFjZShlbnRyaWVzKSB7XG4gICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICAgICAgaWYgKCFsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzQXJyYXkoZW50cmllcykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLicpKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIHZhciBsZW5ndGggPSBlbnRyaWVzLmxlbmd0aDtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBDb25zdHJ1Y3Rvci5yZXNvbHZlKGVudHJpZXNbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmFjZSQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJhY2UkJHJhY2U7XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmVqZWN0JCRyZWplY3QocmVhc29uKSB7XG4gICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5vb3ApO1xuICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlamVjdCQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlamVjdCQkcmVqZWN0O1xuXG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkbmVlZHNSZXNvbHZlcigpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSByZXNvbHZlciBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkbmVlZHNOZXcoKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlO1xuICAgIC8qKlxuICAgICAgUHJvbWlzZSBvYmplY3RzIHJlcHJlc2VudCB0aGUgZXZlbnR1YWwgcmVzdWx0IG9mIGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24uIFRoZVxuICAgICAgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCwgd2hpY2hcbiAgICAgIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlIHJlYXNvblxuICAgICAgd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG5cbiAgICAgIFRlcm1pbm9sb2d5XG4gICAgICAtLS0tLS0tLS0tLVxuXG4gICAgICAtIGBwcm9taXNlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gd2l0aCBhIGB0aGVuYCBtZXRob2Qgd2hvc2UgYmVoYXZpb3IgY29uZm9ybXMgdG8gdGhpcyBzcGVjaWZpY2F0aW9uLlxuICAgICAgLSBgdGhlbmFibGVgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB0aGF0IGRlZmluZXMgYSBgdGhlbmAgbWV0aG9kLlxuICAgICAgLSBgdmFsdWVgIGlzIGFueSBsZWdhbCBKYXZhU2NyaXB0IHZhbHVlIChpbmNsdWRpbmcgdW5kZWZpbmVkLCBhIHRoZW5hYmxlLCBvciBhIHByb21pc2UpLlxuICAgICAgLSBgZXhjZXB0aW9uYCBpcyBhIHZhbHVlIHRoYXQgaXMgdGhyb3duIHVzaW5nIHRoZSB0aHJvdyBzdGF0ZW1lbnQuXG4gICAgICAtIGByZWFzb25gIGlzIGEgdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2h5IGEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQuXG4gICAgICAtIGBzZXR0bGVkYCB0aGUgZmluYWwgcmVzdGluZyBzdGF0ZSBvZiBhIHByb21pc2UsIGZ1bGZpbGxlZCBvciByZWplY3RlZC5cblxuICAgICAgQSBwcm9taXNlIGNhbiBiZSBpbiBvbmUgb2YgdGhyZWUgc3RhdGVzOiBwZW5kaW5nLCBmdWxmaWxsZWQsIG9yIHJlamVjdGVkLlxuXG4gICAgICBQcm9taXNlcyB0aGF0IGFyZSBmdWxmaWxsZWQgaGF2ZSBhIGZ1bGZpbGxtZW50IHZhbHVlIGFuZCBhcmUgaW4gdGhlIGZ1bGZpbGxlZFxuICAgICAgc3RhdGUuICBQcm9taXNlcyB0aGF0IGFyZSByZWplY3RlZCBoYXZlIGEgcmVqZWN0aW9uIHJlYXNvbiBhbmQgYXJlIGluIHRoZVxuICAgICAgcmVqZWN0ZWQgc3RhdGUuICBBIGZ1bGZpbGxtZW50IHZhbHVlIGlzIG5ldmVyIGEgdGhlbmFibGUuXG5cbiAgICAgIFByb21pc2VzIGNhbiBhbHNvIGJlIHNhaWQgdG8gKnJlc29sdmUqIGEgdmFsdWUuICBJZiB0aGlzIHZhbHVlIGlzIGFsc28gYVxuICAgICAgcHJvbWlzZSwgdGhlbiB0aGUgb3JpZ2luYWwgcHJvbWlzZSdzIHNldHRsZWQgc3RhdGUgd2lsbCBtYXRjaCB0aGUgdmFsdWUnc1xuICAgICAgc2V0dGxlZCBzdGF0ZS4gIFNvIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgcmVqZWN0cyB3aWxsXG4gICAgICBpdHNlbGYgcmVqZWN0LCBhbmQgYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCBmdWxmaWxscyB3aWxsXG4gICAgICBpdHNlbGYgZnVsZmlsbC5cblxuXG4gICAgICBCYXNpYyBVc2FnZTpcbiAgICAgIC0tLS0tLS0tLS0tLVxuXG4gICAgICBgYGBqc1xuICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgLy8gb24gc3VjY2Vzc1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcblxuICAgICAgICAvLyBvbiBmYWlsdXJlXG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG5cbiAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyBvbiBmdWxmaWxsbWVudFxuICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIC8vIG9uIHJlamVjdGlvblxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgQWR2YW5jZWQgVXNhZ2U6XG4gICAgICAtLS0tLS0tLS0tLS0tLS1cblxuICAgICAgUHJvbWlzZXMgc2hpbmUgd2hlbiBhYnN0cmFjdGluZyBhd2F5IGFzeW5jaHJvbm91cyBpbnRlcmFjdGlvbnMgc3VjaCBhc1xuICAgICAgYFhNTEh0dHBSZXF1ZXN0YHMuXG5cbiAgICAgIGBgYGpzXG4gICAgICBmdW5jdGlvbiBnZXRKU09OKHVybCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gaGFuZGxlcjtcbiAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICAgIHhoci5zZW5kKCk7XG5cbiAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gdGhpcy5ET05FKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdnZXRKU09OOiBgJyArIHVybCArICdgIGZhaWxlZCB3aXRoIHN0YXR1czogWycgKyB0aGlzLnN0YXR1cyArICddJykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGdldEpTT04oJy9wb3N0cy5qc29uJykudGhlbihmdW5jdGlvbihqc29uKSB7XG4gICAgICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgLy8gb24gcmVqZWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBVbmxpa2UgY2FsbGJhY2tzLCBwcm9taXNlcyBhcmUgZ3JlYXQgY29tcG9zYWJsZSBwcmltaXRpdmVzLlxuXG4gICAgICBgYGBqc1xuICAgICAgUHJvbWlzZS5hbGwoW1xuICAgICAgICBnZXRKU09OKCcvcG9zdHMnKSxcbiAgICAgICAgZ2V0SlNPTignL2NvbW1lbnRzJylcbiAgICAgIF0pLnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcbiAgICAgICAgdmFsdWVzWzBdIC8vID0+IHBvc3RzSlNPTlxuICAgICAgICB2YWx1ZXNbMV0gLy8gPT4gY29tbWVudHNKU09OXG5cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIEBjbGFzcyBQcm9taXNlXG4gICAgICBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlclxuICAgICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgICAgQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZShyZXNvbHZlcikge1xuICAgICAgdGhpc1tsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQUk9NSVNFX0lEXSA9IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5leHRJZCgpO1xuICAgICAgdGhpcy5fcmVzdWx0ID0gdGhpcy5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuXG4gICAgICBpZiAobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkbm9vcCAhPT0gcmVzb2x2ZXIpIHtcbiAgICAgICAgdHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nICYmIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRuZWVkc1Jlc29sdmVyKCk7XG4gICAgICAgIHRoaXMgaW5zdGFuY2VvZiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZSA/IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGluaXRpYWxpemVQcm9taXNlKHRoaXMsIHJlc29sdmVyKSA6IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRuZWVkc05ldygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLmFsbCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJGFsbCQkZGVmYXVsdDtcbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5yYWNlID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmFjZSQkZGVmYXVsdDtcbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5yZXNvbHZlID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmVzb2x2ZSQkZGVmYXVsdDtcbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5yZWplY3QgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyZWplY3QkJGRlZmF1bHQ7XG4gICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UuX3NldFNjaGVkdWxlciA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzZXRTY2hlZHVsZXI7XG4gICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UuX3NldEFzYXAgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2V0QXNhcDtcbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5fYXNhcCA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhc2FwO1xuXG4gICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UucHJvdG90eXBlID0ge1xuICAgICAgY29uc3RydWN0b3I6IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLFxuXG4gICAgLyoqXG4gICAgICBUaGUgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCxcbiAgICAgIHdoaWNoIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlXG4gICAgICByZWFzb24gd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG5cbiAgICAgIGBgYGpzXG4gICAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24odXNlcil7XG4gICAgICAgIC8vIHVzZXIgaXMgYXZhaWxhYmxlXG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgICAvLyB1c2VyIGlzIHVuYXZhaWxhYmxlLCBhbmQgeW91IGFyZSBnaXZlbiB0aGUgcmVhc29uIHdoeVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgQ2hhaW5pbmdcbiAgICAgIC0tLS0tLS0tXG5cbiAgICAgIFRoZSByZXR1cm4gdmFsdWUgb2YgYHRoZW5gIGlzIGl0c2VsZiBhIHByb21pc2UuICBUaGlzIHNlY29uZCwgJ2Rvd25zdHJlYW0nXG4gICAgICBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmlyc3QgcHJvbWlzZSdzIGZ1bGZpbGxtZW50XG4gICAgICBvciByZWplY3Rpb24gaGFuZGxlciwgb3IgcmVqZWN0ZWQgaWYgdGhlIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cblxuICAgICAgYGBganNcbiAgICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICByZXR1cm4gdXNlci5uYW1lO1xuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICByZXR1cm4gJ2RlZmF1bHQgbmFtZSc7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICh1c2VyTmFtZSkge1xuICAgICAgICAvLyBJZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHVzZXJOYW1lYCB3aWxsIGJlIHRoZSB1c2VyJ3MgbmFtZSwgb3RoZXJ3aXNlIGl0XG4gICAgICAgIC8vIHdpbGwgYmUgYCdkZWZhdWx0IG5hbWUnYFxuICAgICAgfSk7XG5cbiAgICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jyk7XG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAvLyBpZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHJlYXNvbmAgd2lsbCBiZSAnRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknLlxuICAgICAgICAvLyBJZiBgZmluZFVzZXJgIHJlamVjdGVkLCBgcmVhc29uYCB3aWxsIGJlICdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jy5cbiAgICAgIH0pO1xuICAgICAgYGBgXG4gICAgICBJZiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIGRvZXMgbm90IHNwZWNpZnkgYSByZWplY3Rpb24gaGFuZGxlciwgcmVqZWN0aW9uIHJlYXNvbnMgd2lsbCBiZSBwcm9wYWdhdGVkIGZ1cnRoZXIgZG93bnN0cmVhbS5cblxuICAgICAgYGBganNcbiAgICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICB0aHJvdyBuZXcgUGVkYWdvZ2ljYWxFeGNlcHRpb24oJ1Vwc3RyZWFtIGVycm9yJyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIC8vIFRoZSBgUGVkZ2Fnb2NpYWxFeGNlcHRpb25gIGlzIHByb3BhZ2F0ZWQgYWxsIHRoZSB3YXkgZG93biB0byBoZXJlXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBBc3NpbWlsYXRpb25cbiAgICAgIC0tLS0tLS0tLS0tLVxuXG4gICAgICBTb21ldGltZXMgdGhlIHZhbHVlIHlvdSB3YW50IHRvIHByb3BhZ2F0ZSB0byBhIGRvd25zdHJlYW0gcHJvbWlzZSBjYW4gb25seSBiZVxuICAgICAgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5LiBUaGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXR1cm5pbmcgYSBwcm9taXNlIGluIHRoZVxuICAgICAgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCB0aGVuIGJlIHBlbmRpbmdcbiAgICAgIHVudGlsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHNldHRsZWQuIFRoaXMgaXMgY2FsbGVkICphc3NpbWlsYXRpb24qLlxuXG4gICAgICBgYGBqc1xuICAgICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAgIC8vIFRoZSB1c2VyJ3MgY29tbWVudHMgYXJlIG5vdyBhdmFpbGFibGVcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIElmIHRoZSBhc3NpbWxpYXRlZCBwcm9taXNlIHJlamVjdHMsIHRoZW4gdGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIGFsc28gcmVqZWN0LlxuXG4gICAgICBgYGBqc1xuICAgICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgZnVsZmlsbHMsIHdlJ2xsIGhhdmUgdGhlIHZhbHVlIGhlcmVcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCByZWplY3RzLCB3ZSdsbCBoYXZlIHRoZSByZWFzb24gaGVyZVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgU2ltcGxlIEV4YW1wbGVcbiAgICAgIC0tLS0tLS0tLS0tLS0tXG5cbiAgICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcblxuICAgICAgYGBgamF2YXNjcmlwdFxuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gZmluZFJlc3VsdCgpO1xuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9XG4gICAgICBgYGBcblxuICAgICAgRXJyYmFjayBFeGFtcGxlXG5cbiAgICAgIGBgYGpzXG4gICAgICBmaW5kUmVzdWx0KGZ1bmN0aW9uKHJlc3VsdCwgZXJyKXtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIC8vIGZhaWx1cmVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBzdWNjZXNzXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIFByb21pc2UgRXhhbXBsZTtcblxuICAgICAgYGBgamF2YXNjcmlwdFxuICAgICAgZmluZFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgQWR2YW5jZWQgRXhhbXBsZVxuICAgICAgLS0tLS0tLS0tLS0tLS1cblxuICAgICAgU3luY2hyb25vdXMgRXhhbXBsZVxuXG4gICAgICBgYGBqYXZhc2NyaXB0XG4gICAgICB2YXIgYXV0aG9yLCBib29rcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXV0aG9yID0gZmluZEF1dGhvcigpO1xuICAgICAgICBib29rcyAgPSBmaW5kQm9va3NCeUF1dGhvcihhdXRob3IpO1xuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9XG4gICAgICBgYGBcblxuICAgICAgRXJyYmFjayBFeGFtcGxlXG5cbiAgICAgIGBgYGpzXG5cbiAgICAgIGZ1bmN0aW9uIGZvdW5kQm9va3MoYm9va3MpIHtcblxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmYWlsdXJlKHJlYXNvbikge1xuXG4gICAgICB9XG5cbiAgICAgIGZpbmRBdXRob3IoZnVuY3Rpb24oYXV0aG9yLCBlcnIpe1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgIC8vIGZhaWx1cmVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZmluZEJvb29rc0J5QXV0aG9yKGF1dGhvciwgZnVuY3Rpb24oYm9va3MsIGVycikge1xuICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBmb3VuZEJvb2tzKGJvb2tzKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgZmFpbHVyZShyZWFzb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBzdWNjZXNzXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIFByb21pc2UgRXhhbXBsZTtcblxuICAgICAgYGBgamF2YXNjcmlwdFxuICAgICAgZmluZEF1dGhvcigpLlxuICAgICAgICB0aGVuKGZpbmRCb29rc0J5QXV0aG9yKS5cbiAgICAgICAgdGhlbihmdW5jdGlvbihib29rcyl7XG4gICAgICAgICAgLy8gZm91bmQgYm9va3NcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBAbWV0aG9kIHRoZW5cbiAgICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uRnVsZmlsbGVkXG4gICAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGVkXG4gICAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAgICovXG4gICAgICB0aGVuOiBsaWIkZXM2JHByb21pc2UkdGhlbiQkZGVmYXVsdCxcblxuICAgIC8qKlxuICAgICAgYGNhdGNoYCBpcyBzaW1wbHkgc3VnYXIgZm9yIGB0aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24pYCB3aGljaCBtYWtlcyBpdCB0aGUgc2FtZVxuICAgICAgYXMgdGhlIGNhdGNoIGJsb2NrIG9mIGEgdHJ5L2NhdGNoIHN0YXRlbWVudC5cblxuICAgICAgYGBganNcbiAgICAgIGZ1bmN0aW9uIGZpbmRBdXRob3IoKXtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZG4ndCBmaW5kIHRoYXQgYXV0aG9yJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIHN5bmNocm9ub3VzXG4gICAgICB0cnkge1xuICAgICAgICBmaW5kQXV0aG9yKCk7XG4gICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgICAgfVxuXG4gICAgICAvLyBhc3luYyB3aXRoIHByb21pc2VzXG4gICAgICBmaW5kQXV0aG9yKCkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIEBtZXRob2QgY2F0Y2hcbiAgICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0aW9uXG4gICAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAgICovXG4gICAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yO1xuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yKENvbnN0cnVjdG9yLCBpbnB1dCkge1xuICAgICAgdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgICAgdGhpcy5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5vb3ApO1xuXG4gICAgICBpZiAoIXRoaXMucHJvbWlzZVtsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQUk9NSVNFX0lEXSkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRtYWtlUHJvbWlzZSh0aGlzLnByb21pc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc0FycmF5KGlucHV0KSkge1xuICAgICAgICB0aGlzLl9pbnB1dCAgICAgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5sZW5ndGggICAgID0gaW5wdXQubGVuZ3RoO1xuICAgICAgICB0aGlzLl9yZW1haW5pbmcgPSBpbnB1dC5sZW5ndGg7XG5cbiAgICAgICAgdGhpcy5fcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcblxuICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoIHx8IDA7XG4gICAgICAgICAgdGhpcy5fZW51bWVyYXRlKCk7XG4gICAgICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QodGhpcy5wcm9taXNlLCBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkdmFsaWRhdGlvbkVycm9yKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCR2YWxpZGF0aW9uRXJyb3IoKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbiAgICB9XG5cbiAgICBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkRW51bWVyYXRvci5wcm90b3R5cGUuX2VudW1lcmF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxlbmd0aCAgPSB0aGlzLmxlbmd0aDtcbiAgICAgIHZhciBpbnB1dCAgID0gdGhpcy5faW5wdXQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyB0aGlzLl9zdGF0ZSA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUEVORElORyAmJiBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5fZWFjaEVudHJ5KGlucHV0W2ldLCBpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJEVudW1lcmF0b3IucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbihlbnRyeSwgaSkge1xuICAgICAgdmFyIGMgPSB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yO1xuICAgICAgdmFyIHJlc29sdmUgPSBjLnJlc29sdmU7XG5cbiAgICAgIGlmIChyZXNvbHZlID09PSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyZXNvbHZlJCRkZWZhdWx0KSB7XG4gICAgICAgIHZhciB0aGVuID0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZ2V0VGhlbihlbnRyeSk7XG5cbiAgICAgICAgaWYgKHRoZW4gPT09IGxpYiRlczYkcHJvbWlzZSR0aGVuJCRkZWZhdWx0ICYmXG4gICAgICAgICAgICBlbnRyeS5fc3RhdGUgIT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcpIHtcbiAgICAgICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuICAgICAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IGVudHJ5O1xuICAgICAgICB9IGVsc2UgaWYgKGMgPT09IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRkZWZhdWx0KSB7XG4gICAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgYyhsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRub29wKTtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIGVudHJ5LCB0aGVuKTtcbiAgICAgICAgICB0aGlzLl93aWxsU2V0dGxlQXQocHJvbWlzZSwgaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KG5ldyBjKGZ1bmN0aW9uKHJlc29sdmUpIHsgcmVzb2x2ZShlbnRyeSk7IH0pLCBpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KHJlc29sdmUoZW50cnkpLCBpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJEVudW1lcmF0b3IucHJvdG90eXBlLl9zZXR0bGVkQXQgPSBmdW5jdGlvbihzdGF0ZSwgaSwgdmFsdWUpIHtcbiAgICAgIHZhciBwcm9taXNlID0gdGhpcy5wcm9taXNlO1xuXG4gICAgICBpZiAocHJvbWlzZS5fc3RhdGUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcpIHtcbiAgICAgICAgdGhpcy5fcmVtYWluaW5nLS07XG5cbiAgICAgICAgaWYgKHN0YXRlID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRSRUpFQ1RFRCkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcmVzdWx0W2ldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKHByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0ID0gZnVuY3Rpb24ocHJvbWlzZSwgaSkge1xuICAgICAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRzdWJzY3JpYmUocHJvbWlzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBlbnVtZXJhdG9yLl9zZXR0bGVkQXQobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRlVMRklMTEVELCBpLCB2YWx1ZSk7XG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgZW51bWVyYXRvci5fc2V0dGxlZEF0KGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFJFSkVDVEVELCBpLCByZWFzb24pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcG9seWZpbGwkJHBvbHlmaWxsKCkge1xuICAgICAgdmFyIGxvY2FsO1xuXG4gICAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBsb2NhbCA9IGdsb2JhbDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgbG9jYWwgPSBzZWxmO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsb2NhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvbHlmaWxsIGZhaWxlZCBiZWNhdXNlIGdsb2JhbCBvYmplY3QgaXMgdW5hdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIFAgPSBsb2NhbC5Qcm9taXNlO1xuXG4gICAgICBpZiAoUCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUC5yZXNvbHZlKCkpID09PSAnW29iamVjdCBQcm9taXNlXScgJiYgIVAuY2FzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxvY2FsLlByb21pc2UgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkZGVmYXVsdDtcbiAgICB9XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRwb2x5ZmlsbCQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRwb2x5ZmlsbCQkcG9seWZpbGw7XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHVtZCQkRVM2UHJvbWlzZSA9IHtcbiAgICAgICdQcm9taXNlJzogbGliJGVzNiRwcm9taXNlJHByb21pc2UkJGRlZmF1bHQsXG4gICAgICAncG9seWZpbGwnOiBsaWIkZXM2JHByb21pc2UkcG9seWZpbGwkJGRlZmF1bHRcbiAgICB9O1xuXG4gICAgLyogZ2xvYmFsIGRlZmluZTp0cnVlIG1vZHVsZTp0cnVlIHdpbmRvdzogdHJ1ZSAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10pIHtcbiAgICAgIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGxpYiRlczYkcHJvbWlzZSR1bWQkJEVTNlByb21pc2U7IH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlWydleHBvcnRzJ10pIHtcbiAgICAgIG1vZHVsZVsnZXhwb3J0cyddID0gbGliJGVzNiRwcm9taXNlJHVtZCQkRVM2UHJvbWlzZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpc1snRVM2UHJvbWlzZSddID0gbGliJGVzNiRwcm9taXNlJHVtZCQkRVM2UHJvbWlzZTtcbiAgICB9XG5cbiAgICBsaWIkZXM2JHByb21pc2UkcG9seWZpbGwkJGRlZmF1bHQoKTtcbn0pLmNhbGwodGhpcyk7XG5cbiIsIihmdW5jdGlvbigpe3ZhciBnPXt9O1xuKGZ1bmN0aW9uKHdpbmRvdyl7dmFyIGssYWE9dGhpczthYS5MYj0hMDtmdW5jdGlvbiBtKGEsYil7dmFyIGM9YS5zcGxpdChcIi5cIiksZD1hYTtjWzBdaW4gZHx8IWQuZXhlY1NjcmlwdHx8ZC5leGVjU2NyaXB0KFwidmFyIFwiK2NbMF0pO2Zvcih2YXIgZTtjLmxlbmd0aCYmKGU9Yy5zaGlmdCgpKTspYy5sZW5ndGh8fHZvaWQgMD09PWI/ZFtlXT9kPWRbZV06ZD1kW2VdPXt9OmRbZV09Yn1mdW5jdGlvbiBiYShhKXt2YXIgYj1jYTtmdW5jdGlvbiBjKCl7fWMucHJvdG90eXBlPWIucHJvdG90eXBlO2EuT2I9Yi5wcm90b3R5cGU7YS5wcm90b3R5cGU9bmV3IGM7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YTthLk1iPWZ1bmN0aW9uKGEsYyxmKXtyZXR1cm4gYi5wcm90b3R5cGVbY10uYXBwbHkoYSxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpfX07LypcblxuIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG5cbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmZ1bmN0aW9uIGRhKGEpe3RoaXMuYz1NYXRoLmV4cChNYXRoLmxvZyguNSkvYSk7dGhpcy5hPXRoaXMuYj0wfWZ1bmN0aW9uIGVhKGEsYixjKXt2YXIgZD1NYXRoLnBvdyhhLmMsYik7YS5iPWMqKDEtZCkrZCphLmI7YS5hKz1ifWZ1bmN0aW9uIGZhKGEpe3JldHVybiBhLmIvKDEtTWF0aC5wb3coYS5jLGEuYSkpfTtmdW5jdGlvbiBnYSgpe3RoaXMuYT1uZXcgZGEoMyk7dGhpcy5jPW5ldyBkYSgxMCk7dGhpcy5iPTVFNX1mdW5jdGlvbiBpYShhKXtyZXR1cm4uNT5hLmEuYT9hLmI6TWF0aC5taW4oZmEoYS5hKSxmYShhLmMpKX07ZnVuY3Rpb24gamEoKXt0aGlzLmg9bnVsbDt0aGlzLmM9ITE7dGhpcy5iPW5ldyBnYTt0aGlzLmc9e307dGhpcy5hPXt9O3RoaXMuaT0hMTt0aGlzLmY9bnVsbH1tKFwic2hha2EuYWJyLlNpbXBsZUFick1hbmFnZXJcIixqYSk7az1qYS5wcm90b3R5cGU7ay5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5oPW51bGw7dGhpcy5jPSExO3RoaXMuZz17fTt0aGlzLmE9e307dGhpcy5mPW51bGx9O2suaW5pdD1mdW5jdGlvbihhKXt0aGlzLmg9YX07ay5jaG9vc2VTdHJlYW1zPWZ1bmN0aW9uKGEpe3RoaXMuZz1hO3RoaXMuYT17fTtyZXR1cm4ga2EodGhpcyl9O2suZW5hYmxlPWZ1bmN0aW9uKCl7dGhpcy5jPSEwfTtrLmRpc2FibGU9ZnVuY3Rpb24oKXt0aGlzLmM9ITF9O1xuay5zZWdtZW50RG93bmxvYWRlZD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5iO2E9Yi1hOzY1NTM2PmN8fDIwMD5hfHwoYT1NYXRoLm1heChhLDUwKSxjPThFMypjL2EsYS89MUUzLGVhKGQuYSxhLGMpLGVhKGQuYyxhLGMpKTtpZihudWxsIT10aGlzLmYmJnRoaXMuYylhOntkPURhdGUubm93KCktdGhpcy5mO2lmKCF0aGlzLmkpe2lmKDRFMz5kKWJyZWFrIGE7dGhpcy5pPSEwfWVsc2UgaWYoOEUzPmQpYnJlYWsgYTtkPXRoaXMuYS5hdWRpbztjPXRoaXMuYS52aWRlbzthPWthKHRoaXMpO2EuYXVkaW89PWQmJmEudmlkZW89PWN8fHRoaXMuaChhKX19O2suZ2V0QmFuZHdpZHRoRXN0aW1hdGU9ZnVuY3Rpb24oKXtyZXR1cm4gaWEodGhpcy5iKX07ay5zZXREZWZhdWx0RXN0aW1hdGU9ZnVuY3Rpb24oYSl7dGhpcy5iLmI9YX07XG5mdW5jdGlvbiBrYShhKXt2YXIgYj17fSxjOyhjPWEuZy5hdWRpbyk/KGM9bGEoYyksYz1jW01hdGguZmxvb3IoYy5sZW5ndGgvMildKTpjPW51bGw7YyYmKGIuYXVkaW89YyxhLmEuYXVkaW89Yyk7aWYoYz1hLmcudmlkZW8pe2M9bGEoYyk7Zm9yKHZhciBkPWEuYS5hdWRpbyxkPWQmJmQuYmFuZHdpZHRofHwwLGU9aWEoYS5iKSxmPWNbMF0sZz0wO2c8Yy5sZW5ndGg7KytnKXt2YXIgbD1jW2ddLGg9ZysxPGMubGVuZ3RoP2NbZysxXTp7YmFuZHdpZHRoOk51bWJlci5QT1NJVElWRV9JTkZJTklUWX07bC5iYW5kd2lkdGgmJihoPShoLmJhbmR3aWR0aCtkKS8uODUsZT49KGwuYmFuZHdpZHRoK2QpLy45NSYmZTw9aCYmKGY9bCkpfWM9Zn1lbHNlIGM9bnVsbDtjJiYoYi52aWRlbz1jLGEuYS52aWRlbz1jKTthLmY9RGF0ZS5ub3coKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGxhKGEpe3JldHVybiBhLnN0cmVhbXMuc2xpY2UoMCkuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiBhLmFsbG93ZWRCeUFwcGxpY2F0aW9uJiZhLmFsbG93ZWRCeUtleVN5c3RlbX0pLnNvcnQoZnVuY3Rpb24oYSxjKXtyZXR1cm4gYS5iYW5kd2lkdGgtYy5iYW5kd2lkdGh9KX07dmFyIG1hPXt9LG5hPXt9O20oXCJzaGFrYS5tZWRpYS5NYW5pZmVzdFBhcnNlci5yZWdpc3RlclBhcnNlckJ5RXh0ZW5zaW9uXCIsZnVuY3Rpb24oYSxiKXtuYVthXT1ifSk7bShcInNoYWthLm1lZGlhLk1hbmlmZXN0UGFyc2VyLnJlZ2lzdGVyUGFyc2VyQnlNaW1lXCIsZnVuY3Rpb24oYSxiKXttYVthXT1ifSk7ZnVuY3Rpb24gb2EoKXt2YXIgYT17YmFzaWM6ITB9LGI7Zm9yKGIgaW4gbWEpYVtiXT0hMDtmb3IoYiBpbiBuYSlhW2JdPSEwO1tcImFwcGxpY2F0aW9uL2Rhc2greG1sXCIsXCJhcHBsaWNhdGlvbi94LW1wZWd1cmxcIixcImFwcGxpY2F0aW9uL3ZuZC5hcHBsZS5tcGVndXJsXCIsXCJhcHBsaWNhdGlvbi92bmQubXMtc3N0cit4bWxcIl0uZm9yRWFjaChmdW5jdGlvbihiKXthW2JdPSEhbWFbYl19KTtbXCJtcGRcIixcIm0zdThcIixcImlzbVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2FbYl09ISFuYVtiXX0pO3JldHVybiBhfTtmdW5jdGlvbiBwYShhKXt0aGlzLmg9YTt0aGlzLmM9dGhpcy5hPU51bWJlci5QT1NJVElWRV9JTkZJTklUWTt0aGlzLmI9MTt0aGlzLmc9dGhpcy5mPTB9bShcInNoYWthLm1lZGlhLlByZXNlbnRhdGlvblRpbWVsaW5lXCIscGEpO2Z1bmN0aW9uIHFhKGEsYixjKXswIT1jLmxlbmd0aCYmKGEuYj1jLnJlZHVjZShmdW5jdGlvbihhLGIpe3JldHVybiBNYXRoLm1heChhLGIuYS1iLnN0YXJ0VGltZSl9LGEuYiksMD09YiYmKGEuZj1NYXRoLm1heChhLmYsY1swXS5zdGFydFRpbWUpKSl9cGEucHJvdG90eXBlLmFhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYT09TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZfHx0aGlzLmM8TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZfTtmdW5jdGlvbiByYShhKXtyZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4oYS5mLG4oYSkpLHNhKGEpKX1cbmZ1bmN0aW9uIHNhKGEpe3JldHVybiBhLmM9PU51bWJlci5QT1NJVElWRV9JTkZJTklUWT8wOk1hdGgubWF4KDAsbihhKS1hLmMpfWZ1bmN0aW9uIG4oYSl7cmV0dXJuIG51bGwhPWEuaCYmYS5hYSgpP01hdGgubWluKE1hdGgubWF4KDAsKERhdGUubm93KCkrYS5nKS8xRTMtYS5iLWEuaCksYS5hKTphLmF9O2Z1bmN0aW9uIHRhKGEsYixjKXt0aGlzLnVyaXM9YTt0aGlzLmM9Yjt0aGlzLmI9Y31tKFwic2hha2EubWVkaWEuSW5pdFNlZ21lbnRSZWZlcmVuY2VcIix0YSk7ZnVuY3Rpb24gdyhhLGIsYyxkLGUsZil7dGhpcy5wb3NpdGlvbj1hO3RoaXMuc3RhcnRUaW1lPWI7dGhpcy5hPWM7dGhpcy51cmlzPWQ7dGhpcy5jPWU7dGhpcy5iPWZ9bShcInNoYWthLm1lZGlhLlNlZ21lbnRSZWZlcmVuY2VcIix3KTtmdW5jdGlvbiB1YShhLGIpe2lmKCFhKXJldHVybiAwO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7KytjKWlmKGIrMUUtND49YS5zdGFydChjKSYmYjxhLmVuZChjKSlyZXR1cm4gYS5lbmQoYyktYjtyZXR1cm4gMH07bShcInNoYWthLnBvbHlmaWxsLmluc3RhbGxBbGxcIixmdW5jdGlvbigpe2Zvcih2YXIgYT0wO2E8dmEubGVuZ3RoOysrYSl2YVthXSgpfSk7dmFyIHZhPVtdO2Z1bmN0aW9uIHdhKGEpe3ZhLnB1c2goYSl9bShcInNoYWthLnBvbHlmaWxsLnJlZ2lzdGVyXCIsd2EpO2Z1bmN0aW9uIHhhKGEpe3ZhciBiPWEudHlwZS5yZXBsYWNlKC9eKHdlYmtpdHxtb3p8TVMpLyxcIlwiKS50b0xvd2VyQ2FzZSgpLGI9bmV3IEV2ZW50KGIsYSk7YS50YXJnZXQuZGlzcGF0Y2hFdmVudChiKX1cbndhKGZ1bmN0aW9uKCl7aWYod2luZG93LkRvY3VtZW50KXt2YXIgYT1FbGVtZW50LnByb3RvdHlwZTthLnJlcXVlc3RGdWxsc2NyZWVuPWEucmVxdWVzdEZ1bGxzY3JlZW58fGEubW96UmVxdWVzdEZ1bGxTY3JlZW58fGEubXNSZXF1ZXN0RnVsbHNjcmVlbnx8YS53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbjthPURvY3VtZW50LnByb3RvdHlwZTthLmV4aXRGdWxsc2NyZWVuPWEuZXhpdEZ1bGxzY3JlZW58fGEubW96Q2FuY2VsRnVsbFNjcmVlbnx8YS5tc0V4aXRGdWxsc2NyZWVufHxhLndlYmtpdEV4aXRGdWxsc2NyZWVuO1wiZnVsbHNjcmVlbkVsZW1lbnRcImluIGRvY3VtZW50fHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jdW1lbnQsXCJmdWxsc2NyZWVuRWxlbWVudFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnR8fGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnR8fGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50fX0pO2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJraXRmdWxsc2NyZWVuY2hhbmdlXCIsXG54YSk7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmtpdGZ1bGxzY3JlZW5lcnJvclwiLHhhKTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW96ZnVsbHNjcmVlbmNoYW5nZVwiLHhhKTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW96ZnVsbHNjcmVlbmVycm9yXCIseGEpO2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJNU0Z1bGxzY3JlZW5DaGFuZ2VcIix4YSk7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIk1TRnVsbHNjcmVlbkVycm9yXCIseGEpfX0pO2Z1bmN0aW9uIHlhKCl7cmV0dXJuIFByb21pc2UucmVqZWN0KEVycm9yKFwiVGhlIGtleSBzeXN0ZW0gc3BlY2lmaWVkIGlzIG5vdCBzdXBwb3J0ZWQuXCIpKX1mdW5jdGlvbiB6YShhKXtyZXR1cm4gbnVsbD09YT9Qcm9taXNlLnJlc29sdmUoKTpQcm9taXNlLnJlamVjdChFcnJvcihcIk1lZGlhS2V5cyBub3Qgc3VwcG9ydGVkLlwiKSl9ZnVuY3Rpb24gQWEoKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSWxsZWdhbCBjb25zdHJ1Y3Rvci5cIik7fUFhLnByb3RvdHlwZS5jcmVhdGVTZXNzaW9uPWZ1bmN0aW9uKCl7fTtBYS5wcm90b3R5cGUuc2V0U2VydmVyQ2VydGlmaWNhdGU9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIEJhKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgY29uc3RydWN0b3IuXCIpO31CYS5wcm90b3R5cGUuZ2V0Q29uZmlndXJhdGlvbj1mdW5jdGlvbigpe307QmEucHJvdG90eXBlLmNyZWF0ZU1lZGlhS2V5cz1mdW5jdGlvbigpe307ZnVuY3Rpb24geChhKXt0aGlzLmM9W107dGhpcy5iPVtdO3RoaXMuWD1DYTtpZihhKXRyeXthKHRoaXMuTi5iaW5kKHRoaXMpLHRoaXMuYS5iaW5kKHRoaXMpKX1jYXRjaChiKXt0aGlzLmEoYil9fXZhciBDYT0wO2Z1bmN0aW9uIEVhKGEpe3ZhciBiPW5ldyB4O2IuTihhKTtyZXR1cm4gYn1mdW5jdGlvbiBGYShhKXt2YXIgYj1uZXcgeDtiLmEoYSk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2EoYSl7ZnVuY3Rpb24gYihhLGIsYyl7YS5YPT1DYSYmKGVbYl09YyxkKyssZD09ZS5sZW5ndGgmJmEuTihlKSl9dmFyIGM9bmV3IHg7aWYoIWEubGVuZ3RoKXJldHVybiBjLk4oW10pLGM7Zm9yKHZhciBkPTAsZT1BcnJheShhLmxlbmd0aCksZj1jLmEuYmluZChjKSxnPTA7ZzxhLmxlbmd0aDsrK2cpYVtnXSYmYVtnXS50aGVuP2FbZ10udGhlbihiLmJpbmQobnVsbCxjLGcpLGYpOmIoYyxnLGFbZ10pO3JldHVybiBjfVxuZnVuY3Rpb24gSGEoYSl7Zm9yKHZhciBiPW5ldyB4LGM9Yi5OLmJpbmQoYiksZD1iLmEuYmluZChiKSxlPTA7ZTxhLmxlbmd0aDsrK2UpYVtlXSYmYVtlXS50aGVuP2FbZV0udGhlbihjLGQpOmMoYVtlXSk7cmV0dXJuIGJ9eC5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhLGIpe3ZhciBjPW5ldyB4O3N3aXRjaCh0aGlzLlgpe2Nhc2UgMTpJYSh0aGlzLGMsYSk7YnJlYWs7Y2FzZSAyOklhKHRoaXMsYyxiKTticmVhaztjYXNlIENhOnRoaXMuYy5wdXNoKHtEOmMsdGE6YX0pLHRoaXMuYi5wdXNoKHtEOmMsdGE6Yn0pfXJldHVybiBjfTt4LnByb3RvdHlwZS50aGVuPXgucHJvdG90eXBlLnRoZW47eC5wcm90b3R5cGVbXCJjYXRjaFwiXT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxhKX07eC5wcm90b3R5cGVbXCJjYXRjaFwiXT14LnByb3RvdHlwZVtcImNhdGNoXCJdO1xueC5wcm90b3R5cGUuTj1mdW5jdGlvbihhKXtpZih0aGlzLlg9PUNhKXt0aGlzLnJhPWE7dGhpcy5YPTE7Zm9yKGE9MDthPHRoaXMuYy5sZW5ndGg7KythKUlhKHRoaXMsdGhpcy5jW2FdLkQsdGhpcy5jW2FdLnRhKTt0aGlzLmM9W107dGhpcy5iPVtdfX07eC5wcm90b3R5cGUuYT1mdW5jdGlvbihhKXtpZih0aGlzLlg9PUNhKXt0aGlzLnJhPWE7dGhpcy5YPTI7Zm9yKGE9MDthPHRoaXMuYi5sZW5ndGg7KythKUlhKHRoaXMsdGhpcy5iW2FdLkQsdGhpcy5iW2FdLnRhKTt0aGlzLmM9W107dGhpcy5iPVtdfX07XG5mdW5jdGlvbiBJYShhLGIsYyl7SmEucHVzaChmdW5jdGlvbigpe2lmKGMmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGMpe3RyeXt2YXIgYT1jKHRoaXMucmEpfWNhdGNoKGYpe2IuYShmKTtyZXR1cm59dmFyIGU7dHJ5e2U9YSYmYS50aGVufWNhdGNoKGYpe2IuYShmKTtyZXR1cm59YSBpbnN0YW5jZW9mIHg/YT09Yj9iLmEobmV3IFR5cGVFcnJvcihcIkNoYWluaW5nIGN5Y2xlIGRldGVjdGVkXCIpKTphLnRoZW4oYi5OLmJpbmQoYiksYi5hLmJpbmQoYikpOmU/S2EoYSxlLGIpOmIuTihhKX1lbHNlIDE9PXRoaXMuWD9iLk4odGhpcy5yYSk6Yi5hKHRoaXMucmEpfS5iaW5kKGEpKTtudWxsPT1MYSYmKExhPU1hKE5hKSl9XG5mdW5jdGlvbiBLYShhLGIsYyl7dHJ5e3ZhciBkPSExO2IuY2FsbChhLGZ1bmN0aW9uKGEpe2lmKCFkKXtkPSEwO3ZhciBiO3RyeXtiPWEmJmEudGhlbn1jYXRjaChnKXtjLmEoZyk7cmV0dXJufWI/S2EoYSxiLGMpOmMuTihhKX19LGMuYS5iaW5kKGMpKX1jYXRjaChlKXtjLmEoZSl9fWZ1bmN0aW9uIE5hKCl7Zm9yKDtKYS5sZW5ndGg7KXtudWxsIT1MYSYmKE9hKExhKSxMYT1udWxsKTt2YXIgYT1KYTtKYT1bXTtmb3IodmFyIGI9MDtiPGEubGVuZ3RoOysrYilhW2JdKCl9fWZ1bmN0aW9uIE1hKCl7cmV0dXJuIDB9ZnVuY3Rpb24gT2EoKXt9dmFyIExhPW51bGwsSmE9W107XG53YShmdW5jdGlvbigpe3dpbmRvdy5Qcm9taXNlfHwod2luZG93LlByb21pc2U9eCx3aW5kb3cuUHJvbWlzZS5yZXNvbHZlPUVhLHdpbmRvdy5Qcm9taXNlLnJlamVjdD1GYSx3aW5kb3cuUHJvbWlzZS5hbGw9R2Esd2luZG93LlByb21pc2UucmFjZT1IYSx3aW5kb3cuc2V0SW1tZWRpYXRlPyhNYT1mdW5jdGlvbihhKXtyZXR1cm4gd2luZG93LnNldEltbWVkaWF0ZShhKX0sT2E9ZnVuY3Rpb24oYSl7cmV0dXJuIHdpbmRvdy5jbGVhckltbWVkaWF0ZShhKX0pOihNYT1mdW5jdGlvbihhKXtyZXR1cm4gd2luZG93LnNldFRpbWVvdXQoYSwwKX0sT2E9ZnVuY3Rpb24oYSl7cmV0dXJuIHdpbmRvdy5jbGVhclRpbWVvdXQoYSl9KSl9KTtmdW5jdGlvbiBQYSgpe3JldHVybntkcm9wcGVkVmlkZW9GcmFtZXM6dGhpcy53ZWJraXREcm9wcGVkRnJhbWVDb3VudCx0b3RhbFZpZGVvRnJhbWVzOnRoaXMud2Via2l0RGVjb2RlZEZyYW1lQ291bnQsY29ycnVwdGVkVmlkZW9GcmFtZXM6MCxjcmVhdGlvblRpbWU6TmFOLHRvdGFsRnJhbWVEZWxheTowfX13YShmdW5jdGlvbigpe2lmKHdpbmRvdy5IVE1MVmlkZW9FbGVtZW50KXt2YXIgYT1IVE1MVmlkZW9FbGVtZW50LnByb3RvdHlwZTshYS5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eSYmXCJ3ZWJraXREcm9wcGVkRnJhbWVDb3VudFwiaW4gYSYmKGEuZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHk9UGEpfX0pO2Z1bmN0aW9uIFFhKGEsYixjKXtmb3IodmFyIGQ9MDtkPGEubGVuZ3RoOysrZClpZihjKGFbZF0sYikpcmV0dXJuIGQ7cmV0dXJuLTF9O2Z1bmN0aW9uIHooYSxiLGMpe3RoaXMuY2F0ZWdvcnk9YTt0aGlzLmNvZGU9Yjt0aGlzLmRhdGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpfW0oXCJzaGFrYS51dGlsLkVycm9yXCIseik7ei5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cInNoYWthLnV0aWwuRXJyb3IgXCIrSlNPTi5zdHJpbmdpZnkodGhpcyxudWxsLFwiICBcIil9O3ouQ2F0ZWdvcnk9e05FVFdPUks6MSxURVhUOjIsTUVESUE6MyxNQU5JRkVTVDo0LFNUUkVBTUlORzo1LERSTTo2fTtcbnouQ29kZT17VU5TVVBQT1JURURfU0NIRU1FOjFFMyxCQURfSFRUUF9TVEFUVVM6MTAwMSxIVFRQX0VSUk9SOjEwMDIsVElNRU9VVDoxMDAzLE1BTEZPUk1FRF9EQVRBX1VSSToxMDA0LFVOS05PV05fREFUQV9VUklfRU5DT0RJTkc6MTAwNSxJTlZBTElEX1RFWFRfSEVBREVSOjJFMyxJTlZBTElEX1RFWFRfQ1VFOjIwMDEsSU5WQUxJRF9URVhUX1NFVFRJTkdTOjIwMDIsVU5BQkxFX1RPX0RFVEVDVF9FTkNPRElORzoyMDAzLEJBRF9FTkNPRElORzoyMDA0LEJVRkZFUl9SRUFEX09VVF9PRl9CT1VORFM6M0UzLEpTX0lOVEVHRVJfT1ZFUkZMT1c6MzAwMSxFQk1MX09WRVJGTE9XOjMwMDIsRUJNTF9CQURfRkxPQVRJTkdfUE9JTlRfU0laRTozMDAzLE1QNF9TSURYX1dST05HX0JPWF9UWVBFOjMwMDQsTVA0X1NJRFhfSU5WQUxJRF9USU1FU0NBTEU6MzAwNSxNUDRfU0lEWF9UWVBFX05PVF9TVVBQT1JURUQ6MzAwNixXRUJNX0NVRVNfRUxFTUVOVF9NSVNTSU5HOjMwMDcsV0VCTV9FQk1MX0hFQURFUl9FTEVNRU5UX01JU1NJTkc6MzAwOCxcbldFQk1fU0VHTUVOVF9FTEVNRU5UX01JU1NJTkc6MzAwOSxXRUJNX0lORk9fRUxFTUVOVF9NSVNTSU5HOjMwMTAsV0VCTV9EVVJBVElPTl9FTEVNRU5UX01JU1NJTkc6MzAxMSxXRUJNX0NVRV9UUkFDS19QT1NJVElPTlNfRUxFTUVOVF9NSVNTSU5HOjMwMTIsV0VCTV9DVUVfVElNRV9FTEVNRU5UX01JU1NJTkc6MzAxMyxNRURJQV9TT1VSQ0VfT1BFUkFUSU9OX0ZBSUxFRDozMDE0LE1FRElBX1NPVVJDRV9PUEVSQVRJT05fVEhSRVc6MzAxNSxWSURFT19FUlJPUjozMDE2LFVOQUJMRV9UT19HVUVTU19NQU5JRkVTVF9UWVBFOjRFMyxEQVNIX0lOVkFMSURfWE1MOjQwMDEsREFTSF9OT19TRUdNRU5UX0lORk86NDAwMixEQVNIX0VNUFRZX0FEQVBUQVRJT05fU0VUOjQwMDMsREFTSF9FTVBUWV9QRVJJT0Q6NDAwNCxEQVNIX1dFQk1fTUlTU0lOR19JTklUOjQwMDUsREFTSF9VTlNVUFBPUlRFRF9DT05UQUlORVI6NDAwNixEQVNIX1BTU0hfQkFEX0VOQ09ESU5HOjQwMDcsREFTSF9OT19DT01NT05fS0VZX1NZU1RFTTo0MDA4LFxuREFTSF9NVUxUSVBMRV9LRVlfSURTX05PVF9TVVBQT1JURUQ6NDAwOSxEQVNIX0NPTkZMSUNUSU5HX0tFWV9JRFM6NDAxMCxVTlBMQVlBQkxFX1BFUklPRDo0MDExLEFMTF9TVFJFQU1TX1JFU1RSSUNURUQ6NDAxMixJTkNPTlNJU1RFTlRfQlVGRkVSX1NUQVRFOjVFMyxJTlZBTElEX1NUUkVBTVNfQ0hPU0VOOjUwMDUsTk9fUkVDT0dOSVpFRF9LRVlfU1lTVEVNUzo2RTMsUkVRVUVTVEVEX0tFWV9TWVNURU1TX1VOQVZBSUxBQkxFOjYwMDEsRkFJTEVEX1RPX0NSRUFURV9DRE06NjAwMixGQUlMRURfVE9fQVRUQUNIX1RPX1ZJREVPOjYwMDMsSU5WQUxJRF9TRVJWRVJfQ0VSVElGSUNBVEU6NjAwNCxGQUlMRURfVE9fQ1JFQVRFX1NFU1NJT046NjAwNSxGQUlMRURfVE9fR0VORVJBVEVfTElDRU5TRV9SRVFVRVNUOjYwMDYsTElDRU5TRV9SRVFVRVNUX0ZBSUxFRDo2MDA3LExJQ0VOU0VfUkVTUE9OU0VfUkVKRUNURUQ6NjAwOCxFTkNSWVBURURfQ09OVEVOVF9XSVRIT1VUX0RSTV9JTkZPOjYwMTAsXG5XUk9OR19LRVlTOjYwMTF9O2Z1bmN0aW9uIFJhKGEpe3RoaXMuYj1hO3RoaXMuYz0wPT1TYTt0aGlzLmE9MH12YXIgU2E9MTtmdW5jdGlvbiBUYShhKXtyZXR1cm4gYS5hPGEuYi5ieXRlTGVuZ3RofWZ1bmN0aW9uIFVhKGEpe3RyeXt2YXIgYj1hLmIuZ2V0VWludDgoYS5hKX1jYXRjaChjKXtWYSgpfWEuYSs9MTtyZXR1cm4gYn1mdW5jdGlvbiBBKGEpe3RyeXt2YXIgYj1hLmIuZ2V0VWludDMyKGEuYSxhLmMpfWNhdGNoKGMpe1ZhKCl9YS5hKz00O3JldHVybiBifWZ1bmN0aW9uIFdhKGEpe3ZhciBiLGM7dHJ5e2EuYz8oYj1hLmIuZ2V0VWludDMyKGEuYSwhMCksYz1hLmIuZ2V0VWludDMyKGEuYSs0LCEwKSk6KGM9YS5iLmdldFVpbnQzMihhLmEsITEpLGI9YS5iLmdldFVpbnQzMihhLmErNCwhMSkpfWNhdGNoKGQpe1ZhKCl9aWYoMjA5NzE1MTxjKXRocm93IG5ldyB6KDMsMzAwMSk7YS5hKz04O3JldHVybiBjKk1hdGgucG93KDIsMzIpK2J9XG5mdW5jdGlvbiBYYShhKXthLmErMTY+YS5iLmJ5dGVMZW5ndGgmJlZhKCk7dmFyIGI9bmV3IFVpbnQ4QXJyYXkoYS5iLmJ1ZmZlcixhLmEsMTYpO2EuYSs9MTY7cmV0dXJuIGJ9ZnVuY3Rpb24gQihhLGIpe2EuYStiPmEuYi5ieXRlTGVuZ3RoJiZWYSgpO2EuYSs9Yn1mdW5jdGlvbiBWYSgpe3Rocm93IG5ldyB6KDMsM0UzKTt9O2Z1bmN0aW9uIEMoYSl7dGhpcy5iPWE7dGhpcy5hPW5ldyBSYShhKTtZYXx8KFlhPVtuZXcgVWludDhBcnJheShbMjU1XSksbmV3IFVpbnQ4QXJyYXkoWzEyNywyNTVdKSxuZXcgVWludDhBcnJheShbNjMsMjU1LDI1NV0pLG5ldyBVaW50OEFycmF5KFszMSwyNTUsMjU1LDI1NV0pLG5ldyBVaW50OEFycmF5KFsxNSwyNTUsMjU1LDI1NSwyNTVdKSxuZXcgVWludDhBcnJheShbNywyNTUsMjU1LDI1NSwyNTUsMjU1XSksbmV3IFVpbnQ4QXJyYXkoWzMsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdKSxuZXcgVWludDhBcnJheShbMSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdKV0pfXZhciBZYTtcbmZ1bmN0aW9uIEQoYSl7dmFyIGI7Yj1aYShhKTtpZig3PGIubGVuZ3RoKXRocm93IG5ldyB6KDMsMzAwMik7Zm9yKHZhciBjPTAsZD0wO2Q8Yi5sZW5ndGg7ZCsrKWM9MjU2KmMrYltkXTtiPWM7Yz1aYShhKTthOntmb3IoZD0wO2Q8WWEubGVuZ3RoO2QrKylpZihFKGMsWWFbZF0pKXtkPSEwO2JyZWFrIGF9ZD0hMX1pZihkKWM9YS5iLmJ5dGVMZW5ndGgtYS5hLmE7ZWxzZXtpZig4PT1jLmxlbmd0aCYmY1sxXSYyMjQpdGhyb3cgbmV3IHooMywzMDAxKTtmb3IodmFyIGQ9Y1swXSYoMTw8OC1jLmxlbmd0aCktMSxlPTE7ZTxjLmxlbmd0aDtlKyspZD0yNTYqZCtjW2VdO2M9ZH1jPWEuYS5hK2M8PWEuYi5ieXRlTGVuZ3RoP2M6YS5iLmJ5dGVMZW5ndGgtYS5hLmE7ZD1uZXcgRGF0YVZpZXcoYS5iLmJ1ZmZlcixhLmIuYnl0ZU9mZnNldCthLmEuYSxjKTtCKGEuYSxjKTtyZXR1cm4gbmV3ICRhKGIsZCl9XG5mdW5jdGlvbiBaYShhKXt2YXIgYj1VYShhLmEpLGM7Zm9yKGM9MTs4Pj1jJiYhKGImMTw8OC1jKTtjKyspO2lmKDg8Yyl0aHJvdyBuZXcgeigzLDMwMDIpO3ZhciBkPW5ldyBVaW50OEFycmF5KGMpO2RbMF09Yjtmb3IoYj0xO2I8YztiKyspZFtiXT1VYShhLmEpO3JldHVybiBkfWZ1bmN0aW9uICRhKGEsYil7dGhpcy5pZD1hO3RoaXMuYT1ifWZ1bmN0aW9uIGFiKGEpe2lmKDg8YS5hLmJ5dGVMZW5ndGgpdGhyb3cgbmV3IHooMywzMDAyKTtpZig4PT1hLmEuYnl0ZUxlbmd0aCYmYS5hLmdldFVpbnQ4KDApJjIyNCl0aHJvdyBuZXcgeigzLDMwMDEpO2Zvcih2YXIgYj0wLGM9MDtjPGEuYS5ieXRlTGVuZ3RoO2MrKyl2YXIgZD1hLmEuZ2V0VWludDgoYyksYj0yNTYqYitkO3JldHVybiBifTtmdW5jdGlvbiBGKGEsYil7dmFyIGM9Ynx8e30sZDtmb3IoZCBpbiBjKXRoaXNbZF09Y1tkXTt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9dGhpcy5jYW5jZWxhYmxlPXRoaXMuYnViYmxlcz0hMTt0aGlzLnRpbWVTdGFtcD13aW5kb3cucGVyZm9ybWFuY2U/d2luZG93LnBlcmZvcm1hbmNlLm5vdygpOkRhdGUubm93KCk7dGhpcy50eXBlPWE7dGhpcy5pc1RydXN0ZWQ9ITE7dGhpcy50YXJnZXQ9dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7dGhpcy5hPSExfUYucHJvdG90eXBlLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7fTtGLnByb3RvdHlwZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb249ZnVuY3Rpb24oKXt0aGlzLmE9ITB9O0YucHJvdG90eXBlLnN0b3BQcm9wYWdhdGlvbj1mdW5jdGlvbigpe307ZnVuY3Rpb24gYmIoYSxiKXtyZXR1cm4gYS5yZWR1Y2UoZnVuY3Rpb24oYSxiLGUpe3JldHVybiBiW1wiY2F0Y2hcIl0oYS5iaW5kKG51bGwsZSkpfS5iaW5kKG51bGwsYiksUHJvbWlzZS5yZWplY3QoKSl9ZnVuY3Rpb24gY2IoYSxiKXtyZXR1cm4gYS5jb25jYXQoYil9ZnVuY3Rpb24gRygpe31mdW5jdGlvbiBkYihhKXtyZXR1cm4gbnVsbCE9YX1mdW5jdGlvbiBlYihhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGIhPWF9fTtmdW5jdGlvbiBIKGEpe3RoaXMuYT1hfW0oXCJzaGFrYS5tZWRpYS5TZWdtZW50SW5kZXhcIixIKTtILnByb3RvdHlwZS5zPWZ1bmN0aW9uKCl7dGhpcy5hPW51bGw7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpfTtILnByb3RvdHlwZS5iPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLmEubGVuZ3RoLTE7MDw9YjstLWIpe3ZhciBjPXRoaXMuYVtiXTtpZihhPj1jLnN0YXJ0VGltZSYmYTxjLmEpcmV0dXJuIGMucG9zaXRpb259cmV0dXJuIG51bGx9O0gucHJvdG90eXBlLmdldD1mdW5jdGlvbihhKXtpZigwPT10aGlzLmEubGVuZ3RoKXJldHVybiBudWxsO2EtPXRoaXMuYVswXS5wb3NpdGlvbjtyZXR1cm4gMD5hfHxhPj10aGlzLmEubGVuZ3RoP251bGw6dGhpcy5hW2FdfTtcbmZ1bmN0aW9uIGZiKGEsYil7Zm9yKHZhciBjPVtdLGQ9MCxlPTA7ZDxhLmEubGVuZ3RoJiZlPGIubGVuZ3RoOyl7dmFyIGY9YS5hW2RdLGc9YltlXTtmLnN0YXJ0VGltZTxnLnN0YXJ0VGltZT8oYy5wdXNoKGYpLGQrKyk6KGYuc3RhcnRUaW1lPmcuc3RhcnRUaW1lfHwoLjE8TWF0aC5hYnMoZi5hLWcuYSk/Yy5wdXNoKGcpOmMucHVzaChmKSxkKyspLGUrKyl9Zm9yKDtkPGEuYS5sZW5ndGg7KWMucHVzaChhLmFbZCsrXSk7aWYoYy5sZW5ndGgpZm9yKGQ9Y1tjLmxlbmd0aC0xXS5wb3NpdGlvbisxO2U8Yi5sZW5ndGg7KWc9YltlKytdLGc9bmV3IHcoZCsrLGcuc3RhcnRUaW1lLGcuYSxnLnVyaXMsZy5jLGcuYiksYy5wdXNoKGcpO2Vsc2UgYz1iO2EuYT1jfWZ1bmN0aW9uIGdiKGEsYil7Zm9yKHZhciBjPTA7YzxhLmEubGVuZ3RoJiYhKGEuYVtjXS5hPmIpOysrYyk7YS5hLnNwbGljZSgwLGMpfTtmdW5jdGlvbiBoYihhLGIpe3RoaXMuZz1pYltiXTt0aGlzLmM9YTt0aGlzLmg9MDt0aGlzLmY9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO3RoaXMuYT10aGlzLmI9bnVsbH12YXIgaWI9e307bShcInNoYWthLm1lZGlhLlRleHRFbmdpbmUucmVnaXN0ZXJQYXJzZXJcIixmdW5jdGlvbihhLGIpe2liW2FdPWJ9KTttKFwic2hha2EubWVkaWEuVGV4dEVuZ2luZS51bnJlZ2lzdGVyUGFyc2VyXCIsZnVuY3Rpb24oYSl7ZGVsZXRlIGliW2FdfSk7aGIucHJvdG90eXBlLnM9ZnVuY3Rpb24oKXt0aGlzLmMmJmpiKHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4hMH0pO3RoaXMuYz10aGlzLmc9bnVsbDtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCl9O1xuZnVuY3Rpb24ga2IoYSxiLGMsZCl7dmFyIGU9YS5oO2MrPWU7ZCs9ZTtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmcoYiksZz0wO2c8YS5sZW5ndGg7KytnKXthW2ddLnN0YXJ0VGltZSs9ZTthW2ddLmVuZFRpbWUrPWU7aWYoYVtnXS5zdGFydFRpbWU+PXRoaXMuZilicmVhazt0aGlzLmMuYWRkQ3VlKGFbZ10pfW51bGw9PXRoaXMuYiYmKHRoaXMuYj1jKTt0aGlzLmE9TWF0aC5taW4oZCx0aGlzLmYpfS5iaW5kKGEpKX1cbmZ1bmN0aW9uIGxiKGEsYixjKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe2piKHRoaXMsZnVuY3Rpb24oYSl7cmV0dXJuIGEuc3RhcnRUaW1lPj1jfHxhLmVuZFRpbWU8PWI/ITE6ITB9KTtudWxsPT10aGlzLmJ8fGM8PXRoaXMuYnx8Yj49dGhpcy5hfHwoYjw9dGhpcy5iJiZjPj10aGlzLmE/dGhpcy5iPXRoaXMuYT1udWxsOmI8PXRoaXMuYiYmYzx0aGlzLmE/dGhpcy5iPWM6Yj50aGlzLmImJmM+PXRoaXMuYSYmKHRoaXMuYT1iKSl9LmJpbmQoYSkpfWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWEuYXx8YS5hPGJ8fGI8YS5iPzA6YS5hLWJ9ZnVuY3Rpb24gamIoYSxiKXtmb3IodmFyIGM9YS5jLmN1ZXMsZD1bXSxlPTA7ZTxjLmxlbmd0aDsrK2UpYihjW2VdKSYmZC5wdXNoKGNbZV0pO2ZvcihlPTA7ZTxkLmxlbmd0aDsrK2UpYS5jLnJlbW92ZUN1ZShkW2VdKX07ZnVuY3Rpb24gbmIoYSl7YT1hLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCItXCIpO3ZhciBiPW9iW2FbMF1dO2ImJihhWzBdPWIpO3JldHVybiBhLmpvaW4oXCItXCIpfVxudmFyIG9iPXthYXI6XCJhYVwiLGFiazpcImFiXCIsYWZyOlwiYWZcIixha2E6XCJha1wiLGFsYjpcInNxXCIsYW1oOlwiYW1cIixhcmE6XCJhclwiLGFyZzpcImFuXCIsYXJtOlwiaHlcIixhc206XCJhc1wiLGF2YTpcImF2XCIsYXZlOlwiYWVcIixheW06XCJheVwiLGF6ZTpcImF6XCIsYmFrOlwiYmFcIixiYW06XCJibVwiLGJhcTpcImV1XCIsYmVsOlwiYmVcIixiZW46XCJiblwiLGJpaDpcImJoXCIsYmlzOlwiYmlcIixib2Q6XCJib1wiLGJvczpcImJzXCIsYnJlOlwiYnJcIixidWw6XCJiZ1wiLGJ1cjpcIm15XCIsY2F0OlwiY2FcIixjZXM6XCJjc1wiLGNoYTpcImNoXCIsY2hlOlwiY2VcIixjaGk6XCJ6aFwiLGNodTpcImN1XCIsY2h2OlwiY3ZcIixjb3I6XCJrd1wiLGNvczpcImNvXCIsY3JlOlwiY3JcIixjeW06XCJjeVwiLGN6ZTpcImNzXCIsZGFuOlwiZGFcIixkZXU6XCJkZVwiLGRpdjpcImR2XCIsZHV0OlwibmxcIixkem86XCJkelwiLGVsbDpcImVsXCIsZW5nOlwiZW5cIixlcG86XCJlb1wiLGVzdDpcImV0XCIsZXVzOlwiZXVcIixld2U6XCJlZVwiLGZhbzpcImZvXCIsZmFzOlwiZmFcIixmaWo6XCJmalwiLGZpbjpcImZpXCIsZnJhOlwiZnJcIixmcmU6XCJmclwiLFxuZnJ5OlwiZnlcIixmdWw6XCJmZlwiLGdlbzpcImthXCIsZ2VyOlwiZGVcIixnbGE6XCJnZFwiLGdsZTpcImdhXCIsZ2xnOlwiZ2xcIixnbHY6XCJndlwiLGdyZTpcImVsXCIsZ3JuOlwiZ25cIixndWo6XCJndVwiLGhhdDpcImh0XCIsaGF1OlwiaGFcIixoZWI6XCJoZVwiLGhlcjpcImh6XCIsaGluOlwiaGlcIixobW86XCJob1wiLGhydjpcImhyXCIsaHVuOlwiaHVcIixoeWU6XCJoeVwiLGlibzpcImlnXCIsaWNlOlwiaXNcIixpZG86XCJpb1wiLGlpaTpcImlpXCIsaWt1OlwiaXVcIixpbGU6XCJpZVwiLGluYTpcImlhXCIsaW5kOlwiaWRcIixpcGs6XCJpa1wiLGlzbDpcImlzXCIsaXRhOlwiaXRcIixqYXY6XCJqdlwiLGpwbjpcImphXCIsa2FsOlwia2xcIixrYW46XCJrblwiLGthczpcImtzXCIsa2F0Olwia2FcIixrYXU6XCJrclwiLGthejpcImtrXCIsa2htOlwia21cIixraWs6XCJraVwiLGtpbjpcInJ3XCIsa2lyOlwia3lcIixrb206XCJrdlwiLGtvbjpcImtnXCIsa29yOlwia29cIixrdWE6XCJralwiLGt1cjpcImt1XCIsbGFvOlwibG9cIixsYXQ6XCJsYVwiLGxhdjpcImx2XCIsbGltOlwibGlcIixsaW46XCJsblwiLGxpdDpcImx0XCIsbHR6OlwibGJcIixsdWI6XCJsdVwiLFxubHVnOlwibGdcIixtYWM6XCJta1wiLG1haDpcIm1oXCIsbWFsOlwibWxcIixtYW86XCJtaVwiLG1hcjpcIm1yXCIsbWF5OlwibXNcIixta2Q6XCJta1wiLG1sZzpcIm1nXCIsbWx0OlwibXRcIixtb246XCJtblwiLG1yaTpcIm1pXCIsbXNhOlwibXNcIixteWE6XCJteVwiLG5hdTpcIm5hXCIsbmF2OlwibnZcIixuYmw6XCJuclwiLG5kZTpcIm5kXCIsbmRvOlwibmdcIixuZXA6XCJuZVwiLG5sZDpcIm5sXCIsbm5vOlwibm5cIixub2I6XCJuYlwiLG5vcjpcIm5vXCIsbnlhOlwibnlcIixvY2k6XCJvY1wiLG9qaTpcIm9qXCIsb3JpOlwib3JcIixvcm06XCJvbVwiLG9zczpcIm9zXCIscGFuOlwicGFcIixwZXI6XCJmYVwiLHBsaTpcInBpXCIscG9sOlwicGxcIixwb3I6XCJwdFwiLHB1czpcInBzXCIscXVlOlwicXVcIixyb2g6XCJybVwiLHJvbjpcInJvXCIscnVtOlwicm9cIixydW46XCJyblwiLHJ1czpcInJ1XCIsc2FnOlwic2dcIixzYW46XCJzYVwiLHNpbjpcInNpXCIsc2xrOlwic2tcIixzbG86XCJza1wiLHNsdjpcInNsXCIsc21lOlwic2VcIixzbW86XCJzbVwiLHNuYTpcInNuXCIsc25kOlwic2RcIixzb206XCJzb1wiLHNvdDpcInN0XCIsc3BhOlwiZXNcIixzcWk6XCJzcVwiLFxuc3JkOlwic2NcIixzcnA6XCJzclwiLHNzdzpcInNzXCIsc3VuOlwic3VcIixzd2E6XCJzd1wiLHN3ZTpcInN2XCIsdGFoOlwidHlcIix0YW06XCJ0YVwiLHRhdDpcInR0XCIsdGVsOlwidGVcIix0Z2s6XCJ0Z1wiLHRnbDpcInRsXCIsdGhhOlwidGhcIix0aWI6XCJib1wiLHRpcjpcInRpXCIsdG9uOlwidG9cIix0c246XCJ0blwiLHRzbzpcInRzXCIsdHVrOlwidGtcIix0dXI6XCJ0clwiLHR3aTpcInR3XCIsdWlnOlwidWdcIix1a3I6XCJ1a1wiLHVyZDpcInVyXCIsdXpiOlwidXpcIix2ZW46XCJ2ZVwiLHZpZTpcInZpXCIsdm9sOlwidm9cIix3ZWw6XCJjeVwiLHdsbjpcIndhXCIsd29sOlwid29cIix4aG86XCJ4aFwiLHlpZDpcInlpXCIseW9yOlwieW9cIix6aGE6XCJ6YVwiLHpobzpcInpoXCIsenVsOlwienVcIn07ZnVuY3Rpb24gSihhKXtyZXR1cm4gT2JqZWN0LmtleXMoYSkubWFwKGZ1bmN0aW9uKGIpe3JldHVybiBhW2JdfSl9ZnVuY3Rpb24gcGIoYSxiKXtyZXR1cm4gT2JqZWN0LmtleXMoYSkucmVkdWNlKGZ1bmN0aW9uKGMsZCl7Y1tkXT1iKGFbZF0sZCk7cmV0dXJuIGN9LHt9KX1mdW5jdGlvbiBxYihhLGIpe3JldHVybiBPYmplY3Qua2V5cyhhKS5yZWR1Y2UoZnVuY3Rpb24oYyxkKXtiKGQsYVtkXSkmJihjW2RdPWFbZF0pO3JldHVybiBjfSx7fSl9O2Z1bmN0aW9uIEwoKXt0aGlzLmE9e319TC5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihhLGIpe3RoaXMuYS5oYXNPd25Qcm9wZXJ0eShhKT90aGlzLmFbYV0ucHVzaChiKTp0aGlzLmFbYV09W2JdfTtMLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuKGE9dGhpcy5hW2FdKT9hLnNsaWNlKCk6bnVsbH07ZnVuY3Rpb24gcmIoYSxiLGMpe2lmKGE9YS5hW2JdKWZvcihiPTA7YjxhLmxlbmd0aDsrK2IpYVtiXT09YyYmKGEuc3BsaWNlKGIsMSksLS1iKX1MLnByb3RvdHlwZS5rZXlzPWZ1bmN0aW9uKCl7dmFyIGE9W10sYjtmb3IoYiBpbiB0aGlzLmEpYS5wdXNoKGIpO3JldHVybiBhfTtMLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuYT17fX07ZnVuY3Rpb24gTSgpe3RoaXMuYT1uZXcgTH1NLnByb3RvdHlwZS5zPWZ1bmN0aW9uKCl7c2IodGhpcyk7dGhpcy5hPW51bGw7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpfTtmdW5jdGlvbiBOKGEsYixjLGQpe2I9bmV3IHRiKGIsYyxkKTthLmEucHVzaChjLGIpfU0ucHJvdG90eXBlLlk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9dGhpcy5hLmdldChiKXx8W10sZD0wO2Q8Yy5sZW5ndGg7KytkKXt2YXIgZT1jW2RdO2UudGFyZ2V0PT1hJiYoZS5ZKCkscmIodGhpcy5hLGIsZSkpfX07ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS5hLGM9W10sZDtmb3IoZCBpbiBiLmEpYy5wdXNoLmFwcGx5KGMsYi5hW2RdKTtmb3IoYj0wO2I8Yy5sZW5ndGg7KytiKWNbYl0uWSgpO2EuYS5jbGVhcigpfWZ1bmN0aW9uIHRiKGEsYixjKXt0aGlzLnRhcmdldD1hO3RoaXMudHlwZT1iO3RoaXMuYT1jO3RoaXMudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbnRiLnByb3RvdHlwZS5ZPWZ1bmN0aW9uKCl7dGhpcy50YXJnZXQmJih0aGlzLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMudHlwZSx0aGlzLmEsITEpLHRoaXMuYT10aGlzLnRhcmdldD1udWxsKX07ZnVuY3Rpb24gdWIoYSxiLGMsZCxlLGYpe3RoaXMuYT1hO3RoaXMuYz1iO3RoaXMuaT1jO3RoaXMubz1kO3RoaXMubD1lO3RoaXMubT1mO3RoaXMuYj1uZXcgTTt0aGlzLmg9ITE7dGhpcy5nPTE7dGhpcy5mPW51bGw7MDxhLnJlYWR5U3RhdGU/dGhpcy5JYSgpOk4odGhpcy5iLGEsXCJsb2FkZWRtZXRhZGF0YVwiLHRoaXMuSWEuYmluZCh0aGlzKSk7Tih0aGlzLmIsYSxcInJhdGVjaGFuZ2VcIix0aGlzLmNiLmJpbmQodGhpcykpfWs9dWIucHJvdG90eXBlO2sucz1mdW5jdGlvbigpe3ZhciBhPXRoaXMuYi5zKCk7dGhpcy5iPW51bGw7bnVsbCE9dGhpcy5mJiYod2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5mKSx0aGlzLmY9bnVsbCk7dGhpcy5tPXRoaXMubD10aGlzLmM9dGhpcy5hPW51bGw7cmV0dXJuIGF9O2Z1bmN0aW9uIHZiKGEpe3JldHVybiAwPGEuYS5yZWFkeVN0YXRlP3diKGEsYS5hLmN1cnJlbnRUaW1lKTp4YihhKX1cbmZ1bmN0aW9uIHhiKGEpe3JldHVybiBhLm8/d2IoYSxhLm8pOmEuYy5hPE51bWJlci5QT1NJVElWRV9JTkZJTklUWT9yYShhLmMpOk1hdGgubWF4KG4oYS5jKS1hLmkscmEoYS5jKSl9ZnVuY3Rpb24geWIoYSxiKXtiIT1hLmgmJihhLmg9Yix6YihhLGEuZyksYS5sKGIpKX1rLnZhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ307ZnVuY3Rpb24gemIoYSxiKXtudWxsIT1hLmYmJih3aW5kb3cuY2xlYXJJbnRlcnZhbChhLmYpLGEuZj1udWxsKTthLmc9YjthLmEucGxheWJhY2tSYXRlPWEuaHx8MD5iPzA6YjshYS5oJiYwPmImJihhLmY9d2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uKCl7dGhpcy5hLmN1cnJlbnRUaW1lKz1iLzR9LmJpbmQoYSksMjUwKSl9ay5jYj1mdW5jdGlvbigpe3RoaXMuYS5wbGF5YmFja1JhdGUhPSh0aGlzLmh8fDA+dGhpcy5nPzA6dGhpcy5nKSYmemIodGhpcyx0aGlzLmEucGxheWJhY2tSYXRlKX07XG5rLklhPWZ1bmN0aW9uKCl7dGhpcy5iLlkodGhpcy5hLFwibG9hZGVkbWV0YWRhdGFcIik7dmFyIGE9eGIodGhpcyk7dGhpcy5hLmN1cnJlbnRUaW1lLnRvRml4ZWQoMyk9PWEudG9GaXhlZCgzKT8oTih0aGlzLmIsdGhpcy5hLFwic2Vla2luZ1wiLHRoaXMuS2EuYmluZCh0aGlzKSksTih0aGlzLmIsdGhpcy5hLFwicGxheWluZ1wiLHRoaXMuSmEuYmluZCh0aGlzKSkpOihOKHRoaXMuYix0aGlzLmEsXCJzZWVraW5nXCIsdGhpcy5lYi5iaW5kKHRoaXMpKSx0aGlzLmEuY3VycmVudFRpbWU9YSl9O2suZWI9ZnVuY3Rpb24oKXt0aGlzLmIuWSh0aGlzLmEsXCJzZWVraW5nXCIpO04odGhpcy5iLHRoaXMuYSxcInNlZWtpbmdcIix0aGlzLkthLmJpbmQodGhpcykpO04odGhpcy5iLHRoaXMuYSxcInBsYXlpbmdcIix0aGlzLkphLmJpbmQodGhpcykpfTtrLkthPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5hLmN1cnJlbnRUaW1lLGI9QWIodGhpcyxhKTtiIT1hP0JiKHRoaXMsYSxiKTp0aGlzLm0oKX07XG5rLkphPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5hLmN1cnJlbnRUaW1lLGI9QWIodGhpcyxhKTtiIT1hJiZCYih0aGlzLGEsYil9O2Z1bmN0aW9uIEFiKGEsYil7dmFyIGM9YS5jLGQ9cmEoYyksZT1uKGMpO2lmKCFjLmFhKCl8fGMuYz09TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKXJldHVybiBiPGQ/ZDpiPmU/ZTpiO2M9ZCsxO2Q9YythLmk7cmV0dXJuIGI+PWQmJmI8PWV8fDAhPXVhKGEuYS5idWZmZXJlZCxiKSYmYj49YyYmYjw9ZT9iOmI+ZT9lOmU8ZCYmYj49YyYmYjw9ZT9iOk1hdGgubWluKGQrMixlKX1mdW5jdGlvbiBCYihhLGIsYyl7YS5hLmN1cnJlbnRUaW1lPWM7dmFyIGQ9MCxlPWZ1bmN0aW9uKCl7IXRoaXMuYXx8MTA8PWQrK3x8dGhpcy5hLmN1cnJlbnRUaW1lIT1ifHwodGhpcy5hLmN1cnJlbnRUaW1lPWMsc2V0VGltZW91dChlLDEwMCkpfS5iaW5kKGEpO3NldFRpbWVvdXQoZSwxMDApfVxuZnVuY3Rpb24gd2IoYSxiKXt2YXIgYz1yYShhLmMpO2lmKGI8YylyZXR1cm4gYztjPW4oYS5jKTtyZXR1cm4gYj5jP2M6Yn07ZnVuY3Rpb24gY2EoKXt0aGlzLnc9bmV3IEx9Y2EucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiKXt0aGlzLncucHVzaChhLGIpfTtjYS5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIpe3JiKHRoaXMudyxhLGIpfTtjYS5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy53LmdldChhLnR5cGUpfHxbXSxjPTA7YzxiLmxlbmd0aDsrK2Mpe2EudGFyZ2V0PXRoaXM7YS5jdXJyZW50VGFyZ2V0PXRoaXM7dmFyIGQ9YltjXTt0cnl7ZC5oYW5kbGVFdmVudD9kLmhhbmRsZUV2ZW50KGEpOmQuY2FsbCh0aGlzLGEpfWNhdGNoKGUpe31pZihhLmEpYnJlYWt9cmV0dXJuIGEuZGVmYXVsdFByZXZlbnRlZH07ZnVuY3Rpb24gTygpe3ZhciBhLGIsYz1uZXcgUHJvbWlzZShmdW5jdGlvbihjLGUpe2E9YztiPWV9KTtjLnJlc29sdmU9YTtjLnJlamVjdD1iO3JldHVybiBjfTtmdW5jdGlvbiBDYihhLGIsYyl7dGhpcy5pPWE7dGhpcy5mPWI7dGhpcy5sPWM7dGhpcy5jPXt9O3RoaXMuYj1udWxsO3RoaXMuYT17fTt0aGlzLmc9bmV3IE07dGhpcy5oPSExfVxuZnVuY3Rpb24gRGIoKXt2YXIgYT17YmFzaWM6ISF3aW5kb3cuTWVkaWFTb3VyY2V9LGI9bmF2aWdhdG9yLnZlbmRvcixjPW5hdmlnYXRvci5hcHBWZXJzaW9uO2ImJjA8PWIuaW5kZXhPZihcIkFwcGxlXCIpJiZjJiYwPD1jLmluZGV4T2YoXCJWZXJzaW9uLzhcIikmJihhLmJhc2ljPSExKTthLmJhc2ljJiYndmlkZW8vbXA0OyBjb2RlY3M9XCJhdmMxLjQyRTAxRVwiLGF1ZGlvL21wNDsgY29kZWNzPVwibXA0YS40MC4yXCIsdmlkZW8vd2VibTsgY29kZWNzPVwidnA4XCIsdmlkZW8vd2VibTsgY29kZWNzPVwidnA5XCIsYXVkaW8vd2VibTsgY29kZWNzPVwidm9yYmlzXCIsYXVkaW8vd2VibTsgY29kZWNzPVwib3B1c1wiLHZpZGVvL21wMnQ7IGNvZGVjcz1cImF2YzEuNDJFMDFFXCIsdmlkZW8vbXAydDsgY29kZWNzPVwibXA0YS40MC4yXCIsdGV4dC92dHQsYXBwbGljYXRpb24vbXA0OyBjb2RlY3M9XCJ3dnR0XCIsYXBwbGljYXRpb24vdHRtbCt4bWwsYXBwbGljYXRpb24vbXA0OyBjb2RlY3M9XCJzdHBwXCInLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2FbYl09ISFpYltiXXx8XG5NZWRpYVNvdXJjZS5pc1R5cGVTdXBwb3J0ZWQoYik7dmFyIGM9Yi5zcGxpdChcIjtcIilbMF07YVtjXT1hW2NdfHxhW2JdfSk7cmV0dXJuIGF9az1DYi5wcm90b3R5cGU7ay5zPWZ1bmN0aW9uKCl7dGhpcy5oPSEwO3ZhciBhPVtdLGI7Zm9yKGIgaW4gdGhpcy5hKXt2YXIgYz10aGlzLmFbYl0sZD1jWzBdO3RoaXMuYVtiXT1jLnNsaWNlKDAsMSk7ZCYmYS5wdXNoKGQucFtcImNhdGNoXCJdKEcpKTtmb3IoZD0xO2Q8Yy5sZW5ndGg7KytkKWNbZF0ucFtcImNhdGNoXCJdKEcpLGNbZF0ucC5yZWplY3QoKX10aGlzLmImJmEucHVzaCh0aGlzLmIucygpKTtyZXR1cm4gUHJvbWlzZS5hbGwoYSkudGhlbihmdW5jdGlvbigpe3RoaXMuZy5zKCk7dGhpcy5iPXRoaXMubD10aGlzLmY9dGhpcy5pPXRoaXMuZz1udWxsO3RoaXMuYz17fTt0aGlzLmE9e319LmJpbmQodGhpcykpfTtcbmsuaW5pdD1mdW5jdGlvbihhKXtmb3IodmFyIGIgaW4gYSl7dmFyIGM9YVtiXTtcInRleHRcIj09Yj90aGlzLmI9bmV3IGhiKHRoaXMubCxjKTooYz10aGlzLmYuYWRkU291cmNlQnVmZmVyKGMpLE4odGhpcy5nLGMsXCJlcnJvclwiLHRoaXMuR2IuYmluZCh0aGlzLGIpKSxOKHRoaXMuZyxjLFwidXBkYXRlZW5kXCIsdGhpcy56YS5iaW5kKHRoaXMsYikpLHRoaXMuY1tiXT1jLHRoaXMuYVtiXT1bXSl9fTtmdW5jdGlvbiBFYihhLGIpe3ZhciBjO2M9XCJ0ZXh0XCI9PWI/YS5iLmI6KGM9YS5jW2JdLmJ1ZmZlcmVkKT9jLmxlbmd0aD9jLnN0YXJ0KDApOm51bGw6bnVsbDtyZXR1cm4gY31mdW5jdGlvbiBGYihhLGIsYyl7XCJ0ZXh0XCI9PWI/KGI9bWIoYS5iLGMpLGJ8fChiPW1iKGEuYixjKy4xKSkmJihiKz0uMSkpOihhPWEuY1tiXS5idWZmZXJlZCxiPXVhKGEsYyksYnx8KGI9dWEoYSxjKy4xKSkmJihiKz0uMSkpO3JldHVybiBifVxuZnVuY3Rpb24gR2IoYSxiLGMsZCxlKXtyZXR1cm5cInRleHRcIj09Yj9rYihhLmIsYyxkLGUpOkhiKGEsYixhLkZiLmJpbmQoYSxiLGMpKX1mdW5jdGlvbiBJYihhLGIsYyxkKXtyZXR1cm5cInRleHRcIj09Yj9sYihhLmIsYyxkKTpIYihhLGIsYS5MYS5iaW5kKGEsYixjLGQpKX1rLmNsZWFyPWZ1bmN0aW9uKGEpe3JldHVyblwidGV4dFwiPT1hP2xiKHRoaXMuYiwwLE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk6SGIodGhpcyxhLHRoaXMuTGEuYmluZCh0aGlzLGEsMCx0aGlzLmYuZHVyYXRpb24pKX07ZnVuY3Rpb24gS2IoYSxiLGMpe3JldHVyblwidGV4dFwiPT1iPyhhLmIuaD1jLFByb21pc2UucmVzb2x2ZSgpKTpIYihhLGIsYS55Yi5iaW5kKGEsYixjKSl9ZnVuY3Rpb24gTWIoYSxiLGMpe3JldHVyblwidGV4dFwiPT1iPyhhLmIuZj1jLFByb21pc2UucmVzb2x2ZSgpKTpIYihhLGIsYS53Yi5iaW5kKGEsYixjKSl9XG5rLmVuZE9mU3RyZWFtPWZ1bmN0aW9uKGEpe3JldHVybiBOYih0aGlzLGZ1bmN0aW9uKCl7YT90aGlzLmYuZW5kT2ZTdHJlYW0oYSk6dGhpcy5mLmVuZE9mU3RyZWFtKCl9LmJpbmQodGhpcykpfTtmdW5jdGlvbiBPYihhLGIpe05iKGEsZnVuY3Rpb24oKXt0aGlzLmYuZHVyYXRpb249Yn0uYmluZChhKSl9ay5GYj1mdW5jdGlvbihhLGIpe3RoaXMuY1thXS5hcHBlbmRCdWZmZXIoYil9O2suTGE9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuY1thXS5yZW1vdmUoYixjKX07ay55Yj1mdW5jdGlvbihhLGIpe3RoaXMuY1thXS50aW1lc3RhbXBPZmZzZXQ9Yjt0aGlzLnphKGEpfTtrLndiPWZ1bmN0aW9uKGEsYil7dGhpcy5jW2FdLmFwcGVuZFdpbmRvd0VuZD1iKzEvMTU7dGhpcy56YShhKX07ay5HYj1mdW5jdGlvbihhKXt0aGlzLmFbYV1bMF0ucC5yZWplY3QobmV3IHooMywzMDE0LHRoaXMuaS5lcnJvcj90aGlzLmkuZXJyb3IuY29kZTowKSl9O1xuay56YT1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmFbYV1bMF07YiYmKGIucC5yZXNvbHZlKCksUGIodGhpcyxhKSl9O2Z1bmN0aW9uIEhiKGEsYixjKXtpZihhLmgpcmV0dXJuIFByb21pc2UucmVqZWN0KCk7Yz17c3RhcnQ6YyxwOm5ldyBPfTthLmFbYl0ucHVzaChjKTtpZigxPT1hLmFbYl0ubGVuZ3RoKXRyeXtjLnN0YXJ0KCl9Y2F0Y2goZCl7Yy5wLnJlamVjdChuZXcgeigzLDMwMTUsZCkpLFBiKGEsYil9cmV0dXJuIGMucH1cbmZ1bmN0aW9uIE5iKGEsYil7aWYoYS5oKXJldHVybiBQcm9taXNlLnJlamVjdCgpO3ZhciBjPVtdLGQ7Zm9yKGQgaW4gYS5jKXt2YXIgZT1uZXcgTyxmPXtzdGFydDpmdW5jdGlvbihhKXthLnJlc29sdmUoKX0uYmluZChudWxsLGUpLHA6ZX07YS5hW2RdLnB1c2goZik7Yy5wdXNoKGUpOzE9PWEuYVtkXS5sZW5ndGgmJmYuc3RhcnQoKX1yZXR1cm4gUHJvbWlzZS5hbGwoYykudGhlbihmdW5jdGlvbigpe3ZhciBhLGM7dHJ5e2IoKX1jYXRjaChkKXtjPVByb21pc2UucmVqZWN0KG5ldyB6KDMsMzAxNSxkKSl9Zm9yKGEgaW4gdGhpcy5jKVBiKHRoaXMsYSk7cmV0dXJuIGN9LmJpbmQoYSksZnVuY3Rpb24oKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoKX0uYmluZChhKSl9ZnVuY3Rpb24gUGIoYSxiKXthLmFbYl0uc2hpZnQoKTt2YXIgYz1hLmFbYl1bMF07aWYoYyl0cnl7Yy5zdGFydCgpfWNhdGNoKGQpe2MucC5yZWplY3QobmV3IHooMywzMDE1LGQpKSxQYihhLGIpfX07ZnVuY3Rpb24gUWIoYSl7aWYoIWEpcmV0dXJuXCJcIjthPVJiKG5ldyBVaW50OEFycmF5KGEpKTthPWVzY2FwZShhKTt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChhKX1jYXRjaChiKXt0aHJvdyBuZXcgeigyLDIwMDQpO319ZnVuY3Rpb24gU2IoYSxiKXtpZighYSlyZXR1cm5cIlwiO2lmKDAhPWEuYnl0ZUxlbmd0aCUyKXRocm93IG5ldyB6KDIsMjAwNCk7dmFyIGM7aWYoYSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKWM9YTtlbHNle3ZhciBkPW5ldyBVaW50OEFycmF5KGEuYnl0ZUxlbmd0aCk7ZC5zZXQobmV3IFVpbnQ4QXJyYXkoYSkpO2M9ZC5idWZmZXJ9dmFyIGQ9YS5ieXRlTGVuZ3RoLzIsZT1uZXcgVWludDE2QXJyYXkoZCk7Yz1uZXcgRGF0YVZpZXcoYyk7Zm9yKHZhciBmPTA7ZjxkO2YrKyllW2ZdPWMuZ2V0VWludDE2KDIqZixiKTtyZXR1cm4gUmIoZSl9XG5mdW5jdGlvbiBUYihhKXt2YXIgYj1uZXcgVWludDhBcnJheShhKTtpZigyMzk9PWJbMF0mJjE4Nz09YlsxXSYmMTkxPT1iWzJdKXJldHVybiBRYihiLnN1YmFycmF5KDMpKTtpZigyNTQ9PWJbMF0mJjI1NT09YlsxXSlyZXR1cm4gU2IoYi5zdWJhcnJheSgyKSwhMSk7aWYoMjU1PT1iWzBdJiYyNTQ9PWJbMV0pcmV0dXJuIFNiKGIuc3ViYXJyYXkoMiksITApO3ZhciBjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuYnl0ZUxlbmd0aDw9Ynx8MzI8PWFbYl0mJjEyNj49YVtiXX0uYmluZChudWxsLGIpO2lmKDA9PWJbMF0mJjA9PWJbMl0pcmV0dXJuIFNiKGEsITEpO2lmKDA9PWJbMV0mJjA9PWJbM10pcmV0dXJuIFNiKGEsITApO2lmKGMoMCkmJmMoMSkmJmMoMikmJmMoMykpcmV0dXJuIFFiKGEpO3Rocm93IG5ldyB6KDIsMjAwMyk7fVxuZnVuY3Rpb24gVWIoYSl7YT11bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpO2Zvcih2YXIgYj1uZXcgVWludDhBcnJheShhLmxlbmd0aCksYz0wO2M8YS5sZW5ndGg7KytjKWJbY109YS5jaGFyQ29kZUF0KGMpO3JldHVybiBiLmJ1ZmZlcn1mdW5jdGlvbiBSYihhKXtmb3IodmFyIGI9XCJcIixjPTA7YzxhLmxlbmd0aDtjKz0xNkUzKWIrPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxhLnN1YmFycmF5KGMsYysxNkUzKSk7cmV0dXJuIGJ9O2Z1bmN0aW9uIFZiKGEpe3RoaXMuYj1hO3RoaXMuYT0wfWZ1bmN0aW9uIFdiKGEsYil7dmFyIGM7Yi5sYXN0SW5kZXg9YS5hO2M9Yi5leGVjKGEuYik7Yz1udWxsPT1jP251bGw6e3Bvc2l0aW9uOmMuaW5kZXgsbGVuZ3RoOmNbMF0ubGVuZ3RoLHRiOmN9O2lmKGEuYT09YS5iLmxlbmd0aHx8bnVsbD09Y3x8Yy5wb3NpdGlvbiE9YS5hKXJldHVybiBudWxsO2EuYSs9Yy5sZW5ndGg7cmV0dXJuIGMudGJ9ZnVuY3Rpb24gWGIoYSl7cmV0dXJuIGEuYT09YS5iLmxlbmd0aD9udWxsOihhPVdiKGEsL1teIFxcdFxcbl0qL2dtKSk/YVswXTpudWxsfTtmdW5jdGlvbiBQKGEpe2E9VGIoYSk7YT1hLnJlcGxhY2UoL1xcclxcbnxcXHIoPz1bXlxcbl18JCkvZ20sXCJcXG5cIik7YT1hLnNwbGl0KC9cXG57Mix9L20pO2lmKCEvXldFQlZUVCgkfFsgXFx0XFxuXSkvbS50ZXN0KGFbMF0pKXRocm93IG5ldyB6KDIsMkUzKTtmb3IodmFyIGI9W10sYz0xO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1QLmIoYVtjXS5zcGxpdChcIlxcblwiKSk7ZCYmYi5wdXNoKGQpfXJldHVybiBifVxuUC5iPWZ1bmN0aW9uKGEpe2lmKDE9PWEubGVuZ3RoJiYhYVswXXx8L15OT1RFKCR8WyBcXHRdKS8udGVzdChhWzBdKSlyZXR1cm4gbnVsbDt2YXIgYj1udWxsOzA+YVswXS5pbmRleE9mKFwiLS1cXHgzZVwiKSYmKGI9YVswXSxhLnNwbGljZSgwLDEpKTt2YXIgYz1uZXcgVmIoYVswXSksZD1QLmEoYyksZT1XYihjLC9bIFxcdF0rLS1cXHgzZVsgXFx0XSsvZyksZj1QLmEoYyk7aWYobnVsbD09ZHx8bnVsbD09ZXx8bnVsbD09Zil0aHJvdyBuZXcgeigyLDIwMDEpO2E9YS5zbGljZSgxKS5qb2luKFwiXFxuXCIpO2lmKHdpbmRvdy5WVFRDdWUpZm9yKGQ9bmV3IFZUVEN1ZShkLGYsYSksV2IoYywvWyBcXHRdKy9nbSksZj1YYihjKTtmOyl7aWYoIVAuYyhkLGYpKXRocm93IG5ldyB6KDIsMjAwMik7V2IoYywvWyBcXHRdKy9nbSk7Zj1YYihjKX1lbHNlIGQ9bmV3IFRleHRUcmFja0N1ZShkLGYsYSk7bnVsbCE9YiYmKGQuaWQ9Yik7cmV0dXJuIGR9O1xuUC5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9bnVsbDtpZihjPS9eYWxpZ246KHN0YXJ0fG1pZGRsZXxlbmQpJC8uZXhlYyhiKSlhLmFsaWduPWNbMV07ZWxzZSBpZihjPS9edmVydGljYWw6KGxyfHJsKSQvLmV4ZWMoYikpYS5jPWNbMV07ZWxzZSBpZihjPS9ec2l6ZTooXFxkezEsMn18MTAwKSUkLy5leGVjKGIpKWEuc2l6ZT1OdW1iZXIoY1sxXSk7ZWxzZSBpZihjPS9ecG9zaXRpb246KFxcZHsxLDJ9fDEwMCklJC8uZXhlYyhiKSlhLnBvc2l0aW9uPU51bWJlcihjWzFdKTtlbHNlIGlmKGM9L15saW5lOihcXGR7MSwyfXwxMDApJSQvLmV4ZWMoYikpYS5iPSExLGEuYT1OdW1iZXIoY1sxXSk7ZWxzZSBpZihjPS9ebGluZTooLT9cXGQrKSQvLmV4ZWMoYikpYS5iPSEwLGEuYT1OdW1iZXIoY1sxXSk7ZWxzZSByZXR1cm4hMTtyZXR1cm4hMH07XG5QLmE9ZnVuY3Rpb24oYSl7YT1XYihhLC8oPzooXFxkezIsfSk6KT8oXFxkezJ9KTooXFxkezJ9KVxcLihcXGR7M30pL2cpO2lmKG51bGw9PWEpcmV0dXJuIG51bGw7dmFyIGI9TnVtYmVyKGFbMl0pLGM9TnVtYmVyKGFbM10pO3JldHVybiA1OTxifHw1OTxjP251bGw6TnVtYmVyKGFbNF0pLzFFMytjKzYwKmIrMzYwMCooTnVtYmVyKGFbMV0pfHwwKX07aWJbXCJ0ZXh0L3Z0dFwiXT1QO2Z1bmN0aW9uIFliKGEpe3JldHVybiB3aW5kb3cuYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsYSkpLnJlcGxhY2UoL1xcKy9nLFwiLVwiKS5yZXBsYWNlKC9cXC8vZyxcIl9cIikucmVwbGFjZSgvPSokLyxcIlwiKX1mdW5jdGlvbiBaYihhKXthPXdpbmRvdy5hdG9iKGEucmVwbGFjZSgvLS9nLFwiK1wiKS5yZXBsYWNlKC9fL2csXCIvXCIpKTtmb3IodmFyIGI9bmV3IFVpbnQ4QXJyYXkoYS5sZW5ndGgpLGM9MDtjPGEubGVuZ3RoOysrYyliW2NdPWEuY2hhckNvZGVBdChjKTtyZXR1cm4gYn1mdW5jdGlvbiAkYihhKXtmb3IodmFyIGI9bmV3IFVpbnQ4QXJyYXkoYS5sZW5ndGgvMiksYz0wO2M8YS5sZW5ndGg7Yys9MiliW2MvMl09d2luZG93LnBhcnNlSW50KGEuc3Vic3RyKGMsMiksMTYpO3JldHVybiBifVxuZnVuY3Rpb24gYWMoYSl7Zm9yKHZhciBiPVwiXCIsYz0wO2M8YS5sZW5ndGg7KytjKXt2YXIgZD1hW2NdLnRvU3RyaW5nKDE2KTsxPT1kLmxlbmd0aCYmKGQ9XCIwXCIrZCk7Yis9ZH1yZXR1cm4gYn1mdW5jdGlvbiBFKGEsYil7aWYoIWEmJiFiKXJldHVybiEwO2lmKCFhfHwhYnx8YS5sZW5ndGghPWIubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7KytjKWlmKGFbY10hPWJbY10pcmV0dXJuITE7cmV0dXJuITB9O2Z1bmN0aW9uIGJjKGEsYixjKXt0aGlzLmw9XCJcIjt0aGlzLm09bnVsbDt0aGlzLm89W107dGhpcy5oPXRoaXMuaT1udWxsO3RoaXMudT0hMTt0aGlzLmM9bmV3IE07dGhpcy53PVwiXCI7dGhpcy5hPVtdO3RoaXMuQT1hO3RoaXMuZj1udWxsO3RoaXMuZz1iO3RoaXMuRj1jO3RoaXMuYj0hMX1rPWJjLnByb3RvdHlwZTtrLnM9ZnVuY3Rpb24oKXt0aGlzLmI9ITA7dGhpcy5hLmZvckVhY2goZnVuY3Rpb24oYSl7YS5wYS5jbG9zZSgpW1wiY2F0Y2hcIl0oRyl9KTt2YXIgYT1bXTt0aGlzLmMmJmEucHVzaCh0aGlzLmMucygpKTt0aGlzLmgmJmEucHVzaCh0aGlzLmguc2V0TWVkaWFLZXlzKG51bGwpW1wiY2F0Y2hcIl0oRykpO3RoaXMubz1bXTt0aGlzLmM9dGhpcy5oPXRoaXMuaT10aGlzLm09bnVsbDt0aGlzLmE9W107dGhpcy5nPXRoaXMuZj10aGlzLkE9bnVsbDtyZXR1cm4gUHJvbWlzZS5hbGwoYSl9O2suY29uZmlndXJlPWZ1bmN0aW9uKGEpe3RoaXMuZj1hfTtcbmsuaW5pdD1mdW5jdGlvbihhLGIpe3ZhciBjPXt9LGQ9W107Y2ModGhpcyxhLGIsYyxkKTtyZXR1cm4gZC5sZW5ndGg/ZGModGhpcyxjLGQpOih0aGlzLnU9ITAsUHJvbWlzZS5yZXNvbHZlKCkpfTtcbmZ1bmN0aW9uIGVjKGEsYil7aWYoIWEuaSlyZXR1cm4gTihhLmMsYixcImVuY3J5cHRlZFwiLGZ1bmN0aW9uKCl7dGhpcy5jLlkoYixcImVuY3J5cHRlZFwiKTt0aGlzLmcobmV3IHooNiw2MDEwKSl9LmJpbmQoYSkpLFByb21pc2UucmVzb2x2ZSgpO3ZhciBjPVtdLGQ9W10sZT1bXTtmYyhhLGMsZCxlKTthLnc9Y1swXTthLmg9Yjt2YXIgYz1hLmguc2V0TWVkaWFLZXlzKGEuaSksYz1jW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyB6KDYsNjAwMyxhLm1lc3NhZ2UpKX0pLGY9bnVsbDtkLmxlbmd0aCYmKGY9YS5pLnNldFNlcnZlckNlcnRpZmljYXRlKGRbMF0pLGY9ZltcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe3JldHVybiBQcm9taXNlLnJlamVjdChuZXcgeig2LDYwMDQsYS5tZXNzYWdlKSl9KSk7TihhLmMsYS5oLFwid2FpdGluZ2ZvcmtleVwiLGEuaGIuYmluZChhKSk7cmV0dXJuIFByb21pc2UuYWxsKFtjLGZdKS50aGVuKGZ1bmN0aW9uKCl7aWYodGhpcy5iKXJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuZS5sZW5ndGg/ZS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2djKHRoaXMsYS5pbml0RGF0YVR5cGUsYS5pbml0RGF0YSl9LmJpbmQodGhpcykpOk4odGhpcy5jLHRoaXMuaCxcImVuY3J5cHRlZFwiLHRoaXMuWWEuYmluZCh0aGlzKSl9LmJpbmQoYSkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYj9Qcm9taXNlLnJlc29sdmUoKTpQcm9taXNlLnJlamVjdChhKX0uYmluZChhKSl9ay5rZXlTeXN0ZW09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sfTtcbmZ1bmN0aW9uIGNjKGEsYixjLGQsZSl7dmFyIGY9aGMoYSk7Yi5wZXJpb2RzLmZvckVhY2goZnVuY3Rpb24oYSl7YS5zdHJlYW1TZXRzLmZvckVhY2goZnVuY3Rpb24oYSl7XCJ0ZXh0XCIhPWEudHlwZSYmKGYmJihhLmRybUluZm9zPVtmXSksYS5kcm1JbmZvcy5mb3JFYWNoKGZ1bmN0aW9uKGIpe2ljKHRoaXMsYik7dmFyIGY9ZFtiLmtleVN5c3RlbV07Znx8KGY9e2luaXREYXRhVHlwZXM6dm9pZCAwLGF1ZGlvQ2FwYWJpbGl0aWVzOltdLHZpZGVvQ2FwYWJpbGl0aWVzOltdLGRpc3RpbmN0aXZlSWRlbnRpZmllcjpcIm9wdGlvbmFsXCIscGVyc2lzdGVudFN0YXRlOmM/XCJyZXF1aXJlZFwiOlwib3B0aW9uYWxcIixzZXNzaW9uVHlwZXM6W2M/XCJwZXJzaXN0ZW50LWxpY2Vuc2VcIjpcInRlbXBvcmFyeVwiXSxsYWJlbDpiLmtleVN5c3RlbSxkcm1JbmZvczpbXX0sZFtiLmtleVN5c3RlbV09ZixlLnB1c2goYi5rZXlTeXN0ZW0pKTtmLmRybUluZm9zLnB1c2goYik7Yi5kaXN0aW5jdGl2ZUlkZW50aWZpZXJSZXF1aXJlZCYmXG4oZi5kaXN0aW5jdGl2ZUlkZW50aWZpZXI9XCJyZXF1aXJlZFwiKTtiLnBlcnNpc3RlbnRTdGF0ZVJlcXVpcmVkJiYoZi5wZXJzaXN0ZW50U3RhdGU9XCJyZXF1aXJlZFwiKTt2YXIgZz1cInZpZGVvXCI9PWEudHlwZT9mLnZpZGVvQ2FwYWJpbGl0aWVzOmYuYXVkaW9DYXBhYmlsaXRpZXMsdD0oXCJ2aWRlb1wiPT1hLnR5cGU/Yi52aWRlb1JvYnVzdG5lc3M6Yi5hdWRpb1JvYnVzdG5lc3MpfHxcIlwiO2Euc3RyZWFtcy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPWEubWltZVR5cGU7YS5jb2RlY3MmJihjKz0nOyBjb2RlY3M9XCInK2EuY29kZWNzKydcIicpO1wiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHlcIj09Yi5rZXlTeXN0ZW0mJmcubGVuZ3RofHxnLnB1c2goe3JvYnVzdG5lc3M6dCxjb250ZW50VHlwZTpjfSl9LmJpbmQodGhpcykpfS5iaW5kKHRoaXMpKSl9LmJpbmQodGhpcykpfS5iaW5kKGEpKX1cbmZ1bmN0aW9uIGRjKGEsYixjKXt2YXIgZD1uZXcgTyxlPWQ7aWYoMT09Yy5sZW5ndGgmJlwiXCI9PWNbMF0pcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyB6KDYsNkUzKSk7Yy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPWJbYV07Yy5kcm1JbmZvcy5zb21lKGZ1bmN0aW9uKGEpe3JldHVybiEhYS5saWNlbnNlU2VydmVyVXJpfSkmJigwPT1jLmF1ZGlvQ2FwYWJpbGl0aWVzLmxlbmd0aCYmKGMuYXVkaW9DYXBhYmlsaXRpZXM9dm9pZCAwKSwwPT1jLnZpZGVvQ2FwYWJpbGl0aWVzLmxlbmd0aCYmKGMudmlkZW9DYXBhYmlsaXRpZXM9dm9pZCAwKSxlPWVbXCJjYXRjaFwiXShmdW5jdGlvbigpe3JldHVybiB0aGlzLmI/UHJvbWlzZS5yZWplY3QoKTpuYXZpZ2F0b3IucmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzKGEsW2NdKX0uYmluZCh0aGlzKSkpfS5iaW5kKGEpKTtlPWVbXCJjYXRjaFwiXShmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLnJlamVjdChuZXcgeig2LDYwMDEpKX0pO2U9ZS50aGVuKGZ1bmN0aW9uKGEpe2lmKHRoaXMuYilyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcbnZhciBjPWEuZ2V0Q29uZmlndXJhdGlvbigpO3RoaXMubT0oYy5hdWRpb0NhcGFiaWxpdGllc3x8W10pLmNvbmNhdChjLnZpZGVvQ2FwYWJpbGl0aWVzfHxbXSkubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLmNvbnRlbnRUeXBlfSk7MD09dGhpcy5tLmxlbmd0aCYmKHRoaXMubT1udWxsKTt0aGlzLm89YlthLmtleVN5c3RlbV0uZHJtSW5mb3M7dGhpcy5sPWEua2V5U3lzdGVtO3JldHVybiBhLmNyZWF0ZU1lZGlhS2V5cygpfS5iaW5kKGEpKS50aGVuKGZ1bmN0aW9uKGEpe2lmKHRoaXMuYilyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTt0aGlzLmk9YTt0aGlzLnU9ITB9LmJpbmQoYSkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7aWYodGhpcy5iKXJldHVybiBQcm9taXNlLnJlc29sdmUoKTtpZihhIGluc3RhbmNlb2YgeilyZXR1cm4gUHJvbWlzZS5yZWplY3QoYSk7dGhpcy5sPVwiXCI7dGhpcy5vPVtdO3RoaXMubT1udWxsO3JldHVybiBQcm9taXNlLnJlamVjdChuZXcgeig2LDYwMDIsYS5tZXNzYWdlKSl9LmJpbmQoYSkpO1xuZC5yZWplY3QoKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIGljKGEsYil7dmFyIGM9Yi5rZXlTeXN0ZW07aWYoYyl7aWYoIWIubGljZW5zZVNlcnZlclVyaSl7dmFyIGQ9YS5mLnNlcnZlcnNbY107ZCYmKGIubGljZW5zZVNlcnZlclVyaT1kKX1pZihjPWEuZi5hZHZhbmNlZFtjXSliLmRpc3RpbmN0aXZlSWRlbnRpZmllclJlcXVpcmVkfHwoYi5kaXN0aW5jdGl2ZUlkZW50aWZpZXJSZXF1aXJlZD1jLmRpc3RpbmN0aXZlSWRlbnRpZmllclJlcXVpcmVkKSxiLnBlcnNpc3RlbnRTdGF0ZVJlcXVpcmVkfHwoYi5wZXJzaXN0ZW50U3RhdGVSZXF1aXJlZD1jLnBlcnNpc3RlbnRTdGF0ZVJlcXVpcmVkKSxiLnZpZGVvUm9idXN0bmVzc3x8KGIudmlkZW9Sb2J1c3RuZXNzPWMudmlkZW9Sb2J1c3RuZXNzKSxiLmF1ZGlvUm9idXN0bmVzc3x8KGIuYXVkaW9Sb2J1c3RuZXNzPWMuYXVkaW9Sb2J1c3RuZXNzKSxiLnNlcnZlckNlcnRpZmljYXRlfHwoYi5zZXJ2ZXJDZXJ0aWZpY2F0ZT1jLnNlcnZlckNlcnRpZmljYXRlKX19XG5mdW5jdGlvbiBoYyhhKXt2YXIgYj1hLmYuY2xlYXJLZXlzO2lmKCFifHwwPT1PYmplY3Qua2V5cyhiKS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGM9W10sYj1bXSxkO2ZvcihkIGluIGEuZi5jbGVhcktleXMpe3ZhciBlPWEuZi5jbGVhcktleXNbZF0sZj0kYihkKSxlPSRiKGUpLGY9e2t0eTpcIm9jdFwiLGtpZDpZYihmKSxrOlliKGUpfTtjLnB1c2goZik7Yi5wdXNoKGYua2lkKX1hPUpTT04uc3RyaW5naWZ5KHtrZXlzOmN9KTtiPUpTT04uc3RyaW5naWZ5KHtraWRzOmJ9KTtiPVt7aW5pdERhdGE6bmV3IFVpbnQ4QXJyYXkoVWIoYikpLGluaXREYXRhVHlwZTpcImtleWlkc1wifV07cmV0dXJue2tleVN5c3RlbTpcIm9yZy53My5jbGVhcmtleVwiLGxpY2Vuc2VTZXJ2ZXJVcmk6XCJkYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiK3dpbmRvdy5idG9hKGEpLGRpc3RpbmN0aXZlSWRlbnRpZmllclJlcXVpcmVkOiExLHBlcnNpc3RlbnRTdGF0ZVJlcXVpcmVkOiExLGF1ZGlvUm9idXN0bmVzczpcIlwiLFxudmlkZW9Sb2J1c3RuZXNzOlwiXCIsc2VydmVyQ2VydGlmaWNhdGU6bnVsbCxpbml0RGF0YTpifX1mdW5jdGlvbiBmYyhhLGIsYyxkKXtmdW5jdGlvbiBlKGEsYil7cmV0dXJuIGEuaW5pdERhdGFUeXBlPT1iLmluaXREYXRhVHlwZSYmRShhLmluaXREYXRhLGIuaW5pdERhdGEpfWEuby5mb3JFYWNoKGZ1bmN0aW9uKGEpey0xPT1iLmluZGV4T2YoYS5saWNlbnNlU2VydmVyVXJpKSYmYi5wdXNoKGEubGljZW5zZVNlcnZlclVyaSk7YS5zZXJ2ZXJDZXJ0aWZpY2F0ZSYmLTE9PVFhKGMsYS5zZXJ2ZXJDZXJ0aWZpY2F0ZSxFKSYmYy5wdXNoKGEuc2VydmVyQ2VydGlmaWNhdGUpO2EuaW5pdERhdGEmJmEuaW5pdERhdGEuZm9yRWFjaChmdW5jdGlvbihhKXstMT09UWEoZCxhLGUpJiZkLnB1c2goYSl9KX0pfWsuaGI9ZnVuY3Rpb24oKXt0aGlzLmEuc29tZShmdW5jdGlvbihhKXtyZXR1cm4hYS5sb2FkZWR9KXx8dGhpcy5nKG5ldyB6KDYsNjAxMSkpfTtcbmsuWWE9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPW5ldyBVaW50OEFycmF5KGEuaW5pdERhdGEpLGM9MDtjPHRoaXMuYS5sZW5ndGg7KytjKWlmKEUoYix0aGlzLmFbY10uaW5pdERhdGEpKXJldHVybjtnYyh0aGlzLGEuaW5pdERhdGFUeXBlLGIpfTtcbmZ1bmN0aW9uIGdjKGEsYixjKXt2YXIgZDt0cnl7ZD1hLmkuY3JlYXRlU2Vzc2lvbigpfWNhdGNoKGUpe2EuZyhuZXcgeig2LDYwMDUsZS5tZXNzYWdlKSk7cmV0dXJufU4oYS5jLGQsXCJtZXNzYWdlXCIsYS5mYi5iaW5kKGEpKTtOKGEuYyxkLFwia2V5c3RhdHVzZXNjaGFuZ2VcIixhLlphLmJpbmQoYSkpO2I9ZC5nZW5lcmF0ZVJlcXVlc3QoYixjLmJ1ZmZlcik7YS5hLnB1c2goe2luaXREYXRhOmMscGE6ZCxsb2FkZWQ6ITF9KTtiW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7aWYoIXRoaXMuYil7Zm9yKHZhciBiPTA7Yjx0aGlzLmEubGVuZ3RoOysrYilpZih0aGlzLmFbYl0ucGE9PWQpe3RoaXMuYS5zcGxpY2UoYiwxKTticmVha310aGlzLmcobmV3IHooNiw2MDA2LGEubWVzc2FnZSkpfX0uYmluZChhKSl9XG5rLmZiPWZ1bmN0aW9uKGEpe3ZhciBiPWEudGFyZ2V0LGM9amMsZD1rYyhbdGhpcy53XSx0aGlzLmYucmV0cnlQYXJhbWV0ZXJzKTtkLmJvZHk9YS5tZXNzYWdlO2QubWV0aG9kPVwiUE9TVFwiO1wiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHlcIj09dGhpcy5sJiZsYyhkKTt0aGlzLkEucmVxdWVzdChjLGQpLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYj9Qcm9taXNlLnJlamVjdCgpOmIudXBkYXRlKGEuZGF0YSl9LmJpbmQodGhpcyksZnVuY3Rpb24oYSl7aWYodGhpcy5iKXJldHVybiBQcm9taXNlLnJlc29sdmUoKTt0aGlzLmcobmV3IHooNiw2MDA3LGEpKX0uYmluZCh0aGlzKSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtpZih0aGlzLmIpcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO3RoaXMuZyhuZXcgeig2LDYwMDgsYS5tZXNzYWdlKSl9LmJpbmQodGhpcykpfTtcbmZ1bmN0aW9uIGxjKGEpe2Zvcih2YXIgYj1TYihhLmJvZHksITApLGI9KG5ldyBET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyhiLFwiYXBwbGljYXRpb24veG1sXCIpLGM9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIkh0dHBIZWFkZXJcIiksZD0wO2Q8Yy5sZW5ndGg7KytkKWEuaGVhZGVyc1tjW2RdLnF1ZXJ5U2VsZWN0b3IoXCJuYW1lXCIpLnRleHRDb250ZW50XT1jW2RdLnF1ZXJ5U2VsZWN0b3IoXCJ2YWx1ZVwiKS50ZXh0Q29udGVudDthLmJvZHk9WmIoYi5xdWVyeVNlbGVjdG9yKFwiQ2hhbGxlbmdlXCIpLnRleHRDb250ZW50KS5idWZmZXJ9XG5rLlphPWZ1bmN0aW9uKGEpe3ZhciBiPWEudGFyZ2V0O2E9Yi5rZXlTdGF0dXNlczt2b2lkIDA9PT1hLmZvckVhY2gmJihhPVtdKTt2YXIgYz17fTthLmZvckVhY2goZnVuY3Rpb24oYSxlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgYSl7dmFyIGY9YTthPWU7ZT1mfWlmKFwiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHlcIj09dGhpcy5sJiYxNj09YS5ieXRlTGVuZ3RoKXt2YXIgZj1uZXcgRGF0YVZpZXcoYSksZz1mLmdldFVpbnQzMigwLCEwKSxsPWYuZ2V0VWludDE2KDQsITApLGg9Zi5nZXRVaW50MTYoNiwhMCk7Zi5zZXRVaW50MzIoMCxnLCExKTtmLnNldFVpbnQxNig0LGwsITEpO2Yuc2V0VWludDE2KDYsaCwhMSl9XCJjb20ubWljcm9zb2Z0LnBsYXlyZWFkeVwiPT10aGlzLmwmJlwic3RhdHVzLXBlbmRpbmdcIj09ZSYmKGU9XCJ1c2FibGVcIik7XCJzdGF0dXMtcGVuZGluZ1wiIT1lJiZcImludGVybmFsLWVycm9yXCIhPWUmJih0aGlzLmEuZmlsdGVyKGZ1bmN0aW9uKGEpe3JldHVybiBhLnBhPT1ifSlbMF0ubG9hZGVkPVxuITApO2Y9YWMobmV3IFVpbnQ4QXJyYXkoYSkpO2NbZl09ZX0uYmluZCh0aGlzKSk7aWYoYi5leHBpcmF0aW9uPERhdGUubm93KCkpe2ZvcihhPTA7YTx0aGlzLmEubGVuZ3RoOysrYSlpZih0aGlzLmFbYV0ucGE9PWIpe3RoaXMuYS5zcGxpY2UoYSwxKTticmVha31iLmNsb3NlKCl9dGhpcy5GKGMpfTtcbmZ1bmN0aW9uIG1jKCl7dmFyIGE9e2Jhc2ljOiEhd2luZG93Lk1lZGlhS2V5cyYmISF3aW5kb3cubmF2aWdhdG9yJiYhIXdpbmRvdy5uYXZpZ2F0b3IucmVxdWVzdE1lZGlhS2V5U3lzdGVtQWNjZXNzJiYhIXdpbmRvdy5NZWRpYUtleVN5c3RlbUFjY2VzcyYmISF3aW5kb3cuTWVkaWFLZXlTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb259LGI9W107YS5iYXNpYyYmXCJvcmcudzMuY2xlYXJrZXkgY29tLndpZGV2aW5lLmFscGhhIGNvbS5taWNyb3NvZnQucGxheXJlYWR5IGNvbS5hcHBsZS5mcHMuMl8wIGNvbS5hcHBsZS5mcHMuMV8wIGNvbS5hcHBsZS5mcHMgY29tLmFkb2JlLnByaW1ldGltZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGMpe3ZhciBkPW5hdmlnYXRvci5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3MoYyxbe31dKS50aGVuKGZ1bmN0aW9uKCl7YVtjXT0hMH0sZnVuY3Rpb24oKXthW2NdPSExfSk7Yi5wdXNoKGQpfSk7cmV0dXJuIFByb21pc2UuYWxsKGIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYX0pfVxuO2Z1bmN0aW9uIG5jKGEsYil7dHJ5e3ZhciBjPW5ldyBvYyhhLGIpO3JldHVybiBQcm9taXNlLnJlc29sdmUoYyl9Y2F0Y2goZCl7cmV0dXJuIFByb21pc2UucmVqZWN0KGQpfX1mdW5jdGlvbiBwYyhhKXt2YXIgYj10aGlzLm1lZGlhS2V5cztiJiZiIT1hJiZxYyhiLG51bGwpO2RlbGV0ZSB0aGlzLm1lZGlhS2V5czsodGhpcy5tZWRpYUtleXM9YSkmJnFjKGEsdGhpcyk7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpfVxuZnVuY3Rpb24gb2MoYSxiKXt0aGlzLmE9dGhpcy5rZXlTeXN0ZW09YTt2YXIgYz0hMDtcIm9yZy53My5jbGVhcmtleVwiPT1hJiYodGhpcy5hPVwid2Via2l0LW9yZy53My5jbGVhcmtleVwiLGM9ITEpO3ZhciBkPSExLGU7ZT1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInZpZGVvXCIpO2U9ZS5sZW5ndGg/ZVswXTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIik7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDsrK2Ype3ZhciBnPWJbZl0sbD17YXVkaW9DYXBhYmlsaXRpZXM6W10sdmlkZW9DYXBhYmlsaXRpZXM6W10scGVyc2lzdGVudFN0YXRlOlwib3B0aW9uYWxcIixkaXN0aW5jdGl2ZUlkZW50aWZpZXI6XCJvcHRpb25hbFwiLGluaXREYXRhVHlwZXM6Zy5pbml0RGF0YVR5cGVzLHNlc3Npb25UeXBlczpbXCJ0ZW1wb3JhcnlcIl0sbGFiZWw6Zy5sYWJlbH0saD0hMTtpZihnLmF1ZGlvQ2FwYWJpbGl0aWVzKWZvcih2YXIgcD0wO3A8Zy5hdWRpb0NhcGFiaWxpdGllcy5sZW5ndGg7KytwKXt2YXIgcT1cbmcuYXVkaW9DYXBhYmlsaXRpZXNbcF07cS5jb250ZW50VHlwZSYmKGg9ITAsZS5jYW5QbGF5VHlwZShxLmNvbnRlbnRUeXBlLnNwbGl0KFwiO1wiKVswXSx0aGlzLmEpJiYobC5hdWRpb0NhcGFiaWxpdGllcy5wdXNoKHEpLGQ9ITApKX1pZihnLnZpZGVvQ2FwYWJpbGl0aWVzKWZvcihwPTA7cDxnLnZpZGVvQ2FwYWJpbGl0aWVzLmxlbmd0aDsrK3ApcT1nLnZpZGVvQ2FwYWJpbGl0aWVzW3BdLHEuY29udGVudFR5cGUmJihoPSEwLGUuY2FuUGxheVR5cGUocS5jb250ZW50VHlwZSx0aGlzLmEpJiYobC52aWRlb0NhcGFiaWxpdGllcy5wdXNoKHEpLGQ9ITApKTtofHwoZD1lLmNhblBsYXlUeXBlKFwidmlkZW8vbXA0XCIsdGhpcy5hKXx8ZS5jYW5QbGF5VHlwZShcInZpZGVvL3dlYm1cIix0aGlzLmEpKTtcInJlcXVpcmVkXCI9PWcucGVyc2lzdGVudFN0YXRlJiYoYz8obC5wZXJzaXN0ZW50U3RhdGU9XCJyZXF1aXJlZFwiLGwuc2Vzc2lvblR5cGVzPVtcInBlcnNpc3RlbnQtbGljZW5zZVwiXSk6ZD0hMSk7aWYoZCl7dGhpcy5iPVxubDtyZXR1cm59fWM9XCJVbnN1cHBvcnRlZCBrZXlTeXN0ZW1cIjtpZihcIm9yZy53My5jbGVhcmtleVwiPT1hfHxcImNvbS53aWRldmluZS5hbHBoYVwiPT1hKWM9XCJOb25lIG9mIHRoZSByZXF1ZXN0ZWQgY29uZmlndXJhdGlvbnMgd2VyZSBzdXBwb3J0ZWQuXCI7Yz1FcnJvcihjKTtjLm5hbWU9XCJOb3RTdXBwb3J0ZWRFcnJvclwiO2MuY29kZT1ET01FeGNlcHRpb24uTk9UX1NVUFBPUlRFRF9FUlI7dGhyb3cgYzt9b2MucHJvdG90eXBlLmNyZWF0ZU1lZGlhS2V5cz1mdW5jdGlvbigpe3ZhciBhPW5ldyByYyh0aGlzLmEpO3JldHVybiBQcm9taXNlLnJlc29sdmUoYSl9O29jLnByb3RvdHlwZS5nZXRDb25maWd1cmF0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYn07ZnVuY3Rpb24gcmMoYSl7dGhpcy5nPWE7dGhpcy5iPW51bGw7dGhpcy5hPW5ldyBNO3RoaXMuYz1bXTt0aGlzLmY9e319XG5mdW5jdGlvbiBxYyhhLGIpe2EuYj1iO3NiKGEuYSk7YiYmKE4oYS5hLGIsXCJ3ZWJraXRuZWVka2V5XCIsYS5sYi5iaW5kKGEpKSxOKGEuYSxiLFwid2Via2l0a2V5bWVzc2FnZVwiLGEua2IuYmluZChhKSksTihhLmEsYixcIndlYmtpdGtleWFkZGVkXCIsYS5pYi5iaW5kKGEpKSxOKGEuYSxiLFwid2Via2l0a2V5ZXJyb3JcIixhLmpiLmJpbmQoYSkpKX1rPXJjLnByb3RvdHlwZTtrLmNyZWF0ZVNlc3Npb249ZnVuY3Rpb24oYSl7dmFyIGI9YXx8XCJ0ZW1wb3JhcnlcIjtpZihcInRlbXBvcmFyeVwiIT1iJiZcInBlcnNpc3RlbnQtbGljZW5zZVwiIT1iKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTZXNzaW9uIHR5cGUgXCIrYStcIiBpcyB1bnN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtLlwiKTthPXRoaXMuYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInZpZGVvXCIpO2Euc3JjfHwoYS5zcmM9XCJhYm91dDpibGFua1wiKTtiPW5ldyBzYyhhLHRoaXMuZyxiKTt0aGlzLmMucHVzaChiKTtyZXR1cm4gYn07XG5rLnNldFNlcnZlckNlcnRpZmljYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UucmVqZWN0KEVycm9yKFwic2V0U2VydmVyQ2VydGlmaWNhdGUgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtLlwiKSl9O2subGI9ZnVuY3Rpb24oYSl7dGhpcy5iLmRpc3BhdGNoRXZlbnQobmV3IEYoXCJlbmNyeXB0ZWRcIix7aW5pdERhdGFUeXBlOlwid2VibVwiLGluaXREYXRhOmEuaW5pdERhdGF9KSl9O2sua2I9ZnVuY3Rpb24oYSl7dmFyIGI9dGModGhpcyxhLnNlc3Npb25JZCk7YiYmKGE9bmV3IEYoXCJtZXNzYWdlXCIse21lc3NhZ2VUeXBlOnZvaWQgMD09Yi5rZXlTdGF0dXNlcy53YSgpP1wibGljZW5zZXJlcXVlc3RcIjpcImxpY2Vuc2VyZW5ld2FsXCIsbWVzc2FnZTphLm1lc3NhZ2V9KSxiLmImJihiLmIucmVzb2x2ZSgpLGIuYj1udWxsKSxiLmRpc3BhdGNoRXZlbnQoYSkpfTtcbmsuaWI9ZnVuY3Rpb24oYSl7aWYoYT10Yyh0aGlzLGEuc2Vzc2lvbklkKSl1YyhhLFwidXNhYmxlXCIpLGEuYSYmYS5hLnJlc29sdmUoKSxhLmE9bnVsbH07XG5rLmpiPWZ1bmN0aW9uKGEpe3ZhciBiPXRjKHRoaXMsYS5zZXNzaW9uSWQpO2lmKGIpe3ZhciBjPUVycm9yKFwiRU1FIHYwLjFiIGtleSBlcnJvclwiKTtjLmVycm9yQ29kZT1hLmVycm9yQ29kZTtjLmVycm9yQ29kZS5zeXN0ZW1Db2RlPWEuc3lzdGVtQ29kZTshYS5zZXNzaW9uSWQmJmIuYj8oYy5tZXRob2Q9XCJnZW5lcmF0ZVJlcXVlc3RcIiw0NT09YS5zeXN0ZW1Db2RlJiYoYy5tZXNzYWdlPVwiVW5zdXBwb3J0ZWQgc2Vzc2lvbiB0eXBlLlwiKSxiLmIucmVqZWN0KGMpLGIuYj1udWxsKTphLnNlc3Npb25JZCYmYi5hPyhjLm1ldGhvZD1cInVwZGF0ZVwiLGIuYS5yZWplY3QoYyksYi5hPW51bGwpOihjPWEuc3lzdGVtQ29kZSxhLmVycm9yQ29kZS5jb2RlPT1NZWRpYUtleUVycm9yLk1FRElBX0tFWUVSUl9PVVRQVVQ/dWMoYixcIm91dHB1dC1yZXN0cmljdGVkXCIpOjE9PWM/dWMoYixcImV4cGlyZWRcIik6dWMoYixcImludGVybmFsLWVycm9yXCIpKX19O1xuZnVuY3Rpb24gdGMoYSxiKXt2YXIgYz1hLmZbYl07cmV0dXJuIGM/YzooYz1hLmMuc2hpZnQoKSk/KGMuc2Vzc2lvbklkPWIsYS5mW2JdPWMpOm51bGx9ZnVuY3Rpb24gc2MoYSxiLGMpe3RoaXMudz1uZXcgTDt0aGlzLmY9YTt0aGlzLmg9ITE7dGhpcy5hPXRoaXMuYj1udWxsO3RoaXMuYz1iO3RoaXMuZz1jO3RoaXMuc2Vzc2lvbklkPVwiXCI7dGhpcy5leHBpcmF0aW9uPU5hTjt0aGlzLmNsb3NlZD1uZXcgTzt0aGlzLmtleVN0YXR1c2VzPW5ldyB2Y31iYShzYyk7XG5mdW5jdGlvbiB3YyhhLGIsYyl7aWYoYS5oKXJldHVybiBQcm9taXNlLnJlamVjdChFcnJvcihcIlRoZSBzZXNzaW9uIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXCIpKTthLmg9ITA7dmFyIGQ7dHJ5e2lmKFwicGVyc2lzdGVudC1saWNlbnNlXCI9PWEuZylpZihjKWQ9bmV3IFVpbnQ4QXJyYXkoVWIoXCJMT0FEX1NFU1NJT058XCIrYykpO2Vsc2V7dmFyIGU9VWIoXCJQRVJTSVNURU5UfFwiKSxmPW5ldyBVaW50OEFycmF5KGUuYnl0ZUxlbmd0aCtiLmJ5dGVMZW5ndGgpO2Yuc2V0KG5ldyBVaW50OEFycmF5KGUpLDApO2Yuc2V0KG5ldyBVaW50OEFycmF5KGIpLGUuYnl0ZUxlbmd0aCk7ZD1mfWVsc2UgZD1uZXcgVWludDhBcnJheShiKX1jYXRjaChnKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZyl9YS5iPW5ldyBPO3RyeXthLmYud2Via2l0R2VuZXJhdGVLZXlSZXF1ZXN0KGEuYyxkKX1jYXRjaChnKXtpZihcIkludmFsaWRTdGF0ZUVycm9yXCIhPWcubmFtZSlyZXR1cm4gYS5iPW51bGwsUHJvbWlzZS5yZWplY3QoZyk7XG5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dHJ5e3RoaXMuZi53ZWJraXRHZW5lcmF0ZUtleVJlcXVlc3QodGhpcy5jLGQpfWNhdGNoKGEpe3RoaXMuYi5yZWplY3QoYSksdGhpcy5iPW51bGx9fS5iaW5kKGEpLDEwKX1yZXR1cm4gYS5ifWs9c2MucHJvdG90eXBlO1xuay5EYT1mdW5jdGlvbihhLGIpe2lmKHRoaXMuYSl0aGlzLmEudGhlbih0aGlzLkRhLmJpbmQodGhpcyxhLGIpKVtcImNhdGNoXCJdKHRoaXMuRGEuYmluZCh0aGlzLGEsYikpO2Vsc2V7dGhpcy5hPWE7dmFyIGMsZDtcIndlYmtpdC1vcmcudzMuY2xlYXJrZXlcIj09dGhpcy5jPyhjPVFiKGIpLGQ9SlNPTi5wYXJzZShjKSxcIm9jdFwiIT1kLmtleXNbMF0ua3R5JiYodGhpcy5hLnJlamVjdChFcnJvcihcIlJlc3BvbnNlIGlzIG5vdCBhIHZhbGlkIEpTT04gV2ViIEtleSBTZXQuXCIpKSx0aGlzLmE9bnVsbCksYz1aYihkLmtleXNbMF0uayksZD1aYihkLmtleXNbMF0ua2lkKSk6KGM9bmV3IFVpbnQ4QXJyYXkoYiksZD1udWxsKTt0cnl7dGhpcy5mLndlYmtpdEFkZEtleSh0aGlzLmMsYyxkLHRoaXMuc2Vzc2lvbklkKX1jYXRjaChlKXt0aGlzLmEucmVqZWN0KGUpLHRoaXMuYT1udWxsfX19O1xuZnVuY3Rpb24gdWMoYSxiKXthLmtleVN0YXR1c2VzLkFhKGIpO2EuZGlzcGF0Y2hFdmVudChuZXcgRihcImtleXN0YXR1c2VzY2hhbmdlXCIpKX1rLmdlbmVyYXRlUmVxdWVzdD1mdW5jdGlvbihhLGIpe3JldHVybiB3Yyh0aGlzLGIsbnVsbCl9O2subG9hZD1mdW5jdGlvbihhKXtyZXR1cm5cInBlcnNpc3RlbnQtbGljZW5zZVwiPT10aGlzLmc/d2ModGhpcyxudWxsLGEpOlByb21pc2UucmVqZWN0KEVycm9yKFwiTm90IGEgcGVyc2lzdGVudCBzZXNzaW9uLlwiKSl9O2sudXBkYXRlPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBPO3RoaXMuRGEoYixhKTtyZXR1cm4gYn07XG5rLmNsb3NlPWZ1bmN0aW9uKCl7aWYoXCJwZXJzaXN0ZW50LWxpY2Vuc2VcIiE9dGhpcy5nKXtpZighdGhpcy5zZXNzaW9uSWQpcmV0dXJuIHRoaXMuY2xvc2VkLnJlamVjdChFcnJvcihcIlRoZSBzZXNzaW9uIGlzIG5vdCBjYWxsYWJsZS5cIikpLHRoaXMuY2xvc2VkO3RoaXMuZi53ZWJraXRDYW5jZWxLZXlSZXF1ZXN0KHRoaXMuYyx0aGlzLnNlc3Npb25JZCl9dGhpcy5jbG9zZWQucmVzb2x2ZSgpO3JldHVybiB0aGlzLmNsb3NlZH07ay5yZW1vdmU9ZnVuY3Rpb24oKXtyZXR1cm5cInBlcnNpc3RlbnQtbGljZW5zZVwiIT10aGlzLmc/UHJvbWlzZS5yZWplY3QoRXJyb3IoXCJOb3QgYSBwZXJzaXN0ZW50IHNlc3Npb24uXCIpKTp0aGlzLmNsb3NlKCl9O2Z1bmN0aW9uIHZjKCl7dGhpcy5zaXplPTA7dGhpcy5hPXZvaWQgMH12YXIgeGM7az12Yy5wcm90b3R5cGU7ay5BYT1mdW5jdGlvbihhKXt0aGlzLnNpemU9dm9pZCAwPT1hPzA6MTt0aGlzLmE9YX07ay53YT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O1xuay5mb3JFYWNoPWZ1bmN0aW9uKGEpe3RoaXMuYSYmYSh4Yyx0aGlzLmEpfTtrLmdldD1mdW5jdGlvbihhKXtpZih0aGlzLmhhcyhhKSlyZXR1cm4gdGhpcy5hfTtrLmhhcz1mdW5jdGlvbihhKXt2YXIgYj14YztyZXR1cm4gdGhpcy5hJiZFKG5ldyBVaW50OEFycmF5KGEpLG5ldyBVaW50OEFycmF5KGIpKT8hMDohMX07ZnVuY3Rpb24geWMoYSl7dGhpcy5zeXN0ZW1JZHM9W107dGhpcy5jZW5jS2V5SWRzPVtdO3RoaXMuYT1bXTtmb3IoYT1uZXcgUmEobmV3IERhdGFWaWV3KGEuYnVmZmVyKSk7VGEoYSk7KXt2YXIgYj1hLmEsYz1BKGEpLGQ9QShhKTsxPT1jP2M9V2EoYSk6MD09YyYmKGM9YS5iLmJ5dGVMZW5ndGgtYik7aWYoMTg4NjYxNDM3NiE9ZClCKGEsYy0oYS5hLWIpKTtlbHNle3ZhciBlPVVhKGEpO2lmKDE8ZSlCKGEsYy0oYS5hLWIpKTtlbHNle0IoYSwzKTt2YXIgZD1hYyhYYShhKSksZj1bXTtpZigwPGUpZm9yKHZhciBlPUEoYSksZz0wO2c8ZTsrK2cpe3ZhciBsPWFjKFhhKGEpKTtmLnB1c2gobCl9ZT1BKGEpO0IoYSxlKTt0aGlzLmNlbmNLZXlJZHMucHVzaC5hcHBseSh0aGlzLmNlbmNLZXlJZHMsZik7dGhpcy5zeXN0ZW1JZHMucHVzaChkKTt0aGlzLmEucHVzaCh7c3RhcnQ6YixlbmQ6YS5hLTF9KTthLmEhPWIrYyYmQihhLGMtKGEuYS1iKSl9fX19O2Z1bmN0aW9uIHpjKGEsYil7dHJ5e3ZhciBjPW5ldyBBYyhhLGIpO3JldHVybiBQcm9taXNlLnJlc29sdmUoYyl9Y2F0Y2goZCl7cmV0dXJuIFByb21pc2UucmVqZWN0KGQpfX1cbmZ1bmN0aW9uIEFjKGEsYil7dGhpcy5rZXlTeXN0ZW09YTtmb3IodmFyIGM9ITEsZD0wO2Q8Yi5sZW5ndGg7KytkKXt2YXIgZT1iW2RdLGY9e2F1ZGlvQ2FwYWJpbGl0aWVzOltdLHZpZGVvQ2FwYWJpbGl0aWVzOltdLHBlcnNpc3RlbnRTdGF0ZTpcIm9wdGlvbmFsXCIsZGlzdGluY3RpdmVJZGVudGlmaWVyOlwib3B0aW9uYWxcIixpbml0RGF0YVR5cGVzOmUuaW5pdERhdGFUeXBlcyxzZXNzaW9uVHlwZXM6W1widGVtcG9yYXJ5XCJdLGxhYmVsOmUubGFiZWx9LGc9ITE7aWYoZS5hdWRpb0NhcGFiaWxpdGllcylmb3IodmFyIGw9MDtsPGUuYXVkaW9DYXBhYmlsaXRpZXMubGVuZ3RoOysrbCl7dmFyIGg9ZS5hdWRpb0NhcGFiaWxpdGllc1tsXTtpZihoLmNvbnRlbnRUeXBlKXt2YXIgZz0hMCxwPWguY29udGVudFR5cGUuc3BsaXQoXCI7XCIpWzBdO01TTWVkaWFLZXlzLmlzVHlwZVN1cHBvcnRlZCh0aGlzLmtleVN5c3RlbSxwKSYmKGYuYXVkaW9DYXBhYmlsaXRpZXMucHVzaChoKSxjPSEwKX19aWYoZS52aWRlb0NhcGFiaWxpdGllcylmb3IobD1cbjA7bDxlLnZpZGVvQ2FwYWJpbGl0aWVzLmxlbmd0aDsrK2wpaD1lLnZpZGVvQ2FwYWJpbGl0aWVzW2xdLGguY29udGVudFR5cGUmJihnPSEwLHA9aC5jb250ZW50VHlwZS5zcGxpdChcIjtcIilbMF0sTVNNZWRpYUtleXMuaXNUeXBlU3VwcG9ydGVkKHRoaXMua2V5U3lzdGVtLHApJiYoZi52aWRlb0NhcGFiaWxpdGllcy5wdXNoKGgpLGM9ITApKTtnfHwoYz1NU01lZGlhS2V5cy5pc1R5cGVTdXBwb3J0ZWQodGhpcy5rZXlTeXN0ZW0sXCJ2aWRlby9tcDRcIikpO1wicmVxdWlyZWRcIj09ZS5wZXJzaXN0ZW50U3RhdGUmJihmLnBlcnNpc3RlbnRTdGF0ZT1cInJlcXVpcmVkXCIsZi5zZXNzaW9uVHlwZXM9W1wicGVyc2lzdGVudC1saWNlbnNlXCJdKTtpZihjKXt0aGlzLmE9ZjtyZXR1cm59fWM9RXJyb3IoXCJVbnN1cHBvcnRlZCBrZXlTeXN0ZW1cIik7Yy5uYW1lPVwiTm90U3VwcG9ydGVkRXJyb3JcIjtjLmNvZGU9RE9NRXhjZXB0aW9uLk5PVF9TVVBQT1JURURfRVJSO3Rocm93IGM7fVxuQWMucHJvdG90eXBlLmNyZWF0ZU1lZGlhS2V5cz1mdW5jdGlvbigpe3ZhciBhPW5ldyBCYyh0aGlzLmtleVN5c3RlbSk7cmV0dXJuIFByb21pc2UucmVzb2x2ZShhKX07QWMucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hfTtmdW5jdGlvbiBDYyhhKXt2YXIgYj10aGlzLm1lZGlhS2V5cztiJiZiIT1hJiZEYyhiLG51bGwpO2RlbGV0ZSB0aGlzLm1lZGlhS2V5cztyZXR1cm4odGhpcy5tZWRpYUtleXM9YSk/RGMoYSx0aGlzKTpQcm9taXNlLnJlc29sdmUoKX1mdW5jdGlvbiBCYyhhKXt0aGlzLmE9bmV3IE1TTWVkaWFLZXlzKGEpO3RoaXMuYj1uZXcgTX1CYy5wcm90b3R5cGUuY3JlYXRlU2Vzc2lvbj1mdW5jdGlvbihhKXtpZihcInRlbXBvcmFyeVwiIT0oYXx8XCJ0ZW1wb3JhcnlcIikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlNlc3Npb24gdHlwZSBcIithK1wiIGlzIHVuc3VwcG9ydGVkIG9uIHRoaXMgcGxhdGZvcm0uXCIpO3JldHVybiBuZXcgRWModGhpcy5hKX07XG5CYy5wcm90b3R5cGUuc2V0U2VydmVyQ2VydGlmaWNhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoRXJyb3IoXCJzZXRTZXJ2ZXJDZXJ0aWZpY2F0ZSBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgcGxhdGZvcm0uXCIpKX07ZnVuY3Rpb24gRGMoYSxiKXtmdW5jdGlvbiBjKCl7Yi5tc1NldE1lZGlhS2V5cyhkLmEpO2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRlZG1ldGFkYXRhXCIsYyl9c2IoYS5iKTtpZighYilyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7TihhLmIsYixcIm1zbmVlZGtleVwiLEZjKTt2YXIgZD1hO3RyeXtyZXR1cm4gMTw9Yi5yZWFkeVN0YXRlP2IubXNTZXRNZWRpYUtleXMoYS5hKTpiLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZWRtZXRhZGF0YVwiLGMpLFByb21pc2UucmVzb2x2ZSgpfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX19XG5mdW5jdGlvbiBFYyhhKXt0aGlzLnc9bmV3IEw7dGhpcy5jPW51bGw7dGhpcy5nPWE7dGhpcy5iPXRoaXMuYT1udWxsO3RoaXMuZj1uZXcgTTt0aGlzLnNlc3Npb25JZD1cIlwiO3RoaXMuZXhwaXJhdGlvbj1OYU47dGhpcy5jbG9zZWQ9bmV3IE87dGhpcy5rZXlTdGF0dXNlcz1uZXcgR2N9YmEoRWMpO2s9RWMucHJvdG90eXBlO2suZ2VuZXJhdGVSZXF1ZXN0PWZ1bmN0aW9uKGEsYil7dGhpcy5hPW5ldyBPO3RyeXt0aGlzLmM9dGhpcy5nLmNyZWF0ZVNlc3Npb24oXCJ2aWRlby9tcDRcIixuZXcgVWludDhBcnJheShiKSxudWxsKSxOKHRoaXMuZix0aGlzLmMsXCJtc2tleW1lc3NhZ2VcIix0aGlzLmJiLmJpbmQodGhpcykpLE4odGhpcy5mLHRoaXMuYyxcIm1za2V5YWRkZWRcIix0aGlzLiRhLmJpbmQodGhpcykpLE4odGhpcy5mLHRoaXMuYyxcIm1za2V5ZXJyb3JcIix0aGlzLmFiLmJpbmQodGhpcykpLEhjKHRoaXMsXCJzdGF0dXMtcGVuZGluZ1wiKX1jYXRjaChjKXt0aGlzLmEucmVqZWN0KGMpfXJldHVybiB0aGlzLmF9O1xuay5sb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UucmVqZWN0KEVycm9yKFwiTWVkaWFLZXlTZXNzaW9uLmxvYWQgbm90IHlldCBzdXBwb3J0ZWRcIikpfTtrLnVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLmI9bmV3IE87dHJ5e3RoaXMuYy51cGRhdGUobmV3IFVpbnQ4QXJyYXkoYSkpfWNhdGNoKGIpe3RoaXMuYi5yZWplY3QoYil9cmV0dXJuIHRoaXMuYn07ay5jbG9zZT1mdW5jdGlvbigpe3RyeXt0aGlzLmMuY2xvc2UoKSx0aGlzLmNsb3NlZC5yZXNvbHZlKCksc2IodGhpcy5mKX1jYXRjaChhKXt0aGlzLmNsb3NlZC5yZWplY3QoYSl9cmV0dXJuIHRoaXMuY2xvc2VkfTtrLnJlbW92ZT1mdW5jdGlvbigpe3JldHVybiBQcm9taXNlLnJlamVjdChFcnJvcihcIk1lZGlhS2V5U2Vzc2lvbi5yZW1vdmUgaXMgb25seSBhcHBsaWNhYmxlIGZvciBwZXJzaXN0ZW50IGxpY2Vuc2VzLCB3aGljaCBhcmUgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtXCIpKX07XG5mdW5jdGlvbiBGYyhhKXt2YXIgYj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO2IuaW5pdEN1c3RvbUV2ZW50KFwiZW5jcnlwdGVkXCIsITEsITEsbnVsbCk7Yi5pbml0RGF0YVR5cGU9XCJjZW5jXCI7aWYoYT1hLmluaXREYXRhKXt2YXIgYz1uZXcgeWMoYSk7aWYoISgxPj1jLmEubGVuZ3RoKSl7Zm9yKHZhciBkPVtdLGU9MDtlPGMuYS5sZW5ndGg7ZSsrKWQucHVzaChhLnN1YmFycmF5KGMuYVtlXS5zdGFydCxjLmFbZV0uZW5kKzEpKTtlPUljO2E9W107Zm9yKGM9MDtjPGQubGVuZ3RoOysrYyl7Zm9yKHZhciBmPSExLGc9MDtnPGEubGVuZ3RoJiYhKGY9ZT9lKGRbY10sYVtnXSk6ZFtjXT09PWFbZ10pOysrZyk7Znx8YS5wdXNoKGRbY10pfWZvcihlPWQ9MDtlPGEubGVuZ3RoO2UrKylkKz1hW2VdLmxlbmd0aDtkPW5ldyBVaW50OEFycmF5KGQpO2ZvcihlPWM9MDtlPGEubGVuZ3RoO2UrKylkLnNldChhW2VdLGMpLGMrPWFbZV0ubGVuZ3RoO2E9ZH19Yi5pbml0RGF0YT1cbmE7dGhpcy5kaXNwYXRjaEV2ZW50KGIpfWZ1bmN0aW9uIEljKGEsYil7cmV0dXJuIEUoYSxiKX1rLmJiPWZ1bmN0aW9uKGEpe3RoaXMuYSYmKHRoaXMuYS5yZXNvbHZlKCksdGhpcy5hPW51bGwpO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgRihcIm1lc3NhZ2VcIix7bWVzc2FnZVR5cGU6dm9pZCAwPT10aGlzLmtleVN0YXR1c2VzLndhKCk/XCJsaWNlbnNlcmVxdWVzdFwiOlwibGljZW5zZXJlbmV3YWxcIixtZXNzYWdlOmEubWVzc2FnZS5idWZmZXJ9KSl9O2suJGE9ZnVuY3Rpb24oKXt0aGlzLmE/KEhjKHRoaXMsXCJ1c2FibGVcIiksdGhpcy5hLnJlc29sdmUoKSx0aGlzLmE9bnVsbCk6dGhpcy5iJiYoSGModGhpcyxcInVzYWJsZVwiKSx0aGlzLmIucmVzb2x2ZSgpLHRoaXMuYj1udWxsKX07XG5rLmFiPWZ1bmN0aW9uKCl7dmFyIGE9RXJyb3IoXCJFTUUgdjIwMTQwMjE4IGtleSBlcnJvclwiKTthLmVycm9yQ29kZT10aGlzLmMuZXJyb3I7aWYobnVsbCE9dGhpcy5hKXRoaXMuYS5yZWplY3QoYSksdGhpcy5hPW51bGw7ZWxzZSBpZihudWxsIT10aGlzLmIpdGhpcy5iLnJlamVjdChhKSx0aGlzLmI9bnVsbDtlbHNlIHN3aXRjaCh0aGlzLmMuZXJyb3IuY29kZSl7Y2FzZSBNU01lZGlhS2V5RXJyb3IuTVNfTUVESUFfS0VZRVJSX09VVFBVVDpjYXNlIE1TTWVkaWFLZXlFcnJvci5NU19NRURJQV9LRVlFUlJfSEFSRFdBUkVDSEFOR0U6SGModGhpcyxcIm91dHB1dC1ub3QtYWxsb3dlZFwiKTtkZWZhdWx0OkhjKHRoaXMsXCJpbnRlcm5hbC1lcnJvclwiKX19O2Z1bmN0aW9uIEhjKGEsYil7YS5rZXlTdGF0dXNlcy5BYShiKTthLmRpc3BhdGNoRXZlbnQobmV3IEYoXCJrZXlzdGF0dXNlc2NoYW5nZVwiKSl9ZnVuY3Rpb24gR2MoKXt0aGlzLnNpemU9MDt0aGlzLmE9dm9pZCAwfXZhciBKYztrPUdjLnByb3RvdHlwZTtcbmsuQWE9ZnVuY3Rpb24oYSl7dGhpcy5zaXplPXZvaWQgMD09YT8wOjE7dGhpcy5hPWF9O2sud2E9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hfTtrLmZvckVhY2g9ZnVuY3Rpb24oYSl7dGhpcy5hJiZhKEpjLHRoaXMuYSl9O2suZ2V0PWZ1bmN0aW9uKGEpe2lmKHRoaXMuaGFzKGEpKXJldHVybiB0aGlzLmF9O2suaGFzPWZ1bmN0aW9uKGEpe3ZhciBiPUpjO3JldHVybiB0aGlzLmEmJkUobmV3IFVpbnQ4QXJyYXkoYSksbmV3IFVpbnQ4QXJyYXkoYikpPyEwOiExfTt3YShmdW5jdGlvbigpeyF3aW5kb3cuSFRNTFZpZGVvRWxlbWVudHx8bmF2aWdhdG9yLnJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2VzcyYmTWVkaWFLZXlTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb258fChIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS53ZWJraXRHZW5lcmF0ZUtleVJlcXVlc3Q/KHhjPShuZXcgVWludDhBcnJheShbMF0pKS5idWZmZXIsbmF2aWdhdG9yLnJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2Vzcz1uYyxkZWxldGUgSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUubWVkaWFLZXlzLEhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLm1lZGlhS2V5cz1udWxsLEhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLnNldE1lZGlhS2V5cz1wYyx3aW5kb3cuTWVkaWFLZXlzPXJjLHdpbmRvdy5NZWRpYUtleVN5c3RlbUFjY2Vzcz1vYyk6d2luZG93Lk1TTWVkaWFLZXlzPyhKYz0obmV3IFVpbnQ4QXJyYXkoWzBdKSkuYnVmZmVyLGRlbGV0ZSBIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS5tZWRpYUtleXMsXG5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS5tZWRpYUtleXM9bnVsbCxIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS5zZXRNZWRpYUtleXM9Q2Msd2luZG93Lk1lZGlhS2V5cz1CYyx3aW5kb3cuTWVkaWFLZXlTeXN0ZW1BY2Nlc3M9QWMsbmF2aWdhdG9yLnJlcXVlc3RNZWRpYUtleVN5c3RlbUFjY2Vzcz16Yyk6KG5hdmlnYXRvci5yZXF1ZXN0TWVkaWFLZXlTeXN0ZW1BY2Nlc3M9eWEsZGVsZXRlIEhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLm1lZGlhS2V5cyxIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS5tZWRpYUtleXM9bnVsbCxIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS5zZXRNZWRpYUtleXM9emEsd2luZG93Lk1lZGlhS2V5cz1BYSx3aW5kb3cuTWVkaWFLZXlTeXN0ZW1BY2Nlc3M9QmEpKX0pO2Z1bmN0aW9uIEtjKGEsYil7dmFyIGM9UihhLGIpO3JldHVybiAxIT1jLmxlbmd0aD9udWxsOmNbMF19ZnVuY3Rpb24gUihhLGIpe3JldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYS5jaGlsZE5vZGVzLGZ1bmN0aW9uKGEpe3JldHVybiBhLnRhZ05hbWU9PWJ9KX1mdW5jdGlvbiBMYyhhKXtyZXR1cm4oYT1hLmZpcnN0Q2hpbGQpJiZhLm5vZGVUeXBlPT1Ob2RlLlRFWFRfTk9ERT9hLm5vZGVWYWx1ZS50cmltKCk6bnVsbH1mdW5jdGlvbiBTKGEsYixjLGQpe3ZhciBlPW51bGw7YT1hLmdldEF0dHJpYnV0ZShiKTtudWxsIT1hJiYoZT1jKGEpKTtyZXR1cm4gbnVsbD09ZT92b2lkIDAhPT1kP2Q6bnVsbDplfWZ1bmN0aW9uIE1jKGEpe2lmKCFhKXJldHVybiBudWxsO2E9RGF0ZS5wYXJzZShhKTtyZXR1cm4gaXNOYU4oYSk/bnVsbDpNYXRoLmZsb29yKGEvMUUzKX1cbmZ1bmN0aW9uIFQoYSl7aWYoIWEpcmV0dXJuIG51bGw7YT0vXlAoPzooWzAtOV0qKVkpPyg/OihbMC05XSopTSk/KD86KFswLTldKilEKT8oPzpUKD86KFswLTldKilIKT8oPzooWzAtOV0qKU0pPyg/OihbMC05Ll0qKVMpPyk/JC8uZXhlYyhhKTtpZighYSlyZXR1cm4gbnVsbDthPTMxNTM2RTMqTnVtYmVyKGFbMV18fG51bGwpKzI1OTJFMypOdW1iZXIoYVsyXXx8bnVsbCkrODY0MDAqTnVtYmVyKGFbM118fG51bGwpKzM2MDAqTnVtYmVyKGFbNF18fG51bGwpKzYwKk51bWJlcihhWzVdfHxudWxsKStOdW1iZXIoYVs2XXx8bnVsbCk7cmV0dXJuIGlzRmluaXRlKGEpP2E6bnVsbH1mdW5jdGlvbiBOYyhhKXt2YXIgYj0vKFswLTldKyktKFswLTldKykvLmV4ZWMoYSk7aWYoIWIpcmV0dXJuIG51bGw7YT1OdW1iZXIoYlsxXSk7aWYoIWlzRmluaXRlKGEpKXJldHVybiBudWxsO2I9TnVtYmVyKGJbMl0pO3JldHVybiBpc0Zpbml0ZShiKT97c3RhcnQ6YSxlbmQ6Yn06bnVsbH1cbmZ1bmN0aW9uIE9jKGEpe2E9TnVtYmVyKGEpO3JldHVybiAwPT09YSUxP2E6bnVsbH1mdW5jdGlvbiBQYyhhKXthPU51bWJlcihhKTtyZXR1cm4gMD09PWElMSYmMDxhP2E6bnVsbH1mdW5jdGlvbiBRYyhhKXthPU51bWJlcihhKTtyZXR1cm4gMD09PWElMSYmMDw9YT9hOm51bGx9O3ZhciBSYz17XCJ1cm46dXVpZDoxMDc3ZWZlYy1jMGIyLTRkMDItYWNlMy0zYzFlNTJlMmZiNGJcIjpcIm9yZy53My5jbGVhcmtleVwiLFwidXJuOnV1aWQ6ZWRlZjhiYTktNzlkNi00YWNlLWEzYzgtMjdkY2Q1MWQyMWVkXCI6XCJjb20ud2lkZXZpbmUuYWxwaGFcIixcInVybjp1dWlkOjlhMDRmMDc5LTk4NDAtNDI4Ni1hYjkyLWU2NWJlMDg4NWY5NVwiOlwiY29tLm1pY3Jvc29mdC5wbGF5cmVhZHlcIixcInVybjp1dWlkOmYyMzllNzY5LWVmYTMtNDg1MC05YzE2LWE5MDNjNjkzMmVmYlwiOlwiY29tLmFkb2JlLnByaW1ldGltZVwifTtcbmZ1bmN0aW9uIFNjKGEsYil7dmFyIGM9VWMoYSksZD1udWxsLGU9Yy5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuXCJ1cm46bXBlZzpkYXNoOm1wNHByb3RlY3Rpb246MjAxMVwiPT1hLk1hPyhkPWEuaW5pdHx8ZCwhMSk6ITB9KSxmPWMubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLmtleUlkfSkuZmlsdGVyKGRiKSxnPW51bGw7aWYoMDxmLmxlbmd0aCYmKGc9ZlswXSxmLnNvbWUoZWIoZykpKSl0aHJvdyBuZXcgeig0LDQwMTApO2Y9W107MDxlLmxlbmd0aD8oZj1WYyhkLGIsZSksMD09Zi5sZW5ndGgmJihmPVtXYyhcIlwiLGQpXSkpOjA8Yy5sZW5ndGgmJihmPUooUmMpLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gV2MoYSxkKX0pKTtyZXR1cm57R2E6ZyxOYjpkLGRybUluZm9zOmYsSGE6ITB9fVxuZnVuY3Rpb24gWGMoYSxiLGMpe3ZhciBkPVNjKGEsYik7aWYoYy5IYSl7YT0xPT1jLmRybUluZm9zLmxlbmd0aCYmIWMuZHJtSW5mb3NbMF0ua2V5U3lzdGVtO2I9MD09ZC5kcm1JbmZvcy5sZW5ndGg7aWYoMD09Yy5kcm1JbmZvcy5sZW5ndGh8fGEmJiFiKWMuZHJtSW5mb3M9ZC5kcm1JbmZvcztjLkhhPSExfWVsc2UgaWYoMDxkLmRybUluZm9zLmxlbmd0aCYmKGMuZHJtSW5mb3M9Yy5kcm1JbmZvcy5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGQuZHJtSW5mb3Muc29tZShmdW5jdGlvbihiKXtyZXR1cm4gYi5rZXlTeXN0ZW09PWEua2V5U3lzdGVtfSl9KSwwPT1jLmRybUluZm9zLmxlbmd0aCkpdGhyb3cgbmV3IHooNCw0MDA4KTtyZXR1cm4gZC5HYXx8Yy5HYX1cbmZ1bmN0aW9uIFdjKGEsYil7cmV0dXJue2tleVN5c3RlbTphLGxpY2Vuc2VTZXJ2ZXJVcmk6XCJcIixkaXN0aW5jdGl2ZUlkZW50aWZpZXJSZXF1aXJlZDohMSxwZXJzaXN0ZW50U3RhdGVSZXF1aXJlZDohMSxhdWRpb1JvYnVzdG5lc3M6XCJcIix2aWRlb1JvYnVzdG5lc3M6XCJcIixzZXJ2ZXJDZXJ0aWZpY2F0ZTpudWxsLGluaXREYXRhOmJ8fFtdfX1mdW5jdGlvbiBWYyhhLGIsYyl7cmV0dXJuIGMubWFwKGZ1bmN0aW9uKGMpe3ZhciBlPVJjW2MuTWFdO3JldHVybiBlP1tXYyhlLGMuaW5pdHx8YSldOmIoYy5ub2RlKXx8W119KS5yZWR1Y2UoY2IsW10pfVxuZnVuY3Rpb24gVWMoYSl7cmV0dXJuIGEubWFwKGZ1bmN0aW9uKGEpe3ZhciBjPWEuZ2V0QXR0cmlidXRlKFwic2NoZW1lSWRVcmlcIiksZD1hLmdldEF0dHJpYnV0ZShcImNlbmM6ZGVmYXVsdF9LSURcIiksZT1SKGEsXCJjZW5jOnBzc2hcIikubWFwKExjKTtpZighYylyZXR1cm4gbnVsbDtjPWMudG9Mb3dlckNhc2UoKTtpZihkJiYoZD1kLnJlcGxhY2UoLy0vZyxcIlwiKS50b0xvd2VyQ2FzZSgpLDA8PWQuaW5kZXhPZihcIiBcIikpKXRocm93IG5ldyB6KDQsNDAwOSk7dmFyIGY9W107dHJ5e2Y9ZS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJue2luaXREYXRhVHlwZTpcImNlbmNcIixpbml0RGF0YTpaYihhKX19KX1jYXRjaChnKXt0aHJvdyBuZXcgeig0LDQwMDcpO31yZXR1cm57bm9kZTphLE1hOmMsa2V5SWQ6ZCxpbml0OjA8Zi5sZW5ndGg/ZjpudWxsfX0pLmZpbHRlcihkYil9O3ZhciBZYz0vXig/OihbXjovPyMuXSspOik/KD86XFwvXFwvKD86KFteLz8jXSopQCk/KFteLyM/XSo/KSg/OjooWzAtOV0rKSk/KD89Wy8jP118JCkpPyhbXj8jXSspPyg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8kLztmdW5jdGlvbiBVKGEpe3ZhciBiO2EgaW5zdGFuY2VvZiBVPyhaYyh0aGlzLGEuSyksdGhpcy5aPWEuWix0aGlzLk09YS5NLCRjKHRoaXMsYS5jYSksdGhpcy5IPWEuSCxhZCh0aGlzLGJkKGEuYSkpLHRoaXMuVj1hLlYpOmEmJihiPVN0cmluZyhhKS5tYXRjaChZYykpPyhaYyh0aGlzLGJbMV18fFwiXCIsITApLHRoaXMuWj1jZChiWzJdfHxcIlwiKSx0aGlzLk09Y2QoYlszXXx8XCJcIiwhMCksJGModGhpcyxiWzRdKSx0aGlzLkg9Y2QoYls1XXx8XCJcIiwhMCksYWQodGhpcyxiWzZdfHxcIlwiLCEwKSx0aGlzLlY9Y2QoYls3XXx8XCJcIikpOnRoaXMuYT1uZXcgVihudWxsKX1rPVUucHJvdG90eXBlO2suSz1cIlwiO2suWj1cIlwiO2suTT1cIlwiO2suY2E9bnVsbDtrLkg9XCJcIjtrLlY9XCJcIjtcbmsudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgYT1bXSxiPXRoaXMuSztiJiZhLnB1c2goZGQoYixlZCwhMCksXCI6XCIpO2lmKGI9dGhpcy5NKXthLnB1c2goXCIvL1wiKTt2YXIgYz10aGlzLlo7YyYmYS5wdXNoKGRkKGMsZWQsITApLFwiQFwiKTthLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGIpLnJlcGxhY2UoLyUyNShbMC05YS1mQS1GXXsyfSkvZyxcIiUkMVwiKSk7Yj10aGlzLmNhO251bGwhPWImJmEucHVzaChcIjpcIixTdHJpbmcoYikpfWlmKGI9dGhpcy5IKXRoaXMuTSYmXCIvXCIhPWIuY2hhckF0KDApJiZhLnB1c2goXCIvXCIpLGEucHVzaChkZChiLFwiL1wiPT1iLmNoYXJBdCgwKT9mZDpnZCwhMCkpOyhiPXRoaXMuYS50b1N0cmluZygpKSYmYS5wdXNoKFwiP1wiLGIpOyhiPXRoaXMuVikmJmEucHVzaChcIiNcIixkZChiLGhkKSk7cmV0dXJuIGEuam9pbihcIlwiKX07XG5rLnJlc29sdmU9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IFUodGhpcyk7XCJkYXRhXCI9PT1iLksmJihiPW5ldyBVKTt2YXIgYz0hIWEuSztjP1pjKGIsYS5LKTpjPSEhYS5aO2M/Yi5aPWEuWjpjPSEhYS5NO2M/Yi5NPWEuTTpjPW51bGwhPWEuY2E7dmFyIGQ9YS5IO2lmKGMpJGMoYixhLmNhKTtlbHNlIGlmKGM9ISFhLkgpe2lmKFwiL1wiIT1kLmNoYXJBdCgwKSlpZih0aGlzLk0mJiF0aGlzLkgpZD1cIi9cIitkO2Vsc2V7dmFyIGU9Yi5ILmxhc3RJbmRleE9mKFwiL1wiKTstMSE9ZSYmKGQ9Yi5ILnN1YnN0cigwLGUrMSkrZCl9aWYoXCIuLlwiPT1kfHxcIi5cIj09ZClkPVwiXCI7ZWxzZSBpZigtMSE9ZC5pbmRleE9mKFwiLi9cIil8fC0xIT1kLmluZGV4T2YoXCIvLlwiKSl7Zm9yKHZhciBlPTA9PWQubGFzdEluZGV4T2YoXCIvXCIsMCksZD1kLnNwbGl0KFwiL1wiKSxmPVtdLGc9MDtnPGQubGVuZ3RoOyl7dmFyIGw9ZFtnKytdO1wiLlwiPT1sP2UmJmc9PWQubGVuZ3RoJiZmLnB1c2goXCJcIik6XCIuLlwiPT1sPygoMTxmLmxlbmd0aHx8XG4xPT1mLmxlbmd0aCYmXCJcIiE9ZlswXSkmJmYucG9wKCksZSYmZz09ZC5sZW5ndGgmJmYucHVzaChcIlwiKSk6KGYucHVzaChsKSxlPSEwKX1kPWYuam9pbihcIi9cIil9fWM/Yi5IPWQ6Yz1cIlwiIT09YS5hLnRvU3RyaW5nKCk7Yz9hZChiLGJkKGEuYSkpOmM9ISFhLlY7YyYmKGIuVj1hLlYpO3JldHVybiBifTtmdW5jdGlvbiBaYyhhLGIsYyl7YS5LPWM/Y2QoYiwhMCk6YjthLksmJihhLks9YS5LLnJlcGxhY2UoLzokLyxcIlwiKSl9ZnVuY3Rpb24gJGMoYSxiKXtpZihiKXtiPU51bWJlcihiKTtpZihpc05hTihiKXx8MD5iKXRocm93IEVycm9yKFwiQmFkIHBvcnQgbnVtYmVyIFwiK2IpO2EuY2E9Yn1lbHNlIGEuY2E9bnVsbH1mdW5jdGlvbiBpZChhKXtyZXR1cm4gYS5IfWZ1bmN0aW9uIGFkKGEsYixjKXtiIGluc3RhbmNlb2YgVj9hLmE9YjooY3x8KGI9ZGQoYixqZCkpLGEuYT1uZXcgVihiKSl9XG5mdW5jdGlvbiBjZChhLGIpe3JldHVybiBhP2I/ZGVjb2RlVVJJKGEpOmRlY29kZVVSSUNvbXBvbmVudChhKTpcIlwifWZ1bmN0aW9uIGRkKGEsYixjKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYT8oYT1lbmNvZGVVUkkoYSkucmVwbGFjZShiLGtkKSxjJiYoYT1hLnJlcGxhY2UoLyUyNShbMC05YS1mQS1GXXsyfSkvZyxcIiUkMVwiKSksYSk6bnVsbH1mdW5jdGlvbiBrZChhKXthPWEuY2hhckNvZGVBdCgwKTtyZXR1cm5cIiVcIisoYT4+NCYxNSkudG9TdHJpbmcoMTYpKyhhJjE1KS50b1N0cmluZygxNil9dmFyIGVkPS9bI1xcL1xcP0BdL2csZ2Q9L1tcXCNcXD86XS9nLGZkPS9bXFwjXFw/XS9nLGpkPS9bXFwjXFw/QF0vZyxoZD0vIy9nO2Z1bmN0aW9uIFYoYSl7dGhpcy5iPWF8fG51bGx9Vi5wcm90b3R5cGUuYT1udWxsO1YucHJvdG90eXBlLmM9bnVsbDtcblYucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7aWYodGhpcy5iKXJldHVybiB0aGlzLmI7aWYoIXRoaXMuYSlyZXR1cm5cIlwiO3ZhciBhPVtdLGI7Zm9yKGIgaW4gdGhpcy5hKWZvcih2YXIgYz1lbmNvZGVVUklDb21wb25lbnQoYiksZD10aGlzLmFbYl0sZT0wO2U8ZC5sZW5ndGg7ZSsrKXt2YXIgZj1jO1wiXCIhPT1kW2VdJiYoZis9XCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGRbZV0pKTthLnB1c2goZil9cmV0dXJuIHRoaXMuYj1hLmpvaW4oXCImXCIpfTtmdW5jdGlvbiBiZChhKXt2YXIgYj1uZXcgVjtiLmI9YS5iO2lmKGEuYSl7dmFyIGM9e30sZDtmb3IoZCBpbiBhLmEpY1tkXT1hLmFbZF0uY29uY2F0KCk7Yi5hPWM7Yi5jPWEuY31yZXR1cm4gYn07dmFyIGxkPTEvMTU7ZnVuY3Rpb24gbWQoYSxiLGMsZCxlKXtudWxsIT09ZSYmKGU9TWF0aC5yb3VuZChlKSk7dmFyIGY9e1JlcHJlc2VudGF0aW9uSUQ6YixOdW1iZXI6YyxCYW5kd2lkdGg6ZCxUaW1lOmV9O3JldHVybiBhLnJlcGxhY2UoL1xcJChSZXByZXNlbnRhdGlvbklEfE51bWJlcnxCYW5kd2lkdGh8VGltZSk/KD86JTAoWzAtOV0rKWQpP1xcJC9nLGZ1bmN0aW9uKGEsYixjKXtpZihcIiQkXCI9PWEpcmV0dXJuXCIkXCI7dmFyIGQ9ZltiXTtpZihudWxsPT1kKXJldHVybiBhO1wiUmVwcmVzZW50YXRpb25JRFwiPT1iJiZjJiYoYz12b2lkIDApO2E9ZC50b1N0cmluZygpO2M9d2luZG93LnBhcnNlSW50KGMsMTApfHwxO3JldHVybiBBcnJheShNYXRoLm1heCgwLGMtYS5sZW5ndGgpKzEpLmpvaW4oXCIwXCIpK2F9KX1cbmZ1bmN0aW9uIG5kKGEsYil7aWYoMCE9Yi5sZW5ndGgpe3ZhciBjPWJbMF07Yy5zdGFydFRpbWU8PWxkJiYoYlswXT1uZXcgdyhjLnBvc2l0aW9uLDAsYy5hLGMudXJpcyxjLmMsYy5iKSk7bnVsbCE9YSYmYSE9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZJiYoYz1iW2IubGVuZ3RoLTFdLGMuc3RhcnRUaW1lPmF8fChiW2IubGVuZ3RoLTFdPW5ldyB3KGMucG9zaXRpb24sYy5zdGFydFRpbWUsYSxjLnVyaXMsYy5jLGMuYikpKX19ZnVuY3Rpb24gVyhhLGIpe2lmKDA9PWIubGVuZ3RoKXJldHVybiBhO3ZhciBjPWIubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBuZXcgVShhKX0pO3JldHVybiBhLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gbmV3IFUoYSl9KS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGMubWFwKGEucmVzb2x2ZS5iaW5kKGEpKX0pLnJlZHVjZShjYixbXSkubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnRvU3RyaW5nKCl9KX1cbmZ1bmN0aW9uIG9kKGEsYil7dmFyIGM9WChhLGIsXCJ0aW1lc2NhbGVcIiksZD0xO2MmJihkPVBjKGMpfHwxKTtjPVgoYSxiLFwiZHVyYXRpb25cIik7KGM9UGMoY3x8XCJcIikpJiYoYy89ZCk7dmFyIGU9WChhLGIsXCJzdGFydE51bWJlclwiKSxmPVgoYSxiLFwicHJlc2VudGF0aW9uVGltZU9mZnNldFwiKSxnPVFjKGV8fFwiXCIpO2lmKG51bGw9PWV8fG51bGw9PWcpZz0xO3ZhciBsPXBkKGEsYixcIlNlZ21lbnRUaW1lbGluZVwiKSxlPW51bGw7aWYobCl7Zm9yKHZhciBlPWQsaD1OdW1iZXIoZikscD1hLkMuZHVyYXRpb258fE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxsPVIobCxcIlNcIikscT1bXSx0PTAsST0wO0k8bC5sZW5ndGg7KytJKXt2YXIgdT1sW0ldLHk9Uyh1LFwidFwiLFFjKSxRPVModSxcImRcIixRYyksdT1TKHUsXCJyXCIsT2MpO251bGwhPXkmJih5LT1oKTtpZighUSlicmVhazt5PW51bGwhPXk/eTp0O3U9dXx8MDtpZigwPnUpaWYoSSsxPGwubGVuZ3RoKXt1PVMobFtJKzFdLFwidFwiLFFjKTtpZihudWxsPT1cbnUpYnJlYWs7ZWxzZSBpZih5Pj11KWJyZWFrO3U9TWF0aC5jZWlsKCh1LXkpL1EpLTF9ZWxzZXtpZihwPT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpYnJlYWs7ZWxzZSBpZih5L2U+PXApYnJlYWs7dT1NYXRoLmNlaWwoKHAqZS15KS9RKS0xfTA8cS5sZW5ndGgmJnkhPXQmJihxW3EubGVuZ3RoLTFdLmVuZD15L2UpO2Zvcih2YXIgaGE9MDtoYTw9dTsrK2hhKXQ9eStRLHEucHVzaCh7c3RhcnQ6eS9lLGVuZDp0L2V9KSx5PXR9ZT1xfXJldHVybntxYTpkLEw6YyxqYTpnLHByZXNlbnRhdGlvblRpbWVPZmZzZXQ6TnVtYmVyKGYpL2R8fDAsSTplfX1mdW5jdGlvbiBYKGEsYixjKXtyZXR1cm5bYihhLmopLGIoYS52KSxiKGEuQildLmZpbHRlcihkYikubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShjKX0pLnJlZHVjZShmdW5jdGlvbihhLGIpe3JldHVybiBhfHxifSl9XG5mdW5jdGlvbiBwZChhLGIsYyl7cmV0dXJuW2IoYS5qKSxiKGEudiksYihhLkIpXS5maWx0ZXIoZGIpLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gS2MoYSxjKX0pLnJlZHVjZShmdW5jdGlvbihhLGIpe3JldHVybiBhfHxifSl9O2Z1bmN0aW9uIHFkKGEsYil7dmFyIGM9cGQoYSxiLFwiSW5pdGlhbGl6YXRpb25cIik7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9YS5qLkcsZT1jLmdldEF0dHJpYnV0ZShcInNvdXJjZVVSTFwiKTtlJiYoZD1XKGEuai5HLFtlXSkpO3ZhciBlPTAsZj1udWxsO2lmKGM9UyhjLFwicmFuZ2VcIixOYykpZT1jLnN0YXJ0LGY9Yy5lbmQ7cmV0dXJuIG5ldyB0YShkLGUsZil9XG5mdW5jdGlvbiByZChhLGIpe3ZhciBjPVgoYSxzZCxcInByZXNlbnRhdGlvblRpbWVPZmZzZXRcIiksZD1xZChhLHNkKSxlO2U9TnVtYmVyKGMpO3ZhciBmPWEuai5taW1lVHlwZS5zcGxpdChcIi9cIilbMV07aWYoXCJ0ZXh0XCIhPWEuai5jb250ZW50VHlwZSYmXCJtcDRcIiE9ZiYmXCJ3ZWJtXCIhPWYpdGhyb3cgbmV3IHooNCw0MDA2KTtpZihcIndlYm1cIj09ZiYmIWQpdGhyb3cgbmV3IHooNCw0MDA1KTt2YXIgZz1wZChhLHNkLFwiUmVwcmVzZW50YXRpb25JbmRleFwiKSxsPVgoYSxzZCxcImluZGV4UmFuZ2VcIiksaD1hLmouRyxsPU5jKGx8fFwiXCIpO2lmKGcpe3ZhciBwPWcuZ2V0QXR0cmlidXRlKFwic291cmNlVVJMXCIpO3AmJihoPVcoYS5qLkcsW3BdKSk7bD1TKGcsXCJyYW5nZVwiLE5jLGwpfWlmKCFsKXRocm93IG5ldyB6KDQsNDAwMik7ZT10ZChhLGIsZCxoLGwuc3RhcnQsbC5lbmQsZixlKTtyZXR1cm57Y3JlYXRlU2VnbWVudEluZGV4OmUuY3JlYXRlU2VnbWVudEluZGV4LGZpbmRTZWdtZW50UG9zaXRpb246ZS5maW5kU2VnbWVudFBvc2l0aW9uLFxuZ2V0U2VnbWVudFJlZmVyZW5jZTplLmdldFNlZ21lbnRSZWZlcmVuY2UsaW5pdFNlZ21lbnRSZWZlcmVuY2U6ZCxwcmVzZW50YXRpb25UaW1lT2Zmc2V0Ok51bWJlcihjKXx8MH19XG5mdW5jdGlvbiB0ZChhLGIsYyxkLGUsZixnLGwpe3ZhciBoPWEucHJlc2VudGF0aW9uVGltZWxpbmUscD1hLkMuc3RhcnQscT1hLkMuZHVyYXRpb24sdD1iLEk9bnVsbDtyZXR1cm57Y3JlYXRlU2VnbWVudEluZGV4OmZ1bmN0aW9uKCl7dmFyIGE9W3QoZCxlLGYpLFwid2VibVwiPT1nP3QoYy51cmlzLGMuYyxjLmIpOm51bGxdO3Q9bnVsbDtyZXR1cm4gUHJvbWlzZS5hbGwoYSkudGhlbihmdW5jdGlvbihhKXt2YXIgYixjLGYsdD1hWzBdO2E9YVsxXXx8bnVsbDt2YXIgcj1udWxsO2lmKFwibXA0XCI9PWcpe2E9W107dmFyIHI9bmV3IFJhKG5ldyBEYXRhVmlldyh0KSksdT1BKHIpO2lmKDE5MzYyODY4NDAhPUEocikpdGhyb3cgbmV3IHooMywzMDA0KTsxPT11JiYodT1XYShyKSk7dD1VYShyKTtCKHIsMyk7QihyLDQpO2I9QShyKTtpZigwPT1iKXRocm93IG5ldyB6KDMsMzAwNSk7dmFyIEs7MD09dD8oYz1BKHIpLEs9QShyKSk6KGM9V2EociksSz1XYShyKSk7QihyLDIpO3RyeXt2YXIgdj1yLmIuZ2V0VWludDE2KHIuYSxcbnIuYyl9Y2F0Y2goeGUpe1ZhKCl9ci5hKz0yO3Q9djt2PWMtbDt1PWUrdStLO2ZvcihLPTA7Szx0O0srKyl7Zj1BKHIpO2M9KGYmMjE0NzQ4MzY0OCk+Pj4zMTtmJj0yMTQ3NDgzNjQ3O3ZhciBEYT1BKHIpO0Iociw0KTtpZigxPT1jKXRocm93IG5ldyB6KDMsMzAwNik7YS5wdXNoKG5ldyB3KGEubGVuZ3RoLHYvYiwoditEYSkvYixkLHUsdStmLTEpKTt2Kz1EYTt1Kz1mfXI9YX1lbHNle2E9bmV3IEMobmV3IERhdGFWaWV3KGEpKTtpZig0NDA3ODY4NTEhPUQoYSkuaWQpdGhyb3cgbmV3IHooMywzMDA4KTtyPUQoYSk7aWYoNDA4MTI1NTQzIT1yLmlkKXRocm93IG5ldyB6KDMsMzAwOSk7YT1yLmEuYnl0ZU9mZnNldDtyPW5ldyBDKHIuYSk7Zm9yKGI9bnVsbDtUYShyLmEpOylpZih2PUQociksMzU3MTQ5MDMwPT12LmlkKXtiPXY7YnJlYWt9aWYoIWIpdGhyb3cgbmV3IHooMywzMDEwKTtyPW5ldyBDKGIuYSk7Yj0xRTY7Zm9yKHY9bnVsbDtUYShyLmEpOylpZih1PUQociksMjgwNzcyOT09XG51LmlkKWI9YWIodSk7ZWxzZSBpZigxNzU0NT09dS5pZClpZih2PXUsND09di5hLmJ5dGVMZW5ndGgpdj12LmEuZ2V0RmxvYXQzMigwKTtlbHNlIGlmKDg9PXYuYS5ieXRlTGVuZ3RoKXY9di5hLmdldEZsb2F0NjQoMCk7ZWxzZSB0aHJvdyBuZXcgeigzLDMwMDMpO2lmKG51bGw9PXYpdGhyb3cgbmV3IHooMywzMDExKTtyPWIvMUU5O2I9dipyO3Y9RChuZXcgQyhuZXcgRGF0YVZpZXcodCkpKTtpZig0NzUyNDk1MTUhPXYuaWQpdGhyb3cgbmV3IHooMywzMDA3KTt0PVtdO3Y9bmV3IEModi5hKTtmb3IoSz11PS0xO1RhKHYuYSk7KWlmKGM9RCh2KSwxODc9PWMuaWQpe2Y9bmV3IEMoYy5hKTtjPUQoZik7aWYoMTc5IT1jLmlkKXRocm93IG5ldyB6KDMsMzAxMyk7Yz1hYihjKTtmPUQoZik7aWYoMTgzIT1mLmlkKXRocm93IG5ldyB6KDMsMzAxMik7RGE9bmV3IEMoZi5hKTtmb3IoZj0wO1RhKERhLmEpOyl7dmFyIFRjPUQoRGEpO2lmKDI0MT09VGMuaWQpe2Y9YWIoVGMpO2JyZWFrfX1jPXIqXG4oYy1sKTtmPWErZjswPD11JiZ0LnB1c2gobmV3IHcodC5sZW5ndGgsdSxjLGQsSyxmLTEpKTt1PWM7Sz1mfTA8PXUmJnQucHVzaChuZXcgdyh0Lmxlbmd0aCx1LGIsZCxLLG51bGwpKTtyPXR9bmQocSxyKTtxYShoLHAscik7ST1uZXcgSChyKX0pfSxmaW5kU2VnbWVudFBvc2l0aW9uOmZ1bmN0aW9uKGEpe3JldHVybiBJLmIoYSl9LGdldFNlZ21lbnRSZWZlcmVuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIEkuZ2V0KGEpfX19ZnVuY3Rpb24gc2QoYSl7cmV0dXJuIGEuaGF9O2Z1bmN0aW9uIHVkKGEsYil7dmFyIGMsZCxlLGYsZyxsPXFkKGEsdmQpLGg9d2QoYSk7Zz1vZChhLHZkKTtlPWcuamE7MD09PWUmJihlPTEpO2Y9MDtnLkw/Zj1nLkwqKGUtMSktZy5wcmVzZW50YXRpb25UaW1lT2Zmc2V0OmcuSSYmMDxnLkkubGVuZ3RoJiYoZj1nLklbMF0uc3RhcnQpO2M9Zy5MO2Q9ZjtmPWcucHJlc2VudGF0aW9uVGltZU9mZnNldDtnPWcuSTtpZighYyYmIWcmJjE8aC5sZW5ndGgpdGhyb3cgbmV3IHooNCw0MDAyKTtpZighYyYmIWEuQy5kdXJhdGlvbiYmIWcmJjE9PWgubGVuZ3RoKXRocm93IG5ldyB6KDQsNDAwMik7aWYoZyYmMD09Zy5sZW5ndGgpdGhyb3cgbmV3IHooNCw0MDAyKTt2YXIgcD1udWxsLHE9bnVsbDthLkIuaWQmJmEuai5pZCYmKHE9YS5CLmlkK1wiLFwiK2Euai5pZCxwPWJbcV0pO3ZhciB0PWEuQy5kdXJhdGlvbixJPWEuai5HLHU9aC5sZW5ndGg7ZyYmZy5sZW5ndGghPWgubGVuZ3RoJiYodT1NYXRoLm1pbihnLmxlbmd0aCxoLmxlbmd0aCkpO3ZhciB5PVxuW10sUT1kO2ZvcihkPTA7ZDx1O2QrKyl7dmFyIGhhPWhbZF0sZWU9VyhJLFtoYS5YYV0pLEpiO0piPW51bGwhPWM/UStjOmc/Z1tkXS5lbmQ6USt0O3kucHVzaChuZXcgdyhkK2UsUSxKYixlZSxoYS5zdGFydCxoYS5lbmQpKTtRPUpifW5kKGEuQy5kdXJhdGlvbix5KTtwPyhmYihwLHkpLGdiKHAsc2EoYS5wcmVzZW50YXRpb25UaW1lbGluZSkpKToocWEoYS5wcmVzZW50YXRpb25UaW1lbGluZSxhLkMuc3RhcnQseSkscD1uZXcgSCh5KSxxJiYoYltxXT1wKSk7cmV0dXJue2NyZWF0ZVNlZ21lbnRJbmRleDpQcm9taXNlLnJlc29sdmUuYmluZChQcm9taXNlKSxmaW5kU2VnbWVudFBvc2l0aW9uOnAuYi5iaW5kKHApLGdldFNlZ21lbnRSZWZlcmVuY2U6cC5nZXQuYmluZChwKSxpbml0U2VnbWVudFJlZmVyZW5jZTpsLHByZXNlbnRhdGlvblRpbWVPZmZzZXQ6Zn19ZnVuY3Rpb24gdmQoYSl7cmV0dXJuIGEuU31cbmZ1bmN0aW9uIHdkKGEpe3JldHVyblthLmouUyxhLnYuUyxhLkIuU10uZmlsdGVyKGRiKS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIFIoYSxcIlNlZ21lbnRVUkxcIil9KS5yZWR1Y2UoZnVuY3Rpb24oYSxjKXtyZXR1cm4gMDxhLmxlbmd0aD9hOmN9KS5tYXAoZnVuY3Rpb24oYSl7dmFyIGM9YS5nZXRBdHRyaWJ1dGUoXCJtZWRpYVwiKTthPVMoYSxcIm1lZGlhUmFuZ2VcIixOYyx7c3RhcnQ6MCxlbmQ6bnVsbH0pO3JldHVybntYYTpjLHN0YXJ0OmEuc3RhcnQsZW5kOmEuZW5kfX0pfTtmdW5jdGlvbiB4ZChhLGIsYyxkKXt2YXIgZTsoZT1YKGEseWQsXCJpbml0aWFsaXphdGlvblwiKSk/KGU9bWQoZSxhLmouaWQsbnVsbCxhLmJhbmR3aWR0aHx8bnVsbCxudWxsKSxlPVcoYS5qLkcsW2VdKSxlPW5ldyB0YShlLDAsbnVsbCkpOmU9bnVsbDt2YXIgZjtmPW9kKGEseWQpO3ZhciBnPVgoYSx5ZCxcIm1lZGlhXCIpLGw9WChhLHlkLFwiaW5kZXhcIik7Zj17TDpmLkwscWE6Zi5xYSxqYTpmLmphLHByZXNlbnRhdGlvblRpbWVPZmZzZXQ6Zi5wcmVzZW50YXRpb25UaW1lT2Zmc2V0LEk6Zi5JLHhhOmcsZmE6bH07Zz0wKyhmLmZhPzE6MCk7Zys9Zi5JPzE6MDtnKz1mLkw/MTowO2lmKDA9PWcpdGhyb3cgbmV3IHooNCw0MDAyKTsxIT1nJiYoZi5mYSYmKGYuST1udWxsKSxmLkw9bnVsbCk7aWYoIWYuZmEmJiFmLnhhKXRocm93IG5ldyB6KDQsNDAwMik7Zz1udWxsO2lmKGYuZmEpe2M9ZTtkPWEuai5taW1lVHlwZS5zcGxpdChcIi9cIilbMV07aWYoXCJtcDRcIiE9ZCYmXCJ3ZWJtXCIhPWQpdGhyb3cgbmV3IHooNCxcbjQwMDYpO2lmKFwid2VibVwiPT1kJiYhYyl0aHJvdyBuZXcgeig0LDQwMDUpO2c9bWQoZi5mYSxhLmouaWQsbnVsbCxhLmJhbmR3aWR0aHx8bnVsbCxudWxsKTtnPVcoYS5qLkcsW2ddKTtnPXRkKGEsYixjLGcsMCxudWxsLGQsZi5wcmVzZW50YXRpb25UaW1lT2Zmc2V0KX1lbHNlIGlmKGYuTClkfHwoYz1hLnByZXNlbnRhdGlvblRpbWVsaW5lLGMuYj1NYXRoLm1heChjLmIsZi5MKSksZz16ZChhLGYpO2Vsc2V7ZD1iPW51bGw7YS5CLmlkJiZhLmouaWQmJihkPWEuQi5pZCtcIixcIithLmouaWQsYj1jW2RdKTtnPVtdO2ZvcihsPTA7bDxmLkkubGVuZ3RoO2wrKyl7dmFyIGg9Zi5JW2xdLnN0YXJ0LHA9Zi5JW2xdLmVuZCxxPWwrZi5qYSx0PW1kKGYueGEsYS5qLmlkLHEsYS5iYW5kd2lkdGh8fG51bGwsKGgrZi5wcmVzZW50YXRpb25UaW1lT2Zmc2V0KSpmLnFhKSx0PVcoYS5qLkcsW3RdKTtnLnB1c2gobmV3IHcocSxoLHAsdCwwLG51bGwpKX1uZChhLkMuZHVyYXRpb24sZyk7Yj8oZmIoYixcbmcpLGdiKGIsc2EoYS5wcmVzZW50YXRpb25UaW1lbGluZSkpKToocWEoYS5wcmVzZW50YXRpb25UaW1lbGluZSxhLkMuc3RhcnQsZyksYj1uZXcgSChnKSxkJiYoY1tkXT1iKSk7Zz17Y3JlYXRlU2VnbWVudEluZGV4OlByb21pc2UucmVzb2x2ZS5iaW5kKFByb21pc2UpLGZpbmRTZWdtZW50UG9zaXRpb246Yi5iLmJpbmQoYiksZ2V0U2VnbWVudFJlZmVyZW5jZTpiLmdldC5iaW5kKGIpfX1yZXR1cm57Y3JlYXRlU2VnbWVudEluZGV4OmcuY3JlYXRlU2VnbWVudEluZGV4LGZpbmRTZWdtZW50UG9zaXRpb246Zy5maW5kU2VnbWVudFBvc2l0aW9uLGdldFNlZ21lbnRSZWZlcmVuY2U6Zy5nZXRTZWdtZW50UmVmZXJlbmNlLGluaXRTZWdtZW50UmVmZXJlbmNlOmUscHJlc2VudGF0aW9uVGltZU9mZnNldDpmLnByZXNlbnRhdGlvblRpbWVPZmZzZXR9fWZ1bmN0aW9uIHlkKGEpe3JldHVybiBhLmlhfVxuZnVuY3Rpb24gemQoYSxiKXt2YXIgYz1hLkMuZHVyYXRpb24sZD1iLkwsZT1iLmphLGY9Yi5xYSxnPWIueGEsbD1hLmJhbmR3aWR0aHx8bnVsbCxoPWEuai5pZCxwPWEuai5HO3JldHVybntjcmVhdGVTZWdtZW50SW5kZXg6UHJvbWlzZS5yZXNvbHZlLmJpbmQoUHJvbWlzZSksZmluZFNlZ21lbnRQb3NpdGlvbjpmdW5jdGlvbihhKXtyZXR1cm4gMD5hfHxjJiZhPj1jP251bGw6TWF0aC5mbG9vcihhL2QpfSxnZXRTZWdtZW50UmVmZXJlbmNlOmZ1bmN0aW9uKGEpe3ZhciBiPWEqZCxjPW1kKGcsaCxhK2UsbCxiKmYpLGM9VyhwLFtjXSk7cmV0dXJuIG5ldyB3KGEsYixiK2QsYywwLG51bGwpfX19O2Z1bmN0aW9uIFkoYSl7dGhpcy5mPSExO3RoaXMuYT1bXTt0aGlzLmI9W107dGhpcy5jPVtdO3RoaXMuaD1hfHxudWxsfXZhciBqYz0yO20oXCJzaGFrYS5uZXQuTmV0d29ya2luZ0VuZ2luZS5SZXF1ZXN0VHlwZVwiLHtNQU5JRkVTVDowLFNFR01FTlQ6MSxMSUNFTlNFOmpjfSk7dmFyIEFkPXt9O20oXCJzaGFrYS5uZXQuTmV0d29ya2luZ0VuZ2luZS5yZWdpc3RlclNjaGVtZVwiLGZ1bmN0aW9uKGEsYil7QWRbYV09Yn0pO20oXCJzaGFrYS5uZXQuTmV0d29ya2luZ0VuZ2luZS51bnJlZ2lzdGVyU2NoZW1lXCIsZnVuY3Rpb24oYSl7ZGVsZXRlIEFkW2FdfSk7WS5wcm90b3R5cGUub2I9ZnVuY3Rpb24oYSl7dGhpcy5iLnB1c2goYSl9O1kucHJvdG90eXBlLnJlZ2lzdGVyUmVxdWVzdEZpbHRlcj1ZLnByb3RvdHlwZS5vYjtZLnByb3RvdHlwZS5KYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmI7YT1iLmluZGV4T2YoYSk7MDw9YSYmYi5zcGxpY2UoYSwxKX07XG5ZLnByb3RvdHlwZS51bnJlZ2lzdGVyUmVxdWVzdEZpbHRlcj1ZLnByb3RvdHlwZS5KYjtZLnByb3RvdHlwZS5SYT1mdW5jdGlvbigpe3RoaXMuYj1bXX07WS5wcm90b3R5cGUuY2xlYXJBbGxSZXF1ZXN0RmlsdGVycz1ZLnByb3RvdHlwZS5SYTtZLnByb3RvdHlwZS5wYj1mdW5jdGlvbihhKXt0aGlzLmMucHVzaChhKX07WS5wcm90b3R5cGUucmVnaXN0ZXJSZXNwb25zZUZpbHRlcj1ZLnByb3RvdHlwZS5wYjtZLnByb3RvdHlwZS5LYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmM7YT1iLmluZGV4T2YoYSk7MDw9YSYmYi5zcGxpY2UoYSwxKX07WS5wcm90b3R5cGUudW5yZWdpc3RlclJlc3BvbnNlRmlsdGVyPVkucHJvdG90eXBlLktiO1kucHJvdG90eXBlLlNhPWZ1bmN0aW9uKCl7dGhpcy5jPVtdfTtZLnByb3RvdHlwZS5jbGVhckFsbFJlc3BvbnNlRmlsdGVycz1ZLnByb3RvdHlwZS5TYTtcbmZ1bmN0aW9uIEJkKCl7cmV0dXJue21heEF0dGVtcHRzOjEsYmFzZURlbGF5OjFFMyxiYWNrb2ZmRmFjdG9yOjIsZnV6ekZhY3RvcjouNSx0aW1lb3V0OjB9fWZ1bmN0aW9uIGtjKGEsYil7cmV0dXJue3VyaXM6YSxtZXRob2Q6XCJHRVRcIixib2R5Om51bGwsaGVhZGVyczp7fSxhbGxvd0Nyb3NzU2l0ZUNyZWRlbnRpYWxzOiExLHJldHJ5UGFyYW1ldGVyczpifX1ZLnByb3RvdHlwZS5zPWZ1bmN0aW9uKCl7dGhpcy5mPSEwO3RoaXMuYj1bXTt0aGlzLmM9W107Zm9yKHZhciBhPVtdLGI9MDtiPHRoaXMuYS5sZW5ndGg7KytiKWEucHVzaCh0aGlzLmFbYl1bXCJjYXRjaFwiXShHKSk7cmV0dXJuIFByb21pc2UuYWxsKGEpfTtcblkucHJvdG90eXBlLnJlcXVlc3Q9ZnVuY3Rpb24oYSxiKXtpZih0aGlzLmYpcmV0dXJuIFByb21pc2UucmVqZWN0KCk7Zm9yKHZhciBjPURhdGUubm93KCksZD10aGlzLmIsZT0wO2U8ZC5sZW5ndGg7ZSsrKXRyeXtkW2VdKGEsYil9Y2F0Y2goaCl7cmV0dXJuIFByb21pc2UucmVqZWN0KGgpfWZvcih2YXIgZT1iLnJldHJ5UGFyYW1ldGVyc3x8e30sZD1lLm1heEF0dGVtcHRzfHwxLGY9ZS5iYWNrb2ZmRmFjdG9yfHwyLGc9bnVsbD09ZS5iYXNlRGVsYXk/MUUzOmUuYmFzZURlbGF5LGw9dGhpcy5nKGEsYiwwKSxlPTE7ZTxkO2UrKylsPWxbXCJjYXRjaFwiXSh0aGlzLmkuYmluZCh0aGlzLGEsYixnLGUlYi51cmlzLmxlbmd0aCkpLGcqPWY7dGhpcy5hLnB1c2gobCk7cmV0dXJuIGwudGhlbihmdW5jdGlvbihiKXt0aGlzLmEuc3BsaWNlKHRoaXMuYS5pbmRleE9mKGwpLDEpO3ZhciBkPURhdGUubm93KCk7dGhpcy5oJiYxPT1hJiZ0aGlzLmgoYyxkLGIuZGF0YS5ieXRlTGVuZ3RoKTtyZXR1cm4gYn0uYmluZCh0aGlzKSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXt0aGlzLmEuc3BsaWNlKHRoaXMuYS5pbmRleE9mKGwpLFxuMSk7cmV0dXJuIFByb21pc2UucmVqZWN0KGEpfS5iaW5kKHRoaXMpKX07WS5wcm90b3R5cGUucmVxdWVzdD1ZLnByb3RvdHlwZS5yZXF1ZXN0O1kucHJvdG90eXBlLmc9ZnVuY3Rpb24oYSxiLGMpe2lmKHRoaXMuZilyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTt2YXIgZD1uZXcgVShiLnVyaXNbY10pLGU9ZC5LO2V8fChlPWxvY2F0aW9uLnByb3RvY29sLGU9ZS5zbGljZSgwLC0xKSxaYyhkLGUpLGIudXJpc1tjXT1kLnRvU3RyaW5nKCkpO3JldHVybihlPUFkW2VdKT9lKGIudXJpc1tjXSxiKS50aGVuKGZ1bmN0aW9uKGIpe2Zvcih2YXIgYz10aGlzLmMsZD0wO2Q8Yy5sZW5ndGg7ZCsrKWNbZF0oYSxiKTtyZXR1cm4gYn0uYmluZCh0aGlzKSk6UHJvbWlzZS5yZWplY3QobmV3IHooMSwxRTMsZCkpfTtcblkucHJvdG90eXBlLmk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IE8sZj1iLnJldHJ5UGFyYW1ldGVyc3x8e307d2luZG93LnNldFRpbWVvdXQoZS5yZXNvbHZlLGMqKDErKDIqTWF0aC5yYW5kb20oKS0xKSoobnVsbD09Zi5mdXp6RmFjdG9yPy41OmYuZnV6ekZhY3RvcikpKTtyZXR1cm4gZS50aGVuKHRoaXMuZy5iaW5kKHRoaXMsYSxiLGQpKX07ZnVuY3Rpb24gQ2QoKXt0aGlzLm09dGhpcy5sPXRoaXMuYz10aGlzLmE9bnVsbDt0aGlzLmc9W107dGhpcy5iPW51bGw7dGhpcy5oPVtdO3RoaXMudT0xO3RoaXMuaT17fTt0aGlzLm89MDt0aGlzLmY9bnVsbH1rPUNkLnByb3RvdHlwZTtrLmNvbmZpZ3VyZT1mdW5jdGlvbihhKXt0aGlzLmM9YX07ay5zdGFydD1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLmc9W2FdO3RoaXMuYT1iO3RoaXMubD1jO3RoaXMubT1kO3JldHVybiBEZCh0aGlzKS50aGVuKGZ1bmN0aW9uKCl7dGhpcy5hJiZFZCh0aGlzLDApO3JldHVybiB0aGlzLmJ9LmJpbmQodGhpcykpfTtrLnN0b3A9ZnVuY3Rpb24oKXt0aGlzLmM9dGhpcy5tPXRoaXMubD10aGlzLmE9bnVsbDt0aGlzLmc9W107dGhpcy5iPW51bGw7dGhpcy5oPVtdO3RoaXMuaT17fTtudWxsIT10aGlzLmYmJih3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuZiksdGhpcy5mPW51bGwpO3JldHVybiBQcm9taXNlLnJlc29sdmUoKX07XG5mdW5jdGlvbiBEZChhKXtyZXR1cm4gYS5hLnJlcXVlc3QoMCxrYyhhLmcsYS5jLnJldHJ5UGFyYW1ldGVycykpLnRoZW4oZnVuY3Rpb24oYSl7aWYodGhpcy5hKXJldHVybiBGZCh0aGlzLGEuZGF0YSxhLnVyaSl9LmJpbmQoYSkpfVxuZnVuY3Rpb24gRmQoYSxiLGMpe3ZhciBkPVRiKGIpLGU9bmV3IERPTVBhcnNlcixmPW51bGw7Yj1udWxsO3RyeXtmPWUucGFyc2VGcm9tU3RyaW5nKGQsXCJ0ZXh0L3htbFwiKX1jYXRjaChxKXt9ZiYmXCJNUERcIj09Zi5kb2N1bWVudEVsZW1lbnQudGFnTmFtZSYmKGI9Zi5kb2N1bWVudEVsZW1lbnQpO2lmKCFiKXRocm93IG5ldyB6KDQsNDAwMSk7Yz1bY107ZD1SKGIsXCJMb2NhdGlvblwiKS5tYXAoTGMpLmZpbHRlcihkYik7MDxkLmxlbmd0aCYmKGM9YS5nPWQpO3ZhciBkPVIoYixcIkJhc2VVUkxcIikubWFwKExjKSxlPVcoYyxkKSxnPVMoYixcIm1pbkJ1ZmZlclRpbWVcIixUKTthLm89UyhiLFwibWluaW11bVVwZGF0ZVBlcmlvZFwiLFQsLTEpO2Y9UyhiLFwiYXZhaWxhYmlsaXR5U3RhcnRUaW1lXCIsTWMpO2M9UyhiLFwidGltZVNoaWZ0QnVmZmVyRGVwdGhcIixUKTt2YXIgbD1TKGIsXCJzdWdnZXN0ZWRQcmVzZW50YXRpb25EZWxheVwiLFQpLGQ9UyhiLFwibWF4U2VnbWVudER1cmF0aW9uXCIsVCksaDthLmI/XG5oPWEuYi5wcmVzZW50YXRpb25UaW1lbGluZToobnVsbCE9ZiYmKGYrPW51bGwhPWw/bDo1KSxoPW5ldyBwYShmKSk7dmFyIGU9R2QoYSx7cHJlc2VudGF0aW9uVGltZWxpbmU6aCxCOm51bGwsQzpudWxsLHY6bnVsbCxqOm51bGwsYmFuZHdpZHRoOnZvaWQgMH0sZSxiKSxwPWUucGVyaW9kcztoLmE9ZS5kdXJhdGlvbnx8TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO2guYz1udWxsIT1jP2M6TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO2guYj1NYXRoLm1heChoLmIsZHx8MSk7aWYoYS5iKXJldHVybiBQcm9taXNlLnJlc29sdmUoKTtiPVIoYixcIlVUQ1RpbWluZ1wiKTtyZXR1cm4gSGQoYSxiLGguYWEoKSkudGhlbihmdW5jdGlvbihhKXt0aGlzLmEmJihoLmc9YSx0aGlzLmI9e3ByZXNlbnRhdGlvblRpbWVsaW5lOmgscGVyaW9kczpwLG1pbkJ1ZmZlclRpbWU6Z3x8MH0pfS5iaW5kKGEpKX1cbmZ1bmN0aW9uIEdkKGEsYixjLGQpe3ZhciBlPVMoZCxcIm1lZGlhUHJlc2VudGF0aW9uRHVyYXRpb25cIixUKSxmPVtdLGc9MDtkPVIoZCxcIlBlcmlvZFwiKTtmb3IodmFyIGw9MDtsPGQubGVuZ3RoO2wrKyl7dmFyIGg9ZFtsXSxnPVMoaCxcInN0YXJ0XCIsVCxnKSxwPVMoaCxcImR1cmF0aW9uXCIsVCk7aWYobnVsbD09cClpZihsKzEhPWQubGVuZ3RoKXt2YXIgcT1TKGRbbCsxXSxcInN0YXJ0XCIsVCk7bnVsbCE9cSYmKHA9cS1nKX1lbHNlIG51bGwhPWUmJihwPWUtZyk7dmFyIHE9YSx0PWIsaD17c3RhcnQ6ZyxkdXJhdGlvbjpwLG5vZGU6aH07dC5CPUlkKGgubm9kZSxudWxsLGMpO3QuQz1oO3QuQi5pZHx8KHQuQi5pZD1cIl9fc2hha2FfcGVyaW9kX1wiK2guc3RhcnQpO3E9UihoLm5vZGUsXCJBZGFwdGF0aW9uU2V0XCIpLm1hcChxLm1iLmJpbmQocSx0KSk7aWYoMD09cS5sZW5ndGgpdGhyb3cgbmV3IHooNCw0MDA0KTtxPUpkKHEpO2g9e3N0YXJ0VGltZTpoLnN0YXJ0LHN0cmVhbVNldHM6cX07Zi5wdXNoKGgpO1xucT1iLkIuaWQ7YS5oLmV2ZXJ5KGViKHEpKSYmKGEubChoKSxhLmgucHVzaChxKSxhLmImJmEuYi5wZXJpb2RzLnB1c2goaCkpO2lmKG51bGw9PXApe2c9bnVsbDticmVha31nKz1wfXJldHVybiBudWxsIT1lP3twZXJpb2RzOmYsZHVyYXRpb246ZX06e3BlcmlvZHM6ZixkdXJhdGlvbjpnfX1cbmsubWI9ZnVuY3Rpb24oYSxiKXthLnY9SWQoYixhLkIsbnVsbCk7YS52LmNvbnRlbnRUeXBlfHwoYS52LmNvbnRlbnRUeXBlPWEudi5taW1lVHlwZS5zcGxpdChcIi9cIilbMF0pO3ZhciBjPSExLGQ9S2MoYixcIlJvbGVcIiksZT12b2lkIDA7XCJ0ZXh0XCI9PWEudi5jb250ZW50VHlwZSYmKGU9XCJzdWJ0aXRsZVwiKTtpZihkKXt2YXIgZj1kLmdldEF0dHJpYnV0ZShcInNjaGVtZUlkVXJpXCIpO2lmKG51bGw9PWZ8fFwidXJuOm1wZWc6ZGFzaDpyb2xlOjIwMTFcIj09Zilzd2l0Y2goZD1kLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpLGQpe2Nhc2UgXCJtYWluXCI6Yz0hMDticmVhaztjYXNlIFwiY2FwdGlvblwiOmNhc2UgXCJzdWJ0aXRsZVwiOmU9ZH19dmFyIGc9W107UihiLFwiU3VwcGxlbWVudGFsUHJvcGVydHlcIikuZm9yRWFjaChmdW5jdGlvbihhKXtcImh0dHA6Ly9kYXNoaWYub3JnL2Rlc2NyaXB0b3IvQWRhcHRhdGlvblNldFN3aXRjaGluZ1wiPT1hLmdldEF0dHJpYnV0ZShcInNjaGVtZUlkVVJJXCIpJiYoYT1hLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpKSYmXG5nLnB1c2guYXBwbHkoZyxhLnNwbGl0KFwiLFwiKSl9KTtkPVIoYixcIkNvbnRlbnRQcm90ZWN0aW9uXCIpO2Q9U2MoZCx0aGlzLmMuZGFzaC5jdXN0b21TY2hlbWUpO2U9UihiLFwiUmVwcmVzZW50YXRpb25cIikubWFwKHRoaXMubmIuYmluZCh0aGlzLGEsZCxlKSk7aWYoMD09ZS5sZW5ndGgpdGhyb3cgbmV3IHooNCw0MDAzKTthLnYuY29udGVudFR5cGV8fChhLnYuY29udGVudFR5cGU9ZVswXS5taW1lVHlwZS5zcGxpdChcIi9cIilbMF0pO3JldHVybntpZDphLnYuaWR8fFwiX19mYWtlX19cIit0aGlzLnUrKyxjb250ZW50VHlwZTphLnYuY29udGVudFR5cGUsbGFuZ3VhZ2U6bmIoYi5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpfHxcInVuZFwiKSxXYTpjLHN0cmVhbXM6ZSxkcm1JbmZvczpkLmRybUluZm9zLEhiOmd9fTtcbmsubmI9ZnVuY3Rpb24oYSxiLGMsZCl7YS5qPUlkKGQsYS52LG51bGwpO2EuYmFuZHdpZHRoPVMoZCxcImJhbmR3aWR0aFwiLFBjKXx8dm9pZCAwO1widGV4dFwiIT1hLmouY29udGVudFR5cGUmJktkKGEuaik7dmFyIGU7ZT10aGlzLnFiLmJpbmQodGhpcyk7aWYoYS5qLmhhKWU9cmQoYSxlKTtlbHNlIGlmKGEuai5TKWU9dWQoYSx0aGlzLmkpO2Vsc2UgaWYoYS5qLmlhKWU9eGQoYSxlLHRoaXMuaSwhIXRoaXMuYik7ZWxzZXt2YXIgZj1hLmouRyxnPWEuQy5kdXJhdGlvbnx8MDtlPXtjcmVhdGVTZWdtZW50SW5kZXg6UHJvbWlzZS5yZXNvbHZlLmJpbmQoUHJvbWlzZSksZmluZFNlZ21lbnRQb3NpdGlvbjpmdW5jdGlvbihhKXtyZXR1cm4gMDw9YSYmYTxnPzE6bnVsbH0sZ2V0U2VnbWVudFJlZmVyZW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gMSE9YT9udWxsOm5ldyB3KDEsMCxnLGYsMCxudWxsKX0saW5pdFNlZ21lbnRSZWZlcmVuY2U6bnVsbCxwcmVzZW50YXRpb25UaW1lT2Zmc2V0OjB9fWQ9XG5SKGQsXCJDb250ZW50UHJvdGVjdGlvblwiKTtkPVhjKGQsdGhpcy5jLmRhc2guY3VzdG9tU2NoZW1lLGIpO3JldHVybntpZDp0aGlzLnUrKyxjcmVhdGVTZWdtZW50SW5kZXg6ZS5jcmVhdGVTZWdtZW50SW5kZXgsZmluZFNlZ21lbnRQb3NpdGlvbjplLmZpbmRTZWdtZW50UG9zaXRpb24sZ2V0U2VnbWVudFJlZmVyZW5jZTplLmdldFNlZ21lbnRSZWZlcmVuY2UsaW5pdFNlZ21lbnRSZWZlcmVuY2U6ZS5pbml0U2VnbWVudFJlZmVyZW5jZSxwcmVzZW50YXRpb25UaW1lT2Zmc2V0OmUucHJlc2VudGF0aW9uVGltZU9mZnNldCxtaW1lVHlwZTphLmoubWltZVR5cGUsY29kZWNzOmEuai51YSxiYW5kd2lkdGg6YS5iYW5kd2lkdGgsd2lkdGg6YS5qLndpZHRoLGhlaWdodDphLmouaGVpZ2h0LGtpbmQ6YyxlbmNyeXB0ZWQ6MDxiLmRybUluZm9zLmxlbmd0aCxrZXlJZDpkLGFsbG93ZWRCeUFwcGxpY2F0aW9uOiEwLGFsbG93ZWRCeUtleVN5c3RlbTohMH19O1xuay5FYj1mdW5jdGlvbigpe3RoaXMuZj1udWxsO3ZhciBhPURhdGUubm93KCk7RGQodGhpcykudGhlbihmdW5jdGlvbigpe3RoaXMuYSYmRWQodGhpcywoRGF0ZS5ub3coKS1hKS8xRTMpfS5iaW5kKHRoaXMpKVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe3RoaXMubShhKTt0aGlzLmEmJkVkKHRoaXMsMCl9LmJpbmQodGhpcykpfTtmdW5jdGlvbiBFZChhLGIpezA+YS5vfHwoYS5mPXdpbmRvdy5zZXRUaW1lb3V0KGEuRWIuYmluZChhKSwxRTMqTWF0aC5tYXgoTWF0aC5tYXgoMyxhLm8pLWIsMCkpKX1cbmZ1bmN0aW9uIElkKGEsYixjKXtiPWJ8fHtjb250ZW50VHlwZTpcIlwiLG1pbWVUeXBlOlwiXCIsdWE6XCJcIn07Yz1jfHxiLkc7dmFyIGQ9UihhLFwiQmFzZVVSTFwiKS5tYXAoTGMpO3JldHVybntHOlcoYyxkKSxoYTpLYyhhLFwiU2VnbWVudEJhc2VcIil8fGIuaGEsUzpLYyhhLFwiU2VnbWVudExpc3RcIil8fGIuUyxpYTpLYyhhLFwiU2VnbWVudFRlbXBsYXRlXCIpfHxiLmlhLHdpZHRoOlMoYSxcIndpZHRoXCIsUWMpfHxiLndpZHRoLGhlaWdodDpTKGEsXCJoZWlnaHRcIixRYyl8fGIuaGVpZ2h0LGNvbnRlbnRUeXBlOmEuZ2V0QXR0cmlidXRlKFwiY29udGVudFR5cGVcIil8fGIuY29udGVudFR5cGUsbWltZVR5cGU6YS5nZXRBdHRyaWJ1dGUoXCJtaW1lVHlwZVwiKXx8Yi5taW1lVHlwZSx1YTphLmdldEF0dHJpYnV0ZShcImNvZGVjc1wiKXx8Yi51YSxpZDphLmdldEF0dHJpYnV0ZShcImlkXCIpfX1cbmZ1bmN0aW9uIEpkKGEpe3ZhciBiPXt9O2EuZm9yRWFjaChmdW5jdGlvbihhKXtiW2EuaWRdPVthXX0pO2EuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYz1iW2EuaWRdO2EuSGIuZm9yRWFjaChmdW5jdGlvbihhKXsoYT1iW2FdKSYmYSE9YyYmKGMucHVzaC5hcHBseShjLGEpLGEuZm9yRWFjaChmdW5jdGlvbihhKXtiW2EuaWRdPWN9KSl9KX0pO3ZhciBjPVtdLGQ9W107SihiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2lmKCEoMDw9ZC5pbmRleE9mKGEpKSl7ZC5wdXNoKGEpO3ZhciBiPW5ldyBMO2EuZm9yRWFjaChmdW5jdGlvbihhKXtiLnB1c2goYS5jb250ZW50VHlwZXx8XCJcIixhKX0pO2Iua2V5cygpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGQ9bmV3IEw7Yi5nZXQoYSkuZm9yRWFjaChmdW5jdGlvbihhKXtkLnB1c2goYS5sYW5ndWFnZSxhKX0pO2Qua2V5cygpLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGU9ZC5nZXQoYik7Yj17bGFuZ3VhZ2U6Yix0eXBlOmEscHJpbWFyeTplLnNvbWUoZnVuY3Rpb24oYSl7cmV0dXJuIGEuV2F9KSxcbmRybUluZm9zOmUubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLmRybUluZm9zfSkucmVkdWNlKGNiLFtdKSxzdHJlYW1zOmUubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnN0cmVhbXN9KS5yZWR1Y2UoY2IsW10pfTtjLnB1c2goYil9KX0pfX0pO3JldHVybiBjfWZ1bmN0aW9uIEtkKGEpe3ZhciBiO2I9MCsoYS5oYT8xOjApO2IrPWEuUz8xOjA7Yis9YS5pYT8xOjA7aWYoMD09Yil0aHJvdyBuZXcgeig0LDQwMDIpOzEhPWImJihhLmhhJiYoYS5TPW51bGwpLGEuaWE9bnVsbCl9XG5mdW5jdGlvbiBMZChhLGIsYyl7Yj1rYyhbYl0sYS5jLnJldHJ5UGFyYW1ldGVycyk7Yi5tZXRob2Q9YztyZXR1cm4gYS5hLnJlcXVlc3QoMCxiKS50aGVuKGZ1bmN0aW9uKGEpe2lmKFwiSEVBRFwiPT1jKXtpZighYS5oZWFkZXJzfHwhYS5oZWFkZXJzLmRhdGUpcmV0dXJuIDA7YT1hLmhlYWRlcnMuZGF0ZX1lbHNlIGE9VGIoYS5kYXRhKTthPURhdGUucGFyc2UoYSk7cmV0dXJuIGlzTmFOKGEpPzA6YS1EYXRlLm5vdygpfSl9XG5mdW5jdGlvbiBIZChhLGIsYyl7Yj1iLm1hcChmdW5jdGlvbihhKXtyZXR1cm57c2NoZW1lOmEuZ2V0QXR0cmlidXRlKFwic2NoZW1lSWRVcmlcIiksdmFsdWU6YS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKX19KTt2YXIgZD1hLmMuZGFzaC5jbG9ja1N5bmNVcmk7YyYmIWIubGVuZ3RoJiZkJiZiLnB1c2goe3NjaGVtZTpcInVybjptcGVnOmRhc2g6dXRjOmh0dHAtaGVhZDoyMDE0XCIsdmFsdWU6ZH0pO3JldHVybiBiYihiLGZ1bmN0aW9uKGEpe3ZhciBiPWEudmFsdWU7c3dpdGNoKGEuc2NoZW1lKXtjYXNlIFwidXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC1oZWFkOjIwMTRcIjpjYXNlIFwidXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC1oZWFkOjIwMTJcIjpyZXR1cm4gTGQodGhpcyxiLFwiSEVBRFwiKTtjYXNlIFwidXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC14c2RhdGU6MjAxNFwiOmNhc2UgXCJ1cm46bXBlZzpkYXNoOnV0YzpodHRwLWlzbzoyMDE0XCI6Y2FzZSBcInVybjptcGVnOmRhc2g6dXRjOmh0dHAteHNkYXRlOjIwMTJcIjpjYXNlIFwidXJuOm1wZWc6ZGFzaDp1dGM6aHR0cC1pc286MjAxMlwiOnJldHVybiBMZCh0aGlzLFxuYixcIkdFVFwiKTtjYXNlIFwidXJuOm1wZWc6ZGFzaDp1dGM6ZGlyZWN0OjIwMTRcIjpjYXNlIFwidXJuOm1wZWc6ZGFzaDp1dGM6ZGlyZWN0OjIwMTJcIjpyZXR1cm4gYT1EYXRlLnBhcnNlKGIpLGlzTmFOKGEpPzA6YS1EYXRlLm5vdygpO2Nhc2UgXCJ1cm46bXBlZzpkYXNoOnV0YzpodHRwLW50cDoyMDE0XCI6Y2FzZSBcInVybjptcGVnOmRhc2g6dXRjOm50cDoyMDE0XCI6Y2FzZSBcInVybjptcGVnOmRhc2g6dXRjOnNudHA6MjAxNFwiOnJldHVybiBQcm9taXNlLnJlamVjdCgpO2RlZmF1bHQ6cmV0dXJuIFByb21pc2UucmVqZWN0KCl9fS5iaW5kKGEpKVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7cmV0dXJuIDB9KX1rLnFiPWZ1bmN0aW9uKGEsYixjKXthPWtjKGEsdGhpcy5jLnJldHJ5UGFyYW1ldGVycyk7bnVsbCE9YiYmKGEuaGVhZGVycy5SYW5nZT1cImJ5dGVzPVwiK2IrXCItXCIrKG51bGwhPWM/YzpcIlwiKSk7cmV0dXJuIHRoaXMuYS5yZXF1ZXN0KDEsYSkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gYS5kYXRhfSl9O1xubmEubXBkPUNkO21hW1wiYXBwbGljYXRpb24vZGFzaCt4bWxcIl09Q2Q7ZnVuY3Rpb24gTWQoYSxiLGMsZCxlLGYsZyxsLGgpe3RoaXMuaD1hO3RoaXMuYz1iO3RoaXMuUj1jO3RoaXMuYT1kO3RoaXMuTz1lO3RoaXMudT1mO3RoaXMubT1nO3RoaXMudz1sfHxudWxsO3RoaXMuQT1ofHxudWxsO3RoaXMubD1udWxsO3RoaXMuRj1Qcm9taXNlLnJlc29sdmUoKTt0aGlzLmc9W107dGhpcy5pPXt9O3RoaXMuYj17fTt0aGlzLmY9dGhpcy5vPSExfU1kLnByb3RvdHlwZS5zPWZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIHRoaXMuYilOZCh0aGlzLmJbYV0pO3RoaXMubD10aGlzLmI9dGhpcy5pPXRoaXMuZz10aGlzLkE9dGhpcy53PXRoaXMubT10aGlzLnU9dGhpcy5PPXRoaXMuRj10aGlzLmE9dGhpcy5SPXRoaXMuYz10aGlzLmg9bnVsbDt0aGlzLmY9ITA7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpfTtNZC5wcm90b3R5cGUuY29uZmlndXJlPWZ1bmN0aW9uKGEpe3RoaXMubD1hO3RoaXMuaC5pPU1hdGgubWF4KHRoaXMuYS5taW5CdWZmZXJUaW1lfHwwLHRoaXMubC5yZWJ1ZmZlcmluZ0dvYWwpfTtcbk1kLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5PKHRoaXMuYS5wZXJpb2RzW09kKHRoaXMsdmIodGhpcy5oKSldKTtyZXR1cm4gYSYmMCE9T2JqZWN0LmtleXMoYSkubGVuZ3RoP1BkKHRoaXMsYSkudGhlbihmdW5jdGlvbigpe3RoaXMudyYmdGhpcy53KCl9LmJpbmQodGhpcykpOlByb21pc2UucmVqZWN0KG5ldyB6KDUsNTAwNSkpfTtmdW5jdGlvbiBRZChhKXtyZXR1cm4gYS5hLnBlcmlvZHNbT2QoYSx2YihhLmgpKV19ZnVuY3Rpb24gUmQoYSl7cmV0dXJuIHBiKGEuYixmdW5jdGlvbihhKXtyZXR1cm4gYS5zdHJlYW19KX1mdW5jdGlvbiBTZChhLGIpe3ZhciBjPXt9O2MudGV4dD1iO3JldHVybiBQZChhLGMpfVxuZnVuY3Rpb24gVGQoYSxiLGMsZCl7aWYoYj1hLmJbYl0pe3ZhciBlPWEuZ1tVZChhLGMpXTtlJiZlLmRhJiYoZT1hLmlbYy5pZF0pJiZlLmRhJiZiLnN0cmVhbSE9YyYmKGIuc3RyZWFtPWMsYi55YT0hMCwhZHx8Yi5QfHxiLlV8fChiLmJhP2IuUD0hMDooTmQoYiksVmQoYSxiKSkpKX19XG5mdW5jdGlvbiBQZChhLGIpe3ZhciBjPU9kKGEsdmIoYS5oKSksZD1wYihiLGZ1bmN0aW9uKGEpe3JldHVybiBhLm1pbWVUeXBlKyhhLmNvZGVjcz8nOyBjb2RlY3M9XCInK2EuY29kZWNzKydcIic6XCJcIil9KTthLmMuaW5pdChkKTtXZChhKTtkPUooYik7cmV0dXJuIFhkKGEsZCkudGhlbihmdW5jdGlvbigpe2Zvcih2YXIgYSBpbiBiKXt2YXIgZD1iW2FdO3RoaXMuYlthXXx8KHRoaXMuYlthXT17c3RyZWFtOmQsdHlwZTphLFc6bnVsbCxKOm51bGwseWE6ITAsZ2E6ITEsb2E6YyxlbmRPZlN0cmVhbTohMSxiYTohMSxUOm51bGwsUDohMSxVOiExfSxZZCh0aGlzLHRoaXMuYlthXSwwKSl9fS5iaW5kKGEpKX1cbmZ1bmN0aW9uIFpkKGEsYil7dmFyIGM9YS5nW2JdO2lmKGMpcmV0dXJuIGMuRDtjPXtEOm5ldyBPLGRhOiExfTthLmdbYl09Yzt2YXIgZD1hLmEucGVyaW9kc1tiXS5zdHJlYW1TZXRzLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5zdHJlYW1zfSkucmVkdWNlKGNiLFtdKTthLkY9YS5GLnRoZW4oZnVuY3Rpb24oKXtpZighdGhpcy5mKXJldHVybiBYZCh0aGlzLGQpfS5iaW5kKGEpKS50aGVuKGZ1bmN0aW9uKCl7dGhpcy5mfHwodGhpcy5nW2JdLkQucmVzb2x2ZSgpLHRoaXMuZ1tiXS5kYT0hMCl9LmJpbmQoYSkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7dGhpcy5mfHwodGhpcy5nW2JdLkQucmVqZWN0KCksZGVsZXRlIHRoaXMuZ1tiXSx0aGlzLm0oYSkpfS5iaW5kKGEpKTtyZXR1cm4gYy5EfVxuZnVuY3Rpb24gWGQoYSxiKXtmb3IodmFyIGM9W10sZD0wO2Q8Yi5sZW5ndGg7KytkKXt2YXIgZT1iW2RdLGY9YS5pW2UuaWRdO2Y/Yy5wdXNoKGYuRCk6KGEuaVtlLmlkXT17RDpuZXcgTyxkYTohMX0sYy5wdXNoKGUuY3JlYXRlU2VnbWVudEluZGV4KCkpKX1yZXR1cm4gUHJvbWlzZS5hbGwoYykudGhlbihmdW5jdGlvbigpe2lmKCF0aGlzLmYpZm9yKHZhciBhPTA7YTxiLmxlbmd0aDsrK2Epe3ZhciBjPXRoaXMuaVtiW2FdLmlkXTtjLmRhfHwoYy5ELnJlc29sdmUoKSxjLmRhPSEwKX19LmJpbmQoYSkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7aWYoIXRoaXMuZilyZXR1cm4gdGhpcy5pW2UuaWRdLkQucmVqZWN0KCksZGVsZXRlIHRoaXMuaVtlLmlkXSxQcm9taXNlLnJlamVjdChhKX0uYmluZChhKSl9XG5mdW5jdGlvbiBXZChhKXt2YXIgYj1hLmEucHJlc2VudGF0aW9uVGltZWxpbmUuYTtiPE51bWJlci5QT1NJVElWRV9JTkZJTklUWT9PYihhLmMsYik6T2IoYS5jLE1hdGgucG93KDIsMzIpKX1NZC5wcm90b3R5cGUuJD1mdW5jdGlvbihhKXtpZighdGhpcy5mJiYhYS5iYSYmbnVsbCE9YS5UJiYhYS5VKWlmKGEuVD1udWxsLGEuUClWZCh0aGlzLGEpO2Vsc2V7dHJ5e3ZhciBiPSRkKHRoaXMsYSk7bnVsbCE9YiYmWWQodGhpcyxhLGIpfWNhdGNoKGMpe3RoaXMubShjKTtyZXR1cm59Yj1KKHRoaXMuYik7eWIodGhpcy5oLGIuc29tZShmdW5jdGlvbihhKXtyZXR1cm4gYS5nYX0pKTthZSh0aGlzLGEpO2IuZXZlcnkoZnVuY3Rpb24oYSl7cmV0dXJuIGEuZW5kT2ZTdHJlYW19KSYmdGhpcy5jLmVuZE9mU3RyZWFtKCl9fTtcbmZ1bmN0aW9uICRkKGEsYil7dmFyIGM9dmIoYS5oKSxkPUZiKGEuYyxiLnR5cGUsYyksZT1NYXRoLm1heChhLmEubWluQnVmZmVyVGltZXx8MCxhLmwucmVidWZmZXJpbmdHb2FsKTtpZihkPj1NYXRoLm1heChlLGEubC5idWZmZXJpbmdHb2FsKSlyZXR1cm4gYi5nYT0hMSwuNTt2YXIgZj1hLmMsZz1iLnR5cGU7Zj1cInRleHRcIj09Zz9mLmIuYTooZj1mLmNbZ10uYnVmZmVyZWQpP2YubGVuZ3RoP2YuZW5kKGYubGVuZ3RoLTEpOm51bGw6bnVsbDtpZigwPT1kJiZudWxsPT1mKXtpZihudWxsIT1iLld8fGIuSil0aHJvdyBuZXcgeig1LDVFMyxiLnR5cGUpO2Y9Y31lbHNle2lmKG51bGw9PWIuV3x8bnVsbD09Yi5KKXRocm93IG5ldyB6KDUsNUUzLGIudHlwZSk7Zj1hLmEucGVyaW9kc1tVZChhLGIuVyldLnN0YXJ0VGltZStiLkouYX1pZihmPj1hLmEucHJlc2VudGF0aW9uVGltZWxpbmUuYSlyZXR1cm4gYi5nYT0hMSxiLmVuZE9mU3RyZWFtPSEwLG51bGw7Yi5lbmRPZlN0cmVhbT0hMTshYS5vJiZcbmQ8ZXx8MT49ZD9iLmdhPSEwOmQ+PWUmJihiLmdhPSExKTtkPVVkKGEsYi5zdHJlYW0pO2U9T2QoYSxmKTtpZihlIT1kKXJldHVybiBiLm9hPWUsbnVsbDtiLkomJmIuc3RyZWFtPT1iLlc/KGU9Yi5KLnBvc2l0aW9uKzEsZT1iZShhLGIsZCxlKSk6KGU9Yi5KP2Iuc3RyZWFtLmZpbmRTZWdtZW50UG9zaXRpb24oTWF0aC5tYXgoMCxhLmEucGVyaW9kc1tVZChhLGIuVyldLnN0YXJ0VGltZStiLkouYS1hLmEucGVyaW9kc1tkXS5zdGFydFRpbWUpKTpiLnN0cmVhbS5maW5kU2VnbWVudFBvc2l0aW9uKE1hdGgubWF4KDAsYy1hLmEucGVyaW9kc1tkXS5zdGFydFRpbWUpKSxlPW51bGw9PWU/bnVsbDpiZShhLGIsZCxNYXRoLm1heCgwLGUtMSkpfHxiZShhLGIsZCxlKSk7aWYoIWUpcmV0dXJuIDE7Y2UoYSxiLGMsZCxlKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGJlKGEsYixjLGQpe2M9YS5hLnBlcmlvZHNbY107Yj1iLnN0cmVhbS5nZXRTZWdtZW50UmVmZXJlbmNlKGQpO2lmKCFiKXJldHVybiBudWxsO2E9YS5hLnByZXNlbnRhdGlvblRpbWVsaW5lO2Q9bihhKTtyZXR1cm4gYy5zdGFydFRpbWUrYi5hPHNhKGEpfHxjLnN0YXJ0VGltZStiLnN0YXJ0VGltZT5kP251bGw6Yn1cbmZ1bmN0aW9uIGNlKGEsYixjLGQsZSl7dmFyIGY9Yi5zdHJlYW0sZz1hLmEucGVyaW9kc1tkKzFdLGw9bnVsbCxsPWc/Zy5zdGFydFRpbWU6YS5hLnByZXNlbnRhdGlvblRpbWVsaW5lLmE7ZD1kZShhLGIsZCxsKTtiLmJhPSEwO2IueWE9ITE7Zz1mZShhLGUpO1Byb21pc2UuYWxsKFtkLGddKS50aGVuKGZ1bmN0aW9uKGEpe2lmKCF0aGlzLmYpcmV0dXJuIGdlKHRoaXMsYixjLGYsZSxhWzFdKX0uYmluZChhKSkudGhlbihmdW5jdGlvbigpe2IuYmE9ITE7WWQodGhpcyxiLDApO3RoaXMuZnx8aGUodGhpcyxmKX0uYmluZChhKSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXt0aGlzLmZ8fHRoaXMubShhKX0uYmluZChhKSl9XG5mdW5jdGlvbiBkZShhLGIsYyxkKXtpZighYi55YSlyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7Yz1LYihhLmMsYi50eXBlLGEuYS5wZXJpb2RzW2NdLnN0YXJ0VGltZS1iLnN0cmVhbS5wcmVzZW50YXRpb25UaW1lT2Zmc2V0KTtkPW51bGwhPWQ/TWIoYS5jLGIudHlwZSxkKTpQcm9taXNlLnJlc29sdmUoKTtpZighYi5zdHJlYW0uaW5pdFNlZ21lbnRSZWZlcmVuY2UpcmV0dXJuIFByb21pc2UuYWxsKFtjLGRdKTthPWZlKGEsYi5zdHJlYW0uaW5pdFNlZ21lbnRSZWZlcmVuY2UpLnRoZW4oZnVuY3Rpb24oYSl7aWYoIXRoaXMuZilyZXR1cm4gR2IodGhpcy5jLGIudHlwZSxhLG51bGwsbnVsbCl9LmJpbmQoYSkpO3JldHVybiBQcm9taXNlLmFsbChbYyxkLGFdKX1cbmZ1bmN0aW9uIGdlKGEsYixjLGQsZSxmKXtyZXR1cm4gaWUoYSxiLGMpLnRoZW4oZnVuY3Rpb24oKXtpZighdGhpcy5mKXJldHVybiBHYih0aGlzLmMsYi50eXBlLGYsZS5zdGFydFRpbWUsZS5hKX0uYmluZChhKSkudGhlbihmdW5jdGlvbigpe2lmKCF0aGlzLmYpcmV0dXJuIGIuVz1kLGIuSj1lLFByb21pc2UucmVzb2x2ZSgpfS5iaW5kKGEpKX1mdW5jdGlvbiBpZShhLGIsYyl7dmFyIGQ9RWIoYS5jLGIudHlwZSk7aWYobnVsbD09ZClyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7Yz1jLWQtYS5sLmJ1ZmZlckJlaGluZDtyZXR1cm4gMD49Yz9Qcm9taXNlLnJlc29sdmUoKTpJYihhLmMsYi50eXBlLGQsZCtjKS50aGVuKGZ1bmN0aW9uKCl7fS5iaW5kKGEpKX1cbmZ1bmN0aW9uIGhlKGEsYil7aWYoIWEubyYmKGEubz1KKGEuYikuZXZlcnkoZnVuY3Rpb24oYSl7cmV0dXJuIWEuUCYmIWEuVSYmYS5KfSksYS5vKSl7dmFyIGM9VWQoYSxiKTthLmdbY118fFpkKGEsYykudGhlbihmdW5jdGlvbigpe3RoaXMudSgpfS5iaW5kKGEpKVtcImNhdGNoXCJdKEcpO2ZvcihjPTA7YzxhLmEucGVyaW9kcy5sZW5ndGg7KytjKVpkKGEsYylbXCJjYXRjaFwiXShHKTthLkEmJmEuQSgpfX1cbmZ1bmN0aW9uIGFlKGEsYil7aWYoYi5vYSE9VWQoYSxiLnN0cmVhbSkpe3ZhciBjPWIub2EsZD1KKGEuYik7ZC5ldmVyeShmdW5jdGlvbihhKXtyZXR1cm4gYS5vYT09Y30pJiZkLmV2ZXJ5KGplKSYmWmQoYSxjKS50aGVuKGZ1bmN0aW9uKCl7aWYoIXRoaXMuZil7dmFyIGE9dGhpcy5PKHRoaXMuYS5wZXJpb2RzW2NdKSxiO2ZvcihiIGluIHRoaXMuYilpZighYVtiXSl7dGhpcy5tKG5ldyB6KDUsNTAwNSkpO3JldHVybn1mb3IoYiBpbiBhKWlmKCF0aGlzLmJbYl0pe3RoaXMubShuZXcgeig1LDUwMDUpKTtyZXR1cm59Zm9yKGIgaW4gdGhpcy5iKXtUZCh0aGlzLGIsYVtiXSk7dmFyIGQ9dGhpcy5iW2JdO2plKGQpJiZZZCh0aGlzLGQsMCl9dGhpcy51KCl9fS5iaW5kKGEpKVtcImNhdGNoXCJdKEcpfX1mdW5jdGlvbiBqZShhKXtyZXR1cm4hYS5iYSYmbnVsbD09YS5UJiYhYS5QJiYhYS5VfVxuZnVuY3Rpb24gT2QoYSxiKXtmb3IodmFyIGM9YS5hLnBlcmlvZHMubGVuZ3RoLTE7MDxjOy0tYylpZihiPj1hLmEucGVyaW9kc1tjXS5zdGFydFRpbWUpcmV0dXJuIGM7cmV0dXJuIDB9ZnVuY3Rpb24gVWQoYSxiKXtmb3IodmFyIGM9MDtjPGEuYS5wZXJpb2RzLmxlbmd0aDsrK2MpZm9yKHZhciBkPWEuYS5wZXJpb2RzW2NdLGU9MDtlPGQuc3RyZWFtU2V0cy5sZW5ndGg7KytlKWlmKDA8PWQuc3RyZWFtU2V0c1tlXS5zdHJlYW1zLmluZGV4T2YoYikpcmV0dXJuIGM7cmV0dXJuLTF9ZnVuY3Rpb24gZmUoYSxiKXt2YXIgYz1rYyhiLnVyaXMsYS5sLnJldHJ5UGFyYW1ldGVycyk7aWYoMCE9Yi5jfHxudWxsIT1iLmIpe3ZhciBkPVwiYnl0ZXM9XCIrYi5jK1wiLVwiO251bGwhPWIuYiYmKGQrPWIuYik7Yy5oZWFkZXJzLlJhbmdlPWR9cmV0dXJuIGEuUi5yZXF1ZXN0KDEsYykudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gYS5kYXRhfSl9XG5mdW5jdGlvbiBWZChhLGIpe2IuUD0hMTtiLlU9ITA7YS5jLmNsZWFyKGIudHlwZSkudGhlbihmdW5jdGlvbigpe3RoaXMuZnx8KGIuVz1udWxsLGIuSj1udWxsLGIuVT0hMSxZZCh0aGlzLGIsMCkpfS5iaW5kKGEpKX1mdW5jdGlvbiBZZChhLGIsYyl7Yi5UPXdpbmRvdy5zZXRUaW1lb3V0KGEuJC5iaW5kKGEsYiksMUUzKmMpfWZ1bmN0aW9uIE5kKGEpe251bGwhPWEuVCYmKHdpbmRvdy5jbGVhclRpbWVvdXQoYS5UKSxhLlQ9bnVsbCl9O0FkLmRhdGE9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGIpe3ZhciBjPWEuc3BsaXQoXCI6XCIpO2lmKDI+Yy5sZW5ndGh8fFwiZGF0YVwiIT1jWzBdKXRocm93IG5ldyB6KDEsMTAwNCxhKTtjPWMuc2xpY2UoMSkuam9pbihcIjpcIikuc3BsaXQoXCIsXCIpO2lmKDI+Yy5sZW5ndGgpdGhyb3cgbmV3IHooMSwxMDA0LGEpO3ZhciBkPWNbMF0sYz13aW5kb3cuZGVjb2RlVVJJQ29tcG9uZW50KGMuc2xpY2UoMSkuam9pbihcIixcIikpLGQ9ZC5zcGxpdChcIjtcIiksZT1udWxsOzE8ZC5sZW5ndGgmJihlPWRbMV0pO2lmKFwiYmFzZTY0XCI9PWUpYz1aYihjKS5idWZmZXI7ZWxzZXtpZihlKXRocm93IG5ldyB6KDEsMTAwNSxhKTtjPVViKGMpfWIoe3VyaTphLGRhdGE6YyxoZWFkZXJzOnt9fSl9KX07ZnVuY3Rpb24ga2UoYSxiKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYyxkKXt2YXIgZT1uZXcgWE1MSHR0cFJlcXVlc3Q7ZS5vcGVuKGIubWV0aG9kLGEsITApO2UucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjtlLnRpbWVvdXQ9Yi5yZXRyeVBhcmFtZXRlcnMudGltZW91dDtlLndpdGhDcmVkZW50aWFscz1iLmFsbG93Q3Jvc3NTaXRlQ3JlZGVudGlhbHM7ZS5vbmxvYWQ9ZnVuY3Rpb24oYil7Yj1iLnRhcmdldDtpZigyMDA8PWIuc3RhdHVzJiYyOTk+PWIuc3RhdHVzKXt2YXIgZT1iLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnNwbGl0KFwiXFxyXFxuXCIpLnJlZHVjZShmdW5jdGlvbihhLGIpe3ZhciBjPWIuc3BsaXQoXCI6IFwiKTthW2NbMF0udG9Mb3dlckNhc2UoKV09Yy5zbGljZSgxKS5qb2luKFwiOiBcIik7cmV0dXJuIGF9LHt9KTtiLnNiJiYoYT1iLnNiKTtjKHt1cmk6YSxkYXRhOmIucmVzcG9uc2UsaGVhZGVyczplfSl9ZWxzZXtlPW51bGw7dHJ5e2U9VGIoYi5yZXNwb25zZSl9Y2F0Y2goZil7fWQobmV3IHooMSxcbjEwMDEsYSxiLnN0YXR1cyxlKSl9fTtlLm9uZXJyb3I9ZnVuY3Rpb24oKXtkKG5ldyB6KDEsMTAwMixhKSl9O2Uub250aW1lb3V0PWZ1bmN0aW9uKCl7ZChuZXcgeigxLDEwMDMsYSkpfTtmb3IodmFyIGYgaW4gYi5oZWFkZXJzKWUuc2V0UmVxdWVzdEhlYWRlcihmLGIuaGVhZGVyc1tmXSk7ZS5zZW5kKGIuYm9keSl9KX1BZC5odHRwPWtlO0FkLmh0dHBzPWtlO2Z1bmN0aW9uIFooYSl7dGhpcy53PW5ldyBMO3RoaXMuYz1hO3RoaXMuaT1udWxsO3RoaXMudT1uZXcgTTt0aGlzLkVhPW5ldyBqYTt0aGlzLm09bmV3IFkodGhpcy5EYi5iaW5kKHRoaXMpKTt0aGlzLmY9dGhpcy5vPXRoaXMuYj10aGlzLmg9dGhpcy5sYT10aGlzLk89dGhpcy5BPXRoaXMuZz1udWxsO3RoaXMuT2E9MUU5O3RoaXMuc2E9ITE7dGhpcy5GPSEwO3RoaXMubmE9ITE7dGhpcy5sPXt9O3RoaXMuYT1sZSh0aGlzKTt0aGlzLlI9W107dGhpcy5rYT10aGlzLiQ9dGhpcy5tYT0wO3RoaXMubGE9bWUodGhpcyk7Zm9yKGE9MDthPHRoaXMuYy50ZXh0VHJhY2tzLmxlbmd0aDsrK2Epe3ZhciBiPXRoaXMuYy50ZXh0VHJhY2tzW2FdO2IubW9kZT1cImRpc2FibGVkXCI7XCJTaGFrYSBQbGF5ZXIgVGV4dFRyYWNrXCI9PWIubGFiZWwmJih0aGlzLmk9Yil9dGhpcy5pfHwodGhpcy5pPXRoaXMuYy5hZGRUZXh0VHJhY2soXCJzdWJ0aXRsZXNcIixcIlNoYWthIFBsYXllciBUZXh0VHJhY2tcIikpO3RoaXMuaS5tb2RlPVxuXCJoaWRkZW5cIjtOKHRoaXMudSx0aGlzLmMsXCJlcnJvclwiLHRoaXMuZ2IuYmluZCh0aGlzKSl9YmEoWik7bShcInNoYWthLlBsYXllclwiLFopO1oucHJvdG90eXBlLnM9ZnVuY3Rpb24oKXt2YXIgYT1Qcm9taXNlLmFsbChbbmUodGhpcyksdGhpcy51P3RoaXMudS5zKCk6bnVsbCx0aGlzLm0/dGhpcy5tLnMoKTpudWxsXSk7dGhpcy5hPXRoaXMubT10aGlzLkVhPXRoaXMudT10aGlzLmk9dGhpcy5jPW51bGw7cmV0dXJuIGF9O1oucHJvdG90eXBlLmRlc3Ryb3k9Wi5wcm90b3R5cGUucztaLnZlcnNpb249XCJ2Mi4wLjAtYmV0YTJcIjtaLnN1cHBvcnQ9ZnVuY3Rpb24oKXtpZih3aW5kb3cuUHJvbWlzZSYmd2luZG93LlVpbnQ4QXJyYXkmJkFycmF5LnByb3RvdHlwZS5mb3JFYWNoKXt2YXIgYT1vYSgpLGI9RGIoKTtyZXR1cm4gbWMoKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybnttYW5pZmVzdDphLG1lZGlhOmIsZHJtOmMsc3VwcG9ydGVkOmEuYmFzaWMmJmIuYmFzaWMmJmMuYmFzaWN9fSl9cmV0dXJue3RoZW46ZnVuY3Rpb24oYSl7YSh7c3VwcG9ydGVkOiExfSl9fX07XG5aLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1jO2M9UHJvbWlzZS5yZXNvbHZlKCk7dmFyIGU7ZHx8KGU9aWQobmV3IFUoYSkpLnNwbGl0KFwiL1wiKS5wb3AoKS5zcGxpdChcIi5cIiksMTxlLmxlbmd0aCYmKGU9ZS5wb3AoKS50b0xvd2VyQ2FzZSgpLGQ9bmFbZV0pKTtkfHwoYz1rYyhbYV0sdGhpcy5hLm1hbmlmZXN0LnJldHJ5UGFyYW1ldGVycyksYy5tZXRob2Q9XCJIRUFEXCIsYz10aGlzLm0ucmVxdWVzdCgwLGMpLnRoZW4oZnVuY3Rpb24oYil7KGI9Yi5oZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSYmKGI9Yi50b0xvd2VyQ2FzZSgpKTtkPW1hW2JdO2lmKCFkKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgeig0LDRFMyxhKSl9LGZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyB6KDQsNEUzLGEpKX0pKTtjPWMudGhlbihmdW5jdGlvbigpe3RoaXMubz1uZXcgZDt0aGlzLm8uY29uZmlndXJlKHRoaXMuYS5tYW5pZmVzdCk7cmV0dXJuIHRoaXMuby5zdGFydChhLFxudGhpcy5tLHRoaXMuQmEuYmluZCh0aGlzKSx0aGlzLmVhLmJpbmQodGhpcykpfS5iaW5kKHRoaXMpKS50aGVuKGZ1bmN0aW9uKGEpe3RoaXMuZj1hO3RoaXMua2E9RGF0ZS5ub3coKS8xRTN9LmJpbmQodGhpcykpO2U9UHJvbWlzZS5yZXNvbHZlKCk7dGhpcy5jLnNyYyYmKGU9dGhpcy5OYSgpKTt0aGlzLm5hPSEwO3JldHVybiBQcm9taXNlLmFsbChbZSxjXSkudGhlbihmdW5jdGlvbigpe3RoaXMuZz1uZXcgYmModGhpcy5tLHRoaXMuZWEuYmluZCh0aGlzKSx0aGlzLkJiLmJpbmQodGhpcykpO3RoaXMuZy5jb25maWd1cmUodGhpcy5hLmRybSk7cmV0dXJuIHRoaXMuZy5pbml0KHRoaXMuZiwhMSl9LmJpbmQodGhpcykpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLmYucGVyaW9kcy5mb3JFYWNoKHRoaXMuQmEuYmluZCh0aGlzKSk7cmV0dXJuIFByb21pc2UuYWxsKFtlYyh0aGlzLmcsdGhpcy5jKSx0aGlzLmxhXSl9LmJpbmQodGhpcykpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLmg9bmV3IHViKHRoaXMuYyxcbnRoaXMuZi5wcmVzZW50YXRpb25UaW1lbGluZSxNYXRoLm1heCh0aGlzLmYubWluQnVmZmVyVGltZXx8MCx0aGlzLmEuc3RyZWFtaW5nLnJlYnVmZmVyaW5nR29hbCksYnx8bnVsbCx0aGlzLnpiLmJpbmQodGhpcyksdGhpcy5DYi5iaW5kKHRoaXMpKTt0aGlzLk89bmV3IENiKHRoaXMuYyx0aGlzLkEsdGhpcy5pKTt0aGlzLmI9bmV3IE1kKHRoaXMuaCx0aGlzLk8sdGhpcy5tLHRoaXMuZix0aGlzLkFiLmJpbmQodGhpcyksdGhpcy5QYS5iaW5kKHRoaXMpLHRoaXMuZWEuYmluZCh0aGlzKSk7dGhpcy5iLmNvbmZpZ3VyZSh0aGlzLmEuc3RyZWFtaW5nKTtyZXR1cm4gdGhpcy5iLmluaXQoKX0uYmluZCh0aGlzKSkudGhlbihmdW5jdGlvbigpe3RoaXMuZi5wZXJpb2RzLmZvckVhY2godGhpcy5CYS5iaW5kKHRoaXMpKTtvZSh0aGlzKTtwZSh0aGlzKTt0aGlzLm5hPSExO3RoaXMuYS5hYnIubWFuYWdlci5pbml0KHRoaXMuQ2EuYmluZCh0aGlzKSl9LmJpbmQodGhpcykpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7dGhpcy5uYT1cbiExO3JldHVybiBQcm9taXNlLnJlamVjdChhKX0pfTtaLnByb3RvdHlwZS5sb2FkPVoucHJvdG90eXBlLmxvYWQ7ZnVuY3Rpb24gbWUoYSl7YS5BPW5ldyBNZWRpYVNvdXJjZTt2YXIgYj1uZXcgTztOKGEudSxhLkEsXCJzb3VyY2VvcGVuXCIsYi5yZXNvbHZlKTthLmMuc3JjPXdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGEuQSk7cmV0dXJuIGJ9XG5aLnByb3RvdHlwZS5jb25maWd1cmU9ZnVuY3Rpb24oYSl7dmFyIGI9YS5wcmVmZXJyZWRBdWRpb0xhbmd1YWdlP2EucHJlZmVycmVkQXVkaW9MYW5ndWFnZSE9PXRoaXMuYS5wcmVmZXJyZWRBdWRpb0xhbmd1YWdlOiExLGM9YS5wcmVmZXJyZWRUZXh0TGFuZ3VhZ2U/YS5wcmVmZXJyZWRUZXh0TGFuZ3VhZ2UhPT10aGlzLmEucHJlZmVycmVkVGV4dExhbmd1YWdlOiExO2EuYWJyJiZhLmFici5tYW5hZ2VyJiZhLmFici5tYW5hZ2VyIT10aGlzLmEuYWJyLm1hbmFnZXImJih0aGlzLmEuYWJyLm1hbmFnZXIuc3RvcCgpLGEuYWJyLm1hbmFnZXIuaW5pdCh0aGlzLkNhLmJpbmQodGhpcykpKTtxZSh0aGlzLHRoaXMuYSxhLGxlKHRoaXMpLFwiXCIpO3JlKHRoaXMsYixjKX07Wi5wcm90b3R5cGUuY29uZmlndXJlPVoucHJvdG90eXBlLmNvbmZpZ3VyZTtcbmZ1bmN0aW9uIHJlKGEsYixjKXthLm8mJmEuby5jb25maWd1cmUoYS5hLm1hbmlmZXN0KTthLmcmJmEuZy5jb25maWd1cmUoYS5hLmRybSk7aWYoYS5iKXthLmIuY29uZmlndXJlKGEuYS5zdHJlYW1pbmcpO2EuZi5wZXJpb2RzLmZvckVhY2goYS5GYS5iaW5kKGEpKTt2YXIgZD1zZShhLFFkKGEuYikpLGU9UmQoYS5iKSxkPXFiKGQsZnVuY3Rpb24oYSl7cmV0dXJuXCJhdWRpb1wiPT1hJiZifHxcInRleHRcIj09YSYmY3x8ZVthXSYmKCFlW2FdLmFsbG93ZWRCeUFwcGxpY2F0aW9ufHwhZVthXS5hbGxvd2VkQnlLZXlTeXN0ZW0pfSk7dGUoYSxkLCEwKX1hLmEuYWJyLmVuYWJsZWQmJiFhLkY/YS5hLmFici5tYW5hZ2VyLmVuYWJsZSgpOmEuYS5hYnIubWFuYWdlci5kaXNhYmxlKCk7YS5hLmFici5tYW5hZ2VyLnNldERlZmF1bHRFc3RpbWF0ZShhLmEuYWJyLmRlZmF1bHRCYW5kd2lkdGhFc3RpbWF0ZSl9XG5aLnByb3RvdHlwZS5nZXRDb25maWd1cmF0aW9uPWZ1bmN0aW9uKCl7dmFyIGE9bGUodGhpcyk7cWUodGhpcyxhLHRoaXMuYSxsZSh0aGlzKSxcIlwiKTtyZXR1cm4gYX07Wi5wcm90b3R5cGUuZ2V0Q29uZmlndXJhdGlvbj1aLnByb3RvdHlwZS5nZXRDb25maWd1cmF0aW9uO1xuWi5wcm90b3R5cGUucmI9ZnVuY3Rpb24oKXt2YXIgYT1sZSh0aGlzKSxiPWEucHJlZmVycmVkQXVkaW9MYW5ndWFnZT9hLnByZWZlcnJlZEF1ZGlvTGFuZ3VhZ2UhPT10aGlzLmEucHJlZmVycmVkQXVkaW9MYW5ndWFnZTohMSxjPWEucHJlZmVycmVkVGV4dExhbmd1YWdlP2EucHJlZmVycmVkVGV4dExhbmd1YWdlIT09dGhpcy5hLnByZWZlcnJlZFRleHRMYW5ndWFnZTohMTthLmFiciYmYS5hYnIubWFuYWdlciYmYS5hYnIubWFuYWdlciE9dGhpcy5hLmFici5tYW5hZ2VyJiYodGhpcy5hLmFici5tYW5hZ2VyLnN0b3AoKSxhLmFici5tYW5hZ2VyLmluaXQodGhpcy5DYS5iaW5kKHRoaXMpKSk7dGhpcy5hPWxlKHRoaXMpO3JlKHRoaXMsYixjKX07Wi5wcm90b3R5cGUucmVzZXRDb25maWd1cmF0aW9uPVoucHJvdG90eXBlLnJiO1oucHJvdG90eXBlLlRhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubX07Wi5wcm90b3R5cGUuZ2V0TmV0d29ya2luZ0VuZ2luZT1aLnByb3RvdHlwZS5UYTtcbloucHJvdG90eXBlLmFhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZj90aGlzLmYucHJlc2VudGF0aW9uVGltZWxpbmUuYWEoKTohMX07Wi5wcm90b3R5cGUuaXNMaXZlPVoucHJvdG90eXBlLmFhO1oucHJvdG90eXBlLnViPWZ1bmN0aW9uKCl7dmFyIGE9MCxiPTA7dGhpcy5mJiYoYj10aGlzLmYucHJlc2VudGF0aW9uVGltZWxpbmUsYT1zYShiKSxiPW4oYikpO3JldHVybntzdGFydDphLGVuZDpifX07Wi5wcm90b3R5cGUuc2Vla1JhbmdlPVoucHJvdG90eXBlLnViO1oucHJvdG90eXBlLlVhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2F9O1oucHJvdG90eXBlLmlzQnVmZmVyaW5nPVoucHJvdG90eXBlLlVhO1oucHJvdG90eXBlLk5hPWZ1bmN0aW9uKCl7cmV0dXJuIG5lKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLmxhPW1lKHRoaXMpfS5iaW5kKHRoaXMpKX07Wi5wcm90b3R5cGUudW5sb2FkPVoucHJvdG90eXBlLk5hO1xuWi5wcm90b3R5cGUudmE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oP3RoaXMuaC52YSgpOjB9O1oucHJvdG90eXBlLmdldFBsYXliYWNrUmF0ZT1aLnByb3RvdHlwZS52YTtaLnByb3RvdHlwZS5JYj1mdW5jdGlvbihhKXt0aGlzLmgmJnpiKHRoaXMuaCxhKX07Wi5wcm90b3R5cGUudHJpY2tQbGF5PVoucHJvdG90eXBlLkliO1oucHJvdG90eXBlLlFhPWZ1bmN0aW9uKCl7dGhpcy5oJiZ6Yih0aGlzLmgsMSl9O1oucHJvdG90eXBlLmNhbmNlbFRyaWNrUGxheT1aLnByb3RvdHlwZS5RYTtcbloucHJvdG90eXBlLmdldFRyYWNrcz1mdW5jdGlvbigpe2lmKCF0aGlzLmIpcmV0dXJuW107dmFyIGE9UmQodGhpcy5iKTtyZXR1cm4gUWQodGhpcy5iKS5zdHJlYW1TZXRzLm1hcChmdW5jdGlvbihiKXt2YXIgYz1hW2IudHlwZV07cmV0dXJuIGIuc3RyZWFtcy5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGEuYWxsb3dlZEJ5QXBwbGljYXRpb24mJmEuYWxsb3dlZEJ5S2V5U3lzdGVtfSkubWFwKGZ1bmN0aW9uKGEpe3JldHVybntpZDphLmlkLGFjdGl2ZTpjPT1hLHR5cGU6Yi50eXBlLGJhbmR3aWR0aDphLmJhbmR3aWR0aCxsYW5ndWFnZTpiLmxhbmd1YWdlLGtpbmQ6YS5raW5kfHxudWxsLHdpZHRoOmEud2lkdGh8fG51bGwsaGVpZ2h0OmEuaGVpZ2h0fHxudWxsfX0pfSkucmVkdWNlKGNiLFtdKX07Wi5wcm90b3R5cGUuZ2V0VHJhY2tzPVoucHJvdG90eXBlLmdldFRyYWNrcztcbloucHJvdG90eXBlLnZiPWZ1bmN0aW9uKGEsYil7aWYodGhpcy5iKXt2YXIgYztRZCh0aGlzLmIpLnN0cmVhbVNldHMuZm9yRWFjaChmdW5jdGlvbihiKXtiLnN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihiKXtiLmlkPT1hLmlkJiYoYz1iKX0pfSk7aWYoYyYmYy5hbGxvd2VkQnlBcHBsaWNhdGlvbiYmYy5hbGxvd2VkQnlLZXlTeXN0ZW0pe3RoaXMuUi5wdXNoKHt0aW1lc3RhbXA6RGF0ZS5ub3coKS8xRTMsaWQ6Yy5pZCx0eXBlOmEudHlwZSxmcm9tQWRhcHRhdGlvbjohMX0pO1widGV4dFwiIT1hLnR5cGUmJnRoaXMuY29uZmlndXJlKHthYnI6e2VuYWJsZWQ6ITF9fSk7dmFyIGQ9e307ZFthLnR5cGVdPWM7dGUodGhpcyxkLGIpfX19O1oucHJvdG90eXBlLnNlbGVjdFRyYWNrPVoucHJvdG90eXBlLnZiO1oucHJvdG90eXBlLlZhPWZ1bmN0aW9uKCl7cmV0dXJuXCJzaG93aW5nXCI9PXRoaXMuaS5tb2RlfTtaLnByb3RvdHlwZS5pc1RleHRUcmFja1Zpc2libGU9Wi5wcm90b3R5cGUuVmE7XG5aLnByb3RvdHlwZS54Yj1mdW5jdGlvbihhKXt0aGlzLmkubW9kZT1hP1wic2hvd2luZ1wiOlwiaGlkZGVuXCI7dWUodGhpcyl9O1oucHJvdG90eXBlLnNldFRleHRUcmFja1Zpc2liaWxpdHk9Wi5wcm90b3R5cGUueGI7XG5aLnByb3RvdHlwZS5nZXRTdGF0cz1mdW5jdGlvbigpe3ZlKHRoaXMpO3ZhciBhPXt9LGI9e30sYz10aGlzLmMmJnRoaXMuYy5nZXRWaWRlb1BsYXliYWNrUXVhbGl0eT90aGlzLmMuZ2V0VmlkZW9QbGF5YmFja1F1YWxpdHkoKTp7fTt0aGlzLmImJihiPVJkKHRoaXMuYiksYT1iLnZpZGVvfHx7fSxiPWIuYXVkaW98fHt9KTtyZXR1cm57d2lkdGg6YS53aWR0aHx8MCxoZWlnaHQ6YS5oZWlnaHR8fDAsc3RyZWFtQmFuZHdpZHRoOmEuYmFuZHdpZHRoK2IuYmFuZHdpZHRofHwwLGRlY29kZWRGcmFtZXM6TnVtYmVyKGMudG90YWxWaWRlb0ZyYW1lcyksZHJvcHBlZEZyYW1lczpOdW1iZXIoYy5kcm9wcGVkVmlkZW9GcmFtZXMpLGVzdGltYXRlZEJhbmR3aWR0aDp0aGlzLmEuYWJyLm1hbmFnZXIuZ2V0QmFuZHdpZHRoRXN0aW1hdGUoKSxwbGF5VGltZTp0aGlzLm1hLGJ1ZmZlcmluZ1RpbWU6dGhpcy4kLHN3aXRjaEhpc3Rvcnk6dGhpcy5SLnNsaWNlKDApfX07XG5aLnByb3RvdHlwZS5nZXRTdGF0cz1aLnByb3RvdHlwZS5nZXRTdGF0cztcbloucHJvdG90eXBlLmFkZFRleHRUcmFjaz1mdW5jdGlvbihhLGIsYyxkLGUpe2lmKCF0aGlzLmIpcmV0dXJuIFByb21pc2UucmVqZWN0KCk7Zm9yKHZhciBmPVFkKHRoaXMuYiksZyxsPTA7bDx0aGlzLmYucGVyaW9kcy5sZW5ndGg7bCsrKWlmKHRoaXMuZi5wZXJpb2RzW2xdPT1mKXtpZihsPT10aGlzLmYucGVyaW9kcy5sZW5ndGgtMSl7aWYoZz10aGlzLmYucHJlc2VudGF0aW9uVGltZWxpbmUuYS1mLnN0YXJ0VGltZSxnPT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpcmV0dXJuIFByb21pc2UucmVqZWN0KCl9ZWxzZSBnPXRoaXMuZi5wZXJpb2RzW2wrMV0uc3RhcnRUaW1lLWYuc3RhcnRUaW1lO2JyZWFrfXZhciBoPXtpZDp0aGlzLk9hKyssY3JlYXRlU2VnbWVudEluZGV4OlByb21pc2UucmVzb2x2ZS5iaW5kKFByb21pc2UpLGZpbmRTZWdtZW50UG9zaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gMX0sZ2V0U2VnbWVudFJlZmVyZW5jZTpmdW5jdGlvbihiKXtyZXR1cm4gMSE9Yj9udWxsOlxubmV3IHcoMSwwLGcsW2FdLDAsbnVsbCl9LGluaXRTZWdtZW50UmVmZXJlbmNlOm51bGwscHJlc2VudGF0aW9uVGltZU9mZnNldDowLG1pbWVUeXBlOmQsY29kZWNzOmV8fFwiXCIsYmFuZHdpZHRoOjAsa2luZDpjLGVuY3J5cHRlZDohMSxrZXlJZDpudWxsLGFsbG93ZWRCeUFwcGxpY2F0aW9uOiEwLGFsbG93ZWRCeUtleVN5c3RlbTohMH0scD17bGFuZ3VhZ2U6Yix0eXBlOlwidGV4dFwiLHByaW1hcnk6ITEsZHJtSW5mb3M6W10sc3RyZWFtczpbaF19O3JldHVybiBTZCh0aGlzLmIsaCkudGhlbihmdW5jdGlvbigpe2Yuc3RyZWFtU2V0cy5wdXNoKHApO3NlKHRoaXMsZikudGV4dD09aCYmdGUodGhpcyx7dGV4dDpofSk7dGhpcy5hLmFici5lbmFibGVkJiYhdGhpcy5GP3RoaXMuYS5hYnIubWFuYWdlci5lbmFibGUoKTp0aGlzLmEuYWJyLm1hbmFnZXIuZGlzYWJsZSgpO29lKHRoaXMpO3JldHVybntpZDpoLmlkLGFjdGl2ZTohMSx0eXBlOlwidGV4dFwiLGJhbmR3aWR0aDowLGxhbmd1YWdlOmIsXG5raW5kOmMsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbH19LmJpbmQodGhpcykpfTtaLnByb3RvdHlwZS5hZGRUZXh0VHJhY2s9Wi5wcm90b3R5cGUuYWRkVGV4dFRyYWNrO2Z1bmN0aW9uIG5lKGEpe2EudSYmYS51LlkoYS5BLFwic291cmNlb3BlblwiKTthLmMmJihhLmMucmVtb3ZlQXR0cmlidXRlKFwic3JjXCIpLGEuYy5sb2FkKCkpO3ZhciBiPVByb21pc2UuYWxsKFthLmEuYWJyLm1hbmFnZXIuc3RvcCgpLGEuZz9hLmcucygpOm51bGwsYS5PP2EuTy5zKCk6bnVsbCxhLmg/YS5oLnMoKTpudWxsLGEuYj9hLmIucygpOm51bGwsYS5vP2Euby5zdG9wKCk6bnVsbF0pO2EuZz1udWxsO2EuTz1udWxsO2EuaD1udWxsO2EuYj1udWxsO2Eubz1udWxsO2EuZj1udWxsO2EubGE9bnVsbDthLkE9bnVsbDthLmw9e307YS5SPVtdO2EubWE9MDthLiQ9MDtyZXR1cm4gYn1cbmZ1bmN0aW9uIHdlKGEpe3JldHVybiBhLnN0cmVhbXMuc29tZShmdW5jdGlvbihhKXtyZXR1cm4gYS5hbGxvd2VkQnlBcHBsaWNhdGlvbiYmYS5hbGxvd2VkQnlLZXlTeXN0ZW19KX1cbmZ1bmN0aW9uIHFlKGEsYixjLGQsZSl7dmFyIGY9ISF7XCIuZHJtLnNlcnZlcnNcIjohMCxcIi5kcm0uY2xlYXJLZXlzXCI6ITAsXCIuZHJtLmFkdmFuY2VkXCI6ITB9W2VdLGc9e1wiLmRybS5zZXJ2ZXJzXCI6XCJzdHJpbmdcIixcIi5kcm0uY2xlYXJLZXlzXCI6XCJzdHJpbmdcIn1bZV18fFwiXCIsbD17XCIuZHJtLmFkdmFuY2VkXCI6e2Rpc3RpbmN0aXZlSWRlbnRpZmllclJlcXVpcmVkOiExLHBlcnNpc3RlbnRTdGF0ZVJlcXVpcmVkOiExLHZpZGVvUm9idXN0bmVzczpcIlwiLGF1ZGlvUm9idXN0bmVzczpcIlwiLHNlcnZlckNlcnRpZmljYXRlOm51bGx9fVtlXSxoO2ZvcihoIGluIGMpe3ZhciBwPWUrXCIuXCIraCxxPWRbaF07bCYmKHE9bCk7dmFyIHQ9ISF7XCIuYWJyLm1hbmFnZXJcIjohMH1bcF07KGZ8fGggaW4gYikmJih2b2lkIDA9PT1jW2hdP3ZvaWQgMD09PXE/ZGVsZXRlIGJbaF06YltoXT1xOnQ/YltoXT1jW2hdOlwib2JqZWN0XCI9PXR5cGVvZiBiW2hdJiZcIm9iamVjdFwiPT10eXBlb2YgY1toXT9xZShhLGJbaF0sY1toXSxcbnEscCk6KGZ8fHR5cGVvZiBjW2hdPT10eXBlb2YgYltoXSkmJihnJiZ0eXBlb2YgY1toXSE9Z3x8XCJmdW5jdGlvblwiPT10eXBlb2YgYltoXSYmYltoXS5sZW5ndGghPWNbaF0ubGVuZ3RofHwoYltoXT1jW2hdKSkpfX1cbmZ1bmN0aW9uIGxlKGEpe3JldHVybntkcm06e3JldHJ5UGFyYW1ldGVyczpCZCgpLHNlcnZlcnM6e30sY2xlYXJLZXlzOnt9LGFkdmFuY2VkOnt9fSxtYW5pZmVzdDp7cmV0cnlQYXJhbWV0ZXJzOkJkKCksZGFzaDp7Y3VzdG9tU2NoZW1lOmZ1bmN0aW9uKGEpe2lmKGEpcmV0dXJuIG51bGx9LGNsb2NrU3luY1VyaTpcIlwifX0sc3RyZWFtaW5nOntyZXRyeVBhcmFtZXRlcnM6QmQoKSxyZWJ1ZmZlcmluZ0dvYWw6MixidWZmZXJpbmdHb2FsOjMwLGJ1ZmZlckJlaGluZDozMH0sYWJyOnttYW5hZ2VyOmEuRWEsZW5hYmxlZDohMCxkZWZhdWx0QmFuZHdpZHRoRXN0aW1hdGU6NUU1fSxwcmVmZXJyZWRBdWRpb0xhbmd1YWdlOlwiXCIscHJlZmVycmVkVGV4dExhbmd1YWdlOlwiXCIscmVzdHJpY3Rpb25zOnttaW5XaWR0aDowLG1heFdpZHRoOk51bWJlci5QT1NJVElWRV9JTkZJTklUWSxtaW5IZWlnaHQ6MCxtYXhIZWlnaHQ6TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLG1pblBpeGVsczowLG1heFBpeGVsczpOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG5taW5BdWRpb0JhbmR3aWR0aDowLG1heEF1ZGlvQmFuZHdpZHRoOk51bWJlci5QT1NJVElWRV9JTkZJTklUWSxtaW5WaWRlb0JhbmR3aWR0aDowLG1heFZpZGVvQmFuZHdpZHRoOk51bWJlci5QT1NJVElWRV9JTkZJTklUWX19fWs9Wi5wcm90b3R5cGU7XG5rLkZhPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYS5yZXN0cmljdGlvbnMsYz0hMTthLnN0cmVhbVNldHMuZm9yRWFjaChmdW5jdGlvbihhKXthLnN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgZj1lLmFsbG93ZWRCeUFwcGxpY2F0aW9uO2UuYWxsb3dlZEJ5QXBwbGljYXRpb249ITA7aWYoXCJ2aWRlb1wiPT1hLnR5cGUpe2lmKGUud2lkdGg8Yi5taW5XaWR0aHx8ZS53aWR0aD5iLm1heFdpZHRofHxlLmhlaWdodDxiLm1pbkhlaWdodHx8ZS5oZWlnaHQ+Yi5tYXhIZWlnaHR8fGUud2lkdGgqZS5oZWlnaHQ8Yi5taW5QaXhlbHN8fGUud2lkdGgqZS5oZWlnaHQ+Yi5tYXhQaXhlbHN8fGUuYmFuZHdpZHRoPGIubWluVmlkZW9CYW5kd2lkdGh8fGUuYmFuZHdpZHRoPmIubWF4VmlkZW9CYW5kd2lkdGgpZS5hbGxvd2VkQnlBcHBsaWNhdGlvbj0hMX1lbHNlXCJhdWRpb1wiPT1hLnR5cGUmJihlLmJhbmR3aWR0aDxiLm1pbkF1ZGlvQmFuZHdpZHRofHxlLmJhbmR3aWR0aD5iLm1heEF1ZGlvQmFuZHdpZHRoKSYmXG4oZS5hbGxvd2VkQnlBcHBsaWNhdGlvbj0hMSk7ZiE9ZS5hbGxvd2VkQnlBcHBsaWNhdGlvbiYmKGM9ITApfSl9KTtjJiZvZSh0aGlzKX07XG5rLkJhPWZ1bmN0aW9uKGEpe3ZhciBiPVwiXCIsYz1udWxsO3RoaXMuZyYmdGhpcy5nLnUmJihiPXRoaXMuZy5rZXlTeXN0ZW0oKSxjPXRoaXMuZy5tKTt2YXIgZD17fTt0aGlzLmImJihkPVJkKHRoaXMuYikpO2Zvcih2YXIgZT0wO2U8YS5zdHJlYW1TZXRzLmxlbmd0aDsrK2Upe3ZhciBmPWEuc3RyZWFtU2V0c1tlXTtpZihiJiYwIT1mLmRybUluZm9zLmxlbmd0aCYmIWYuZHJtSW5mb3Muc29tZShmdW5jdGlvbihhKXtyZXR1cm4gYS5rZXlTeXN0ZW09PWJ9KSlhLnN0cmVhbVNldHMuc3BsaWNlKGUsMSksLS1lO2Vsc2V7Zm9yKHZhciBnPWRbZi50eXBlXSxsPTA7bDxmLnN0cmVhbXMubGVuZ3RoOysrbCl7dmFyIGg9Zi5zdHJlYW1zW2xdO2lmKGcmJlwidGV4dFwiIT1mLnR5cGUmJmgubWltZVR5cGUhPWcubWltZVR5cGUpZi5zdHJlYW1zLnNwbGljZShsLDEpLC0tbDtlbHNle3ZhciBwPWgubWltZVR5cGU7aC5jb2RlY3MmJihwKz0nOyBjb2RlY3M9XCInK2guY29kZWNzKydcIicpO2liW3BdfHxcbk1lZGlhU291cmNlLmlzVHlwZVN1cHBvcnRlZChwKT9jJiZoLmVuY3J5cHRlZCYmMD5jLmluZGV4T2YocCkmJihmLnN0cmVhbXMuc3BsaWNlKGwsMSksLS1sKTooZi5zdHJlYW1zLnNwbGljZShsLDEpLC0tbCl9fTA9PWYuc3RyZWFtcy5sZW5ndGgmJihhLnN0cmVhbVNldHMuc3BsaWNlKGUsMSksLS1lKX19dGhpcy5GYShhKTthLnN0cmVhbVNldHMuc29tZSh3ZSl8fHRoaXMuZWEobmV3IHooNCw0MDExKSl9O2Z1bmN0aW9uIHRlKGEsYixjKXtmb3IodmFyIGQgaW4gYil7dmFyIGU9YltkXSxmPWN8fFwidGV4dFwiPT1kO2EuRj9hLmxbZF09e3N0cmVhbTplLGNsZWFyOmZ9OlRkKGEuYixkLGUsZil9fWZ1bmN0aW9uIHZlKGEpe2lmKGEuZil7dmFyIGI9RGF0ZS5ub3coKS8xRTM7YS5zYT9hLiQrPWItYS5rYTphLm1hKz1iLWEua2E7YS5rYT1ifX1rLkRiPWZ1bmN0aW9uKGEsYixjKXt0aGlzLmEuYWJyLm1hbmFnZXIuc2VnbWVudERvd25sb2FkZWQoYSxiLGMpfTtcbmsuemI9ZnVuY3Rpb24oYSl7dmUodGhpcyk7dGhpcy5zYT1hO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgRihcImJ1ZmZlcmluZ1wiLHtidWZmZXJpbmc6YX0pKX07ay5DYj1mdW5jdGlvbigpe2lmKHRoaXMuYil7dmFyIGE9dGhpcy5iLGI7Zm9yKGIgaW4gYS5iKXt2YXIgYz1hLmJbYl07Yy5VfHwoMDxGYihhLmMsYix2YihhLmgpKT9jLlA9ITE6Yy5QfHwoYy5iYT9jLlA9ITA6bnVsbD09RWIoYS5jLGIpP251bGw9PWMuVCYmWWQoYSxjLDApOihOZChjKSxWZChhLGMpKSkpfX19O1xuZnVuY3Rpb24gc2UoYSxiKXt2YXIgYz17fTtiLnN0cmVhbVNldHMuZm9yRWFjaChmdW5jdGlvbihhKXshd2UoYSl8fGEudHlwZSBpbiBjfHwoY1thLnR5cGVdPWEpfSk7Yi5zdHJlYW1TZXRzLmZvckVhY2goZnVuY3Rpb24oYSl7d2UoYSkmJmEucHJpbWFyeSYmKGNbYS50eXBlXT1hKX0pO3ZhciBkPXthdWRpbzohMSx0ZXh0OiExfTtbMiwxLDBdLmZvckVhY2goZnVuY3Rpb24oYSl7Yi5zdHJlYW1TZXRzLmZvckVhY2goZnVuY3Rpb24oYil7aWYod2UoYikpe3ZhciBlO1wiYXVkaW9cIj09Yi50eXBlP2U9dGhpcy5hLnByZWZlcnJlZEF1ZGlvTGFuZ3VhZ2U6XCJ0ZXh0XCI9PWIudHlwZSYmKGU9dGhpcy5hLnByZWZlcnJlZFRleHRMYW5ndWFnZSk7aWYoZSl7ZT1uYihlKTt2YXIgaD1uYihiLmxhbmd1YWdlKTtpZihoPT1lfHwxPD1hJiZoPT1lLnNwbGl0KFwiLVwiKVswXXx8Mjw9YSYmaC5zcGxpdChcIi1cIilbMF09PWUuc3BsaXQoXCItXCIpWzBdKWRbYi50eXBlXT0hMCxjW2IudHlwZV09Yn19fS5iaW5kKHRoaXMpKX0uYmluZChhKSk7XG5KKGMpLnNvbWUod2UpfHxhLmVhKG5ldyB6KDQsNDAxMikpO3ZhciBlPWEuYS5hYnIubWFuYWdlci5jaG9vc2VTdHJlYW1zKGMpO2MudGV4dCYmKGUudGV4dD1jLnRleHQuc3RyZWFtc1swXSxjLmF1ZGlvJiZkLnRleHQmJmMudGV4dC5sYW5ndWFnZSE9Yy5hdWRpby5sYW5ndWFnZSYmKGEuaS5tb2RlPVwic2hvd2luZ1wiLHVlKGEpKSk7cmV0dXJuIGV9ay5BYj1mdW5jdGlvbihhKXt0aGlzLkY9ITA7YT1zZSh0aGlzLGEpO2Zvcih2YXIgYiBpbiB0aGlzLmwpYVtiXT10aGlzLmxbYl0uc3RyZWFtO3RoaXMubD17fTtmb3IoYiBpbiBhKXRoaXMuUi5wdXNoKHt0aW1lc3RhbXA6RGF0ZS5ub3coKS8xRTMsaWQ6YVtiXS5pZCx0eXBlOmIsZnJvbUFkYXB0YXRpb246ITB9KTt0aGlzLm5hfHxvZSh0aGlzKTtyZXR1cm4gYX07XG5rLlBhPWZ1bmN0aW9uKCl7dGhpcy5GPSExO3RoaXMuYS5hYnIuZW5hYmxlZCYmdGhpcy5hLmFici5tYW5hZ2VyLmVuYWJsZSgpO2Zvcih2YXIgYSBpbiB0aGlzLmwpe3ZhciBiPXRoaXMubFthXTtUZCh0aGlzLmIsYSxiLnN0cmVhbSxiLmNsZWFyKX10aGlzLmw9e319O2suQ2E9ZnVuY3Rpb24oYSl7dmFyIGI9UmQodGhpcy5iKSxjO2ZvcihjIGluIGEpe3ZhciBkPWFbY107YltjXSE9ZCYmdGhpcy5SLnB1c2goe3RpbWVzdGFtcDpEYXRlLm5vdygpLzFFMyxpZDpkLmlkLHR5cGU6Yyxmcm9tQWRhcHRhdGlvbjohMH0pfWlmKHRoaXMuYil7Zm9yKGMgaW4gYSlUZCh0aGlzLmIsYyxhW2NdKTtwZSh0aGlzKX19O2Z1bmN0aW9uIHBlKGEpe1Byb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLmMmJnRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRihcImFkYXB0YXRpb25cIikpfS5iaW5kKGEpKX1cbmZ1bmN0aW9uIG9lKGEpe1Byb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXt0aGlzLmMmJnRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRihcInRyYWNrc2NoYW5nZWRcIikpfS5iaW5kKGEpKX1mdW5jdGlvbiB1ZShhKXthLmRpc3BhdGNoRXZlbnQobmV3IEYoXCJ0ZXh0dHJhY2t2aXNpYmlsaXR5XCIpKX1rLmVhPWZ1bmN0aW9uKGEpe3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgRihcImVycm9yXCIse2RldGFpbDphfSkpfTtrLmdiPWZ1bmN0aW9uKCl7aWYodGhpcy5jLmVycm9yKXt2YXIgYT10aGlzLmMuZXJyb3IuY29kZTtpZigxIT1hKXt2YXIgYj10aGlzLmMuZXJyb3IubXNFeHRlbmRlZENvZGU7YiYmKDA+YiYmKGIrPU1hdGgucG93KDIsMzIpKSxiPWIudG9TdHJpbmcoMTYpKTt0aGlzLmVhKG5ldyB6KDMsMzAxNixhLGIpKX19fTtcbmsuQmI9ZnVuY3Rpb24oYSl7dmFyIGI9W1widXNhYmxlXCIsXCJzdGF0dXMtcGVuZGluZ1wiLFwib3V0cHV0LWRvd25zY2FsZWRcIl0sYz1RZCh0aGlzLmIpLGQ9ITE7Yy5zdHJlYW1TZXRzLmZvckVhY2goZnVuY3Rpb24oYyl7Yy5zdHJlYW1zLmZvckVhY2goZnVuY3Rpb24oYyl7dmFyIGU9Yy5hbGxvd2VkQnlLZXlTeXN0ZW07Yy5rZXlJZCYmYy5rZXlJZCBpbiBhJiYoYy5hbGxvd2VkQnlLZXlTeXN0ZW09MDw9Yi5pbmRleE9mKGFbYy5rZXlJZF0pKTtlIT1jLmFsbG93ZWRCeUtleVN5c3RlbSYmKGQ9ITApfSl9KTtjPXNlKHRoaXMsYyk7dGhpcy5hLmFici5lbmFibGVkJiYhdGhpcy5GJiZ0aGlzLmEuYWJyLm1hbmFnZXIuZW5hYmxlKCk7dmFyIGU9UmQodGhpcy5iKSxjPXFiKGMsZnVuY3Rpb24oYSl7cmV0dXJuIGVbYV0mJiFlW2FdLmFsbG93ZWRCeUtleVN5c3RlbX0pO3RlKHRoaXMsYywhMCk7ZCYmb2UodGhpcyl9O30uY2FsbChnLHRoaXMpKTtcbmlmICh0eXBlb2YobW9kdWxlKSE9XCJ1bmRlZmluZWRcIiYmbW9kdWxlLmV4cG9ydHMpbW9kdWxlLmV4cG9ydHM9Zy5zaGFrYTtcbmVsc2UgaWYgKHR5cGVvZihkZWZpbmUpIT1cInVuZGVmaW5lZFwiICYmIGRlZmluZS5hbWQpZGVmaW5lKGZ1bmN0aW9uKCl7cmV0dXJuIGcuc2hha2F9KTtcbmVsc2UgdGhpcy5zaGFrYT1nLnNoYWthO1xufSkoKTtcblxuIiwiLy8gc3RhdHMuanMgLSBodHRwOi8vZ2l0aHViLmNvbS9tcmRvb2Ivc3RhdHMuanNcbnZhciBTdGF0cz1mdW5jdGlvbigpe3ZhciBsPURhdGUubm93KCksbT1sLGc9MCxuPUluZmluaXR5LG89MCxoPTAscD1JbmZpbml0eSxxPTAscj0wLHM9MCxmPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zi5pZD1cInN0YXRzXCI7Zi5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsZnVuY3Rpb24oYil7Yi5wcmV2ZW50RGVmYXVsdCgpO3QoKytzJTIpfSwhMSk7Zi5zdHlsZS5jc3NUZXh0PVwid2lkdGg6ODBweDtvcGFjaXR5OjAuOTtjdXJzb3I6cG9pbnRlclwiO3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7YS5pZD1cImZwc1wiO2Euc3R5bGUuY3NzVGV4dD1cInBhZGRpbmc6MCAwIDNweCAzcHg7dGV4dC1hbGlnbjpsZWZ0O2JhY2tncm91bmQtY29sb3I6IzAwMlwiO2YuYXBwZW5kQ2hpbGQoYSk7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpLmlkPVwiZnBzVGV4dFwiO2kuc3R5bGUuY3NzVGV4dD1cImNvbG9yOiMwZmY7Zm9udC1mYW1pbHk6SGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7Zm9udC1zaXplOjlweDtmb250LXdlaWdodDpib2xkO2xpbmUtaGVpZ2h0OjE1cHhcIjtcbmkuaW5uZXJIVE1MPVwiRlBTXCI7YS5hcHBlbmRDaGlsZChpKTt2YXIgYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2MuaWQ9XCJmcHNHcmFwaFwiO2Muc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjc0cHg7aGVpZ2h0OjMwcHg7YmFja2dyb3VuZC1jb2xvcjojMGZmXCI7Zm9yKGEuYXBwZW5kQ2hpbGQoYyk7NzQ+Yy5jaGlsZHJlbi5sZW5ndGg7KXt2YXIgaj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtqLnN0eWxlLmNzc1RleHQ9XCJ3aWR0aDoxcHg7aGVpZ2h0OjMwcHg7ZmxvYXQ6bGVmdDtiYWNrZ3JvdW5kLWNvbG9yOiMxMTNcIjtjLmFwcGVuZENoaWxkKGopfXZhciBkPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7ZC5pZD1cIm1zXCI7ZC5zdHlsZS5jc3NUZXh0PVwicGFkZGluZzowIDAgM3B4IDNweDt0ZXh0LWFsaWduOmxlZnQ7YmFja2dyb3VuZC1jb2xvcjojMDIwO2Rpc3BsYXk6bm9uZVwiO2YuYXBwZW5kQ2hpbGQoZCk7dmFyIGs9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbmsuaWQ9XCJtc1RleHRcIjtrLnN0eWxlLmNzc1RleHQ9XCJjb2xvcjojMGYwO2ZvbnQtZmFtaWx5OkhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO2ZvbnQtc2l6ZTo5cHg7Zm9udC13ZWlnaHQ6Ym9sZDtsaW5lLWhlaWdodDoxNXB4XCI7ay5pbm5lckhUTUw9XCJNU1wiO2QuYXBwZW5kQ2hpbGQoayk7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtlLmlkPVwibXNHcmFwaFwiO2Uuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjc0cHg7aGVpZ2h0OjMwcHg7YmFja2dyb3VuZC1jb2xvcjojMGYwXCI7Zm9yKGQuYXBwZW5kQ2hpbGQoZSk7NzQ+ZS5jaGlsZHJlbi5sZW5ndGg7KWo9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksai5zdHlsZS5jc3NUZXh0PVwid2lkdGg6MXB4O2hlaWdodDozMHB4O2Zsb2F0OmxlZnQ7YmFja2dyb3VuZC1jb2xvcjojMTMxXCIsZS5hcHBlbmRDaGlsZChqKTt2YXIgdD1mdW5jdGlvbihiKXtzPWI7c3dpdGNoKHMpe2Nhc2UgMDphLnN0eWxlLmRpc3BsYXk9XG5cImJsb2NrXCI7ZC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2JyZWFrO2Nhc2UgMTphLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsZC5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIn19O3JldHVybntSRVZJU0lPTjoxMixkb21FbGVtZW50OmYsc2V0TW9kZTp0LGJlZ2luOmZ1bmN0aW9uKCl7bD1EYXRlLm5vdygpfSxlbmQ6ZnVuY3Rpb24oKXt2YXIgYj1EYXRlLm5vdygpO2c9Yi1sO249TWF0aC5taW4obixnKTtvPU1hdGgubWF4KG8sZyk7ay50ZXh0Q29udGVudD1nK1wiIE1TIChcIituK1wiLVwiK28rXCIpXCI7dmFyIGE9TWF0aC5taW4oMzAsMzAtMzAqKGcvMjAwKSk7ZS5hcHBlbmRDaGlsZChlLmZpcnN0Q2hpbGQpLnN0eWxlLmhlaWdodD1hK1wicHhcIjtyKys7Yj5tKzFFMyYmKGg9TWF0aC5yb3VuZCgxRTMqci8oYi1tKSkscD1NYXRoLm1pbihwLGgpLHE9TWF0aC5tYXgocSxoKSxpLnRleHRDb250ZW50PWgrXCIgRlBTIChcIitwK1wiLVwiK3ErXCIpXCIsYT1NYXRoLm1pbigzMCwzMC0zMCooaC8xMDApKSxjLmFwcGVuZENoaWxkKGMuZmlyc3RDaGlsZCkuc3R5bGUuaGVpZ2h0PVxuYStcInB4XCIsbT1iLHI9MCk7cmV0dXJuIGJ9LHVwZGF0ZTpmdW5jdGlvbigpe2w9dGhpcy5lbmQoKX19fTtcIm9iamVjdFwiPT09dHlwZW9mIG1vZHVsZSYmKG1vZHVsZS5leHBvcnRzPVN0YXRzKTtcbiIsIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCcuL2VtaXR0ZXIuanMnKTtcbnZhciBNb2RlcyA9IHJlcXVpcmUoJy4vbW9kZXMuanMnKTtcbnZhciBVdGlsID0gcmVxdWlyZSgnLi91dGlsLmpzJyk7XG5cbi8qKlxuICogRXZlcnl0aGluZyBoYXZpbmcgdG8gZG8gd2l0aCB0aGUgV2ViVlIgYnV0dG9uLlxuICogRW1pdHMgYSAnY2xpY2snIGV2ZW50IHdoZW4gaXQncyBjbGlja2VkLlxuICovXG5mdW5jdGlvbiBCdXR0b25NYW5hZ2VyKG9wdF9yb290KSB7XG4gIHZhciByb290ID0gb3B0X3Jvb3QgfHwgZG9jdW1lbnQuYm9keTtcbiAgdGhpcy5sb2FkSWNvbnNfKCk7XG5cbiAgLy8gTWFrZSB0aGUgZnVsbHNjcmVlbiBidXR0b24uXG4gIHZhciBmc0J1dHRvbiA9IHRoaXMuY3JlYXRlQnV0dG9uKCk7XG4gIGZzQnV0dG9uLnNyYyA9IHRoaXMuSUNPTlMuZnVsbHNjcmVlbjtcbiAgZnNCdXR0b24udGl0bGUgPSAnRnVsbHNjcmVlbiBtb2RlJztcbiAgdmFyIHMgPSBmc0J1dHRvbi5zdHlsZTtcbiAgcy5ib3R0b20gPSAwO1xuICBzLnJpZ2h0ID0gMDtcbiAgZnNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNyZWF0ZUNsaWNrSGFuZGxlcl8oJ2ZzJykpO1xuICByb290LmFwcGVuZENoaWxkKGZzQnV0dG9uKTtcbiAgdGhpcy5mc0J1dHRvbiA9IGZzQnV0dG9uO1xuXG4gIC8vIE1ha2UgdGhlIFZSIGJ1dHRvbi5cbiAgdmFyIHZyQnV0dG9uID0gdGhpcy5jcmVhdGVCdXR0b24oKTtcbiAgdnJCdXR0b24uc3JjID0gdGhpcy5JQ09OUy5jYXJkYm9hcmQ7XG4gIHZyQnV0dG9uLnRpdGxlID0gJ1ZpcnR1YWwgcmVhbGl0eSBtb2RlJztcbiAgdmFyIHMgPSB2ckJ1dHRvbi5zdHlsZTtcbiAgcy5ib3R0b20gPSAwO1xuICBzLnJpZ2h0ID0gJzQ4cHgnO1xuICB2ckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY3JlYXRlQ2xpY2tIYW5kbGVyXygndnInKSk7XG4gIHJvb3QuYXBwZW5kQ2hpbGQodnJCdXR0b24pO1xuICB0aGlzLnZyQnV0dG9uID0gdnJCdXR0b247XG5cbiAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuXG59XG5CdXR0b25NYW5hZ2VyLnByb3RvdHlwZSA9IG5ldyBFbWl0dGVyKCk7XG5cbkJ1dHRvbk1hbmFnZXIucHJvdG90eXBlLmNyZWF0ZUJ1dHRvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gIGJ1dHRvbi5jbGFzc05hbWUgPSAnd2VidnItYnV0dG9uJztcbiAgdmFyIHMgPSBidXR0b24uc3R5bGU7XG4gIHMucG9zaXRpb24gPSAnZml4ZWQnO1xuICBzLndpZHRoID0gJzI0cHgnXG4gIHMuaGVpZ2h0ID0gJzI0cHgnO1xuICBzLmJhY2tncm91bmRTaXplID0gJ2NvdmVyJztcbiAgcy5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xuICBzLmJvcmRlciA9IDA7XG4gIHMudXNlclNlbGVjdCA9ICdub25lJztcbiAgcy53ZWJraXRVc2VyU2VsZWN0ID0gJ25vbmUnO1xuICBzLk1velVzZXJTZWxlY3QgPSAnbm9uZSc7XG4gIHMuY3Vyc29yID0gJ3BvaW50ZXInO1xuICBzLnBhZGRpbmcgPSAnMTJweCc7XG4gIHMuekluZGV4ID0gMTtcbiAgcy5kaXNwbGF5ID0gJ25vbmUnO1xuICBzLmJveFNpemluZyA9ICdjb250ZW50LWJveCc7XG5cbiAgLy8gUHJldmVudCBidXR0b24gZnJvbSBiZWluZyBzZWxlY3RlZCBhbmQgZHJhZ2dlZC5cbiAgYnV0dG9uLmRyYWdnYWJsZSA9IGZhbHNlO1xuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgZnVuY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfSk7XG5cbiAgLy8gU3R5bGUgaXQgb24gaG92ZXIuXG4gIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24oZSkge1xuICAgIHMuZmlsdGVyID0gcy53ZWJraXRGaWx0ZXIgPSAnZHJvcC1zaGFkb3coMCAwIDVweCByZ2JhKDI1NSwyNTUsMjU1LDEpKSc7XG4gIH0pO1xuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uKGUpIHtcbiAgICBzLmZpbHRlciA9IHMud2Via2l0RmlsdGVyID0gJyc7XG4gIH0pO1xuICByZXR1cm4gYnV0dG9uO1xufTtcblxuQnV0dG9uTWFuYWdlci5wcm90b3R5cGUuc2V0TW9kZSA9IGZ1bmN0aW9uKG1vZGUsIGlzVlJDb21wYXRpYmxlKSB7XG4gIGlzVlJDb21wYXRpYmxlID0gaXNWUkNvbXBhdGlibGUgfHwgV2ViVlJDb25maWcuRk9SQ0VfRU5BQkxFX1ZSO1xuICBpZiAoIXRoaXMuaXNWaXNpYmxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgTW9kZXMuTk9STUFMOlxuICAgICAgdGhpcy5mc0J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIHRoaXMuZnNCdXR0b24uc3JjID0gdGhpcy5JQ09OUy5mdWxsc2NyZWVuO1xuICAgICAgdGhpcy52ckJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gKGlzVlJDb21wYXRpYmxlID8gJ2Jsb2NrJyA6ICdub25lJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIE1vZGVzLk1BR0lDX1dJTkRPVzpcbiAgICAgIHRoaXMuZnNCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICB0aGlzLmZzQnV0dG9uLnNyYyA9IHRoaXMuSUNPTlMuZXhpdEZ1bGxzY3JlZW47XG4gICAgICB0aGlzLnZyQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAoaXNWUkNvbXBhdGlibGUgPyAnYmxvY2snIDogJ25vbmUnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTW9kZXMuVlI6XG4gICAgICB0aGlzLmZzQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLnZyQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIC8vIEhhY2sgZm9yIFNhZmFyaSBNYWMvaU9TIHRvIGZvcmNlIHJlbGF5b3V0IChzdmctc3BlY2lmaWMgaXNzdWUpXG4gIC8vIGh0dHA6Ly9nb28uZ2wvaGpnUjZyXG4gIHZhciBvbGRWYWx1ZSA9IHRoaXMuZnNCdXR0b24uc3R5bGUuZGlzcGxheTtcbiAgdGhpcy5mc0J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gIHRoaXMuZnNCdXR0b24ub2Zmc2V0SGVpZ2h0O1xuICB0aGlzLmZzQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBvbGRWYWx1ZTtcbn07XG5cbkJ1dHRvbk1hbmFnZXIucHJvdG90eXBlLnNldFZpc2liaWxpdHkgPSBmdW5jdGlvbihpc1Zpc2libGUpIHtcbiAgdGhpcy5pc1Zpc2libGUgPSBpc1Zpc2libGU7XG4gIHRoaXMuZnNCdXR0b24uc3R5bGUuZGlzcGxheSA9IGlzVmlzaWJsZSA/ICdibG9jaycgOiAnbm9uZSc7XG4gIHRoaXMudnJCdXR0b24uc3R5bGUuZGlzcGxheSA9IGlzVmlzaWJsZSA/ICdibG9jaycgOiAnbm9uZSc7XG59O1xuXG5CdXR0b25NYW5hZ2VyLnByb3RvdHlwZS5jcmVhdGVDbGlja0hhbmRsZXJfID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5lbWl0KGV2ZW50TmFtZSk7XG4gIH0uYmluZCh0aGlzKTtcbn07XG5cbkJ1dHRvbk1hbmFnZXIucHJvdG90eXBlLmxvYWRJY29uc18gPSBmdW5jdGlvbigpIHtcbiAgLy8gUHJlbG9hZCBzb21lIGhhcmQtY29kZWQgU1ZHLlxuICB0aGlzLklDT05TID0ge307XG4gIHRoaXMuSUNPTlMuY2FyZGJvYXJkID0gVXRpbC5iYXNlNjQoJ2ltYWdlL3N2Zyt4bWwnLCAnUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeU5IQjRJaUJvWldsbmFIUTlJakkwY0hnaUlIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSWdabWxzYkQwaUkwWkdSa1pHUmlJK0NpQWdJQ0E4Y0dGMGFDQmtQU0pOTWpBdU56UWdOa2d6TGpJeFF6SXVOVFVnTmlBeUlEWXVOVGNnTWlBM0xqSTRkakV3TGpRMFl6QWdMamN1TlRVZ01TNHlPQ0F4TGpJeklERXVNamhvTkM0M09XTXVOVElnTUNBdU9UWXRMak16SURFdU1UUXRMamM1YkRFdU5DMHpMalE0WXk0eU15MHVOVGt1TnprdE1TNHdNU0F4TGpRMExURXVNREZ6TVM0eU1TNDBNaUF4TGpRMUlERXVNREZzTVM0ek9TQXpMalE0WXk0eE9TNDBOaTQyTXk0M09TQXhMakV4TGpjNWFEUXVOemxqTGpjeElEQWdNUzR5TmkwdU5UY2dNUzR5TmkweExqSTRWamN1TWpoak1DMHVOeTB1TlRVdE1TNHlPQzB4TGpJMkxURXVNamg2VFRjdU5TQXhOQzQyTW1NdE1TNHhOeUF3TFRJdU1UTXRMamsxTFRJdU1UTXRNaTR4TWlBd0xURXVNVGN1T1RZdE1pNHhNeUF5TGpFekxUSXVNVE1nTVM0eE9DQXdJREl1TVRJdU9UWWdNaTR4TWlBeUxqRXpjeTB1T1RVZ01pNHhNaTB5TGpFeUlESXVNVEo2YlRrZ01HTXRNUzR4TnlBd0xUSXVNVE10TGprMUxUSXVNVE10TWk0eE1pQXdMVEV1TVRjdU9UWXRNaTR4TXlBeUxqRXpMVEl1TVROek1pNHhNaTQ1TmlBeUxqRXlJREl1TVRNdExqazFJREl1TVRJdE1pNHhNaUF5TGpFeWVpSXZQZ29nSUNBZ1BIQmhkR2dnWm1sc2JEMGlibTl1WlNJZ1pEMGlUVEFnTUdneU5IWXlORWd3VmpCNklpOCtDand2YzNablBnbz0nKTtcbiAgdGhpcy5JQ09OUy5mdWxsc2NyZWVuID0gVXRpbC5iYXNlNjQoJ2ltYWdlL3N2Zyt4bWwnLCAnUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeU5IQjRJaUJvWldsbmFIUTlJakkwY0hnaUlIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSWdabWxzYkQwaUkwWkdSa1pHUmlJK0NpQWdJQ0E4Y0dGMGFDQmtQU0pOTUNBd2FESTBkakkwU0RCNklpQm1hV3hzUFNKdWIyNWxJaTgrQ2lBZ0lDQThjR0YwYUNCa1BTSk5OeUF4TkVnMWRqVm9OWFl0TWtnM2RpMHplbTB0TWkwMGFESldOMmd6VmpWSU5YWTFlbTB4TWlBM2FDMHpkakpvTlhZdE5XZ3RNbll6ZWsweE5DQTFkakpvTTNZemFESldOV2d0TlhvaUx6NEtQQzl6ZG1jK0NnPT0nKTtcbiAgdGhpcy5JQ09OUy5leGl0RnVsbHNjcmVlbiA9IFV0aWwuYmFzZTY0KCdpbWFnZS9zdmcreG1sJywgJ1BITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXlOSEI0SWlCb1pXbG5hSFE5SWpJMGNIZ2lJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lnWm1sc2JEMGlJMFpHUmtaR1JpSStDaUFnSUNBOGNHRjBhQ0JrUFNKTk1DQXdhREkwZGpJMFNEQjZJaUJtYVd4c1BTSnViMjVsSWk4K0NpQWdJQ0E4Y0dGMGFDQmtQU0pOTlNBeE5tZ3pkak5vTW5ZdE5VZzFkako2YlRNdE9FZzFkakpvTlZZMVNEaDJNM3B0TmlBeE1XZ3lkaTB6YUROMkxUSm9MVFYyTlhwdE1pMHhNVlkxYUMweWRqVm9OVlk0YUMwemVpSXZQZ284TDNOMlp6NEsnKTtcbiAgdGhpcy5JQ09OUy5zZXR0aW5ncyA9IFV0aWwuYmFzZTY0KCdpbWFnZS9zdmcreG1sJywgJ1BITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXlOSEI0SWlCb1pXbG5hSFE5SWpJMGNIZ2lJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lnWm1sc2JEMGlJMFpHUmtaR1JpSStDaUFnSUNBOGNHRjBhQ0JrUFNKTk1DQXdhREkwZGpJMFNEQjZJaUJtYVd4c1BTSnViMjVsSWk4K0NpQWdJQ0E4Y0dGMGFDQmtQU0pOTVRrdU5ETWdNVEl1T1RoakxqQTBMUzR6TWk0d055MHVOalF1TURjdExqazRjeTB1TURNdExqWTJMUzR3TnkwdU9UaHNNaTR4TVMweExqWTFZeTR4T1MwdU1UVXVNalF0TGpReUxqRXlMUzQyTkd3dE1pMHpMalEyWXkwdU1USXRMakl5TFM0ek9TMHVNeTB1TmpFdExqSXliQzB5TGpRNUlERmpMUzQxTWkwdU5DMHhMakE0TFM0M015MHhMalk1TFM0NU9Hd3RMak00TFRJdU5qVkRNVFF1TkRZZ01pNHhPQ0F4TkM0eU5TQXlJREUwSURKb0xUUmpMUzR5TlNBd0xTNDBOaTR4T0MwdU5Ea3VOREpzTFM0ek9DQXlMalkxWXkwdU5qRXVNalV0TVM0eE55NDFPUzB4TGpZNUxqazRiQzB5TGpRNUxURmpMUzR5TXkwdU1Ea3RMalE1SURBdExqWXhMakl5YkMweUlETXVORFpqTFM0eE15NHlNaTB1TURjdU5Ea3VNVEl1TmpSc01pNHhNU0F4TGpZMVl5MHVNRFF1TXpJdExqQTNMalkxTFM0d055NDVPSE11TURNdU5qWXVNRGN1T1Roc0xUSXVNVEVnTVM0Mk5XTXRMakU1TGpFMUxTNHlOQzQwTWkwdU1USXVOalJzTWlBekxqUTJZeTR4TWk0eU1pNHpPUzR6TGpZeExqSXliREl1TkRrdE1XTXVOVEl1TkNBeExqQTRMamN6SURFdU5qa3VPVGhzTGpNNElESXVOalZqTGpBekxqSTBMakkwTGpReUxqUTVMalF5YURSakxqSTFJREFnTGpRMkxTNHhPQzQwT1MwdU5ESnNMak00TFRJdU5qVmpMall4TFM0eU5TQXhMakUzTFM0MU9TQXhMalk1TFM0NU9Hd3lMalE1SURGakxqSXpMakE1TGpRNUlEQWdMall4TFM0eU1td3lMVE11TkRaakxqRXlMUzR5TWk0d055MHVORGt0TGpFeUxTNDJOR3d0TWk0eE1TMHhMalkxZWsweE1pQXhOUzQxWXkweExqa3pJREF0TXk0MUxURXVOVGN0TXk0MUxUTXVOWE14TGpVM0xUTXVOU0F6TGpVdE15NDFJRE11TlNBeExqVTNJRE11TlNBekxqVXRNUzQxTnlBekxqVXRNeTQxSURNdU5Yb2lMejRLUEM5emRtYytDZz09Jyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1dHRvbk1hbmFnZXI7XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5mdW5jdGlvbiBFbWl0dGVyKCkge1xuICB0aGlzLmNhbGxiYWNrcyA9IHt9O1xufVxuXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrc1tldmVudE5hbWVdO1xuICBpZiAoIWNhbGxiYWNrcykge1xuICAgIC8vY29uc29sZS5sb2coJ05vIHZhbGlkIGNhbGxiYWNrIHNwZWNpZmllZC4nKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gIC8vIEVsaW1pbmF0ZSB0aGUgZmlyc3QgcGFyYW0gKHRoZSBjYWxsYmFjaykuXG4gIGFyZ3Muc2hpZnQoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cbn07XG5cbkVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICBpZiAoZXZlbnROYW1lIGluIHRoaXMuY2FsbGJhY2tzKSB7XG4gICAgdGhpcy5jYWxsYmFja3NbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmNhbGxiYWNrc1tldmVudE5hbWVdID0gW2NhbGxiYWNrXTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xuIiwiLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIE1vZGVzID0ge1xuICBVTktOT1dOOiAwLFxuICAvLyBOb3QgZnVsbHNjcmVlbiwganVzdCB0cmFja2luZy5cbiAgTk9STUFMOiAxLFxuICAvLyBNYWdpYyB3aW5kb3cgaW1tZXJzaXZlIG1vZGUuXG4gIE1BR0lDX1dJTkRPVzogMixcbiAgLy8gRnVsbCBzY3JlZW4gc3BsaXQgc2NyZWVuIFZSIG1vZGUuXG4gIFZSOiAzLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2RlcztcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBVdGlsID0ge307XG5cblV0aWwuYmFzZTY0ID0gZnVuY3Rpb24obWltZVR5cGUsIGJhc2U2NCkge1xuICByZXR1cm4gJ2RhdGE6JyArIG1pbWVUeXBlICsgJztiYXNlNjQsJyArIGJhc2U2NDtcbn07XG5cblV0aWwuaXNNb2JpbGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNoZWNrID0gZmFsc2U7XG4gIChmdW5jdGlvbihhKXtpZigvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2kudGVzdChhKXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdChhLnN1YnN0cigwLDQpKSljaGVjayA9IHRydWV9KShuYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHx3aW5kb3cub3BlcmEpO1xuICByZXR1cm4gY2hlY2s7XG59O1xuXG5VdGlsLmlzRmlyZWZveCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gL2ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xufTtcblxuVXRpbC5pc0lPUyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyhpUGFkfGlQaG9uZXxpUG9kKS9nLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59O1xuXG5VdGlsLmlzSUZyYW1lID0gZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5zZWxmICE9PSB3aW5kb3cudG9wO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cblV0aWwuYXBwZW5kUXVlcnlQYXJhbWV0ZXIgPSBmdW5jdGlvbih1cmwsIGtleSwgdmFsdWUpIHtcbiAgLy8gRGV0ZXJtaW5lIGRlbGltaXRlciBiYXNlZCBvbiBpZiB0aGUgVVJMIGFscmVhZHkgR0VUIHBhcmFtZXRlcnMgaW4gaXQuXG4gIHZhciBkZWxpbWl0ZXIgPSAodXJsLmluZGV4T2YoJz8nKSA8IDAgPyAnPycgOiAnJicpO1xuICB1cmwgKz0gZGVsaW1pdGVyICsga2V5ICsgJz0nICsgdmFsdWU7XG4gIHJldHVybiB1cmw7XG59O1xuXG4vLyBGcm9tIGh0dHA6Ly9nb28uZ2wvNFdYM3RnXG5VdGlsLmdldFF1ZXJ5UGFyYW1ldGVyID0gZnVuY3Rpb24obmFtZSkge1xuICB2YXIgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCBcIlxcXFxbXCIpLnJlcGxhY2UoL1tcXF1dLywgXCJcXFxcXVwiKTtcbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIltcXFxcPyZdXCIgKyBuYW1lICsgXCI9KFteJiNdKilcIiksXG4gICAgICByZXN1bHRzID0gcmVnZXguZXhlYyhsb2NhdGlvbi5zZWFyY2gpO1xuICByZXR1cm4gcmVzdWx0cyA9PT0gbnVsbCA/IFwiXCIgOiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1sxXS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcbn07XG5cblV0aWwuaXNMYW5kc2NhcGVNb2RlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAod2luZG93Lm9yaWVudGF0aW9uID09IDkwIHx8IHdpbmRvdy5vcmllbnRhdGlvbiA9PSAtOTApO1xufTtcblxuVXRpbC5nZXRTY3JlZW5XaWR0aCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5tYXgod2luZG93LnNjcmVlbi53aWR0aCwgd2luZG93LnNjcmVlbi5oZWlnaHQpICpcbiAgICAgIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xufTtcblxuVXRpbC5nZXRTY3JlZW5IZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGgubWluKHdpbmRvdy5zY3JlZW4ud2lkdGgsIHdpbmRvdy5zY3JlZW4uaGVpZ2h0KSAqXG4gICAgICB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbDtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBCdXR0b25NYW5hZ2VyID0gcmVxdWlyZSgnLi9idXR0b24tbWFuYWdlci5qcycpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCcuL2VtaXR0ZXIuanMnKTtcbnZhciBNb2RlcyA9IHJlcXVpcmUoJy4vbW9kZXMuanMnKTtcbnZhciBVdGlsID0gcmVxdWlyZSgnLi91dGlsLmpzJyk7XG5cbi8qKlxuICogSGVscGVyIGZvciBnZXR0aW5nIGluIGFuZCBvdXQgb2YgVlIgbW9kZS5cbiAqL1xuZnVuY3Rpb24gV2ViVlJNYW5hZ2VyKHJlbmRlcmVyLCBlZmZlY3QsIHBhcmFtcykge1xuICB0aGlzLnBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcblxuICB0aGlzLm1vZGUgPSBNb2Rlcy5VTktOT1dOO1xuXG4gIC8vIFNldCBvcHRpb24gdG8gaGlkZSB0aGUgYnV0dG9uLlxuICB0aGlzLmhpZGVCdXR0b24gPSB0aGlzLnBhcmFtcy5oaWRlQnV0dG9uIHx8IGZhbHNlO1xuICAvLyBXaGV0aGVyIG9yIG5vdCB0aGUgRk9WIHNob3VsZCBiZSBkaXN0b3J0ZWQgb3IgdW4tZGlzdG9ydGVkLiBCeSBkZWZhdWx0LCBpdFxuICAvLyBzaG91bGQgYmUgZGlzdG9ydGVkLCBidXQgaW4gdGhlIGNhc2Ugb2YgdmVydGV4IHNoYWRlciBiYXNlZCBkaXN0b3J0aW9uLFxuICAvLyBlbnN1cmUgdGhhdCB3ZSB1c2UgdW5kaXN0b3J0ZWQgcGFyYW1ldGVycy5cbiAgdGhpcy5wcmVkaXN0b3J0ZWQgPSAhIXRoaXMucGFyYW1zLnByZWRpc3RvcnRlZDtcblxuICAvLyBTYXZlIHRoZSBUSFJFRS5qcyByZW5kZXJlciBhbmQgZWZmZWN0IGZvciBsYXRlci5cbiAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB0aGlzLmVmZmVjdCA9IGVmZmVjdDtcbiAgdmFyIHBvbHlmaWxsV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53ZWJ2ci1wb2x5ZmlsbC1mdWxsc2NyZWVuLXdyYXBwZXInKTtcbiAgdGhpcy5idXR0b24gPSBuZXcgQnV0dG9uTWFuYWdlcihwb2x5ZmlsbFdyYXBwZXIpO1xuXG4gIHRoaXMuaXNGdWxsc2NyZWVuRGlzYWJsZWQgPSAhIVV0aWwuZ2V0UXVlcnlQYXJhbWV0ZXIoJ25vX2Z1bGxzY3JlZW4nKTtcbiAgdGhpcy5zdGFydE1vZGUgPSBNb2Rlcy5OT1JNQUw7XG4gIHZhciBzdGFydE1vZGVQYXJhbSA9IHBhcnNlSW50KFV0aWwuZ2V0UXVlcnlQYXJhbWV0ZXIoJ3N0YXJ0X21vZGUnKSk7XG4gIGlmICghaXNOYU4oc3RhcnRNb2RlUGFyYW0pKSB7XG4gICAgdGhpcy5zdGFydE1vZGUgPSBzdGFydE1vZGVQYXJhbTtcbiAgfVxuXG4gIGlmICh0aGlzLmhpZGVCdXR0b24pIHtcbiAgICB0aGlzLmJ1dHRvbi5zZXRWaXNpYmlsaXR5KGZhbHNlKTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHRoZSBicm93c2VyIGlzIGNvbXBhdGlibGUgd2l0aCBXZWJWUi5cbiAgdGhpcy5nZXREZXZpY2VCeVR5cGVfKFZSRGlzcGxheSkudGhlbihmdW5jdGlvbihobWQpIHtcbiAgICB0aGlzLmhtZCA9IGhtZDtcblxuICAgIC8vIE9ubHkgZW5hYmxlIFZSIG1vZGUgaWYgdGhlcmUncyBhIFZSIGRldmljZSBhdHRhY2hlZCBvciB3ZSBhcmUgcnVubmluZyB0aGVcbiAgICAvLyBwb2x5ZmlsbCBvbiBtb2JpbGUuXG4gICAgaWYgKCF0aGlzLmlzVlJDb21wYXRpYmxlT3ZlcnJpZGUpIHtcbiAgICAgIHRoaXMuaXNWUkNvbXBhdGlibGUgPSAgIWhtZC5pc1BvbHlmaWxsZWQgfHwgVXRpbC5pc01vYmlsZSgpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5zdGFydE1vZGUpIHtcbiAgICAgIGNhc2UgTW9kZXMuTUFHSUNfV0lORE9XOlxuICAgICAgICB0aGlzLnNldE1vZGVfKE1vZGVzLk1BR0lDX1dJTkRPVyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBNb2Rlcy5WUjpcbiAgICAgICAgdGhpcy5lbnRlclZSTW9kZV8oKTtcbiAgICAgICAgdGhpcy5zZXRNb2RlXyhNb2Rlcy5WUik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5zZXRNb2RlXyhNb2Rlcy5OT1JNQUwpO1xuICAgIH1cblxuICAgIHRoaXMuZW1pdCgnaW5pdGlhbGl6ZWQnKTtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICAvLyBIb29rIHVwIGJ1dHRvbiBsaXN0ZW5lcnMuXG4gIHRoaXMuYnV0dG9uLm9uKCdmcycsIHRoaXMub25GU0NsaWNrXy5iaW5kKHRoaXMpKTtcbiAgdGhpcy5idXR0b24ub24oJ3ZyJywgdGhpcy5vblZSQ2xpY2tfLmJpbmQodGhpcykpO1xuXG4gIC8vIEJpbmQgdG8gZnVsbHNjcmVlbiBldmVudHMuXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxuICAgICAgdGhpcy5vbkZ1bGxzY3JlZW5DaGFuZ2VfLmJpbmQodGhpcykpO1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3pmdWxsc2NyZWVuY2hhbmdlJyxcbiAgICAgIHRoaXMub25GdWxsc2NyZWVuQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbXNmdWxsc2NyZWVuY2hhbmdlJyxcbiAgICAgIHRoaXMub25GdWxsc2NyZWVuQ2hhbmdlXy5iaW5kKHRoaXMpKTtcblxuICAvLyBCaW5kIHRvIFZSKiBzcGVjaWZpYyBldmVudHMuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd2cmRpc3BsYXlwcmVzZW50Y2hhbmdlJyxcbiAgICAgIHRoaXMub25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlXy5iaW5kKHRoaXMpKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3ZyZGlzcGxheWRldmljZXBhcmFtc2NoYW5nZScsXG4gICAgICB0aGlzLm9uVlJEaXNwbGF5RGV2aWNlUGFyYW1zQ2hhbmdlXy5iaW5kKHRoaXMpKTtcbn1cblxuV2ViVlJNYW5hZ2VyLnByb3RvdHlwZSA9IG5ldyBFbWl0dGVyKCk7XG5cbi8vIEV4cG9zZSB0aGVzZSB2YWx1ZXMgZXh0ZXJuYWxseS5cbldlYlZSTWFuYWdlci5Nb2RlcyA9IE1vZGVzO1xuXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKHNjZW5lLCBjYW1lcmEsIHRpbWVzdGFtcCkge1xuICAvLyBTY2VuZSBtYXkgYmUgYW4gYXJyYXkgb2YgdHdvIHNjZW5lcywgb25lIGZvciBlYWNoIGV5ZS5cbiAgaWYgKHNjZW5lIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB0aGlzLmVmZmVjdC5yZW5kZXIoc2NlbmVbMF0sIGNhbWVyYSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5lZmZlY3QucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICB9XG59O1xuXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLnNldFZSQ29tcGF0aWJsZU92ZXJyaWRlID0gZnVuY3Rpb24oaXNWUkNvbXBhdGlibGUpIHtcbiAgdGhpcy5pc1ZSQ29tcGF0aWJsZSA9IGlzVlJDb21wYXRpYmxlO1xuICB0aGlzLmlzVlJDb21wYXRpYmxlT3ZlcnJpZGUgPSB0cnVlO1xuXG4gIC8vIERvbid0IGFjdHVhbGx5IGNoYW5nZSBtb2RlcywganVzdCB1cGRhdGUgdGhlIGJ1dHRvbnMuXG4gIHRoaXMuYnV0dG9uLnNldE1vZGUodGhpcy5tb2RlLCB0aGlzLmlzVlJDb21wYXRpYmxlKTtcbn07XG5cbi8qKlxuICogUHJvbWlzZSByZXR1cm5zIHRydWUgaWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIEhNRCBkZXZpY2UgYXZhaWxhYmxlLlxuICovXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLmdldERldmljZUJ5VHlwZV8gPSBmdW5jdGlvbih0eXBlKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBuYXZpZ2F0b3IuZ2V0VlJEaXNwbGF5cygpLnRoZW4oZnVuY3Rpb24oZGlzcGxheXMpIHtcbiAgICAgIC8vIFByb21pc2Ugc3VjY2VlZHMsIGJ1dCBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGRpc3BsYXlzIGFjdHVhbGx5LlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwbGF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZGlzcGxheXNbaV0gaW5zdGFuY2VvZiB0eXBlKSB7XG4gICAgICAgICAgcmVzb2x2ZShkaXNwbGF5c1tpXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAvLyBObyBkaXNwbGF5cyBhcmUgZm91bmQuXG4gICAgICByZXNvbHZlKG51bGwpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogSGVscGVyIGZvciBlbnRlcmluZyBWUiBtb2RlLlxuICovXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLmVudGVyVlJNb2RlXyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmhtZC5yZXF1ZXN0UHJlc2VudCh7XG4gICAgc291cmNlOiB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQsXG4gICAgcHJlZGlzdG9ydGVkOiB0aGlzLnByZWRpc3RvcnRlZFxuICB9KTtcbn07XG5cbldlYlZSTWFuYWdlci5wcm90b3R5cGUuc2V0TW9kZV8gPSBmdW5jdGlvbihtb2RlKSB7XG4gIHZhciBvbGRNb2RlID0gdGhpcy5tb2RlO1xuICBpZiAobW9kZSA9PSB0aGlzLm1vZGUpIHtcbiAgICBjb25zb2xlLndhcm4oJ05vdCBjaGFuZ2luZyBtb2RlcywgYWxyZWFkeSBpbiAlcycsIG1vZGUpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zb2xlLmxvZygnTW9kZSBjaGFuZ2U6ICVzID0+ICVzJywgdGhpcy5tb2RlLCBtb2RlKTtcbiAgdGhpcy5tb2RlID0gbW9kZTtcbiAgdGhpcy5idXR0b24uc2V0TW9kZShtb2RlLCB0aGlzLmlzVlJDb21wYXRpYmxlKTtcblxuICAvLyBFbWl0IGFuIGV2ZW50IGluZGljYXRpbmcgdGhlIG1vZGUgY2hhbmdlZC5cbiAgdGhpcy5lbWl0KCdtb2RlY2hhbmdlJywgbW9kZSwgb2xkTW9kZSk7XG59O1xuXG4vKipcbiAqIE1haW4gYnV0dG9uIHdhcyBjbGlja2VkLlxuICovXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLm9uRlNDbGlja18gPSBmdW5jdGlvbigpIHtcbiAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICBjYXNlIE1vZGVzLk5PUk1BTDpcbiAgICAgIC8vIFRPRE86IFJlbW92ZSB0aGlzIGhhY2sgaWYvd2hlbiBpT1MgZ2V0cyByZWFsIGZ1bGxzY3JlZW4gbW9kZS5cbiAgICAgIC8vIElmIHRoaXMgaXMgYW4gaWZyYW1lIG9uIGlPUywgYnJlYWsgb3V0IGFuZCBvcGVuIGluIG5vX2Z1bGxzY3JlZW4gbW9kZS5cbiAgICAgIGlmIChVdGlsLmlzSU9TKCkgJiYgVXRpbC5pc0lGcmFtZSgpKSB7XG4gICAgICAgIHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgICAgdXJsID0gVXRpbC5hcHBlbmRRdWVyeVBhcmFtZXRlcih1cmwsICdub19mdWxsc2NyZWVuJywgJ3RydWUnKTtcbiAgICAgICAgdXJsID0gVXRpbC5hcHBlbmRRdWVyeVBhcmFtZXRlcih1cmwsICdzdGFydF9tb2RlJywgTW9kZXMuTUFHSUNfV0lORE9XKTtcbiAgICAgICAgdG9wLmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0TW9kZV8oTW9kZXMuTUFHSUNfV0lORE9XKTtcbiAgICAgIHRoaXMucmVxdWVzdEZ1bGxzY3JlZW5fKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIE1vZGVzLk1BR0lDX1dJTkRPVzpcbiAgICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbkRpc2FibGVkKSB7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRNb2RlXyhNb2Rlcy5OT1JNQUwpO1xuICAgICAgdGhpcy5leGl0RnVsbHNjcmVlbl8oKTtcbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSBWUiBidXR0b24gd2FzIGNsaWNrZWQuXG4gKi9cbldlYlZSTWFuYWdlci5wcm90b3R5cGUub25WUkNsaWNrXyA9IGZ1bmN0aW9uKCkge1xuICAvLyBUT0RPOiBSZW1vdmUgdGhpcyBoYWNrIHdoZW4gaU9TIGhhcyBmdWxsc2NyZWVuIG1vZGUuXG4gIC8vIElmIHRoaXMgaXMgYW4gaWZyYW1lIG9uIGlPUywgYnJlYWsgb3V0IGFuZCBvcGVuIGluIG5vX2Z1bGxzY3JlZW4gbW9kZS5cbiAgaWYgKHRoaXMubW9kZSA9PSBNb2Rlcy5OT1JNQUwgJiYgVXRpbC5pc0lPUygpICYmIFV0aWwuaXNJRnJhbWUoKSkge1xuICAgIHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICB1cmwgPSBVdGlsLmFwcGVuZFF1ZXJ5UGFyYW1ldGVyKHVybCwgJ25vX2Z1bGxzY3JlZW4nLCAndHJ1ZScpO1xuICAgIHVybCA9IFV0aWwuYXBwZW5kUXVlcnlQYXJhbWV0ZXIodXJsLCAnc3RhcnRfbW9kZScsIE1vZGVzLlZSKTtcbiAgICB0b3AubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5lbnRlclZSTW9kZV8oKTtcbn07XG5cbldlYlZSTWFuYWdlci5wcm90b3R5cGUucmVxdWVzdEZ1bGxzY3JlZW5fID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjYW52YXMgPSBkb2N1bWVudC5ib2R5O1xuICAvL3ZhciBjYW52YXMgPSB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQ7XG4gIGlmIChjYW52YXMucmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICBjYW52YXMucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgfSBlbHNlIGlmIChjYW52YXMubW96UmVxdWVzdEZ1bGxTY3JlZW4pIHtcbiAgICBjYW52YXMubW96UmVxdWVzdEZ1bGxTY3JlZW4oKTtcbiAgfSBlbHNlIGlmIChjYW52YXMud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICBjYW52YXMud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgfSBlbHNlIGlmIChjYW52YXMubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgIGNhbnZhcy5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gIH1cbn07XG5cbldlYlZSTWFuYWdlci5wcm90b3R5cGUuZXhpdEZ1bGxzY3JlZW5fID0gZnVuY3Rpb24oKSB7XG4gIGlmIChkb2N1bWVudC5leGl0RnVsbHNjcmVlbikge1xuICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgIGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKTtcbiAgfSBlbHNlIGlmIChkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbikge1xuICAgIGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbikge1xuICAgIGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcbiAgfVxufTtcblxuV2ViVlJNYW5hZ2VyLnByb3RvdHlwZS5vblZSRGlzcGxheVByZXNlbnRDaGFuZ2VfID0gZnVuY3Rpb24oZSkge1xuICBjb25zb2xlLmxvZygnb25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlXycsIGUpO1xuICBpZiAodGhpcy5obWQuaXNQcmVzZW50aW5nKSB7XG4gICAgdGhpcy5zZXRNb2RlXyhNb2Rlcy5WUik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZXRNb2RlXyhNb2Rlcy5OT1JNQUwpO1xuICB9XG59O1xuXG5XZWJWUk1hbmFnZXIucHJvdG90eXBlLm9uVlJEaXNwbGF5RGV2aWNlUGFyYW1zQ2hhbmdlXyA9IGZ1bmN0aW9uKGUpIHtcbiAgY29uc29sZS5sb2coJ29uVlJEaXNwbGF5RGV2aWNlUGFyYW1zQ2hhbmdlXycsIGUpO1xufTtcblxuV2ViVlJNYW5hZ2VyLnByb3RvdHlwZS5vbkZ1bGxzY3JlZW5DaGFuZ2VfID0gZnVuY3Rpb24oZSkge1xuICAvLyBJZiB3ZSBsZWF2ZSBmdWxsLXNjcmVlbiwgZ28gYmFjayB0byBub3JtYWwgbW9kZS5cbiAgaWYgKGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50ID09PSBudWxsIHx8XG4gICAgICBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCA9PT0gbnVsbCkge1xuICAgIHRoaXMuc2V0TW9kZV8oTW9kZXMuTk9STUFMKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJWUk1hbmFnZXI7XG4iLCIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG5cbn0se31dLDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIFV0aWwgPSBfZGVyZXFfKCcuL3V0aWwuanMnKTtcbnZhciBXYWtlTG9jayA9IF9kZXJlcV8oJy4vd2FrZWxvY2suanMnKTtcblxuLy8gU3RhcnQgYXQgYSBoaWdoZXIgbnVtYmVyIHRvIHJlZHVjZSBjaGFuY2Ugb2YgY29uZmxpY3QuXG52YXIgbmV4dERpc3BsYXlJZCA9IDEwMDA7XG52YXIgaGFzU2hvd0RlcHJlY2F0aW9uV2FybmluZyA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBhbGwgVlIgZGlzcGxheXMuXG4gKi9cbmZ1bmN0aW9uIFZSRGlzcGxheSgpIHtcbiAgdGhpcy5pc1BvbHlmaWxsZWQgPSB0cnVlO1xuICB0aGlzLmRpc3BsYXlJZCA9IG5leHREaXNwbGF5SWQrKztcbiAgdGhpcy5kaXNwbGF5TmFtZSA9ICd3ZWJ2ci1wb2x5ZmlsbCBkaXNwbGF5TmFtZSc7XG5cbiAgdGhpcy5pc0Nvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuaXNQcmVzZW50aW5nID0gZmFsc2U7XG4gIHRoaXMuY2FwYWJpbGl0aWVzID0ge1xuICAgIGhhc1Bvc2l0aW9uOiBmYWxzZSxcbiAgICBoYXNPcmllbnRhdGlvbjogZmFsc2UsXG4gICAgaGFzRXh0ZXJuYWxEaXNwbGF5OiBmYWxzZSxcbiAgICBjYW5QcmVzZW50OiBmYWxzZSxcbiAgICBtYXhMYXllcnM6IDFcbiAgfTtcbiAgdGhpcy5zdGFnZVBhcmFtZXRlcnMgPSBudWxsO1xuXG4gIC8vIFwiUHJpdmF0ZVwiIG1lbWJlcnMuXG4gIHRoaXMud2FpdGluZ0ZvclByZXNlbnRfID0gZmFsc2U7XG4gIHRoaXMubGF5ZXJfID0gbnVsbDtcblxuICB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XyA9IG51bGw7XG4gIHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfID0gbnVsbDtcbiAgdGhpcy5mdWxsc2NyZWVuRWxlbWVudENhY2hlZFN0eWxlXyA9IG51bGw7XG5cbiAgdGhpcy5mdWxsc2NyZWVuRXZlbnRUYXJnZXRfID0gbnVsbDtcbiAgdGhpcy5mdWxsc2NyZWVuQ2hhbmdlSGFuZGxlcl8gPSBudWxsO1xuICB0aGlzLmZ1bGxzY3JlZW5FcnJvckhhbmRsZXJfID0gbnVsbDtcblxuICB0aGlzLndha2Vsb2NrXyA9IG5ldyBXYWtlTG9jaygpO1xufVxuXG5WUkRpc3BsYXkucHJvdG90eXBlLmdldFBvc2UgPSBmdW5jdGlvbigpIHtcbiAgLy8gVE9ETzogVGVjaG5pY2FsbHkgdGhpcyBzaG91bGQgcmV0YWluIGl0J3MgdmFsdWUgZm9yIHRoZSBkdXJhdGlvbiBvZiBhIGZyYW1lXG4gIC8vIGJ1dCBJIGRvdWJ0IHRoYXQncyBwcmFjdGljYWwgdG8gZG8gaW4gamF2YXNjcmlwdC5cbiAgcmV0dXJuIHRoaXMuZ2V0SW1tZWRpYXRlUG9zZSgpO1xufTtcblxuVlJEaXNwbGF5LnByb3RvdHlwZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLndyYXBGb3JGdWxsc2NyZWVuID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAvLyBEb24ndCB3cmFwIGluIGlPUy5cbiAgaWYgKFV0aWwuaXNJT1MoKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIGlmICghdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8pIHtcbiAgICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBjc3NQcm9wZXJ0aWVzID0gW1xuICAgICAgJ2hlaWdodDogJyArIE1hdGgubWluKHNjcmVlbi5oZWlnaHQsIHNjcmVlbi53aWR0aCkgKyAncHggIWltcG9ydGFudCcsXG4gICAgICAndG9wOiAwICFpbXBvcnRhbnQnLFxuICAgICAgJ2xlZnQ6IDAgIWltcG9ydGFudCcsXG4gICAgICAncmlnaHQ6IDAgIWltcG9ydGFudCcsXG4gICAgICAnYm9yZGVyOiAwJyxcbiAgICAgICdtYXJnaW46IDAnLFxuICAgICAgJ3BhZGRpbmc6IDAnLFxuICAgICAgJ3otaW5kZXg6IDk5OTk5OSAhaW1wb3J0YW50JyxcbiAgICAgICdwb3NpdGlvbjogZml4ZWQnLFxuICAgIF07XG4gICAgdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8uc2V0QXR0cmlidXRlKCdzdHlsZScsIGNzc1Byb3BlcnRpZXMuam9pbignOyAnKSArICc7Jyk7XG4gICAgdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8uY2xhc3NMaXN0LmFkZCgnd2VidnItcG9seWZpbGwtZnVsbHNjcmVlbi13cmFwcGVyJyk7XG4gIH1cblxuICBpZiAodGhpcy5mdWxsc2NyZWVuRWxlbWVudF8gPT0gZWxlbWVudCkge1xuICAgIHJldHVybiB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXztcbiAgfVxuXG4gIC8vIFJlbW92ZSBhbnkgcHJldmlvdXNseSBhcHBsaWVkIHdyYXBwZXJzXG4gIHRoaXMucmVtb3ZlRnVsbHNjcmVlbldyYXBwZXIoKTtcblxuICB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XyA9IGVsZW1lbnQ7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xy5wYXJlbnRFbGVtZW50O1xuICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfLCB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xyk7XG4gIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xyk7XG4gIHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfLmluc2VydEJlZm9yZSh0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XywgdGhpcy5mdWxsc2NyZWVuV3JhcHBlcl8uZmlyc3RDaGlsZCk7XG4gIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8gPSB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Xy5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBmdW5jdGlvbiBhcHBseUZ1bGxzY3JlZW5FbGVtZW50U3R5bGUoKSB7XG4gICAgaWYgKCFzZWxmLmZ1bGxzY3JlZW5FbGVtZW50Xykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjc3NQcm9wZXJ0aWVzID0gW1xuICAgICAgJ3Bvc2l0aW9uOiBhYnNvbHV0ZScsXG4gICAgICAndG9wOiAwJyxcbiAgICAgICdsZWZ0OiAwJyxcbiAgICAgICd3aWR0aDogJyArIE1hdGgubWF4KHNjcmVlbi53aWR0aCwgc2NyZWVuLmhlaWdodCkgKyAncHgnLFxuICAgICAgJ2hlaWdodDogJyArIE1hdGgubWluKHNjcmVlbi5oZWlnaHQsIHNjcmVlbi53aWR0aCkgKyAncHgnLFxuICAgICAgJ2JvcmRlcjogMCcsXG4gICAgICAnbWFyZ2luOiAwJyxcbiAgICAgICdwYWRkaW5nOiAwJyxcbiAgICBdO1xuICAgIHNlbGYuZnVsbHNjcmVlbkVsZW1lbnRfLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBjc3NQcm9wZXJ0aWVzLmpvaW4oJzsgJykgKyAnOycpO1xuICB9XG5cbiAgYXBwbHlGdWxsc2NyZWVuRWxlbWVudFN0eWxlKCk7XG5cbiAgcmV0dXJuIHRoaXMuZnVsbHNjcmVlbldyYXBwZXJfO1xufTtcblxuVlJEaXNwbGF5LnByb3RvdHlwZS5yZW1vdmVGdWxsc2NyZWVuV3JhcHBlciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuZnVsbHNjcmVlbkVsZW1lbnRfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGVsZW1lbnQgPSB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XztcbiAgaWYgKHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8pIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50Q2FjaGVkU3R5bGVfKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgfVxuICB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50XyA9IG51bGw7XG4gIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnRDYWNoZWRTdHlsZV8gPSBudWxsO1xuXG4gIHZhciBwYXJlbnQgPSB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXy5wYXJlbnRFbGVtZW50O1xuICB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXy5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgcGFyZW50Lmluc2VydEJlZm9yZShlbGVtZW50LCB0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyk7XG4gIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLmZ1bGxzY3JlZW5XcmFwcGVyXyk7XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLnJlcXVlc3RQcmVzZW50ID0gZnVuY3Rpb24obGF5ZXJzKSB7XG4gIGlmICh0aGlzLmlzUHJlc2VudGluZykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0FscmVhZHkgcHJlc2VudGluZyEnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghKGxheWVycyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgIGlmICghaGFzU2hvd0RlcHJlY2F0aW9uV2FybmluZykge1xuICAgICAgY29uc29sZS53YXJuKFwiVXNpbmcgYSBkZXByZWNhdGVkIGZvcm0gb2YgcmVxdWVzdFByZXNlbnQuIFNob3VsZCBwYXNzIGluIGFuIGFycmF5IG9mIFZSTGF5ZXJzLlwiKTtcbiAgICAgIGhhc1Nob3dEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuICAgIH1cbiAgICBsYXllcnMgPSBbbGF5ZXJzXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoIXNlbGYuY2FwYWJpbGl0aWVzLmNhblByZXNlbnQpIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1ZSRGlzcGxheSBpcyBub3QgY2FwYWJsZSBvZiBwcmVzZW50aW5nLicpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobGF5ZXJzLmxlbmd0aCA9PSAwIHx8IGxheWVycy5sZW5ndGggPiBzZWxmLmNhcGFiaWxpdGllcy5tYXhMYXllcnMpIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0ludmFsaWQgbnVtYmVyIG9mIGxheWVycy4nKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VsZi5sYXllcl8gPSBsYXllcnNbMF07XG5cbiAgICBzZWxmLndhaXRpbmdGb3JQcmVzZW50XyA9IGZhbHNlO1xuICAgIGlmIChzZWxmLmxheWVyXyAmJiBzZWxmLmxheWVyXy5zb3VyY2UpIHtcbiAgICAgIHZhciBmdWxsc2NyZWVuRWxlbWVudCA9IHNlbGYud3JhcEZvckZ1bGxzY3JlZW4oc2VsZi5sYXllcl8uc291cmNlKTtcblxuICAgICAgZnVuY3Rpb24gb25GdWxsc2NyZWVuQ2hhbmdlKCkge1xuICAgICAgICB2YXIgYWN0dWFsRnVsbHNjcmVlbkVsZW1lbnQgPSBVdGlsLmdldEZ1bGxzY3JlZW5FbGVtZW50KCk7XG5cbiAgICAgICAgc2VsZi5pc1ByZXNlbnRpbmcgPSAoZnVsbHNjcmVlbkVsZW1lbnQgPT09IGFjdHVhbEZ1bGxzY3JlZW5FbGVtZW50KTtcbiAgICAgICAgaWYgKHNlbGYuaXNQcmVzZW50aW5nKSB7XG4gICAgICAgICAgaWYgKHNjcmVlbi5vcmllbnRhdGlvbiAmJiBzY3JlZW4ub3JpZW50YXRpb24ubG9jaykge1xuICAgICAgICAgICAgc2NyZWVuLm9yaWVudGF0aW9uLmxvY2soJ2xhbmRzY2FwZS1wcmltYXJ5JykuY2F0Y2goZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdzY3JlZW4ub3JpZW50YXRpb24ubG9jaygpIGZhaWxlZCBkdWUgdG8nLCBlcnJvci5tZXNzYWdlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYud2FpdGluZ0ZvclByZXNlbnRfID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5iZWdpblByZXNlbnRfKCk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzY3JlZW4ub3JpZW50YXRpb24gJiYgc2NyZWVuLm9yaWVudGF0aW9uLnVubG9jaykge1xuICAgICAgICAgICAgc2NyZWVuLm9yaWVudGF0aW9uLnVubG9jaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxmLnJlbW92ZUZ1bGxzY3JlZW5XcmFwcGVyKCk7XG4gICAgICAgICAgc2VsZi53YWtlbG9ja18ucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYuZW5kUHJlc2VudF8oKTtcbiAgICAgICAgICBzZWxmLnJlbW92ZUZ1bGxzY3JlZW5MaXN0ZW5lcnNfKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5maXJlVlJEaXNwbGF5UHJlc2VudENoYW5nZV8oKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG9uRnVsbHNjcmVlbkVycm9yKCkge1xuICAgICAgICBpZiAoIXNlbGYud2FpdGluZ0ZvclByZXNlbnRfKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5yZW1vdmVGdWxsc2NyZWVuV3JhcHBlcigpO1xuICAgICAgICBzZWxmLnJlbW92ZUZ1bGxzY3JlZW5MaXN0ZW5lcnNfKCk7XG5cbiAgICAgICAgc2VsZi53YWtlbG9ja18ucmVsZWFzZSgpO1xuICAgICAgICBzZWxmLndhaXRpbmdGb3JQcmVzZW50XyA9IGZhbHNlO1xuICAgICAgICBzZWxmLmlzUHJlc2VudGluZyA9IGZhbHNlO1xuXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1VuYWJsZSB0byBwcmVzZW50LicpKTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5hZGRGdWxsc2NyZWVuTGlzdGVuZXJzXyhmdWxsc2NyZWVuRWxlbWVudCxcbiAgICAgICAgICBvbkZ1bGxzY3JlZW5DaGFuZ2UsIG9uRnVsbHNjcmVlbkVycm9yKTtcblxuICAgICAgaWYgKFV0aWwucmVxdWVzdEZ1bGxzY3JlZW4oZnVsbHNjcmVlbkVsZW1lbnQpKSB7XG4gICAgICAgIHNlbGYud2FrZWxvY2tfLnJlcXVlc3QoKTtcbiAgICAgICAgc2VsZi53YWl0aW5nRm9yUHJlc2VudF8gPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChVdGlsLmlzSU9TKCkpIHtcbiAgICAgICAgLy8gKnNpZ2gqIEp1c3QgZmFrZSBpdC5cbiAgICAgICAgc2VsZi53YWtlbG9ja18ucmVxdWVzdCgpO1xuICAgICAgICBzZWxmLmlzUHJlc2VudGluZyA9IHRydWU7XG4gICAgICAgIHNlbGYuYmVnaW5QcmVzZW50XygpO1xuICAgICAgICBzZWxmLmZpcmVWUkRpc3BsYXlQcmVzZW50Q2hhbmdlXygpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzZWxmLndhaXRpbmdGb3JQcmVzZW50XyAmJiAhVXRpbC5pc0lPUygpKSB7XG4gICAgICBVdGlsLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdVbmFibGUgdG8gcHJlc2VudC4nKSk7XG4gICAgfVxuICB9KTtcbn07XG5cblZSRGlzcGxheS5wcm90b3R5cGUuZXhpdFByZXNlbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdhc1ByZXNlbnRpbmcgPSB0aGlzLmlzUHJlc2VudGluZztcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLmlzUHJlc2VudGluZyA9IGZhbHNlO1xuICB0aGlzLmxheWVyXyA9IG51bGw7XG4gIHRoaXMud2FrZWxvY2tfLnJlbGVhc2UoKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKHdhc1ByZXNlbnRpbmcpIHtcbiAgICAgIGlmICghVXRpbC5leGl0RnVsbHNjcmVlbigpICYmIFV0aWwuaXNJT1MoKSkge1xuICAgICAgICBzZWxmLmVuZFByZXNlbnRfKCk7XG4gICAgICAgIHNlbGYuZmlyZVZSRGlzcGxheVByZXNlbnRDaGFuZ2VfKCk7XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcignV2FzIG5vdCBwcmVzZW50aW5nIHRvIFZSRGlzcGxheS4nKSk7XG4gICAgfVxuICB9KTtcbn07XG5cblZSRGlzcGxheS5wcm90b3R5cGUuZ2V0TGF5ZXJzID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmxheWVyXykge1xuICAgIHJldHVybiBbdGhpcy5sYXllcl9dO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5cblZSRGlzcGxheS5wcm90b3R5cGUuZmlyZVZSRGlzcGxheVByZXNlbnRDaGFuZ2VfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCgndnJkaXNwbGF5cHJlc2VudGNoYW5nZScsIHtkZXRhaWw6IHt2cmRpc3BsYXk6IHRoaXN9fSk7XG4gIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn07XG5cblZSRGlzcGxheS5wcm90b3R5cGUuYWRkRnVsbHNjcmVlbkxpc3RlbmVyc18gPSBmdW5jdGlvbihlbGVtZW50LCBjaGFuZ2VIYW5kbGVyLCBlcnJvckhhbmRsZXIpIHtcbiAgdGhpcy5yZW1vdmVGdWxsc2NyZWVuTGlzdGVuZXJzXygpO1xuXG4gIHRoaXMuZnVsbHNjcmVlbkV2ZW50VGFyZ2V0XyA9IGVsZW1lbnQ7XG4gIHRoaXMuZnVsbHNjcmVlbkNoYW5nZUhhbmRsZXJfID0gY2hhbmdlSGFuZGxlcjtcbiAgdGhpcy5mdWxsc2NyZWVuRXJyb3JIYW5kbGVyXyA9IGVycm9ySGFuZGxlcjtcblxuICBpZiAoY2hhbmdlSGFuZGxlcikge1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyLCBmYWxzZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21zZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTtcbiAgfVxuXG4gIGlmIChlcnJvckhhbmRsZXIpIHtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlciwgZmFsc2UpO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0ZnVsbHNjcmVlbmVycm9yJywgZXJyb3JIYW5kbGVyLCBmYWxzZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmVycm9yJywgZXJyb3JIYW5kbGVyLCBmYWxzZSk7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtc2Z1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlciwgZmFsc2UpO1xuICB9XG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLnJlbW92ZUZ1bGxzY3JlZW5MaXN0ZW5lcnNfID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5mdWxsc2NyZWVuRXZlbnRUYXJnZXRfKVxuICAgIHJldHVybjtcblxuICB2YXIgZWxlbWVudCA9IHRoaXMuZnVsbHNjcmVlbkV2ZW50VGFyZ2V0XztcblxuICBpZiAodGhpcy5mdWxsc2NyZWVuQ2hhbmdlSGFuZGxlcl8pIHtcbiAgICB2YXIgY2hhbmdlSGFuZGxlciA9IHRoaXMuZnVsbHNjcmVlbkNoYW5nZUhhbmRsZXJfO1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyLCBmYWxzZSk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21zZnVsbHNjcmVlbmNoYW5nZScsIGNoYW5nZUhhbmRsZXIsIGZhbHNlKTtcbiAgfVxuXG4gIGlmICh0aGlzLmZ1bGxzY3JlZW5FcnJvckhhbmRsZXJfKSB7XG4gICAgdmFyIGVycm9ySGFuZGxlciA9IHRoaXMuZnVsbHNjcmVlbkVycm9ySGFuZGxlcl87XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlciwgZmFsc2UpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5lcnJvcicsIGVycm9ySGFuZGxlciwgZmFsc2UpO1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbXNmdWxsc2NyZWVuZXJyb3InLCBlcnJvckhhbmRsZXIsIGZhbHNlKTtcbiAgfVxuXG4gIHRoaXMuZnVsbHNjcmVlbkV2ZW50VGFyZ2V0XyA9IG51bGw7XG4gIHRoaXMuZnVsbHNjcmVlbkNoYW5nZUhhbmRsZXJfID0gbnVsbDtcbiAgdGhpcy5mdWxsc2NyZWVuRXJyb3JIYW5kbGVyXyA9IG51bGw7XG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLmJlZ2luUHJlc2VudF8gPSBmdW5jdGlvbigpIHtcbiAgLy8gT3ZlcnJpZGUgdG8gYWRkIGN1c3RvbSBiZWhhdmlvciB3aGVuIHByZXNlbnRhdGlvbiBiZWdpbnMuXG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLmVuZFByZXNlbnRfID0gZnVuY3Rpb24oKSB7XG4gIC8vIE92ZXJyaWRlIHRvIGFkZCBjdXN0b20gYmVoYXZpb3Igd2hlbiBwcmVzZW50YXRpb24gZW5kcy5cbn07XG5cblZSRGlzcGxheS5wcm90b3R5cGUuc3VibWl0RnJhbWUgPSBmdW5jdGlvbihwb3NlKSB7XG4gIC8vIE92ZXJyaWRlIHRvIGFkZCBjdXN0b20gYmVoYXZpb3IgZm9yIGZyYW1lIHN1Ym1pc3Npb24uXG59O1xuXG5WUkRpc3BsYXkucHJvdG90eXBlLmdldEV5ZVBhcmFtZXRlcnMgPSBmdW5jdGlvbih3aGljaEV5ZSkge1xuICAvLyBPdmVycmlkZSB0byByZXR1cm4gYWNjdXJhdGUgZXllIHBhcmFtZXRlcnMgaWYgY2FuUHJlc2VudCBpcyB0cnVlLlxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qXG4gKiBEZXByZWNhdGVkIGNsYXNzZXNcbiAqL1xuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBhbGwgVlIgZGV2aWNlcy4gKERlcHJlY2F0ZWQpXG4gKi9cbmZ1bmN0aW9uIFZSRGV2aWNlKCkge1xuICB0aGlzLmlzUG9seWZpbGxlZCA9IHRydWU7XG4gIHRoaXMuaGFyZHdhcmVVbml0SWQgPSAnd2VidnItcG9seWZpbGwgaGFyZHdhcmVVbml0SWQnO1xuICB0aGlzLmRldmljZUlkID0gJ3dlYnZyLXBvbHlmaWxsIGRldmljZUlkJztcbiAgdGhpcy5kZXZpY2VOYW1lID0gJ3dlYnZyLXBvbHlmaWxsIGRldmljZU5hbWUnO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBhbGwgVlIgSE1EIGRldmljZXMuIChEZXByZWNhdGVkKVxuICovXG5mdW5jdGlvbiBITURWUkRldmljZSgpIHtcbn1cbkhNRFZSRGV2aWNlLnByb3RvdHlwZSA9IG5ldyBWUkRldmljZSgpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBhbGwgVlIgcG9zaXRpb24gc2Vuc29yIGRldmljZXMuIChEZXByZWNhdGVkKVxuICovXG5mdW5jdGlvbiBQb3NpdGlvblNlbnNvclZSRGV2aWNlKCkge1xufVxuUG9zaXRpb25TZW5zb3JWUkRldmljZS5wcm90b3R5cGUgPSBuZXcgVlJEZXZpY2UoKTtcblxubW9kdWxlLmV4cG9ydHMuVlJEaXNwbGF5ID0gVlJEaXNwbGF5O1xubW9kdWxlLmV4cG9ydHMuVlJEZXZpY2UgPSBWUkRldmljZTtcbm1vZHVsZS5leHBvcnRzLkhNRFZSRGV2aWNlID0gSE1EVlJEZXZpY2U7XG5tb2R1bGUuZXhwb3J0cy5Qb3NpdGlvblNlbnNvclZSRGV2aWNlID0gUG9zaXRpb25TZW5zb3JWUkRldmljZTtcblxufSx7XCIuL3V0aWwuanNcIjoyMixcIi4vd2FrZWxvY2suanNcIjoyNH1dLDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIENhcmRib2FyZFVJID0gX2RlcmVxXygnLi9jYXJkYm9hcmQtdWkuanMnKTtcbnZhciBVdGlsID0gX2RlcmVxXygnLi91dGlsLmpzJyk7XG52YXIgV0dMVVByZXNlcnZlR0xTdGF0ZSA9IF9kZXJlcV8oJy4vZGVwcy93Z2x1LXByZXNlcnZlLXN0YXRlLmpzJyk7XG5cbnZhciBkaXN0b3J0aW9uVlMgPSBbXG4gICdhdHRyaWJ1dGUgdmVjMiBwb3NpdGlvbjsnLFxuICAnYXR0cmlidXRlIHZlYzMgdGV4Q29vcmQ7JyxcblxuICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDsnLFxuXG4gICd1bmlmb3JtIHZlYzQgdmlld3BvcnRPZmZzZXRTY2FsZVsyXTsnLFxuXG4gICd2b2lkIG1haW4oKSB7JyxcbiAgJyAgdmVjNCB2aWV3cG9ydCA9IHZpZXdwb3J0T2Zmc2V0U2NhbGVbaW50KHRleENvb3JkLnopXTsnLFxuICAnICB2VGV4Q29vcmQgPSAodGV4Q29vcmQueHkgKiB2aWV3cG9ydC56dykgKyB2aWV3cG9ydC54eTsnLFxuICAnICBnbF9Qb3NpdGlvbiA9IHZlYzQoIHBvc2l0aW9uLCAxLjAsIDEuMCApOycsXG4gICd9Jyxcbl0uam9pbignXFxuJyk7XG5cbnZhciBkaXN0b3J0aW9uRlMgPSBbXG4gICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLFxuICAndW5pZm9ybSBzYW1wbGVyMkQgZGlmZnVzZTsnLFxuXG4gICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkOycsXG5cbiAgJ3ZvaWQgbWFpbigpIHsnLFxuICAnICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoZGlmZnVzZSwgdlRleENvb3JkKTsnLFxuICAnfScsXG5dLmpvaW4oJ1xcbicpO1xuXG4vKipcbiAqIEEgbWVzaC1iYXNlZCBkaXN0b3J0ZXIuXG4gKi9cbmZ1bmN0aW9uIENhcmRib2FyZERpc3RvcnRlcihnbCkge1xuICB0aGlzLmdsID0gZ2w7XG4gIHRoaXMuY3R4QXR0cmlicyA9IGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7XG5cbiAgdGhpcy5tZXNoV2lkdGggPSAyMDtcbiAgdGhpcy5tZXNoSGVpZ2h0ID0gMjA7XG5cbiAgdGhpcy5idWZmZXJTY2FsZSA9IFdlYlZSQ29uZmlnLkJVRkZFUl9TQ0FMRTtcblxuICB0aGlzLmJ1ZmZlcldpZHRoID0gZ2wuZHJhd2luZ0J1ZmZlcldpZHRoO1xuICB0aGlzLmJ1ZmZlckhlaWdodCA9IGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQ7XG5cbiAgLy8gUGF0Y2hpbmcgc3VwcG9ydFxuICB0aGlzLnJlYWxCaW5kRnJhbWVidWZmZXIgPSBnbC5iaW5kRnJhbWVidWZmZXI7XG4gIHRoaXMucmVhbEVuYWJsZSA9IGdsLmVuYWJsZTtcbiAgdGhpcy5yZWFsRGlzYWJsZSA9IGdsLmRpc2FibGU7XG4gIHRoaXMucmVhbENvbG9yTWFzayA9IGdsLmNvbG9yTWFzaztcbiAgdGhpcy5yZWFsQ2xlYXJDb2xvciA9IGdsLmNsZWFyQ29sb3I7XG4gIHRoaXMucmVhbFZpZXdwb3J0ID0gZ2wudmlld3BvcnQ7XG5cbiAgaWYgKCFVdGlsLmlzSU9TKCkpIHtcbiAgICB0aGlzLnJlYWxDYW52YXNXaWR0aCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2wuY2FudmFzLl9fcHJvdG9fXywgJ3dpZHRoJyk7XG4gICAgdGhpcy5yZWFsQ2FudmFzSGVpZ2h0ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbC5jYW52YXMuX19wcm90b19fLCAnaGVpZ2h0Jyk7XG4gIH1cblxuICB0aGlzLmlzUGF0Y2hlZCA9IGZhbHNlO1xuXG4gIC8vIFN0YXRlIHRyYWNraW5nXG4gIHRoaXMubGFzdEJvdW5kRnJhbWVidWZmZXIgPSBudWxsO1xuICB0aGlzLmN1bGxGYWNlID0gZmFsc2U7XG4gIHRoaXMuZGVwdGhUZXN0ID0gZmFsc2U7XG4gIHRoaXMuYmxlbmQgPSBmYWxzZTtcbiAgdGhpcy5zY2lzc29yVGVzdCA9IGZhbHNlO1xuICB0aGlzLnN0ZW5jaWxUZXN0ID0gZmFsc2U7XG4gIHRoaXMudmlld3BvcnQgPSBbMCwgMCwgMCwgMF07XG4gIHRoaXMuY29sb3JNYXNrID0gW3RydWUsIHRydWUsIHRydWUsIHRydWVdO1xuICB0aGlzLmNsZWFyQ29sb3IgPSBbMCwgMCwgMCwgMF07XG5cbiAgdGhpcy5hdHRyaWJzID0ge1xuICAgIHBvc2l0aW9uOiAwLFxuICAgIHRleENvb3JkOiAxXG4gIH07XG4gIHRoaXMucHJvZ3JhbSA9IFV0aWwubGlua1Byb2dyYW0oZ2wsIGRpc3RvcnRpb25WUywgZGlzdG9ydGlvbkZTLCB0aGlzLmF0dHJpYnMpO1xuICB0aGlzLnVuaWZvcm1zID0gVXRpbC5nZXRQcm9ncmFtVW5pZm9ybXMoZ2wsIHRoaXMucHJvZ3JhbSk7XG5cbiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlID0gbmV3IEZsb2F0MzJBcnJheSg4KTtcbiAgdGhpcy5zZXRUZXh0dXJlQm91bmRzKCk7XG5cbiAgdGhpcy52ZXJ0ZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgdGhpcy5pbmRleEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICB0aGlzLmluZGV4Q291bnQgPSAwO1xuXG4gIHRoaXMucmVuZGVyVGFyZ2V0ID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICB0aGlzLmZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuICB0aGlzLmRlcHRoU3RlbmNpbEJ1ZmZlciA9IG51bGw7XG4gIHRoaXMuZGVwdGhCdWZmZXIgPSBudWxsO1xuICB0aGlzLnN0ZW5jaWxCdWZmZXIgPSBudWxsO1xuXG4gIGlmICh0aGlzLmN0eEF0dHJpYnMuZGVwdGggJiYgdGhpcy5jdHhBdHRyaWJzLnN0ZW5jaWwpIHtcbiAgICB0aGlzLmRlcHRoU3RlbmNpbEJ1ZmZlciA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuICB9IGVsc2UgaWYgKHRoaXMuY3R4QXR0cmlicy5kZXB0aCkge1xuICAgIHRoaXMuZGVwdGhCdWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmN0eEF0dHJpYnMuc3RlbmNpbCkge1xuICAgIHRoaXMuc3RlbmNpbEJ1ZmZlciA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuICB9XG5cbiAgdGhpcy5wYXRjaCgpO1xuXG4gIHRoaXMub25SZXNpemUoKTtcblxuICBpZiAoIVdlYlZSQ29uZmlnLkNBUkRCT0FSRF9VSV9ESVNBQkxFRCkge1xuICAgIHRoaXMuY2FyZGJvYXJkVUkgPSBuZXcgQ2FyZGJvYXJkVUkoZ2wpO1xuICB9XG59O1xuXG4vKipcbiAqIFRlYXJzIGRvd24gYWxsIHRoZSByZXNvdXJjZXMgY3JlYXRlZCBieSB0aGUgZGlzdG9ydGVyIGFuZCByZW1vdmVzIGFueVxuICogcGF0Y2hlcy5cbiAqL1xuQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBnbCA9IHRoaXMuZ2w7XG5cbiAgdGhpcy51bnBhdGNoKCk7XG5cbiAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xuICBnbC5kZWxldGVCdWZmZXIodGhpcy52ZXJ0ZXhCdWZmZXIpO1xuICBnbC5kZWxldGVCdWZmZXIodGhpcy5pbmRleEJ1ZmZlcik7XG4gIGdsLmRlbGV0ZVRleHR1cmUodGhpcy5yZW5kZXJUYXJnZXQpO1xuICBnbC5kZWxldGVGcmFtZWJ1ZmZlcih0aGlzLmZyYW1lYnVmZmVyKTtcbiAgaWYgKHRoaXMuZGVwdGhTdGVuY2lsQnVmZmVyKSB7XG4gICAgZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKHRoaXMuZGVwdGhTdGVuY2lsQnVmZmVyKTtcbiAgfVxuICBpZiAodGhpcy5kZXB0aEJ1ZmZlcikge1xuICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcih0aGlzLmRlcHRoQnVmZmVyKTtcbiAgfVxuICBpZiAodGhpcy5zdGVuY2lsQnVmZmVyKSB7XG4gICAgZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKHRoaXMuc3RlbmNpbEJ1ZmZlcik7XG4gIH1cblxuICBpZiAodGhpcy5jYXJkYm9hcmRVSSkge1xuICAgIHRoaXMuY2FyZGJvYXJkVUkuZGVzdHJveSgpO1xuICB9XG59O1xuXG5cbi8qKlxuICogUmVzaXplcyB0aGUgYmFja2J1ZmZlciB0byBtYXRjaCB0aGUgY2FudmFzIHdpZHRoIGFuZCBoZWlnaHQuXG4gKi9cbkNhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGdsID0gdGhpcy5nbDtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBnbFN0YXRlID0gW1xuICAgIGdsLlJFTkRFUkJVRkZFUl9CSU5ESU5HLFxuICAgIGdsLlRFWFRVUkVfQklORElOR18yRCwgZ2wuVEVYVFVSRTBcbiAgXTtcblxuICBXR0xVUHJlc2VydmVHTFN0YXRlKGdsLCBnbFN0YXRlLCBmdW5jdGlvbihnbCkge1xuICAgIC8vIEJpbmQgcmVhbCBiYWNrYnVmZmVyIGFuZCBjbGVhciBpdCBvbmNlLiBXZSBkb24ndCBuZWVkIHRvIGNsZWFyIGl0IGFnYWluXG4gICAgLy8gYWZ0ZXIgdGhhdCBiZWNhdXNlIHdlJ3JlIG92ZXJ3cml0aW5nIHRoZSBzYW1lIGFyZWEgZXZlcnkgZnJhbWUuXG4gICAgc2VsZi5yZWFsQmluZEZyYW1lYnVmZmVyLmNhbGwoZ2wsIGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcblxuICAgIC8vIFB1dCB0aGluZ3MgaW4gYSBnb29kIHN0YXRlXG4gICAgaWYgKHNlbGYuc2Npc3NvclRlc3QpIHsgc2VsZi5yZWFsRGlzYWJsZS5jYWxsKGdsLCBnbC5TQ0lTU09SX1RFU1QpOyB9XG4gICAgc2VsZi5yZWFsQ29sb3JNYXNrLmNhbGwoZ2wsIHRydWUsIHRydWUsIHRydWUsIHRydWUpO1xuICAgIHNlbGYucmVhbFZpZXdwb3J0LmNhbGwoZ2wsIDAsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG4gICAgc2VsZi5yZWFsQ2xlYXJDb2xvci5jYWxsKGdsLCAwLCAwLCAwLCAxKTtcblxuICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQpO1xuXG4gICAgLy8gTm93IGJpbmQgYW5kIHJlc2l6ZSB0aGUgZmFrZSBiYWNrYnVmZmVyXG4gICAgc2VsZi5yZWFsQmluZEZyYW1lYnVmZmVyLmNhbGwoZ2wsIGdsLkZSQU1FQlVGRkVSLCBzZWxmLmZyYW1lYnVmZmVyKTtcblxuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHNlbGYucmVuZGVyVGFyZ2V0KTtcbiAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIHNlbGYuY3R4QXR0cmlicy5hbHBoYSA/IGdsLlJHQkEgOiBnbC5SR0IsXG4gICAgICAgIHNlbGYuYnVmZmVyV2lkdGgsIHNlbGYuYnVmZmVySGVpZ2h0LCAwLFxuICAgICAgICBzZWxmLmN0eEF0dHJpYnMuYWxwaGEgPyBnbC5SR0JBIDogZ2wuUkdCLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfMkQsIHNlbGYucmVuZGVyVGFyZ2V0LCAwKTtcblxuICAgIGlmIChzZWxmLmN0eEF0dHJpYnMuZGVwdGggJiYgc2VsZi5jdHhBdHRyaWJzLnN0ZW5jaWwpIHtcbiAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBzZWxmLmRlcHRoU3RlbmNpbEJ1ZmZlcik7XG4gICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKGdsLlJFTkRFUkJVRkZFUiwgZ2wuREVQVEhfU1RFTkNJTCxcbiAgICAgICAgICBzZWxmLmJ1ZmZlcldpZHRoLCBzZWxmLmJ1ZmZlckhlaWdodCk7XG4gICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULFxuICAgICAgICAgIGdsLlJFTkRFUkJVRkZFUiwgc2VsZi5kZXB0aFN0ZW5jaWxCdWZmZXIpO1xuICAgIH0gZWxzZSBpZiAoc2VsZi5jdHhBdHRyaWJzLmRlcHRoKSB7XG4gICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgc2VsZi5kZXB0aEJ1ZmZlcik7XG4gICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKGdsLlJFTkRFUkJVRkZFUiwgZ2wuREVQVEhfQ09NUE9ORU5UMTYsXG4gICAgICAgICAgc2VsZi5idWZmZXJXaWR0aCwgc2VsZi5idWZmZXJIZWlnaHQpO1xuICAgICAgZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGdsLkRFUFRIX0FUVEFDSE1FTlQsXG4gICAgICAgICAgZ2wuUkVOREVSQlVGRkVSLCBzZWxmLmRlcHRoQnVmZmVyKTtcbiAgICB9IGVsc2UgaWYgKHNlbGYuY3R4QXR0cmlicy5zdGVuY2lsKSB7XG4gICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgc2VsZi5zdGVuY2lsQnVmZmVyKTtcbiAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5TVEVOQ0lMX0lOREVYOCxcbiAgICAgICAgICBzZWxmLmJ1ZmZlcldpZHRoLCBzZWxmLmJ1ZmZlckhlaWdodCk7XG4gICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuU1RFTkNJTF9BVFRBQ0hNRU5ULFxuICAgICAgICAgIGdsLlJFTkRFUkJVRkZFUiwgc2VsZi5zdGVuY2lsQnVmZmVyKTtcbiAgICB9XG5cbiAgICBpZiAoIWdsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoZ2wuRlJBTUVCVUZGRVIpID09PSBnbC5GUkFNRUJVRkZFUl9DT01QTEVURSkge1xuICAgICAgY29uc29sZS5lcnJvcignRnJhbWVidWZmZXIgaW5jb21wbGV0ZSEnKTtcbiAgICB9XG5cbiAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChnbCwgZ2wuRlJBTUVCVUZGRVIsIHNlbGYubGFzdEJvdW5kRnJhbWVidWZmZXIpO1xuXG4gICAgaWYgKHNlbGYuc2Npc3NvclRlc3QpIHsgc2VsZi5yZWFsRW5hYmxlLmNhbGwoZ2wsIGdsLlNDSVNTT1JfVEVTVCk7IH1cblxuICAgIHNlbGYucmVhbENvbG9yTWFzay5hcHBseShnbCwgc2VsZi5jb2xvck1hc2spO1xuICAgIHNlbGYucmVhbFZpZXdwb3J0LmFwcGx5KGdsLCBzZWxmLnZpZXdwb3J0KTtcbiAgICBzZWxmLnJlYWxDbGVhckNvbG9yLmFwcGx5KGdsLCBzZWxmLmNsZWFyQ29sb3IpO1xuICB9KTtcblxuICBpZiAodGhpcy5jYXJkYm9hcmRVSSkge1xuICAgIHRoaXMuY2FyZGJvYXJkVUkub25SZXNpemUoKTtcbiAgfVxufTtcblxuQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5wYXRjaCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5pc1BhdGNoZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjYW52YXMgPSB0aGlzLmdsLmNhbnZhcztcbiAgdmFyIGdsID0gdGhpcy5nbDtcblxuICBpZiAoIVV0aWwuaXNJT1MoKSkge1xuICAgIGNhbnZhcy53aWR0aCA9IFV0aWwuZ2V0U2NyZWVuV2lkdGgoKSAqIHRoaXMuYnVmZmVyU2NhbGU7XG4gICAgY2FudmFzLmhlaWdodCA9IFV0aWwuZ2V0U2NyZWVuSGVpZ2h0KCkgKiB0aGlzLmJ1ZmZlclNjYWxlO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhbnZhcywgJ3dpZHRoJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmJ1ZmZlcldpZHRoO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgc2VsZi5idWZmZXJXaWR0aCA9IHZhbHVlO1xuICAgICAgICBzZWxmLm9uUmVzaXplKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FudmFzLCAnaGVpZ2h0Jywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmJ1ZmZlckhlaWdodDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHNlbGYuYnVmZmVySGVpZ2h0ID0gdmFsdWU7XG4gICAgICAgIHNlbGYub25SZXNpemUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMubGFzdEJvdW5kRnJhbWVidWZmZXIgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuRlJBTUVCVUZGRVJfQklORElORyk7XG5cbiAgaWYgKHRoaXMubGFzdEJvdW5kRnJhbWVidWZmZXIgPT0gbnVsbCkge1xuICAgIHRoaXMubGFzdEJvdW5kRnJhbWVidWZmZXIgPSB0aGlzLmZyYW1lYnVmZmVyO1xuICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLmZyYW1lYnVmZmVyKTtcbiAgfVxuXG4gIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyID0gZnVuY3Rpb24odGFyZ2V0LCBmcmFtZWJ1ZmZlcikge1xuICAgIHNlbGYubGFzdEJvdW5kRnJhbWVidWZmZXIgPSBmcmFtZWJ1ZmZlciA/IGZyYW1lYnVmZmVyIDogc2VsZi5mcmFtZWJ1ZmZlcjtcbiAgICAvLyBTaWxlbnRseSBtYWtlIGNhbGxzIHRvIGJpbmQgdGhlIGRlZmF1bHQgZnJhbWVidWZmZXIgYmluZCBvdXJzIGluc3RlYWQuXG4gICAgc2VsZi5yZWFsQmluZEZyYW1lYnVmZmVyLmNhbGwoZ2wsIHRhcmdldCwgc2VsZi5sYXN0Qm91bmRGcmFtZWJ1ZmZlcik7XG4gIH07XG5cbiAgdGhpcy5jdWxsRmFjZSA9IGdsLmdldFBhcmFtZXRlcihnbC5DVUxMX0ZBQ0UpO1xuICB0aGlzLmRlcHRoVGVzdCA9IGdsLmdldFBhcmFtZXRlcihnbC5ERVBUSF9URVNUKTtcbiAgdGhpcy5ibGVuZCA9IGdsLmdldFBhcmFtZXRlcihnbC5CTEVORCk7XG4gIHRoaXMuc2Npc3NvclRlc3QgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuU0NJU1NPUl9URVNUKTtcbiAgdGhpcy5zdGVuY2lsVGVzdCA9IGdsLmdldFBhcmFtZXRlcihnbC5TVEVOQ0lMX1RFU1QpO1xuXG4gIGdsLmVuYWJsZSA9IGZ1bmN0aW9uKHBuYW1lKSB7XG4gICAgc3dpdGNoIChwbmFtZSkge1xuICAgICAgY2FzZSBnbC5DVUxMX0ZBQ0U6IHNlbGYuY3VsbEZhY2UgPSB0cnVlOyBicmVhaztcbiAgICAgIGNhc2UgZ2wuREVQVEhfVEVTVDogc2VsZi5kZXB0aFRlc3QgPSB0cnVlOyBicmVhaztcbiAgICAgIGNhc2UgZ2wuQkxFTkQ6IHNlbGYuYmxlbmQgPSB0cnVlOyBicmVhaztcbiAgICAgIGNhc2UgZ2wuU0NJU1NPUl9URVNUOiBzZWxmLnNjaXNzb3JUZXN0ID0gdHJ1ZTsgYnJlYWs7XG4gICAgICBjYXNlIGdsLlNURU5DSUxfVEVTVDogc2VsZi5zdGVuY2lsVGVzdCA9IHRydWU7IGJyZWFrO1xuICAgIH1cbiAgICBzZWxmLnJlYWxFbmFibGUuY2FsbChnbCwgcG5hbWUpO1xuICB9O1xuXG4gIGdsLmRpc2FibGUgPSBmdW5jdGlvbihwbmFtZSkge1xuICAgIHN3aXRjaCAocG5hbWUpIHtcbiAgICAgIGNhc2UgZ2wuQ1VMTF9GQUNFOiBzZWxmLmN1bGxGYWNlID0gZmFsc2U7IGJyZWFrO1xuICAgICAgY2FzZSBnbC5ERVBUSF9URVNUOiBzZWxmLmRlcHRoVGVzdCA9IGZhbHNlOyBicmVhaztcbiAgICAgIGNhc2UgZ2wuQkxFTkQ6IHNlbGYuYmxlbmQgPSBmYWxzZTsgYnJlYWs7XG4gICAgICBjYXNlIGdsLlNDSVNTT1JfVEVTVDogc2VsZi5zY2lzc29yVGVzdCA9IGZhbHNlOyBicmVhaztcbiAgICAgIGNhc2UgZ2wuU1RFTkNJTF9URVNUOiBzZWxmLnN0ZW5jaWxUZXN0ID0gZmFsc2U7IGJyZWFrO1xuICAgIH1cbiAgICBzZWxmLnJlYWxEaXNhYmxlLmNhbGwoZ2wsIHBuYW1lKTtcbiAgfTtcblxuICB0aGlzLmNvbG9yTWFzayA9IGdsLmdldFBhcmFtZXRlcihnbC5DT0xPUl9XUklURU1BU0spO1xuICBnbC5jb2xvck1hc2sgPSBmdW5jdGlvbihyLCBnLCBiLCBhKSB7XG4gICAgc2VsZi5jb2xvck1hc2tbMF0gPSByO1xuICAgIHNlbGYuY29sb3JNYXNrWzFdID0gZztcbiAgICBzZWxmLmNvbG9yTWFza1syXSA9IGI7XG4gICAgc2VsZi5jb2xvck1hc2tbM10gPSBhO1xuICAgIHNlbGYucmVhbENvbG9yTWFzay5jYWxsKGdsLCByLCBnLCBiLCBhKTtcbiAgfTtcblxuICB0aGlzLmNsZWFyQ29sb3IgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuQ09MT1JfQ0xFQVJfVkFMVUUpO1xuICBnbC5jbGVhckNvbG9yID0gZnVuY3Rpb24ociwgZywgYiwgYSkge1xuICAgIHNlbGYuY2xlYXJDb2xvclswXSA9IHI7XG4gICAgc2VsZi5jbGVhckNvbG9yWzFdID0gZztcbiAgICBzZWxmLmNsZWFyQ29sb3JbMl0gPSBiO1xuICAgIHNlbGYuY2xlYXJDb2xvclszXSA9IGE7XG4gICAgc2VsZi5yZWFsQ2xlYXJDb2xvci5jYWxsKGdsLCByLCBnLCBiLCBhKTtcbiAgfTtcblxuICB0aGlzLnZpZXdwb3J0ID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLlZJRVdQT1JUKTtcbiAgZ2wudmlld3BvcnQgPSBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgc2VsZi52aWV3cG9ydFswXSA9IHg7XG4gICAgc2VsZi52aWV3cG9ydFsxXSA9IHk7XG4gICAgc2VsZi52aWV3cG9ydFsyXSA9IHc7XG4gICAgc2VsZi52aWV3cG9ydFszXSA9IGg7XG4gICAgc2VsZi5yZWFsVmlld3BvcnQuY2FsbChnbCwgeCwgeSwgdywgaCk7XG4gIH07XG5cbiAgdGhpcy5pc1BhdGNoZWQgPSB0cnVlO1xuICBVdGlsLnNhZmFyaUNzc1NpemVXb3JrYXJvdW5kKGNhbnZhcyk7XG59O1xuXG5DYXJkYm9hcmREaXN0b3J0ZXIucHJvdG90eXBlLnVucGF0Y2ggPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLmlzUGF0Y2hlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBnbCA9IHRoaXMuZ2w7XG4gIHZhciBjYW52YXMgPSB0aGlzLmdsLmNhbnZhcztcblxuICBpZiAoIVV0aWwuaXNJT1MoKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjYW52YXMsICd3aWR0aCcsIHRoaXMucmVhbENhbnZhc1dpZHRoKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FudmFzLCAnaGVpZ2h0JywgdGhpcy5yZWFsQ2FudmFzSGVpZ2h0KTtcbiAgfVxuICBjYW52YXMud2lkdGggPSB0aGlzLmJ1ZmZlcldpZHRoO1xuICBjYW52YXMuaGVpZ2h0ID0gdGhpcy5idWZmZXJIZWlnaHQ7XG5cbiAgZ2wuYmluZEZyYW1lYnVmZmVyID0gdGhpcy5yZWFsQmluZEZyYW1lYnVmZmVyO1xuICBnbC5lbmFibGUgPSB0aGlzLnJlYWxFbmFibGU7XG4gIGdsLmRpc2FibGUgPSB0aGlzLnJlYWxEaXNhYmxlO1xuICBnbC5jb2xvck1hc2sgPSB0aGlzLnJlYWxDb2xvck1hc2s7XG4gIGdsLmNsZWFyQ29sb3IgPSB0aGlzLnJlYWxDbGVhckNvbG9yO1xuICBnbC52aWV3cG9ydCA9IHRoaXMucmVhbFZpZXdwb3J0O1xuXG4gIC8vIENoZWNrIHRvIHNlZSBpZiBvdXIgZmFrZSBiYWNrYnVmZmVyIGlzIGJvdW5kIGFuZCBiaW5kIHRoZSByZWFsIGJhY2tidWZmZXJcbiAgLy8gaWYgdGhhdCdzIHRoZSBjYXNlLlxuICBpZiAodGhpcy5sYXN0Qm91bmRGcmFtZWJ1ZmZlciA9PSB0aGlzLmZyYW1lYnVmZmVyKSB7XG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcbiAgfVxuXG4gIHRoaXMuaXNQYXRjaGVkID0gZmFsc2U7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBVdGlsLnNhZmFyaUNzc1NpemVXb3JrYXJvdW5kKGNhbnZhcyk7XG4gIH0sIDEpO1xufTtcblxuQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5zZXRUZXh0dXJlQm91bmRzID0gZnVuY3Rpb24obGVmdEJvdW5kcywgcmlnaHRCb3VuZHMpIHtcbiAgaWYgKCFsZWZ0Qm91bmRzKSB7XG4gICAgbGVmdEJvdW5kcyA9IFswLCAwLCAwLjUsIDFdO1xuICB9XG5cbiAgaWYgKCFyaWdodEJvdW5kcykge1xuICAgIHJpZ2h0Qm91bmRzID0gWzAuNSwgMCwgMC41LCAxXTtcbiAgfVxuXG4gIC8vIExlZnQgZXllXG4gIHRoaXMudmlld3BvcnRPZmZzZXRTY2FsZVswXSA9IGxlZnRCb3VuZHNbMF07IC8vIFhcbiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzFdID0gbGVmdEJvdW5kc1sxXTsgLy8gWVxuICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbMl0gPSBsZWZ0Qm91bmRzWzJdOyAvLyBXaWR0aFxuICB0aGlzLnZpZXdwb3J0T2Zmc2V0U2NhbGVbM10gPSBsZWZ0Qm91bmRzWzNdOyAvLyBIZWlnaHRcblxuICAvLyBSaWdodCBleWVcbiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzRdID0gcmlnaHRCb3VuZHNbMF07IC8vIFhcbiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzVdID0gcmlnaHRCb3VuZHNbMV07IC8vIFlcbiAgdGhpcy52aWV3cG9ydE9mZnNldFNjYWxlWzZdID0gcmlnaHRCb3VuZHNbMl07IC8vIFdpZHRoXG4gIHRoaXMudmlld3BvcnRPZmZzZXRTY2FsZVs3XSA9IHJpZ2h0Qm91bmRzWzNdOyAvLyBIZWlnaHRcbn07XG5cbi8qKlxuICogUGVyZm9ybXMgZGlzdG9ydGlvbiBwYXNzIG9uIHRoZSBpbmplY3RlZCBiYWNrYnVmZmVyLCByZW5kZXJpbmcgaXQgdG8gdGhlIHJlYWxcbiAqIGJhY2tidWZmZXIuXG4gKi9cbkNhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUuc3VibWl0RnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGdsID0gdGhpcy5nbDtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBnbFN0YXRlID0gW107XG5cbiAgaWYgKCFXZWJWUkNvbmZpZy5ESVJUWV9TVUJNSVRfRlJBTUVfQklORElOR1MpIHtcbiAgICBnbFN0YXRlLnB1c2goXG4gICAgICBnbC5DVVJSRU5UX1BST0dSQU0sXG4gICAgICBnbC5BUlJBWV9CVUZGRVJfQklORElORyxcbiAgICAgIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSX0JJTkRJTkcsXG4gICAgICBnbC5URVhUVVJFX0JJTkRJTkdfMkQsIGdsLlRFWFRVUkUwXG4gICAgKTtcbiAgfVxuXG4gIFdHTFVQcmVzZXJ2ZUdMU3RhdGUoZ2wsIGdsU3RhdGUsIGZ1bmN0aW9uKGdsKSB7XG4gICAgLy8gQmluZCB0aGUgcmVhbCBkZWZhdWx0IGZyYW1lYnVmZmVyXG4gICAgc2VsZi5yZWFsQmluZEZyYW1lYnVmZmVyLmNhbGwoZ2wsIGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcblxuICAgIC8vIE1ha2Ugc3VyZSB0aGUgR0wgc3RhdGUgaXMgaW4gYSBnb29kIHBsYWNlXG4gICAgaWYgKHNlbGYuY3VsbEZhY2UpIHsgc2VsZi5yZWFsRGlzYWJsZS5jYWxsKGdsLCBnbC5DVUxMX0ZBQ0UpOyB9XG4gICAgaWYgKHNlbGYuZGVwdGhUZXN0KSB7IHNlbGYucmVhbERpc2FibGUuY2FsbChnbCwgZ2wuREVQVEhfVEVTVCk7IH1cbiAgICBpZiAoc2VsZi5ibGVuZCkgeyBzZWxmLnJlYWxEaXNhYmxlLmNhbGwoZ2wsIGdsLkJMRU5EKTsgfVxuICAgIGlmIChzZWxmLnNjaXNzb3JUZXN0KSB7IHNlbGYucmVhbERpc2FibGUuY2FsbChnbCwgZ2wuU0NJU1NPUl9URVNUKTsgfVxuICAgIGlmIChzZWxmLnN0ZW5jaWxUZXN0KSB7IHNlbGYucmVhbERpc2FibGUuY2FsbChnbCwgZ2wuU1RFTkNJTF9URVNUKTsgfVxuICAgIHNlbGYucmVhbENvbG9yTWFzay5jYWxsKGdsLCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICBzZWxmLnJlYWxWaWV3cG9ydC5jYWxsKGdsLCAwLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG4gICAgLy8gSWYgdGhlIGJhY2tidWZmZXIgaGFzIGFuIGFscGhhIGNoYW5uZWwgY2xlYXIgZXZlcnkgZnJhbWUgc28gdGhlIHBhZ2VcbiAgICAvLyBkb2Vzbid0IHNob3cgdGhyb3VnaC5cbiAgICBpZiAoc2VsZi5jdHhBdHRyaWJzLmFscGhhIHx8IFV0aWwuaXNJT1MoKSkge1xuICAgICAgc2VsZi5yZWFsQ2xlYXJDb2xvci5jYWxsKGdsLCAwLCAwLCAwLCAxKTtcbiAgICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQpO1xuICAgIH1cblxuICAgIC8vIEJpbmQgZGlzdG9ydGlvbiBwcm9ncmFtIGFuZCBtZXNoXG4gICAgZ2wudXNlUHJvZ3JhbShzZWxmLnByb2dyYW0pO1xuXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgc2VsZi5pbmRleEJ1ZmZlcik7XG5cbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgc2VsZi52ZXJ0ZXhCdWZmZXIpO1xuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHNlbGYuYXR0cmlicy5wb3NpdGlvbik7XG4gICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2VsZi5hdHRyaWJzLnRleENvb3JkKTtcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHNlbGYuYXR0cmlicy5wb3NpdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAyMCwgMCk7XG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihzZWxmLmF0dHJpYnMudGV4Q29vcmQsIDMsIGdsLkZMT0FULCBmYWxzZSwgMjAsIDgpO1xuXG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCk7XG4gICAgZ2wudW5pZm9ybTFpKHNlbGYudW5pZm9ybXMuZGlmZnVzZSwgMCk7XG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgc2VsZi5yZW5kZXJUYXJnZXQpO1xuXG4gICAgZ2wudW5pZm9ybTRmdihzZWxmLnVuaWZvcm1zLnZpZXdwb3J0T2Zmc2V0U2NhbGUsIHNlbGYudmlld3BvcnRPZmZzZXRTY2FsZSk7XG5cbiAgICAvLyBEcmF3cyBib3RoIGV5ZXNcbiAgICBnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBzZWxmLmluZGV4Q291bnQsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblxuICAgIGlmIChzZWxmLmNhcmRib2FyZFVJKSB7XG4gICAgICBzZWxmLmNhcmRib2FyZFVJLnJlbmRlck5vU3RhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBCaW5kIHRoZSBmYWtlIGRlZmF1bHQgZnJhbWVidWZmZXIgYWdhaW5cbiAgICBzZWxmLnJlYWxCaW5kRnJhbWVidWZmZXIuY2FsbChzZWxmLmdsLCBnbC5GUkFNRUJVRkZFUiwgc2VsZi5mcmFtZWJ1ZmZlcik7XG5cbiAgICAvLyBJZiBwcmVzZXJ2ZURyYXdpbmdCdWZmZXIgPT0gZmFsc2UgY2xlYXIgdGhlIGZyYW1lYnVmZmVyXG4gICAgaWYgKCFzZWxmLmN0eEF0dHJpYnMucHJlc2VydmVEcmF3aW5nQnVmZmVyKSB7XG4gICAgICBzZWxmLnJlYWxDbGVhckNvbG9yLmNhbGwoZ2wsIDAsIDAsIDAsIDApO1xuICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG4gICAgfVxuXG4gICAgaWYgKCFXZWJWUkNvbmZpZy5ESVJUWV9TVUJNSVRfRlJBTUVfQklORElOR1MpIHtcbiAgICAgIHNlbGYucmVhbEJpbmRGcmFtZWJ1ZmZlci5jYWxsKGdsLCBnbC5GUkFNRUJVRkZFUiwgc2VsZi5sYXN0Qm91bmRGcmFtZWJ1ZmZlcik7XG4gICAgfVxuXG4gICAgLy8gUmVzdG9yZSBzdGF0ZVxuICAgIGlmIChzZWxmLmN1bGxGYWNlKSB7IHNlbGYucmVhbEVuYWJsZS5jYWxsKGdsLCBnbC5DVUxMX0ZBQ0UpOyB9XG4gICAgaWYgKHNlbGYuZGVwdGhUZXN0KSB7IHNlbGYucmVhbEVuYWJsZS5jYWxsKGdsLCBnbC5ERVBUSF9URVNUKTsgfVxuICAgIGlmIChzZWxmLmJsZW5kKSB7IHNlbGYucmVhbEVuYWJsZS5jYWxsKGdsLCBnbC5CTEVORCk7IH1cbiAgICBpZiAoc2VsZi5zY2lzc29yVGVzdCkgeyBzZWxmLnJlYWxFbmFibGUuY2FsbChnbCwgZ2wuU0NJU1NPUl9URVNUKTsgfVxuICAgIGlmIChzZWxmLnN0ZW5jaWxUZXN0KSB7IHNlbGYucmVhbEVuYWJsZS5jYWxsKGdsLCBnbC5TVEVOQ0lMX1RFU1QpOyB9XG5cbiAgICBzZWxmLnJlYWxDb2xvck1hc2suYXBwbHkoZ2wsIHNlbGYuY29sb3JNYXNrKTtcbiAgICBzZWxmLnJlYWxWaWV3cG9ydC5hcHBseShnbCwgc2VsZi52aWV3cG9ydCk7XG4gICAgaWYgKHNlbGYuY3R4QXR0cmlicy5hbHBoYSB8fCAhc2VsZi5jdHhBdHRyaWJzLnByZXNlcnZlRHJhd2luZ0J1ZmZlcikge1xuICAgICAgc2VsZi5yZWFsQ2xlYXJDb2xvci5hcHBseShnbCwgc2VsZi5jbGVhckNvbG9yKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFdvcmthcm91bmQgZm9yIHRoZSBmYWN0IHRoYXQgU2FmYXJpIGRvZXNuJ3QgYWxsb3cgdXMgdG8gcGF0Y2ggdGhlIGNhbnZhc1xuICAvLyB3aWR0aCBhbmQgaGVpZ2h0IGNvcnJlY3RseS4gQWZ0ZXIgZWFjaCBzdWJtaXQgZnJhbWUgY2hlY2sgdG8gc2VlIHdoYXQgdGhlXG4gIC8vIHJlYWwgYmFja2J1ZmZlciBzaXplIGhhcyBiZWVuIHNldCB0byBhbmQgcmVzaXplIHRoZSBmYWtlIGJhY2tidWZmZXIgc2l6ZVxuICAvLyB0byBtYXRjaC5cbiAgaWYgKFV0aWwuaXNJT1MoKSkge1xuICAgIHZhciBjYW52YXMgPSBnbC5jYW52YXM7XG4gICAgaWYgKGNhbnZhcy53aWR0aCAhPSBzZWxmLmJ1ZmZlcldpZHRoIHx8IGNhbnZhcy5oZWlnaHQgIT0gc2VsZi5idWZmZXJIZWlnaHQpIHtcbiAgICAgIHNlbGYuYnVmZmVyV2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICBzZWxmLmJ1ZmZlckhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG4gICAgICBzZWxmLm9uUmVzaXplKCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENhbGwgd2hlbiB0aGUgZGV2aWNlSW5mbyBoYXMgY2hhbmdlZC4gQXQgdGhpcyBwb2ludCB3ZSBuZWVkXG4gKiB0byByZS1jYWxjdWxhdGUgdGhlIGRpc3RvcnRpb24gbWVzaC5cbiAqL1xuQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS51cGRhdGVEZXZpY2VJbmZvID0gZnVuY3Rpb24oZGV2aWNlSW5mbykge1xuICB2YXIgZ2wgPSB0aGlzLmdsO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIGdsU3RhdGUgPSBbZ2wuQVJSQVlfQlVGRkVSX0JJTkRJTkcsIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSX0JJTkRJTkddO1xuICBXR0xVUHJlc2VydmVHTFN0YXRlKGdsLCBnbFN0YXRlLCBmdW5jdGlvbihnbCkge1xuICAgIHZhciB2ZXJ0aWNlcyA9IHNlbGYuY29tcHV0ZU1lc2hWZXJ0aWNlc18oc2VsZi5tZXNoV2lkdGgsIHNlbGYubWVzaEhlaWdodCwgZGV2aWNlSW5mbyk7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHNlbGYudmVydGV4QnVmZmVyKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdmVydGljZXMsIGdsLlNUQVRJQ19EUkFXKTtcblxuICAgIC8vIEluZGljZXMgZG9uJ3QgY2hhbmdlIGJhc2VkIG9uIGRldmljZSBwYXJhbWV0ZXJzLCBzbyBvbmx5IGNvbXB1dGUgb25jZS5cbiAgICBpZiAoIXNlbGYuaW5kZXhDb3VudCkge1xuICAgICAgdmFyIGluZGljZXMgPSBzZWxmLmNvbXB1dGVNZXNoSW5kaWNlc18oc2VsZi5tZXNoV2lkdGgsIHNlbGYubWVzaEhlaWdodCk7XG4gICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBzZWxmLmluZGV4QnVmZmVyKTtcbiAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGluZGljZXMsIGdsLlNUQVRJQ19EUkFXKTtcbiAgICAgIHNlbGYuaW5kZXhDb3VudCA9IGluZGljZXMubGVuZ3RoO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIEJ1aWxkIHRoZSBkaXN0b3J0aW9uIG1lc2ggdmVydGljZXMuXG4gKiBCYXNlZCBvbiBjb2RlIGZyb20gdGhlIFVuaXR5IGNhcmRib2FyZCBwbHVnaW4uXG4gKi9cbkNhcmRib2FyZERpc3RvcnRlci5wcm90b3R5cGUuY29tcHV0ZU1lc2hWZXJ0aWNlc18gPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0LCBkZXZpY2VJbmZvKSB7XG4gIHZhciB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoMiAqIHdpZHRoICogaGVpZ2h0ICogNSk7XG5cbiAgdmFyIGxlbnNGcnVzdHVtID0gZGV2aWNlSW5mby5nZXRMZWZ0RXllVmlzaWJsZVRhbkFuZ2xlcygpO1xuICB2YXIgbm9MZW5zRnJ1c3R1bSA9IGRldmljZUluZm8uZ2V0TGVmdEV5ZU5vTGVuc1RhbkFuZ2xlcygpO1xuICB2YXIgdmlld3BvcnQgPSBkZXZpY2VJbmZvLmdldExlZnRFeWVWaXNpYmxlU2NyZWVuUmVjdChub0xlbnNGcnVzdHVtKTtcbiAgdmFyIHZpZHggPSAwO1xuICB2YXIgaWlkeCA9IDA7XG4gIGZvciAodmFyIGUgPSAwOyBlIDwgMjsgZSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBoZWlnaHQ7IGorKykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aWR0aDsgaSsrLCB2aWR4KyspIHtcbiAgICAgICAgdmFyIHUgPSBpIC8gKHdpZHRoIC0gMSk7XG4gICAgICAgIHZhciB2ID0gaiAvIChoZWlnaHQgLSAxKTtcblxuICAgICAgICAvLyBHcmlkIHBvaW50cyByZWd1bGFybHkgc3BhY2VkIGluIFN0cmVvU2NyZWVuLCBhbmQgYmFycmVsIGRpc3RvcnRlZCBpblxuICAgICAgICAvLyB0aGUgbWVzaC5cbiAgICAgICAgdmFyIHMgPSB1O1xuICAgICAgICB2YXIgdCA9IHY7XG4gICAgICAgIHZhciB4ID0gVXRpbC5sZXJwKGxlbnNGcnVzdHVtWzBdLCBsZW5zRnJ1c3R1bVsyXSwgdSk7XG4gICAgICAgIHZhciB5ID0gVXRpbC5sZXJwKGxlbnNGcnVzdHVtWzNdLCBsZW5zRnJ1c3R1bVsxXSwgdik7XG4gICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICB2YXIgciA9IGRldmljZUluZm8uZGlzdG9ydGlvbi5kaXN0b3J0SW52ZXJzZShkKTtcbiAgICAgICAgdmFyIHAgPSB4ICogciAvIGQ7XG4gICAgICAgIHZhciBxID0geSAqIHIgLyBkO1xuICAgICAgICB1ID0gKHAgLSBub0xlbnNGcnVzdHVtWzBdKSAvIChub0xlbnNGcnVzdHVtWzJdIC0gbm9MZW5zRnJ1c3R1bVswXSk7XG4gICAgICAgIHYgPSAocSAtIG5vTGVuc0ZydXN0dW1bM10pIC8gKG5vTGVuc0ZydXN0dW1bMV0gLSBub0xlbnNGcnVzdHVtWzNdKTtcblxuICAgICAgICAvLyBDb252ZXJ0IHUsdiB0byBtZXNoIHNjcmVlbiBjb29yZGluYXRlcy5cbiAgICAgICAgdmFyIGFzcGVjdCA9IGRldmljZUluZm8uZGV2aWNlLndpZHRoTWV0ZXJzIC8gZGV2aWNlSW5mby5kZXZpY2UuaGVpZ2h0TWV0ZXJzO1xuXG4gICAgICAgIC8vIEZJWE1FOiBUaGUgb3JpZ2luYWwgVW5pdHkgcGx1Z2luIG11bHRpcGxpZWQgVSBieSB0aGUgYXNwZWN0IHJhdGlvXG4gICAgICAgIC8vIGFuZCBkaWRuJ3QgbXVsdGlwbHkgZWl0aGVyIHZhbHVlIGJ5IDIsIGJ1dCB0aGF0IHNlZW1zIHRvIGdldCBpdFxuICAgICAgICAvLyByZWFsbHkgY2xvc2UgdG8gY29ycmVjdCBsb29raW5nIGZvciBtZS4gSSBoYXRlIHRoaXMga2luZCBvZiBcIkRvbid0XG4gICAgICAgIC8vIGtub3cgd2h5IGl0IHdvcmtzXCIgY29kZSB0aG91Z2gsIGFuZCB3b2xkIGxvdmUgYSBtb3JlIGxvZ2ljYWxcbiAgICAgICAgLy8gZXhwbGFuYXRpb24gb2Ygd2hhdCBuZWVkcyB0byBoYXBwZW4gaGVyZS5cbiAgICAgICAgdSA9ICh2aWV3cG9ydC54ICsgdSAqIHZpZXdwb3J0LndpZHRoIC0gMC41KSAqIDIuMDsgLy8qIGFzcGVjdDtcbiAgICAgICAgdiA9ICh2aWV3cG9ydC55ICsgdiAqIHZpZXdwb3J0LmhlaWdodCAtIDAuNSkgKiAyLjA7XG5cbiAgICAgICAgdmVydGljZXNbKHZpZHggKiA1KSArIDBdID0gdTsgLy8gcG9zaXRpb24ueFxuICAgICAgICB2ZXJ0aWNlc1sodmlkeCAqIDUpICsgMV0gPSB2OyAvLyBwb3NpdGlvbi55XG4gICAgICAgIHZlcnRpY2VzWyh2aWR4ICogNSkgKyAyXSA9IHM7IC8vIHRleENvb3JkLnhcbiAgICAgICAgdmVydGljZXNbKHZpZHggKiA1KSArIDNdID0gdDsgLy8gdGV4Q29vcmQueVxuICAgICAgICB2ZXJ0aWNlc1sodmlkeCAqIDUpICsgNF0gPSBlOyAvLyB0ZXhDb29yZC56ICh2aWV3cG9ydCBpbmRleClcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHcgPSBsZW5zRnJ1c3R1bVsyXSAtIGxlbnNGcnVzdHVtWzBdO1xuICAgIGxlbnNGcnVzdHVtWzBdID0gLSh3ICsgbGVuc0ZydXN0dW1bMF0pO1xuICAgIGxlbnNGcnVzdHVtWzJdID0gdyAtIGxlbnNGcnVzdHVtWzJdO1xuICAgIHcgPSBub0xlbnNGcnVzdHVtWzJdIC0gbm9MZW5zRnJ1c3R1bVswXTtcbiAgICBub0xlbnNGcnVzdHVtWzBdID0gLSh3ICsgbm9MZW5zRnJ1c3R1bVswXSk7XG4gICAgbm9MZW5zRnJ1c3R1bVsyXSA9IHcgLSBub0xlbnNGcnVzdHVtWzJdO1xuICAgIHZpZXdwb3J0LnggPSAxIC0gKHZpZXdwb3J0LnggKyB2aWV3cG9ydC53aWR0aCk7XG4gIH1cbiAgcmV0dXJuIHZlcnRpY2VzO1xufVxuXG4vKipcbiAqIEJ1aWxkIHRoZSBkaXN0b3J0aW9uIG1lc2ggaW5kaWNlcy5cbiAqIEJhc2VkIG9uIGNvZGUgZnJvbSB0aGUgVW5pdHkgY2FyZGJvYXJkIHBsdWdpbi5cbiAqL1xuQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5jb21wdXRlTWVzaEluZGljZXNfID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICB2YXIgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSgyICogKHdpZHRoIC0gMSkgKiAoaGVpZ2h0IC0gMSkgKiA2KTtcbiAgdmFyIGhhbGZ3aWR0aCA9IHdpZHRoIC8gMjtcbiAgdmFyIGhhbGZoZWlnaHQgPSBoZWlnaHQgLyAyO1xuICB2YXIgdmlkeCA9IDA7XG4gIHZhciBpaWR4ID0gMDtcbiAgZm9yICh2YXIgZSA9IDA7IGUgPCAyOyBlKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGhlaWdodDsgaisrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpZHRoOyBpKyssIHZpZHgrKykge1xuICAgICAgICBpZiAoaSA9PSAwIHx8IGogPT0gMClcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgLy8gQnVpbGQgYSBxdWFkLiAgTG93ZXIgcmlnaHQgYW5kIHVwcGVyIGxlZnQgcXVhZHJhbnRzIGhhdmUgcXVhZHMgd2l0aFxuICAgICAgICAvLyB0aGUgdHJpYW5nbGUgZGlhZ29uYWwgZmxpcHBlZCB0byBnZXQgdGhlIHZpZ25ldHRlIHRvIGludGVycG9sYXRlXG4gICAgICAgIC8vIGNvcnJlY3RseS5cbiAgICAgICAgaWYgKChpIDw9IGhhbGZ3aWR0aCkgPT0gKGogPD0gaGFsZmhlaWdodCkpIHtcbiAgICAgICAgICAvLyBRdWFkIGRpYWdvbmFsIGxvd2VyIGxlZnQgdG8gdXBwZXIgcmlnaHQuXG4gICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeDtcbiAgICAgICAgICBpbmRpY2VzW2lpZHgrK10gPSB2aWR4IC0gd2lkdGggLSAxO1xuICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSB3aWR0aDtcbiAgICAgICAgICBpbmRpY2VzW2lpZHgrK10gPSB2aWR4IC0gd2lkdGggLSAxO1xuICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHg7XG4gICAgICAgICAgaW5kaWNlc1tpaWR4KytdID0gdmlkeCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUXVhZCBkaWFnb25hbCB1cHBlciBsZWZ0IHRvIGxvd2VyIHJpZ2h0LlxuICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSAxO1xuICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSB3aWR0aDtcbiAgICAgICAgICBpbmRpY2VzW2lpZHgrK10gPSB2aWR4O1xuICAgICAgICAgIGluZGljZXNbaWlkeCsrXSA9IHZpZHggLSB3aWR0aDtcbiAgICAgICAgICBpbmRpY2VzW2lpZHgrK10gPSB2aWR4IC0gMTtcbiAgICAgICAgICBpbmRpY2VzW2lpZHgrK10gPSB2aWR4IC0gd2lkdGggLSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBpbmRpY2VzO1xufTtcblxuQ2FyZGJvYXJkRGlzdG9ydGVyLnByb3RvdHlwZS5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JfID0gZnVuY3Rpb24ocHJvdG8sIGF0dHJOYW1lKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90bywgYXR0ck5hbWUpO1xuICAvLyBJbiBzb21lIGNhc2VzIChhaGVtLi4uIFNhZmFyaSksIHRoZSBkZXNjcmlwdG9yIHJldHVybnMgdW5kZWZpbmVkIGdldCBhbmRcbiAgLy8gc2V0IGZpZWxkcy4gSW4gdGhpcyBjYXNlLCB3ZSBuZWVkIHRvIGNyZWF0ZSBhIHN5bnRoZXRpYyBwcm9wZXJ0eVxuICAvLyBkZXNjcmlwdG9yLiBUaGlzIHdvcmtzIGFyb3VuZCBzb21lIG9mIHRoZSBpc3N1ZXMgaW5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JvcmlzbXVzL3dlYnZyLXBvbHlmaWxsL2lzc3Vlcy80NlxuICBpZiAoZGVzY3JpcHRvci5nZXQgPT09IHVuZGVmaW5lZCB8fCBkZXNjcmlwdG9yLnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gICAgZGVzY3JpcHRvci5nZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgfTtcbiAgICBkZXNjcmlwdG9yLnNldCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbCk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FyZGJvYXJkRGlzdG9ydGVyO1xuXG59LHtcIi4vY2FyZGJvYXJkLXVpLmpzXCI6NCxcIi4vZGVwcy93Z2x1LXByZXNlcnZlLXN0YXRlLmpzXCI6NixcIi4vdXRpbC5qc1wiOjIyfV0sNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgVXRpbCA9IF9kZXJlcV8oJy4vdXRpbC5qcycpO1xudmFyIFdHTFVQcmVzZXJ2ZUdMU3RhdGUgPSBfZGVyZXFfKCcuL2RlcHMvd2dsdS1wcmVzZXJ2ZS1zdGF0ZS5qcycpO1xuXG52YXIgdWlWUyA9IFtcbiAgJ2F0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uOycsXG5cbiAgJ3VuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0OycsXG5cbiAgJ3ZvaWQgbWFpbigpIHsnLFxuICAnICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXQgKiB2ZWM0KCBwb3NpdGlvbiwgLTEuMCwgMS4wICk7JyxcbiAgJ30nLFxuXS5qb2luKCdcXG4nKTtcblxudmFyIHVpRlMgPSBbXG4gICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLFxuXG4gICd1bmlmb3JtIHZlYzQgY29sb3I7JyxcblxuICAndm9pZCBtYWluKCkgeycsXG4gICcgIGdsX0ZyYWdDb2xvciA9IGNvbG9yOycsXG4gICd9Jyxcbl0uam9pbignXFxuJyk7XG5cbnZhciBERUcyUkFEID0gTWF0aC5QSS8xODAuMDtcblxuLy8gVGhlIGdlYXIgaGFzIDYgaWRlbnRpY2FsIHNlY3Rpb25zLCBlYWNoIHNwYW5uaW5nIDYwIGRlZ3JlZXMuXG52YXIga0FuZ2xlUGVyR2VhclNlY3Rpb24gPSA2MDtcblxuLy8gSGFsZi1hbmdsZSBvZiB0aGUgc3BhbiBvZiB0aGUgb3V0ZXIgcmltLlxudmFyIGtPdXRlclJpbUVuZEFuZ2xlID0gMTI7XG5cbi8vIEFuZ2xlIGJldHdlZW4gdGhlIG1pZGRsZSBvZiB0aGUgb3V0ZXIgcmltIGFuZCB0aGUgc3RhcnQgb2YgdGhlIGlubmVyIHJpbS5cbnZhciBrSW5uZXJSaW1CZWdpbkFuZ2xlID0gMjA7XG5cbi8vIERpc3RhbmNlIGZyb20gY2VudGVyIHRvIG91dGVyIHJpbSwgbm9ybWFsaXplZCBzbyB0aGF0IHRoZSBlbnRpcmUgbW9kZWxcbi8vIGZpdHMgaW4gYSBbLTEsIDFdIHggWy0xLCAxXSBzcXVhcmUuXG52YXIga091dGVyUmFkaXVzID0gMTtcblxuLy8gRGlzdGFuY2UgZnJvbSBjZW50ZXIgdG8gZGVwcmVzc2VkIHJpbSwgaW4gbW9kZWwgdW5pdHMuXG52YXIga01pZGRsZVJhZGl1cyA9IDAuNzU7XG5cbi8vIFJhZGl1cyBvZiB0aGUgaW5uZXIgaG9sbG93IGNpcmNsZSwgaW4gbW9kZWwgdW5pdHMuXG52YXIga0lubmVyUmFkaXVzID0gMC4zMTI1O1xuXG4vLyBDZW50ZXIgbGluZSB0aGlja25lc3MgaW4gRFAuXG52YXIga0NlbnRlckxpbmVUaGlja25lc3NEcCA9IDQ7XG5cbi8vIEJ1dHRvbiB3aWR0aCBpbiBEUC5cbnZhciBrQnV0dG9uV2lkdGhEcCA9IDI4O1xuXG4vLyBGYWN0b3IgdG8gc2NhbGUgdGhlIHRvdWNoIGFyZWEgdGhhdCByZXNwb25kcyB0byB0aGUgdG91Y2guXG52YXIga1RvdWNoU2xvcEZhY3RvciA9IDEuNTtcblxudmFyIEFuZ2xlcyA9IFtcbiAgMCwga091dGVyUmltRW5kQW5nbGUsIGtJbm5lclJpbUJlZ2luQW5nbGUsXG4gIGtBbmdsZVBlckdlYXJTZWN0aW9uIC0ga0lubmVyUmltQmVnaW5BbmdsZSxcbiAga0FuZ2xlUGVyR2VhclNlY3Rpb24gLSBrT3V0ZXJSaW1FbmRBbmdsZVxuXTtcblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBhbGlnbm1lbnQgbGluZSBhbmQgXCJvcHRpb25zXCIgZ2Vhci4gSXQgaXMgYXNzdW1lZCB0aGF0IHRoZSBjYW52YXNcbiAqIHRoaXMgaXMgcmVuZGVyZWQgaW50byBjb3ZlcnMgdGhlIGVudGlyZSBzY3JlZW4gKG9yIGNsb3NlIHRvIGl0LilcbiAqL1xuZnVuY3Rpb24gQ2FyZGJvYXJkVUkoZ2wpIHtcbiAgdGhpcy5nbCA9IGdsO1xuXG4gIHRoaXMuYXR0cmlicyA9IHtcbiAgICBwb3NpdGlvbjogMFxuICB9O1xuICB0aGlzLnByb2dyYW0gPSBVdGlsLmxpbmtQcm9ncmFtKGdsLCB1aVZTLCB1aUZTLCB0aGlzLmF0dHJpYnMpO1xuICB0aGlzLnVuaWZvcm1zID0gVXRpbC5nZXRQcm9ncmFtVW5pZm9ybXMoZ2wsIHRoaXMucHJvZ3JhbSk7XG5cbiAgdGhpcy52ZXJ0ZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgdGhpcy5nZWFyT2Zmc2V0ID0gMDtcbiAgdGhpcy5nZWFyVmVydGV4Q291bnQgPSAwO1xuICB0aGlzLmFycm93T2Zmc2V0ID0gMDtcbiAgdGhpcy5hcnJvd1ZlcnRleENvdW50ID0gMDtcblxuICB0aGlzLnByb2pNYXQgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcblxuICB0aGlzLmxpc3RlbmVyID0gbnVsbDtcblxuICB0aGlzLm9uUmVzaXplKCk7XG59O1xuXG4vKipcbiAqIFRlYXJzIGRvd24gYWxsIHRoZSByZXNvdXJjZXMgY3JlYXRlZCBieSB0aGUgVUkgcmVuZGVyZXIuXG4gKi9cbkNhcmRib2FyZFVJLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBnbCA9IHRoaXMuZ2w7XG5cbiAgaWYgKHRoaXMubGlzdGVuZXIpIHtcbiAgICBnbC5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmxpc3RlbmVyLCBmYWxzZSk7XG4gIH1cblxuICBnbC5kZWxldGVQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gIGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLnZlcnRleEJ1ZmZlcik7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBsaXN0ZW5lciB0byBjbGlja3Mgb24gdGhlIGdlYXIgYW5kIGJhY2sgaWNvbnNcbiAqL1xuQ2FyZGJvYXJkVUkucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uKG9wdGlvbnNDYWxsYmFjaywgYmFja0NhbGxiYWNrKSB7XG4gIHZhciBjYW52YXMgPSB0aGlzLmdsLmNhbnZhcztcbiAgdGhpcy5saXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIG1pZGxpbmUgPSBjYW52YXMuY2xpZW50V2lkdGggLyAyO1xuICAgIHZhciBidXR0b25TaXplID0ga0J1dHRvbldpZHRoRHAgKiBrVG91Y2hTbG9wRmFjdG9yO1xuICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgdXNlciBjbGlja2VkIG9uIChvciBhcm91bmQpIHRoZSBnZWFyIGljb25cbiAgICBpZiAoZXZlbnQuY2xpZW50WCA+IG1pZGxpbmUgLSBidXR0b25TaXplICYmXG4gICAgICAgIGV2ZW50LmNsaWVudFggPCBtaWRsaW5lICsgYnV0dG9uU2l6ZSAmJlxuICAgICAgICBldmVudC5jbGllbnRZID4gY2FudmFzLmNsaWVudEhlaWdodCAtIGJ1dHRvblNpemUpIHtcbiAgICAgIG9wdGlvbnNDYWxsYmFjayhldmVudCk7XG4gICAgfVxuICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgdXNlciBjbGlja2VkIG9uIChvciBhcm91bmQpIHRoZSBiYWNrIGljb25cbiAgICBlbHNlIGlmIChldmVudC5jbGllbnRYIDwgYnV0dG9uU2l6ZSAmJiBldmVudC5jbGllbnRZIDwgYnV0dG9uU2l6ZSkge1xuICAgICAgYmFja0NhbGxiYWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMubGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogQnVpbGRzIHRoZSBVSSBtZXNoLlxuICovXG5DYXJkYm9hcmRVSS5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGdsID0gdGhpcy5nbDtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBnbFN0YXRlID0gW1xuICAgIGdsLkFSUkFZX0JVRkZFUl9CSU5ESU5HXG4gIF07XG5cbiAgV0dMVVByZXNlcnZlR0xTdGF0ZShnbCwgZ2xTdGF0ZSwgZnVuY3Rpb24oZ2wpIHtcbiAgICB2YXIgdmVydGljZXMgPSBbXTtcblxuICAgIHZhciBtaWRsaW5lID0gZ2wuZHJhd2luZ0J1ZmZlcldpZHRoIC8gMjtcblxuICAgIC8vIEFzc3VtZXMgeW91ciBjYW52YXMgd2lkdGggYW5kIGhlaWdodCBpcyBzY2FsZWQgcHJvcG9ydGlvbmF0ZWx5LlxuICAgIC8vIFRPRE8oc211cyk6IFRoZSBmb2xsb3dpbmcgY2F1c2VzIGJ1dHRvbnMgdG8gYmVjb21lIGh1Z2Ugb24gaU9TLCBidXQgc2VlbXNcbiAgICAvLyBsaWtlIHRoZSByaWdodCB0aGluZyB0byBkby4gRm9yIG5vdywgYWRkZWQgYSBoYWNrLiBCdXQgcmVhbGx5LCBpbnZlc3RpZ2F0ZSB3aHkuXG4gICAgdmFyIGRwcyA9IChnbC5kcmF3aW5nQnVmZmVyV2lkdGggLyAoc2NyZWVuLndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW8pKTtcbiAgICBpZiAoIVV0aWwuaXNJT1MoKSkge1xuICAgICAgZHBzICo9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIH1cblxuICAgIHZhciBsaW5lV2lkdGggPSBrQ2VudGVyTGluZVRoaWNrbmVzc0RwICogZHBzIC8gMjtcbiAgICB2YXIgYnV0dG9uU2l6ZSA9IGtCdXR0b25XaWR0aERwICoga1RvdWNoU2xvcEZhY3RvciAqIGRwcztcbiAgICB2YXIgYnV0dG9uU2NhbGUgPSBrQnV0dG9uV2lkdGhEcCAqIGRwcyAvIDI7XG4gICAgdmFyIGJ1dHRvbkJvcmRlciA9ICgoa0J1dHRvbldpZHRoRHAgKiBrVG91Y2hTbG9wRmFjdG9yKSAtIGtCdXR0b25XaWR0aERwKSAqIGRwcztcblxuICAgIC8vIEJ1aWxkIGNlbnRlcmxpbmVcbiAgICB2ZXJ0aWNlcy5wdXNoKG1pZGxpbmUgLSBsaW5lV2lkdGgsIGJ1dHRvblNpemUpO1xuICAgIHZlcnRpY2VzLnB1c2gobWlkbGluZSAtIGxpbmVXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG4gICAgdmVydGljZXMucHVzaChtaWRsaW5lICsgbGluZVdpZHRoLCBidXR0b25TaXplKTtcbiAgICB2ZXJ0aWNlcy5wdXNoKG1pZGxpbmUgKyBsaW5lV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG4gICAgLy8gQnVpbGQgZ2VhclxuICAgIHNlbGYuZ2Vhck9mZnNldCA9ICh2ZXJ0aWNlcy5sZW5ndGggLyAyKTtcblxuICAgIGZ1bmN0aW9uIGFkZEdlYXJTZWdtZW50KHRoZXRhLCByKSB7XG4gICAgICB2YXIgYW5nbGUgPSAoOTAgLSB0aGV0YSkgKiBERUcyUkFEO1xuICAgICAgdmFyIHggPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICB2YXIgeSA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgIHZlcnRpY2VzLnB1c2goa0lubmVyUmFkaXVzICogeCAqIGJ1dHRvblNjYWxlICsgbWlkbGluZSwga0lubmVyUmFkaXVzICogeSAqIGJ1dHRvblNjYWxlICsgYnV0dG9uU2NhbGUpO1xuICAgICAgdmVydGljZXMucHVzaChyICogeCAqIGJ1dHRvblNjYWxlICsgbWlkbGluZSwgciAqIHkgKiBidXR0b25TY2FsZSArIGJ1dHRvblNjYWxlKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSA2OyBpKyspIHtcbiAgICAgIHZhciBzZWdtZW50VGhldGEgPSBpICoga0FuZ2xlUGVyR2VhclNlY3Rpb247XG5cbiAgICAgIGFkZEdlYXJTZWdtZW50KHNlZ21lbnRUaGV0YSwga091dGVyUmFkaXVzKTtcbiAgICAgIGFkZEdlYXJTZWdtZW50KHNlZ21lbnRUaGV0YSArIGtPdXRlclJpbUVuZEFuZ2xlLCBrT3V0ZXJSYWRpdXMpO1xuICAgICAgYWRkR2VhclNlZ21lbnQoc2VnbWVudFRoZXRhICsga0lubmVyUmltQmVnaW5BbmdsZSwga01pZGRsZVJhZGl1cyk7XG4gICAgICBhZGRHZWFyU2VnbWVudChzZWdtZW50VGhldGEgKyAoa0FuZ2xlUGVyR2VhclNlY3Rpb24gLSBrSW5uZXJSaW1CZWdpbkFuZ2xlKSwga01pZGRsZVJhZGl1cyk7XG4gICAgICBhZGRHZWFyU2VnbWVudChzZWdtZW50VGhldGEgKyAoa0FuZ2xlUGVyR2VhclNlY3Rpb24gLSBrT3V0ZXJSaW1FbmRBbmdsZSksIGtPdXRlclJhZGl1cyk7XG4gICAgfVxuXG4gICAgc2VsZi5nZWFyVmVydGV4Q291bnQgPSAodmVydGljZXMubGVuZ3RoIC8gMikgLSBzZWxmLmdlYXJPZmZzZXQ7XG5cbiAgICAvLyBCdWlsZCBiYWNrIGFycm93XG4gICAgc2VsZi5hcnJvd09mZnNldCA9ICh2ZXJ0aWNlcy5sZW5ndGggLyAyKTtcblxuICAgIGZ1bmN0aW9uIGFkZEFycm93VmVydGV4KHgsIHkpIHtcbiAgICAgIHZlcnRpY2VzLnB1c2goYnV0dG9uQm9yZGVyICsgeCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCAtIGJ1dHRvbkJvcmRlciAtIHkpO1xuICAgIH1cblxuICAgIHZhciBhbmdsZWRMaW5lV2lkdGggPSBsaW5lV2lkdGggLyBNYXRoLnNpbig0NSAqIERFRzJSQUQpO1xuXG4gICAgYWRkQXJyb3dWZXJ0ZXgoMCwgYnV0dG9uU2NhbGUpO1xuICAgIGFkZEFycm93VmVydGV4KGJ1dHRvblNjYWxlLCAwKTtcbiAgICBhZGRBcnJvd1ZlcnRleChidXR0b25TY2FsZSArIGFuZ2xlZExpbmVXaWR0aCwgYW5nbGVkTGluZVdpZHRoKTtcbiAgICBhZGRBcnJvd1ZlcnRleChhbmdsZWRMaW5lV2lkdGgsIGJ1dHRvblNjYWxlICsgYW5nbGVkTGluZVdpZHRoKTtcblxuICAgIGFkZEFycm93VmVydGV4KGFuZ2xlZExpbmVXaWR0aCwgYnV0dG9uU2NhbGUgLSBhbmdsZWRMaW5lV2lkdGgpO1xuICAgIGFkZEFycm93VmVydGV4KDAsIGJ1dHRvblNjYWxlKTtcbiAgICBhZGRBcnJvd1ZlcnRleChidXR0b25TY2FsZSwgYnV0dG9uU2NhbGUgKiAyKTtcbiAgICBhZGRBcnJvd1ZlcnRleChidXR0b25TY2FsZSArIGFuZ2xlZExpbmVXaWR0aCwgKGJ1dHRvblNjYWxlICogMikgLSBhbmdsZWRMaW5lV2lkdGgpO1xuXG4gICAgYWRkQXJyb3dWZXJ0ZXgoYW5nbGVkTGluZVdpZHRoLCBidXR0b25TY2FsZSAtIGFuZ2xlZExpbmVXaWR0aCk7XG4gICAgYWRkQXJyb3dWZXJ0ZXgoMCwgYnV0dG9uU2NhbGUpO1xuXG4gICAgYWRkQXJyb3dWZXJ0ZXgoYW5nbGVkTGluZVdpZHRoLCBidXR0b25TY2FsZSAtIGxpbmVXaWR0aCk7XG4gICAgYWRkQXJyb3dWZXJ0ZXgoa0J1dHRvbldpZHRoRHAgKiBkcHMsIGJ1dHRvblNjYWxlIC0gbGluZVdpZHRoKTtcbiAgICBhZGRBcnJvd1ZlcnRleChhbmdsZWRMaW5lV2lkdGgsIGJ1dHRvblNjYWxlICsgbGluZVdpZHRoKTtcbiAgICBhZGRBcnJvd1ZlcnRleChrQnV0dG9uV2lkdGhEcCAqIGRwcywgYnV0dG9uU2NhbGUgKyBsaW5lV2lkdGgpO1xuXG4gICAgc2VsZi5hcnJvd1ZlcnRleENvdW50ID0gKHZlcnRpY2VzLmxlbmd0aCAvIDIpIC0gc2VsZi5hcnJvd09mZnNldDtcblxuICAgIC8vIEJ1ZmZlciBkYXRhXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHNlbGYudmVydGV4QnVmZmVyKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheSh2ZXJ0aWNlcyksIGdsLlNUQVRJQ19EUkFXKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIGRpc3RvcnRpb24gcGFzcyBvbiB0aGUgaW5qZWN0ZWQgYmFja2J1ZmZlciwgcmVuZGVyaW5nIGl0IHRvIHRoZSByZWFsXG4gKiBiYWNrYnVmZmVyLlxuICovXG5DYXJkYm9hcmRVSS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBnbCA9IHRoaXMuZ2w7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgZ2xTdGF0ZSA9IFtcbiAgICBnbC5DVUxMX0ZBQ0UsXG4gICAgZ2wuREVQVEhfVEVTVCxcbiAgICBnbC5CTEVORCxcbiAgICBnbC5TQ0lTU09SX1RFU1QsXG4gICAgZ2wuU1RFTkNJTF9URVNULFxuICAgIGdsLkNPTE9SX1dSSVRFTUFTSyxcbiAgICBnbC5WSUVXUE9SVCxcblxuICAgIGdsLkNVUlJFTlRfUFJPR1JBTSxcbiAgICBnbC5BUlJBWV9CVUZGRVJfQklORElOR1xuICBdO1xuXG4gIFdHTFVQcmVzZXJ2ZUdMU3RhdGUoZ2wsIGdsU3RhdGUsIGZ1bmN0aW9uKGdsKSB7XG4gICAgLy8gTWFrZSBzdXJlIHRoZSBHTCBzdGF0ZSBpcyBpbiBhIGdvb2QgcGxhY2VcbiAgICBnbC5kaXNhYmxlKGdsLkNVTExfRkFDRSk7XG4gICAgZ2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKTtcbiAgICBnbC5kaXNhYmxlKGdsLkJMRU5EKTtcbiAgICBnbC5kaXNhYmxlKGdsLlNDSVNTT1JfVEVTVCk7XG4gICAgZ2wuZGlzYWJsZShnbC5TVEVOQ0lMX1RFU1QpO1xuICAgIGdsLmNvbG9yTWFzayh0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICBnbC52aWV3cG9ydCgwLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG4gICAgc2VsZi5yZW5kZXJOb1N0YXRlKCk7XG4gIH0pO1xufTtcblxuQ2FyZGJvYXJkVUkucHJvdG90eXBlLnJlbmRlck5vU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGdsID0gdGhpcy5nbDtcblxuICAvLyBCaW5kIGRpc3RvcnRpb24gcHJvZ3JhbSBhbmQgbWVzaFxuICBnbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG5cbiAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4QnVmZmVyKTtcbiAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hdHRyaWJzLnBvc2l0aW9uKTtcbiAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmF0dHJpYnMucG9zaXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgOCwgMCk7XG5cbiAgZ2wudW5pZm9ybTRmKHRoaXMudW5pZm9ybXMuY29sb3IsIDEuMCwgMS4wLCAxLjAsIDEuMCk7XG5cbiAgVXRpbC5vcnRob01hdHJpeCh0aGlzLnByb2pNYXQsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgMCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCwgMC4xLCAxMDI0LjApO1xuICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMudW5pZm9ybXMucHJvamVjdGlvbk1hdCwgZmFsc2UsIHRoaXMucHJvak1hdCk7XG5cbiAgLy8gRHJhd3MgVUkgZWxlbWVudFxuICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcbiAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgdGhpcy5nZWFyT2Zmc2V0LCB0aGlzLmdlYXJWZXJ0ZXhDb3VudCk7XG4gIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIHRoaXMuYXJyb3dPZmZzZXQsIHRoaXMuYXJyb3dWZXJ0ZXhDb3VudCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhcmRib2FyZFVJO1xuXG59LHtcIi4vZGVwcy93Z2x1LXByZXNlcnZlLXN0YXRlLmpzXCI6NixcIi4vdXRpbC5qc1wiOjIyfV0sNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgQ2FyZGJvYXJkRGlzdG9ydGVyID0gX2RlcmVxXygnLi9jYXJkYm9hcmQtZGlzdG9ydGVyLmpzJyk7XG52YXIgQ2FyZGJvYXJkVUkgPSBfZGVyZXFfKCcuL2NhcmRib2FyZC11aS5qcycpO1xudmFyIERldmljZUluZm8gPSBfZGVyZXFfKCcuL2RldmljZS1pbmZvLmpzJyk7XG52YXIgRHBkYiA9IF9kZXJlcV8oJy4vZHBkYi9kcGRiLmpzJyk7XG52YXIgRnVzaW9uUG9zZVNlbnNvciA9IF9kZXJlcV8oJy4vc2Vuc29yLWZ1c2lvbi9mdXNpb24tcG9zZS1zZW5zb3IuanMnKTtcbnZhciBSb3RhdGVJbnN0cnVjdGlvbnMgPSBfZGVyZXFfKCcuL3JvdGF0ZS1pbnN0cnVjdGlvbnMuanMnKTtcbnZhciBWaWV3ZXJTZWxlY3RvciA9IF9kZXJlcV8oJy4vdmlld2VyLXNlbGVjdG9yLmpzJyk7XG52YXIgVlJEaXNwbGF5ID0gX2RlcmVxXygnLi9iYXNlLmpzJykuVlJEaXNwbGF5O1xudmFyIFV0aWwgPSBfZGVyZXFfKCcuL3V0aWwuanMnKTtcblxudmFyIEV5ZSA9IHtcbiAgTEVGVDogJ2xlZnQnLFxuICBSSUdIVDogJ3JpZ2h0J1xufTtcblxuLyoqXG4gKiBWUkRpc3BsYXkgYmFzZWQgb24gbW9iaWxlIGRldmljZSBwYXJhbWV0ZXJzIGFuZCBEZXZpY2VNb3Rpb24gQVBJcy5cbiAqL1xuZnVuY3Rpb24gQ2FyZGJvYXJkVlJEaXNwbGF5KCkge1xuICB0aGlzLmRpc3BsYXlOYW1lID0gJ0NhcmRib2FyZCBWUkRpc3BsYXkgKHdlYnZyLXBvbHlmaWxsKSc7XG5cbiAgdGhpcy5jYXBhYmlsaXRpZXMuaGFzT3JpZW50YXRpb24gPSB0cnVlO1xuICB0aGlzLmNhcGFiaWxpdGllcy5jYW5QcmVzZW50ID0gdHJ1ZTtcblxuICAvLyBcIlByaXZhdGVcIiBtZW1iZXJzLlxuICB0aGlzLmJ1ZmZlclNjYWxlXyA9IFdlYlZSQ29uZmlnLkJVRkZFUl9TQ0FMRTtcbiAgdGhpcy5wb3NlU2Vuc29yXyA9IG5ldyBGdXNpb25Qb3NlU2Vuc29yKCk7XG4gIHRoaXMuZGlzdG9ydGVyXyA9IG51bGw7XG4gIHRoaXMuY2FyZGJvYXJkVUlfID0gbnVsbDtcblxuICB0aGlzLmRwZGJfID0gbmV3IERwZGIodHJ1ZSwgdGhpcy5vbkRldmljZVBhcmFtc1VwZGF0ZWRfLmJpbmQodGhpcykpO1xuICB0aGlzLmRldmljZUluZm9fID0gbmV3IERldmljZUluZm8odGhpcy5kcGRiXy5nZXREZXZpY2VQYXJhbXMoKSk7XG5cbiAgdGhpcy52aWV3ZXJTZWxlY3Rvcl8gPSBuZXcgVmlld2VyU2VsZWN0b3IoKTtcbiAgdGhpcy52aWV3ZXJTZWxlY3Rvcl8ub24oJ2NoYW5nZScsIHRoaXMub25WaWV3ZXJDaGFuZ2VkXy5iaW5kKHRoaXMpKTtcblxuICAvLyBTZXQgdGhlIGNvcnJlY3QgaW5pdGlhbCB2aWV3ZXIuXG4gIHRoaXMuZGV2aWNlSW5mb18uc2V0Vmlld2VyKHRoaXMudmlld2VyU2VsZWN0b3JfLmdldEN1cnJlbnRWaWV3ZXIoKSk7XG5cbiAgaWYgKCFXZWJWUkNvbmZpZy5ST1RBVEVfSU5TVFJVQ1RJT05TX0RJU0FCTEVEKSB7XG4gICAgdGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfID0gbmV3IFJvdGF0ZUluc3RydWN0aW9ucygpO1xuICB9XG5cbiAgaWYgKFV0aWwuaXNJT1MoKSkge1xuICAgIC8vIExpc3RlbiBmb3IgcmVzaXplIGV2ZW50cyB0byB3b3JrYXJvdW5kIHRoaXMgYXdmdWwgU2FmYXJpIGJ1Zy5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZV8uYmluZCh0aGlzKSk7XG4gIH1cbn1cbkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUgPSBuZXcgVlJEaXNwbGF5KCk7XG5cbkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuZ2V0SW1tZWRpYXRlUG9zZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uOiB0aGlzLnBvc2VTZW5zb3JfLmdldFBvc2l0aW9uKCksXG4gICAgb3JpZW50YXRpb246IHRoaXMucG9zZVNlbnNvcl8uZ2V0T3JpZW50YXRpb24oKSxcbiAgICBsaW5lYXJWZWxvY2l0eTogbnVsbCxcbiAgICBsaW5lYXJBY2NlbGVyYXRpb246IG51bGwsXG4gICAgYW5ndWxhclZlbG9jaXR5OiBudWxsLFxuICAgIGFuZ3VsYXJBY2NlbGVyYXRpb246IG51bGxcbiAgfTtcbn07XG5cbkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUucmVzZXRQb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucG9zZVNlbnNvcl8ucmVzZXRQb3NlKCk7XG59O1xuXG5DYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLmdldEV5ZVBhcmFtZXRlcnMgPSBmdW5jdGlvbih3aGljaEV5ZSkge1xuICB2YXIgb2Zmc2V0ID0gW3RoaXMuZGV2aWNlSW5mb18udmlld2VyLmludGVyTGVuc0Rpc3RhbmNlICogMC41LCAwLjAsIDAuMF07XG4gIHZhciBmaWVsZE9mVmlldztcblxuICAvLyBUT0RPOiBGb1YgY2FuIGJlIGEgbGl0dGxlIGV4cGVuc2l2ZSB0byBjb21wdXRlLiBDYWNoZSB3aGVuIGRldmljZSBwYXJhbXMgY2hhbmdlLlxuICBpZiAod2hpY2hFeWUgPT0gRXllLkxFRlQpIHtcbiAgICBvZmZzZXRbMF0gKj0gLTEuMDtcbiAgICBmaWVsZE9mVmlldyA9IHRoaXMuZGV2aWNlSW5mb18uZ2V0RmllbGRPZlZpZXdMZWZ0RXllKCk7XG4gIH0gZWxzZSBpZiAod2hpY2hFeWUgPT0gRXllLlJJR0hUKSB7XG4gICAgZmllbGRPZlZpZXcgPSB0aGlzLmRldmljZUluZm9fLmdldEZpZWxkT2ZWaWV3UmlnaHRFeWUoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIGV5ZSBwcm92aWRlZDogJXMnLCB3aGljaEV5ZSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZpZWxkT2ZWaWV3OiBmaWVsZE9mVmlldyxcbiAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAvLyBUT0RPOiBTaG91bGQgYmUgYWJsZSB0byBwcm92aWRlIGJldHRlciB2YWx1ZXMgdGhhbiB0aGVzZS5cbiAgICByZW5kZXJXaWR0aDogdGhpcy5kZXZpY2VJbmZvXy5kZXZpY2Uud2lkdGggKiAwLjUgKiB0aGlzLmJ1ZmZlclNjYWxlXyxcbiAgICByZW5kZXJIZWlnaHQ6IHRoaXMuZGV2aWNlSW5mb18uZGV2aWNlLmhlaWdodCAqIHRoaXMuYnVmZmVyU2NhbGVfLFxuICB9O1xufTtcblxuQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5vbkRldmljZVBhcmFtc1VwZGF0ZWRfID0gZnVuY3Rpb24obmV3UGFyYW1zKSB7XG4gIGNvbnNvbGUubG9nKCdEUERCIHJlcG9ydGVkIHRoYXQgZGV2aWNlIHBhcmFtcyB3ZXJlIHVwZGF0ZWQuJyk7XG4gIHRoaXMuZGV2aWNlSW5mb18udXBkYXRlRGV2aWNlUGFyYW1zKG5ld1BhcmFtcyk7XG5cbiAgaWYgKHRoaXMuZGlzdG9ydGVyXykge1xuICAgIHRoaXMuZGlzdG9ydGVyLnVwZGF0ZURldmljZUluZm8odGhpcy5kZXZpY2VJbmZvXyk7XG4gIH1cbn07XG5cbkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuYmVnaW5QcmVzZW50XyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZ2wgPSB0aGlzLmxheWVyXy5zb3VyY2UuZ2V0Q29udGV4dCgnd2ViZ2wnKTtcbiAgaWYgKCFnbClcbiAgICBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnKTtcbiAgaWYgKCFnbClcbiAgICBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCd3ZWJnbDInKTtcblxuICBpZiAoIWdsKVxuICAgIHJldHVybjsgLy8gQ2FuJ3QgZG8gZGlzdG9ydGlvbiB3aXRob3V0IGEgV2ViR0wgY29udGV4dC5cblxuICAvLyBQcm92aWRlcyBhIHdheSB0byBvcHQgb3V0IG9mIGRpc3RvcnRpb25cbiAgaWYgKHRoaXMubGF5ZXJfLnByZWRpc3RvcnRlZCkge1xuICAgIGlmICghV2ViVlJDb25maWcuQ0FSREJPQVJEX1VJX0RJU0FCTEVEKSB7XG4gICAgICBnbC5jYW52YXMud2lkdGggPSBVdGlsLmdldFNjcmVlbldpZHRoKCkgKiB0aGlzLmJ1ZmZlclNjYWxlXztcbiAgICAgIGdsLmNhbnZhcy5oZWlnaHQgPSBVdGlsLmdldFNjcmVlbkhlaWdodCgpICogdGhpcy5idWZmZXJTY2FsZV87XG4gICAgICB0aGlzLmNhcmRib2FyZFVJXyA9IG5ldyBDYXJkYm9hcmRVSShnbCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIENyZWF0ZSBhIG5ldyBkaXN0b3J0ZXIgZm9yIHRoZSB0YXJnZXQgY29udGV4dFxuICAgIHRoaXMuZGlzdG9ydGVyXyA9IG5ldyBDYXJkYm9hcmREaXN0b3J0ZXIoZ2wpO1xuICAgIHRoaXMuZGlzdG9ydGVyXy51cGRhdGVEZXZpY2VJbmZvKHRoaXMuZGV2aWNlSW5mb18pO1xuICAgIHRoaXMuY2FyZGJvYXJkVUlfID0gdGhpcy5kaXN0b3J0ZXJfLmNhcmRib2FyZFVJO1xuXG4gICAgaWYgKHRoaXMubGF5ZXJfLmxlZnRCb3VuZHMgfHwgdGhpcy5sYXllcl8ucmlnaHRCb3VuZHMpIHtcbiAgICAgIHRoaXMuZGlzdG9ydGVyXy5zZXRUZXh0dXJlQm91bmRzKHRoaXMubGF5ZXJfLmxlZnRCb3VuZHMsIHRoaXMubGF5ZXJfLnJpZ2h0Qm91bmRzKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5jYXJkYm9hcmRVSV8pIHtcbiAgICB0aGlzLmNhcmRib2FyZFVJXy5saXN0ZW4oZnVuY3Rpb24oZSkge1xuICAgICAgLy8gT3B0aW9ucyBjbGlja2VkLlxuICAgICAgdGhpcy52aWV3ZXJTZWxlY3Rvcl8uc2hvdyh0aGlzLmxheWVyXy5zb3VyY2UucGFyZW50RWxlbWVudCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0uYmluZCh0aGlzKSwgZnVuY3Rpb24oZSkge1xuICAgICAgLy8gQmFjayBjbGlja2VkLlxuICAgICAgdGhpcy5leGl0UHJlc2VudCgpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9XG5cbiAgaWYgKHRoaXMucm90YXRlSW5zdHJ1Y3Rpb25zXykge1xuICAgIGlmIChVdGlsLmlzTGFuZHNjYXBlTW9kZSgpICYmIFV0aWwuaXNNb2JpbGUoKSkge1xuICAgICAgLy8gSW4gbGFuZHNjYXBlIG1vZGUsIHRlbXBvcmFyaWx5IHNob3cgdGhlIFwicHV0IGludG8gQ2FyZGJvYXJkXCJcbiAgICAgIC8vIGludGVyc3RpdGlhbC4gT3RoZXJ3aXNlLCBkbyB0aGUgZGVmYXVsdCB0aGluZy5cbiAgICAgIHRoaXMucm90YXRlSW5zdHJ1Y3Rpb25zXy5zaG93VGVtcG9yYXJpbHkoMzAwMCwgdGhpcy5sYXllcl8uc291cmNlLnBhcmVudEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvdGF0ZUluc3RydWN0aW9uc18udXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gTGlzdGVuIGZvciBvcmllbnRhdGlvbiBjaGFuZ2UgZXZlbnRzIGluIG9yZGVyIHRvIHNob3cgaW50ZXJzdGl0aWFsLlxuICB0aGlzLm9yaWVudGF0aW9uSGFuZGxlciA9IHRoaXMub25PcmllbnRhdGlvbkNoYW5nZV8uYmluZCh0aGlzKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgdGhpcy5vcmllbnRhdGlvbkhhbmRsZXIpO1xuXG4gIC8vIEZpcmUgdGhpcyBldmVudCBpbml0aWFsbHksIHRvIGdpdmUgZ2VvbWV0cnktZGlzdG9ydGlvbiBjbGllbnRzIHRoZSBjaGFuY2VcbiAgLy8gdG8gZG8gc29tZXRoaW5nIGN1c3RvbS5cbiAgdGhpcy5maXJlVlJEaXNwbGF5RGV2aWNlUGFyYW1zQ2hhbmdlXygpO1xufTtcblxuQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5lbmRQcmVzZW50XyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5kaXN0b3J0ZXJfKSB7XG4gICAgdGhpcy5kaXN0b3J0ZXJfLmRlc3Ryb3koKTtcbiAgICB0aGlzLmRpc3RvcnRlcl8gPSBudWxsO1xuICB9XG4gIGlmICh0aGlzLmNhcmRib2FyZFVJXykge1xuICAgIHRoaXMuY2FyZGJvYXJkVUlfLmRlc3Ryb3koKTtcbiAgICB0aGlzLmNhcmRib2FyZFVJXyA9IG51bGw7XG4gIH1cblxuICBpZiAodGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfKSB7XG4gICAgdGhpcy5yb3RhdGVJbnN0cnVjdGlvbnNfLmhpZGUoKTtcbiAgfVxuICB0aGlzLnZpZXdlclNlbGVjdG9yXy5oaWRlKCk7XG5cbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgdGhpcy5vcmllbnRhdGlvbkhhbmRsZXIpO1xufTtcblxuQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5zdWJtaXRGcmFtZSA9IGZ1bmN0aW9uKHBvc2UpIHtcbiAgaWYgKHRoaXMuZGlzdG9ydGVyXykge1xuICAgIHRoaXMuZGlzdG9ydGVyXy5zdWJtaXRGcmFtZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuY2FyZGJvYXJkVUlfICYmIHRoaXMubGF5ZXJfKSB7XG4gICAgLy8gSGFjayBmb3IgcHJlZGlzdG9ydGVkOiB0cnVlLlxuICAgIHZhciBjYW52YXMgPSB0aGlzLmxheWVyXy5zb3VyY2UuZ2V0Q29udGV4dCgnd2ViZ2wnKS5jYW52YXM7XG4gICAgaWYgKGNhbnZhcy53aWR0aCAhPSB0aGlzLmxhc3RXaWR0aCB8fCBjYW52YXMuaGVpZ2h0ICE9IHRoaXMubGFzdEhlaWdodCkge1xuICAgICAgdGhpcy5jYXJkYm9hcmRVSV8ub25SZXNpemUoKTtcbiAgICB9XG4gICAgdGhpcy5sYXN0V2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgdGhpcy5sYXN0SGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcblxuICAgIC8vIFJlbmRlciB0aGUgQ2FyZGJvYXJkIFVJLlxuICAgIHRoaXMuY2FyZGJvYXJkVUlfLnJlbmRlcigpO1xuICB9XG59O1xuXG5DYXJkYm9hcmRWUkRpc3BsYXkucHJvdG90eXBlLm9uT3JpZW50YXRpb25DaGFuZ2VfID0gZnVuY3Rpb24oZSkge1xuICBjb25zb2xlLmxvZygnb25PcmllbnRhdGlvbkNoYW5nZV8nKTtcblxuICAvLyBIaWRlIHRoZSB2aWV3ZXIgc2VsZWN0b3IuXG4gIHRoaXMudmlld2VyU2VsZWN0b3JfLmhpZGUoKTtcblxuICAvLyBVcGRhdGUgdGhlIHJvdGF0ZSBpbnN0cnVjdGlvbnMuXG4gIGlmICh0aGlzLnJvdGF0ZUluc3RydWN0aW9uc18pIHtcbiAgICB0aGlzLnJvdGF0ZUluc3RydWN0aW9uc18udXBkYXRlKCk7XG4gIH1cblxuICB0aGlzLm9uUmVzaXplXygpO1xufTtcblxuQ2FyZGJvYXJkVlJEaXNwbGF5LnByb3RvdHlwZS5vblJlc2l6ZV8gPSBmdW5jdGlvbihlKSB7XG4gIGlmICh0aGlzLmxheWVyXykge1xuICAgIHZhciBnbCA9IHRoaXMubGF5ZXJfLnNvdXJjZS5nZXRDb250ZXh0KCd3ZWJnbCcpO1xuICAgIC8vIFNpemUgdGhlIENTUyBjYW52YXMuXG4gICAgLy8gQWRkZWQgcGFkZGluZyBvbiByaWdodCBhbmQgYm90dG9tIGJlY2F1c2UgaVBob25lIDUgd2lsbCBub3RcbiAgICAvLyBoaWRlIHRoZSBVUkwgYmFyIHVubGVzcyBjb250ZW50IGlzIGJpZ2dlciB0aGFuIHRoZSBzY3JlZW4uXG4gICAgLy8gVGhpcyB3aWxsIG5vdCBiZSB2aXNpYmxlIGFzIGxvbmcgYXMgdGhlIGNvbnRhaW5lciBlbGVtZW50IChlLmcuIGJvZHkpXG4gICAgLy8gaXMgc2V0IHRvICdvdmVyZmxvdzogaGlkZGVuJy5cbiAgICB2YXIgY3NzUHJvcGVydGllcyA9IFtcbiAgICAgICdwb3NpdGlvbjogYWJzb2x1dGUnLFxuICAgICAgJ3RvcDogMCcsXG4gICAgICAnbGVmdDogMCcsXG4gICAgICAnd2lkdGg6ICcgKyBNYXRoLm1heChzY3JlZW4ud2lkdGgsIHNjcmVlbi5oZWlnaHQpICsgJ3B4JyxcbiAgICAgICdoZWlnaHQ6ICcgKyBNYXRoLm1pbihzY3JlZW4uaGVpZ2h0LCBzY3JlZW4ud2lkdGgpICsgJ3B4JyxcbiAgICAgICdib3JkZXI6IDAnLFxuICAgICAgJ21hcmdpbjogMCcsXG4gICAgICAncGFkZGluZzogMCAxMHB4IDEwcHggMCcsXG4gICAgXTtcbiAgICBnbC5jYW52YXMuc2V0QXR0cmlidXRlKCdzdHlsZScsIGNzc1Byb3BlcnRpZXMuam9pbignOyAnKSArICc7Jyk7XG5cbiAgICBVdGlsLnNhZmFyaUNzc1NpemVXb3JrYXJvdW5kKGdsLmNhbnZhcyk7XG4gIH1cbn07XG5cbkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUub25WaWV3ZXJDaGFuZ2VkXyA9IGZ1bmN0aW9uKHZpZXdlcikge1xuICB0aGlzLmRldmljZUluZm9fLnNldFZpZXdlcih2aWV3ZXIpO1xuXG4gIGlmICh0aGlzLmRpc3RvcnRlcl8pIHtcbiAgICAvLyBVcGRhdGUgdGhlIGRpc3RvcnRpb24gYXBwcm9wcmlhdGVseS5cbiAgICB0aGlzLmRpc3RvcnRlcl8udXBkYXRlRGV2aWNlSW5mbyh0aGlzLmRldmljZUluZm9fKTtcbiAgfVxuXG4gIC8vIEZpcmUgYSBuZXcgZXZlbnQgY29udGFpbmluZyB2aWV3ZXIgYW5kIGRldmljZSBwYXJhbWV0ZXJzIGZvciBjbGllbnRzIHRoYXRcbiAgLy8gd2FudCB0byBpbXBsZW1lbnQgdGhlaXIgb3duIGdlb21ldHJ5LWJhc2VkIGRpc3RvcnRpb24uXG4gIHRoaXMuZmlyZVZSRGlzcGxheURldmljZVBhcmFtc0NoYW5nZV8oKTtcbn07XG5cbkNhcmRib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuZmlyZVZSRGlzcGxheURldmljZVBhcmFtc0NoYW5nZV8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCd2cmRpc3BsYXlkZXZpY2VwYXJhbXNjaGFuZ2UnLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICB2cmRpc3BsYXk6IHRoaXMsXG4gICAgICBkZXZpY2VJbmZvOiB0aGlzLmRldmljZUluZm9fLFxuICAgIH1cbiAgfSk7XG4gIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FyZGJvYXJkVlJEaXNwbGF5O1xuXG59LHtcIi4vYmFzZS5qc1wiOjIsXCIuL2NhcmRib2FyZC1kaXN0b3J0ZXIuanNcIjozLFwiLi9jYXJkYm9hcmQtdWkuanNcIjo0LFwiLi9kZXZpY2UtaW5mby5qc1wiOjcsXCIuL2RwZGIvZHBkYi5qc1wiOjExLFwiLi9yb3RhdGUtaW5zdHJ1Y3Rpb25zLmpzXCI6MTYsXCIuL3NlbnNvci1mdXNpb24vZnVzaW9uLXBvc2Utc2Vuc29yLmpzXCI6MTgsXCIuL3V0aWwuanNcIjoyMixcIi4vdmlld2VyLXNlbGVjdG9yLmpzXCI6MjN9XSw2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG5Db3B5cmlnaHQgKGMpIDIwMTYsIEJyYW5kb24gSm9uZXMuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cbiovXG5cbi8qXG5DYWNoZXMgc3BlY2lmaWVkIEdMIHN0YXRlLCBydW5zIGEgY2FsbGJhY2ssIGFuZCByZXN0b3JlcyB0aGUgY2FjaGVkIHN0YXRlIHdoZW5cbmRvbmUuXG5cbkV4YW1wbGUgdXNhZ2U6XG5cbnZhciBzYXZlZFN0YXRlID0gW1xuICBnbC5BUlJBWV9CVUZGRVJfQklORElORyxcblxuICAvLyBURVhUVVJFX0JJTkRJTkdfMkQgb3IgX0NVQkVfTUFQIG11c3QgYWx3YXlzIGJlIGZvbGxvd2VkIGJ5IHRoZSB0ZXh1cmUgdW5pdC5cbiAgZ2wuVEVYVFVSRV9CSU5ESU5HXzJELCBnbC5URVhUVVJFMCxcblxuICBnbC5DTEVBUl9DT0xPUixcbl07XG4vLyBBZnRlciB0aGlzIGNhbGwgdGhlIGFycmF5IGJ1ZmZlciwgdGV4dHVyZSB1bml0IDAsIGFjdGl2ZSB0ZXh0dXJlLCBhbmQgY2xlYXJcbi8vIGNvbG9yIHdpbGwgYmUgcmVzdG9yZWQuIFRoZSB2aWV3cG9ydCB3aWxsIHJlbWFpbiBjaGFuZ2VkLCBob3dldmVyLCBiZWNhdXNlXG4vLyBnbC5WSUVXUE9SVCB3YXMgbm90IGluY2x1ZGVkIGluIHRoZSBzYXZlZFN0YXRlIGxpc3QuXG5XR0xVUHJlc2VydmVHTFN0YXRlKGdsLCBzYXZlZFN0YXRlLCBmdW5jdGlvbihnbCkge1xuICBnbC52aWV3cG9ydCgwLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG4gIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpO1xuICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgLi4uLik7XG5cbiAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCk7XG4gIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIC4uLik7XG5cbiAgZ2wuY2xlYXJDb2xvcigxLCAwLCAwLCAxKTtcbiAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG59KTtcblxuTm90ZSB0aGF0IHRoaXMgaXMgbm90IGludGVuZGVkIHRvIGJlIGZhc3QuIE1hbmFnaW5nIHN0YXRlIGluIHlvdXIgb3duIGNvZGUgdG9cbmF2b2lkIHJlZHVuZGFudCBzdGF0ZSBzZXR0aW5nIGFuZCBxdWVyeWluZyB3aWxsIGFsd2F5cyBiZSBmYXN0ZXIuIFRoaXMgZnVuY3Rpb25cbmlzIG1vc3QgdXNlZnVsIGZvciBjYXNlcyB3aGVyZSB5b3UgbWF5IG5vdCBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBXZWJHTFxuY2FsbHMgYmVpbmcgbWFkZSwgc3VjaCBhcyB0b29saW5nIG9yIGVmZmVjdCBpbmplY3RvcnMuXG4qL1xuXG5mdW5jdGlvbiBXR0xVUHJlc2VydmVHTFN0YXRlKGdsLCBiaW5kaW5ncywgY2FsbGJhY2spIHtcbiAgaWYgKCFiaW5kaW5ncykge1xuICAgIGNhbGxiYWNrKGdsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYm91bmRWYWx1ZXMgPSBbXTtcblxuICB2YXIgYWN0aXZlVGV4dHVyZSA9IG51bGw7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYmluZGluZyA9IGJpbmRpbmdzW2ldO1xuICAgIHN3aXRjaCAoYmluZGluZykge1xuICAgICAgY2FzZSBnbC5URVhUVVJFX0JJTkRJTkdfMkQ6XG4gICAgICBjYXNlIGdsLlRFWFRVUkVfQklORElOR19DVUJFX01BUDpcbiAgICAgICAgdmFyIHRleHR1cmVVbml0ID0gYmluZGluZ3NbKytpXTtcbiAgICAgICAgaWYgKHRleHR1cmVVbml0IDwgZ2wuVEVYVFVSRTAgfHwgdGV4dHVyZVVuaXQgPiBnbC5URVhUVVJFMzEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVEVYVFVSRV9CSU5ESU5HXzJEIG9yIFRFWFRVUkVfQklORElOR19DVUJFX01BUCBtdXN0IGJlIGZvbGxvd2VkIGJ5IGEgdmFsaWQgdGV4dHVyZSB1bml0XCIpO1xuICAgICAgICAgIGJvdW5kVmFsdWVzLnB1c2gobnVsbCwgbnVsbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhY3RpdmVUZXh0dXJlKSB7XG4gICAgICAgICAgYWN0aXZlVGV4dHVyZSA9IGdsLmdldFBhcmFtZXRlcihnbC5BQ1RJVkVfVEVYVFVSRSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZSh0ZXh0dXJlVW5pdCk7XG4gICAgICAgIGJvdW5kVmFsdWVzLnB1c2goZ2wuZ2V0UGFyYW1ldGVyKGJpbmRpbmcpLCBudWxsKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGdsLkFDVElWRV9URVhUVVJFOlxuICAgICAgICBhY3RpdmVUZXh0dXJlID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkFDVElWRV9URVhUVVJFKTtcbiAgICAgICAgYm91bmRWYWx1ZXMucHVzaChudWxsKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBib3VuZFZhbHVlcy5wdXNoKGdsLmdldFBhcmFtZXRlcihiaW5kaW5nKSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGdsKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJpbmRpbmcgPSBiaW5kaW5nc1tpXTtcbiAgICB2YXIgYm91bmRWYWx1ZSA9IGJvdW5kVmFsdWVzW2ldO1xuICAgIHN3aXRjaCAoYmluZGluZykge1xuICAgICAgY2FzZSBnbC5BQ1RJVkVfVEVYVFVSRTpcbiAgICAgICAgYnJlYWs7IC8vIElnbm9yZSB0aGlzIGJpbmRpbmcsIHNpbmNlIHdlIHNwZWNpYWwtY2FzZSBpdCB0byBoYXBwZW4gbGFzdC5cbiAgICAgIGNhc2UgZ2wuQVJSQVlfQlVGRkVSX0JJTkRJTkc6XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBib3VuZFZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGdsLkNPTE9SX0NMRUFSX1ZBTFVFOlxuICAgICAgICBnbC5jbGVhckNvbG9yKGJvdW5kVmFsdWVbMF0sIGJvdW5kVmFsdWVbMV0sIGJvdW5kVmFsdWVbMl0sIGJvdW5kVmFsdWVbM10pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZ2wuQ09MT1JfV1JJVEVNQVNLOlxuICAgICAgICBnbC5jb2xvck1hc2soYm91bmRWYWx1ZVswXSwgYm91bmRWYWx1ZVsxXSwgYm91bmRWYWx1ZVsyXSwgYm91bmRWYWx1ZVszXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBnbC5DVVJSRU5UX1BST0dSQU06XG4gICAgICAgIGdsLnVzZVByb2dyYW0oYm91bmRWYWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUl9CSU5ESU5HOlxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBib3VuZFZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGdsLkZSQU1FQlVGRkVSX0JJTkRJTkc6XG4gICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgYm91bmRWYWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBnbC5SRU5ERVJCVUZGRVJfQklORElORzpcbiAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIGJvdW5kVmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZ2wuVEVYVFVSRV9CSU5ESU5HXzJEOlxuICAgICAgICB2YXIgdGV4dHVyZVVuaXQgPSBiaW5kaW5nc1srK2ldO1xuICAgICAgICBpZiAodGV4dHVyZVVuaXQgPCBnbC5URVhUVVJFMCB8fCB0ZXh0dXJlVW5pdCA+IGdsLlRFWFRVUkUzMSlcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZSh0ZXh0dXJlVW5pdCk7XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGJvdW5kVmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZ2wuVEVYVFVSRV9CSU5ESU5HX0NVQkVfTUFQOlxuICAgICAgICB2YXIgdGV4dHVyZVVuaXQgPSBiaW5kaW5nc1srK2ldO1xuICAgICAgICBpZiAodGV4dHVyZVVuaXQgPCBnbC5URVhUVVJFMCB8fCB0ZXh0dXJlVW5pdCA+IGdsLlRFWFRVUkUzMSlcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZSh0ZXh0dXJlVW5pdCk7XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfQ1VCRV9NQVAsIGJvdW5kVmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZ2wuVklFV1BPUlQ6XG4gICAgICAgIGdsLnZpZXdwb3J0KGJvdW5kVmFsdWVbMF0sIGJvdW5kVmFsdWVbMV0sIGJvdW5kVmFsdWVbMl0sIGJvdW5kVmFsdWVbM10pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZ2wuQkxFTkQ6XG4gICAgICBjYXNlIGdsLkNVTExfRkFDRTpcbiAgICAgIGNhc2UgZ2wuREVQVEhfVEVTVDpcbiAgICAgIGNhc2UgZ2wuU0NJU1NPUl9URVNUOlxuICAgICAgY2FzZSBnbC5TVEVOQ0lMX1RFU1Q6XG4gICAgICAgIGlmIChib3VuZFZhbHVlKSB7XG4gICAgICAgICAgZ2wuZW5hYmxlKGJpbmRpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdsLmRpc2FibGUoYmluZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb25zb2xlLmxvZyhcIk5vIEdMIHJlc3RvcmUgYmVoYXZpb3IgZm9yIDB4XCIgKyBiaW5kaW5nLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChhY3RpdmVUZXh0dXJlKSB7XG4gICAgICBnbC5hY3RpdmVUZXh0dXJlKGFjdGl2ZVRleHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdHTFVQcmVzZXJ2ZUdMU3RhdGU7XG59LHt9XSw3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBEaXN0b3J0aW9uID0gX2RlcmVxXygnLi9kaXN0b3J0aW9uL2Rpc3RvcnRpb24uanMnKTtcbnZhciBNYXRoVXRpbCA9IF9kZXJlcV8oJy4vbWF0aC11dGlsLmpzJyk7XG52YXIgVXRpbCA9IF9kZXJlcV8oJy4vdXRpbC5qcycpO1xuXG5mdW5jdGlvbiBEZXZpY2UocGFyYW1zKSB7XG4gIHRoaXMud2lkdGggPSBwYXJhbXMud2lkdGggfHwgVXRpbC5nZXRTY3JlZW5XaWR0aCgpO1xuICB0aGlzLmhlaWdodCA9IHBhcmFtcy5oZWlnaHQgfHwgVXRpbC5nZXRTY3JlZW5IZWlnaHQoKTtcbiAgdGhpcy53aWR0aE1ldGVycyA9IHBhcmFtcy53aWR0aE1ldGVycztcbiAgdGhpcy5oZWlnaHRNZXRlcnMgPSBwYXJhbXMuaGVpZ2h0TWV0ZXJzO1xuICB0aGlzLmJldmVsTWV0ZXJzID0gcGFyYW1zLmJldmVsTWV0ZXJzO1xufVxuXG5cbi8vIEZhbGxiYWNrIEFuZHJvaWQgZGV2aWNlIChiYXNlZCBvbiBOZXh1cyA1IG1lYXN1cmVtZW50cykgZm9yIHVzZSB3aGVuXG4vLyB3ZSBjYW4ndCByZWNvZ25pemUgYW4gQW5kcm9pZCBkZXZpY2UuXG52YXIgREVGQVVMVF9BTkRST0lEID0gbmV3IERldmljZSh7XG4gIHdpZHRoTWV0ZXJzOiAwLjExMCxcbiAgaGVpZ2h0TWV0ZXJzOiAwLjA2MixcbiAgYmV2ZWxNZXRlcnM6IDAuMDA0XG59KTtcblxuLy8gRmFsbGJhY2sgaU9TIGRldmljZSAoYmFzZWQgb24gaVBob25lNikgZm9yIHVzZSB3aGVuXG4vLyB3ZSBjYW4ndCByZWNvZ25pemUgYW4gQW5kcm9pZCBkZXZpY2UuXG52YXIgREVGQVVMVF9JT1MgPSBuZXcgRGV2aWNlKHtcbiAgd2lkdGhNZXRlcnM6IDAuMTAzOCxcbiAgaGVpZ2h0TWV0ZXJzOiAwLjA1ODQsXG4gIGJldmVsTWV0ZXJzOiAwLjAwNFxufSk7XG5cblxudmFyIFZpZXdlcnMgPSB7XG4gIENhcmRib2FyZFYxOiBuZXcgQ2FyZGJvYXJkVmlld2VyKHtcbiAgICBpZDogJ0NhcmRib2FyZFYxJyxcbiAgICBsYWJlbDogJ0NhcmRib2FyZCBJL08gMjAxNCcsXG4gICAgZm92OiA0MCxcbiAgICBpbnRlckxlbnNEaXN0YW5jZTogMC4wNjAsXG4gICAgYmFzZWxpbmVMZW5zRGlzdGFuY2U6IDAuMDM1LFxuICAgIHNjcmVlbkxlbnNEaXN0YW5jZTogMC4wNDIsXG4gICAgZGlzdG9ydGlvbkNvZWZmaWNpZW50czogWzAuNDQxLCAwLjE1Nl0sXG4gICAgaW52ZXJzZUNvZWZmaWNpZW50czogWy0wLjQ0MTAwMzUsIDAuNDI3NTYxNTUsIC0wLjQ4MDQ0MzksIDAuNTQ2MDEzOSxcbiAgICAgIC0wLjU4ODIxMTgzLCAwLjU3MzM5MzgsIC0wLjQ4MzAzMjAyLCAwLjMzMjk5MDgzLCAtMC4xNzU3Mzg0MSxcbiAgICAgIDAuMDY1MTc3MiwgLTAuMDE0ODg5NjMsIDAuMDAxNTU5ODM0XVxuICB9KSxcbiAgQ2FyZGJvYXJkVjI6IG5ldyBDYXJkYm9hcmRWaWV3ZXIoe1xuICAgIGlkOiAnQ2FyZGJvYXJkVjInLFxuICAgIGxhYmVsOiAnQ2FyZGJvYXJkIEkvTyAyMDE1JyxcbiAgICBmb3Y6IDYwLFxuICAgIGludGVyTGVuc0Rpc3RhbmNlOiAwLjA2NCxcbiAgICBiYXNlbGluZUxlbnNEaXN0YW5jZTogMC4wMzUsXG4gICAgc2NyZWVuTGVuc0Rpc3RhbmNlOiAwLjAzOSxcbiAgICBkaXN0b3J0aW9uQ29lZmZpY2llbnRzOiBbMC4zNCwgMC41NV0sXG4gICAgaW52ZXJzZUNvZWZmaWNpZW50czogWy0wLjMzODM2NzA0LCAtMC4xODE2MjE4NSwgMC44NjI2NTUsIC0xLjI0NjIwNTEsXG4gICAgICAxLjA1NjA2MDIsIC0wLjU4MjA4MzE3LCAwLjIxNjA5MDc4LCAtMC4wNTQ0NDgyMywgMC4wMDkxNzc5NTYsXG4gICAgICAtOS45MDQxNjlFLTQsIDYuMTgzNTM1RS01LCAtMS42OTgxODAzRS02XVxuICB9KVxufTtcblxuXG52YXIgREVGQVVMVF9MRUZUX0NFTlRFUiA9IHt4OiAwLjUsIHk6IDAuNX07XG52YXIgREVGQVVMVF9SSUdIVF9DRU5URVIgPSB7eDogMC41LCB5OiAwLjV9O1xuXG4vKipcbiAqIE1hbmFnZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGRldmljZSBhbmQgdGhlIHZpZXdlci5cbiAqXG4gKiBkZXZpY2VQYXJhbXMgaW5kaWNhdGVzIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBkZXZpY2UgdG8gdXNlIChnZW5lcmFsbHlcbiAqIG9idGFpbmVkIGZyb20gZHBkYi5nZXREZXZpY2VQYXJhbXMoKSkuIENhbiBiZSBudWxsIHRvIG1lYW4gbm8gZGV2aWNlXG4gKiBwYXJhbXMgd2VyZSBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gRGV2aWNlSW5mbyhkZXZpY2VQYXJhbXMpIHtcbiAgdGhpcy52aWV3ZXIgPSBWaWV3ZXJzLkNhcmRib2FyZFYyO1xuICB0aGlzLnVwZGF0ZURldmljZVBhcmFtcyhkZXZpY2VQYXJhbXMpO1xuICB0aGlzLmRpc3RvcnRpb24gPSBuZXcgRGlzdG9ydGlvbih0aGlzLnZpZXdlci5kaXN0b3J0aW9uQ29lZmZpY2llbnRzKTtcbn1cblxuRGV2aWNlSW5mby5wcm90b3R5cGUudXBkYXRlRGV2aWNlUGFyYW1zID0gZnVuY3Rpb24oZGV2aWNlUGFyYW1zKSB7XG4gIHRoaXMuZGV2aWNlID0gdGhpcy5kZXRlcm1pbmVEZXZpY2VfKGRldmljZVBhcmFtcykgfHwgdGhpcy5kZXZpY2U7XG59O1xuXG5EZXZpY2VJbmZvLnByb3RvdHlwZS5nZXREZXZpY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZGV2aWNlO1xufTtcblxuRGV2aWNlSW5mby5wcm90b3R5cGUuc2V0Vmlld2VyID0gZnVuY3Rpb24odmlld2VyKSB7XG4gIHRoaXMudmlld2VyID0gdmlld2VyO1xuICB0aGlzLmRpc3RvcnRpb24gPSBuZXcgRGlzdG9ydGlvbih0aGlzLnZpZXdlci5kaXN0b3J0aW9uQ29lZmZpY2llbnRzKTtcbn07XG5cbkRldmljZUluZm8ucHJvdG90eXBlLmRldGVybWluZURldmljZV8gPSBmdW5jdGlvbihkZXZpY2VQYXJhbXMpIHtcbiAgaWYgKCFkZXZpY2VQYXJhbXMpIHtcbiAgICAvLyBObyBwYXJhbWV0ZXJzLCBzbyB1c2UgYSBkZWZhdWx0LlxuICAgIGlmIChVdGlsLmlzSU9TKCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignVXNpbmcgZmFsbGJhY2sgaU9TIGRldmljZSBtZWFzdXJlbWVudHMuJyk7XG4gICAgICByZXR1cm4gREVGQVVMVF9JT1M7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybignVXNpbmcgZmFsbGJhY2sgQW5kcm9pZCBkZXZpY2UgbWVhc3VyZW1lbnRzLicpO1xuICAgICAgcmV0dXJuIERFRkFVTFRfQU5EUk9JRDtcbiAgICB9XG4gIH1cblxuICAvLyBDb21wdXRlIGRldmljZSBzY3JlZW4gZGltZW5zaW9ucyBiYXNlZCBvbiBkZXZpY2VQYXJhbXMuXG4gIHZhciBNRVRFUlNfUEVSX0lOQ0ggPSAwLjAyNTQ7XG4gIHZhciBtZXRlcnNQZXJQaXhlbFggPSBNRVRFUlNfUEVSX0lOQ0ggLyBkZXZpY2VQYXJhbXMueGRwaTtcbiAgdmFyIG1ldGVyc1BlclBpeGVsWSA9IE1FVEVSU19QRVJfSU5DSCAvIGRldmljZVBhcmFtcy55ZHBpO1xuICB2YXIgd2lkdGggPSBVdGlsLmdldFNjcmVlbldpZHRoKCk7XG4gIHZhciBoZWlnaHQgPSBVdGlsLmdldFNjcmVlbkhlaWdodCgpO1xuICByZXR1cm4gbmV3IERldmljZSh7XG4gICAgd2lkdGhNZXRlcnM6IG1ldGVyc1BlclBpeGVsWCAqIHdpZHRoLFxuICAgIGhlaWdodE1ldGVyczogbWV0ZXJzUGVyUGl4ZWxZICogaGVpZ2h0LFxuICAgIGJldmVsTWV0ZXJzOiBkZXZpY2VQYXJhbXMuYmV2ZWxNbSAqIDAuMDAxLFxuICB9KTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBmaWVsZCBvZiB2aWV3IGZvciB0aGUgbGVmdCBleWUuXG4gKi9cbkRldmljZUluZm8ucHJvdG90eXBlLmdldERpc3RvcnRlZEZpZWxkT2ZWaWV3TGVmdEV5ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdmlld2VyID0gdGhpcy52aWV3ZXI7XG4gIHZhciBkZXZpY2UgPSB0aGlzLmRldmljZTtcbiAgdmFyIGRpc3RvcnRpb24gPSB0aGlzLmRpc3RvcnRpb247XG5cbiAgLy8gRGV2aWNlLmhlaWdodCBhbmQgZGV2aWNlLndpZHRoIGZvciBkZXZpY2UgaW4gcG9ydHJhaXQgbW9kZSwgc28gdHJhbnNwb3NlLlxuICB2YXIgZXllVG9TY3JlZW5EaXN0YW5jZSA9IHZpZXdlci5zY3JlZW5MZW5zRGlzdGFuY2U7XG5cbiAgdmFyIG91dGVyRGlzdCA9IChkZXZpY2Uud2lkdGhNZXRlcnMgLSB2aWV3ZXIuaW50ZXJMZW5zRGlzdGFuY2UpIC8gMjtcbiAgdmFyIGlubmVyRGlzdCA9IHZpZXdlci5pbnRlckxlbnNEaXN0YW5jZSAvIDI7XG4gIHZhciBib3R0b21EaXN0ID0gdmlld2VyLmJhc2VsaW5lTGVuc0Rpc3RhbmNlIC0gZGV2aWNlLmJldmVsTWV0ZXJzO1xuICB2YXIgdG9wRGlzdCA9IGRldmljZS5oZWlnaHRNZXRlcnMgLSBib3R0b21EaXN0O1xuXG4gIHZhciBvdXRlckFuZ2xlID0gTWF0aFV0aWwucmFkVG9EZWcgKiBNYXRoLmF0YW4oXG4gICAgICBkaXN0b3J0aW9uLmRpc3RvcnQob3V0ZXJEaXN0IC8gZXllVG9TY3JlZW5EaXN0YW5jZSkpO1xuICB2YXIgaW5uZXJBbmdsZSA9IE1hdGhVdGlsLnJhZFRvRGVnICogTWF0aC5hdGFuKFxuICAgICAgZGlzdG9ydGlvbi5kaXN0b3J0KGlubmVyRGlzdCAvIGV5ZVRvU2NyZWVuRGlzdGFuY2UpKTtcbiAgdmFyIGJvdHRvbUFuZ2xlID0gTWF0aFV0aWwucmFkVG9EZWcgKiBNYXRoLmF0YW4oXG4gICAgICBkaXN0b3J0aW9uLmRpc3RvcnQoYm90dG9tRGlzdCAvIGV5ZVRvU2NyZWVuRGlzdGFuY2UpKTtcbiAgdmFyIHRvcEFuZ2xlID0gTWF0aFV0aWwucmFkVG9EZWcgKiBNYXRoLmF0YW4oXG4gICAgICBkaXN0b3J0aW9uLmRpc3RvcnQodG9wRGlzdCAvIGV5ZVRvU2NyZWVuRGlzdGFuY2UpKTtcblxuICByZXR1cm4ge1xuICAgIGxlZnREZWdyZWVzOiBNYXRoLm1pbihvdXRlckFuZ2xlLCB2aWV3ZXIuZm92KSxcbiAgICByaWdodERlZ3JlZXM6IE1hdGgubWluKGlubmVyQW5nbGUsIHZpZXdlci5mb3YpLFxuICAgIGRvd25EZWdyZWVzOiBNYXRoLm1pbihib3R0b21BbmdsZSwgdmlld2VyLmZvdiksXG4gICAgdXBEZWdyZWVzOiBNYXRoLm1pbih0b3BBbmdsZSwgdmlld2VyLmZvdilcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgdGFuLWFuZ2xlcyBmcm9tIHRoZSBtYXhpbXVtIEZPViBmb3IgdGhlIGxlZnQgZXllIGZvciB0aGVcbiAqIGN1cnJlbnQgZGV2aWNlIGFuZCBzY3JlZW4gcGFyYW1ldGVycy5cbiAqL1xuRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0TGVmdEV5ZVZpc2libGVUYW5BbmdsZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHZpZXdlciA9IHRoaXMudmlld2VyO1xuICB2YXIgZGV2aWNlID0gdGhpcy5kZXZpY2U7XG4gIHZhciBkaXN0b3J0aW9uID0gdGhpcy5kaXN0b3J0aW9uO1xuXG4gIC8vIFRhbi1hbmdsZXMgZnJvbSB0aGUgbWF4IEZPVi5cbiAgdmFyIGZvdkxlZnQgPSBNYXRoLnRhbigtTWF0aFV0aWwuZGVnVG9SYWQgKiB2aWV3ZXIuZm92KTtcbiAgdmFyIGZvdlRvcCA9IE1hdGgudGFuKE1hdGhVdGlsLmRlZ1RvUmFkICogdmlld2VyLmZvdik7XG4gIHZhciBmb3ZSaWdodCA9IE1hdGgudGFuKE1hdGhVdGlsLmRlZ1RvUmFkICogdmlld2VyLmZvdik7XG4gIHZhciBmb3ZCb3R0b20gPSBNYXRoLnRhbigtTWF0aFV0aWwuZGVnVG9SYWQgKiB2aWV3ZXIuZm92KTtcbiAgLy8gVmlld3BvcnQgc2l6ZS5cbiAgdmFyIGhhbGZXaWR0aCA9IGRldmljZS53aWR0aE1ldGVycyAvIDQ7XG4gIHZhciBoYWxmSGVpZ2h0ID0gZGV2aWNlLmhlaWdodE1ldGVycyAvIDI7XG4gIC8vIFZpZXdwb3J0IGNlbnRlciwgbWVhc3VyZWQgZnJvbSBsZWZ0IGxlbnMgcG9zaXRpb24uXG4gIHZhciB2ZXJ0aWNhbExlbnNPZmZzZXQgPSAodmlld2VyLmJhc2VsaW5lTGVuc0Rpc3RhbmNlIC0gZGV2aWNlLmJldmVsTWV0ZXJzIC0gaGFsZkhlaWdodCk7XG4gIHZhciBjZW50ZXJYID0gdmlld2VyLmludGVyTGVuc0Rpc3RhbmNlIC8gMiAtIGhhbGZXaWR0aDtcbiAgdmFyIGNlbnRlclkgPSAtdmVydGljYWxMZW5zT2Zmc2V0O1xuICB2YXIgY2VudGVyWiA9IHZpZXdlci5zY3JlZW5MZW5zRGlzdGFuY2U7XG4gIC8vIFRhbi1hbmdsZXMgb2YgdGhlIHZpZXdwb3J0IGVkZ2VzLCBhcyBzZWVuIHRocm91Z2ggdGhlIGxlbnMuXG4gIHZhciBzY3JlZW5MZWZ0ID0gZGlzdG9ydGlvbi5kaXN0b3J0KChjZW50ZXJYIC0gaGFsZldpZHRoKSAvIGNlbnRlclopO1xuICB2YXIgc2NyZWVuVG9wID0gZGlzdG9ydGlvbi5kaXN0b3J0KChjZW50ZXJZICsgaGFsZkhlaWdodCkgLyBjZW50ZXJaKTtcbiAgdmFyIHNjcmVlblJpZ2h0ID0gZGlzdG9ydGlvbi5kaXN0b3J0KChjZW50ZXJYICsgaGFsZldpZHRoKSAvIGNlbnRlclopO1xuICB2YXIgc2NyZWVuQm90dG9tID0gZGlzdG9ydGlvbi5kaXN0b3J0KChjZW50ZXJZIC0gaGFsZkhlaWdodCkgLyBjZW50ZXJaKTtcbiAgLy8gQ29tcGFyZSB0aGUgdHdvIHNldHMgb2YgdGFuLWFuZ2xlcyBhbmQgdGFrZSB0aGUgdmFsdWUgY2xvc2VyIHRvIHplcm8gb24gZWFjaCBzaWRlLlxuICB2YXIgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheSg0KTtcbiAgcmVzdWx0WzBdID0gTWF0aC5tYXgoZm92TGVmdCwgc2NyZWVuTGVmdCk7XG4gIHJlc3VsdFsxXSA9IE1hdGgubWluKGZvdlRvcCwgc2NyZWVuVG9wKTtcbiAgcmVzdWx0WzJdID0gTWF0aC5taW4oZm92UmlnaHQsIHNjcmVlblJpZ2h0KTtcbiAgcmVzdWx0WzNdID0gTWF0aC5tYXgoZm92Qm90dG9tLCBzY3JlZW5Cb3R0b20pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSB0YW4tYW5nbGVzIGZyb20gdGhlIG1heGltdW0gRk9WIGZvciB0aGUgbGVmdCBleWUgZm9yIHRoZVxuICogY3VycmVudCBkZXZpY2UgYW5kIHNjcmVlbiBwYXJhbWV0ZXJzLCBhc3N1bWluZyBubyBsZW5zZXMuXG4gKi9cbkRldmljZUluZm8ucHJvdG90eXBlLmdldExlZnRFeWVOb0xlbnNUYW5BbmdsZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHZpZXdlciA9IHRoaXMudmlld2VyO1xuICB2YXIgZGV2aWNlID0gdGhpcy5kZXZpY2U7XG4gIHZhciBkaXN0b3J0aW9uID0gdGhpcy5kaXN0b3J0aW9uO1xuXG4gIHZhciByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xuICAvLyBUYW4tYW5nbGVzIGZyb20gdGhlIG1heCBGT1YuXG4gIHZhciBmb3ZMZWZ0ID0gZGlzdG9ydGlvbi5kaXN0b3J0SW52ZXJzZShNYXRoLnRhbigtTWF0aFV0aWwuZGVnVG9SYWQgKiB2aWV3ZXIuZm92KSk7XG4gIHZhciBmb3ZUb3AgPSBkaXN0b3J0aW9uLmRpc3RvcnRJbnZlcnNlKE1hdGgudGFuKE1hdGhVdGlsLmRlZ1RvUmFkICogdmlld2VyLmZvdikpO1xuICB2YXIgZm92UmlnaHQgPSBkaXN0b3J0aW9uLmRpc3RvcnRJbnZlcnNlKE1hdGgudGFuKE1hdGhVdGlsLmRlZ1RvUmFkICogdmlld2VyLmZvdikpO1xuICB2YXIgZm92Qm90dG9tID0gZGlzdG9ydGlvbi5kaXN0b3J0SW52ZXJzZShNYXRoLnRhbigtTWF0aFV0aWwuZGVnVG9SYWQgKiB2aWV3ZXIuZm92KSk7XG4gIC8vIFZpZXdwb3J0IHNpemUuXG4gIHZhciBoYWxmV2lkdGggPSBkZXZpY2Uud2lkdGhNZXRlcnMgLyA0O1xuICB2YXIgaGFsZkhlaWdodCA9IGRldmljZS5oZWlnaHRNZXRlcnMgLyAyO1xuICAvLyBWaWV3cG9ydCBjZW50ZXIsIG1lYXN1cmVkIGZyb20gbGVmdCBsZW5zIHBvc2l0aW9uLlxuICB2YXIgdmVydGljYWxMZW5zT2Zmc2V0ID0gKHZpZXdlci5iYXNlbGluZUxlbnNEaXN0YW5jZSAtIGRldmljZS5iZXZlbE1ldGVycyAtIGhhbGZIZWlnaHQpO1xuICB2YXIgY2VudGVyWCA9IHZpZXdlci5pbnRlckxlbnNEaXN0YW5jZSAvIDIgLSBoYWxmV2lkdGg7XG4gIHZhciBjZW50ZXJZID0gLXZlcnRpY2FsTGVuc09mZnNldDtcbiAgdmFyIGNlbnRlclogPSB2aWV3ZXIuc2NyZWVuTGVuc0Rpc3RhbmNlO1xuICAvLyBUYW4tYW5nbGVzIG9mIHRoZSB2aWV3cG9ydCBlZGdlcywgYXMgc2VlbiB0aHJvdWdoIHRoZSBsZW5zLlxuICB2YXIgc2NyZWVuTGVmdCA9IChjZW50ZXJYIC0gaGFsZldpZHRoKSAvIGNlbnRlclo7XG4gIHZhciBzY3JlZW5Ub3AgPSAoY2VudGVyWSArIGhhbGZIZWlnaHQpIC8gY2VudGVyWjtcbiAgdmFyIHNjcmVlblJpZ2h0ID0gKGNlbnRlclggKyBoYWxmV2lkdGgpIC8gY2VudGVyWjtcbiAgdmFyIHNjcmVlbkJvdHRvbSA9IChjZW50ZXJZIC0gaGFsZkhlaWdodCkgLyBjZW50ZXJaO1xuICAvLyBDb21wYXJlIHRoZSB0d28gc2V0cyBvZiB0YW4tYW5nbGVzIGFuZCB0YWtlIHRoZSB2YWx1ZSBjbG9zZXIgdG8gemVybyBvbiBlYWNoIHNpZGUuXG4gIHJlc3VsdFswXSA9IE1hdGgubWF4KGZvdkxlZnQsIHNjcmVlbkxlZnQpO1xuICByZXN1bHRbMV0gPSBNYXRoLm1pbihmb3ZUb3AsIHNjcmVlblRvcCk7XG4gIHJlc3VsdFsyXSA9IE1hdGgubWluKGZvdlJpZ2h0LCBzY3JlZW5SaWdodCk7XG4gIHJlc3VsdFszXSA9IE1hdGgubWF4KGZvdkJvdHRvbSwgc2NyZWVuQm90dG9tKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc2NyZWVuIHJlY3RhbmdsZSB2aXNpYmxlIGZyb20gdGhlIGxlZnQgZXllIGZvciB0aGVcbiAqIGN1cnJlbnQgZGV2aWNlIGFuZCBzY3JlZW4gcGFyYW1ldGVycy5cbiAqL1xuRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0TGVmdEV5ZVZpc2libGVTY3JlZW5SZWN0ID0gZnVuY3Rpb24odW5kaXN0b3J0ZWRGcnVzdHVtKSB7XG4gIHZhciB2aWV3ZXIgPSB0aGlzLnZpZXdlcjtcbiAgdmFyIGRldmljZSA9IHRoaXMuZGV2aWNlO1xuXG4gIHZhciBkaXN0ID0gdmlld2VyLnNjcmVlbkxlbnNEaXN0YW5jZTtcbiAgdmFyIGV5ZVggPSAoZGV2aWNlLndpZHRoTWV0ZXJzIC0gdmlld2VyLmludGVyTGVuc0Rpc3RhbmNlKSAvIDI7XG4gIHZhciBleWVZID0gdmlld2VyLmJhc2VsaW5lTGVuc0Rpc3RhbmNlIC0gZGV2aWNlLmJldmVsTWV0ZXJzO1xuICB2YXIgbGVmdCA9ICh1bmRpc3RvcnRlZEZydXN0dW1bMF0gKiBkaXN0ICsgZXllWCkgLyBkZXZpY2Uud2lkdGhNZXRlcnM7XG4gIHZhciB0b3AgPSAodW5kaXN0b3J0ZWRGcnVzdHVtWzFdICogZGlzdCArIGV5ZVkpIC8gZGV2aWNlLmhlaWdodE1ldGVycztcbiAgdmFyIHJpZ2h0ID0gKHVuZGlzdG9ydGVkRnJ1c3R1bVsyXSAqIGRpc3QgKyBleWVYKSAvIGRldmljZS53aWR0aE1ldGVycztcbiAgdmFyIGJvdHRvbSA9ICh1bmRpc3RvcnRlZEZydXN0dW1bM10gKiBkaXN0ICsgZXllWSkgLyBkZXZpY2UuaGVpZ2h0TWV0ZXJzO1xuICByZXR1cm4ge1xuICAgIHg6IGxlZnQsXG4gICAgeTogYm90dG9tLFxuICAgIHdpZHRoOiByaWdodCAtIGxlZnQsXG4gICAgaGVpZ2h0OiB0b3AgLSBib3R0b21cbiAgfTtcbn07XG5cbkRldmljZUluZm8ucHJvdG90eXBlLmdldEZpZWxkT2ZWaWV3TGVmdEV5ZSA9IGZ1bmN0aW9uKG9wdF9pc1VuZGlzdG9ydGVkKSB7XG4gIHJldHVybiBvcHRfaXNVbmRpc3RvcnRlZCA/IHRoaXMuZ2V0VW5kaXN0b3J0ZWRGaWVsZE9mVmlld0xlZnRFeWUoKSA6XG4gICAgICB0aGlzLmdldERpc3RvcnRlZEZpZWxkT2ZWaWV3TGVmdEV5ZSgpO1xufTtcblxuRGV2aWNlSW5mby5wcm90b3R5cGUuZ2V0RmllbGRPZlZpZXdSaWdodEV5ZSA9IGZ1bmN0aW9uKG9wdF9pc1VuZGlzdG9ydGVkKSB7XG4gIHZhciBmb3YgPSB0aGlzLmdldEZpZWxkT2ZWaWV3TGVmdEV5ZShvcHRfaXNVbmRpc3RvcnRlZCk7XG4gIHJldHVybiB7XG4gICAgbGVmdERlZ3JlZXM6IGZvdi5yaWdodERlZ3JlZXMsXG4gICAgcmlnaHREZWdyZWVzOiBmb3YubGVmdERlZ3JlZXMsXG4gICAgdXBEZWdyZWVzOiBmb3YudXBEZWdyZWVzLFxuICAgIGRvd25EZWdyZWVzOiBmb3YuZG93bkRlZ3JlZXNcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB1bmRpc3RvcnRlZCBmaWVsZCBvZiB2aWV3IGZvciB0aGUgbGVmdCBleWUuXG4gKi9cbkRldmljZUluZm8ucHJvdG90eXBlLmdldFVuZGlzdG9ydGVkRmllbGRPZlZpZXdMZWZ0RXllID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwID0gdGhpcy5nZXRVbmRpc3RvcnRlZFBhcmFtc18oKTtcblxuICByZXR1cm4ge1xuICAgIGxlZnREZWdyZWVzOiBNYXRoVXRpbC5yYWRUb0RlZyAqIE1hdGguYXRhbihwLm91dGVyRGlzdCksXG4gICAgcmlnaHREZWdyZWVzOiBNYXRoVXRpbC5yYWRUb0RlZyAqIE1hdGguYXRhbihwLmlubmVyRGlzdCksXG4gICAgZG93bkRlZ3JlZXM6IE1hdGhVdGlsLnJhZFRvRGVnICogTWF0aC5hdGFuKHAuYm90dG9tRGlzdCksXG4gICAgdXBEZWdyZWVzOiBNYXRoVXRpbC5yYWRUb0RlZyAqIE1hdGguYXRhbihwLnRvcERpc3QpXG4gIH07XG59O1xuXG5EZXZpY2VJbmZvLnByb3RvdHlwZS5nZXRVbmRpc3RvcnRlZFZpZXdwb3J0TGVmdEV5ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcCA9IHRoaXMuZ2V0VW5kaXN0b3J0ZWRQYXJhbXNfKCk7XG4gIHZhciB2aWV3ZXIgPSB0aGlzLnZpZXdlcjtcbiAgdmFyIGRldmljZSA9IHRoaXMuZGV2aWNlO1xuXG4gIC8vIERpc3RhbmNlcyBzdG9yZWQgaW4gbG9jYWwgdmFyaWFibGVzIGFyZSBpbiB0YW4tYW5nbGUgdW5pdHMgdW5sZXNzIG90aGVyd2lzZVxuICAvLyBub3RlZC5cbiAgdmFyIGV5ZVRvU2NyZWVuRGlzdGFuY2UgPSB2aWV3ZXIuc2NyZWVuTGVuc0Rpc3RhbmNlO1xuICB2YXIgc2NyZWVuV2lkdGggPSBkZXZpY2Uud2lkdGhNZXRlcnMgLyBleWVUb1NjcmVlbkRpc3RhbmNlO1xuICB2YXIgc2NyZWVuSGVpZ2h0ID0gZGV2aWNlLmhlaWdodE1ldGVycyAvIGV5ZVRvU2NyZWVuRGlzdGFuY2U7XG4gIHZhciB4UHhQZXJUYW5BbmdsZSA9IGRldmljZS53aWR0aCAvIHNjcmVlbldpZHRoO1xuICB2YXIgeVB4UGVyVGFuQW5nbGUgPSBkZXZpY2UuaGVpZ2h0IC8gc2NyZWVuSGVpZ2h0O1xuXG4gIHZhciB4ID0gTWF0aC5yb3VuZCgocC5leWVQb3NYIC0gcC5vdXRlckRpc3QpICogeFB4UGVyVGFuQW5nbGUpO1xuICB2YXIgeSA9IE1hdGgucm91bmQoKHAuZXllUG9zWSAtIHAuYm90dG9tRGlzdCkgKiB5UHhQZXJUYW5BbmdsZSk7XG4gIHJldHVybiB7XG4gICAgeDogeCxcbiAgICB5OiB5LFxuICAgIHdpZHRoOiBNYXRoLnJvdW5kKChwLmV5ZVBvc1ggKyBwLmlubmVyRGlzdCkgKiB4UHhQZXJUYW5BbmdsZSkgLSB4LFxuICAgIGhlaWdodDogTWF0aC5yb3VuZCgocC5leWVQb3NZICsgcC50b3BEaXN0KSAqIHlQeFBlclRhbkFuZ2xlKSAtIHlcbiAgfTtcbn07XG5cbkRldmljZUluZm8ucHJvdG90eXBlLmdldFVuZGlzdG9ydGVkUGFyYW1zXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdmlld2VyID0gdGhpcy52aWV3ZXI7XG4gIHZhciBkZXZpY2UgPSB0aGlzLmRldmljZTtcbiAgdmFyIGRpc3RvcnRpb24gPSB0aGlzLmRpc3RvcnRpb247XG5cbiAgLy8gTW9zdCBvZiB0aGVzZSB2YXJpYWJsZXMgaW4gdGFuLWFuZ2xlIHVuaXRzLlxuICB2YXIgZXllVG9TY3JlZW5EaXN0YW5jZSA9IHZpZXdlci5zY3JlZW5MZW5zRGlzdGFuY2U7XG4gIHZhciBoYWxmTGVuc0Rpc3RhbmNlID0gdmlld2VyLmludGVyTGVuc0Rpc3RhbmNlIC8gMiAvIGV5ZVRvU2NyZWVuRGlzdGFuY2U7XG4gIHZhciBzY3JlZW5XaWR0aCA9IGRldmljZS53aWR0aE1ldGVycyAvIGV5ZVRvU2NyZWVuRGlzdGFuY2U7XG4gIHZhciBzY3JlZW5IZWlnaHQgPSBkZXZpY2UuaGVpZ2h0TWV0ZXJzIC8gZXllVG9TY3JlZW5EaXN0YW5jZTtcblxuICB2YXIgZXllUG9zWCA9IHNjcmVlbldpZHRoIC8gMiAtIGhhbGZMZW5zRGlzdGFuY2U7XG4gIHZhciBleWVQb3NZID0gKHZpZXdlci5iYXNlbGluZUxlbnNEaXN0YW5jZSAtIGRldmljZS5iZXZlbE1ldGVycykgLyBleWVUb1NjcmVlbkRpc3RhbmNlO1xuXG4gIHZhciBtYXhGb3YgPSB2aWV3ZXIuZm92O1xuICB2YXIgdmlld2VyTWF4ID0gZGlzdG9ydGlvbi5kaXN0b3J0SW52ZXJzZShNYXRoLnRhbihNYXRoVXRpbC5kZWdUb1JhZCAqIG1heEZvdikpO1xuICB2YXIgb3V0ZXJEaXN0ID0gTWF0aC5taW4oZXllUG9zWCwgdmlld2VyTWF4KTtcbiAgdmFyIGlubmVyRGlzdCA9IE1hdGgubWluKGhhbGZMZW5zRGlzdGFuY2UsIHZpZXdlck1heCk7XG4gIHZhciBib3R0b21EaXN0ID0gTWF0aC5taW4oZXllUG9zWSwgdmlld2VyTWF4KTtcbiAgdmFyIHRvcERpc3QgPSBNYXRoLm1pbihzY3JlZW5IZWlnaHQgLSBleWVQb3NZLCB2aWV3ZXJNYXgpO1xuXG4gIHJldHVybiB7XG4gICAgb3V0ZXJEaXN0OiBvdXRlckRpc3QsXG4gICAgaW5uZXJEaXN0OiBpbm5lckRpc3QsXG4gICAgdG9wRGlzdDogdG9wRGlzdCxcbiAgICBib3R0b21EaXN0OiBib3R0b21EaXN0LFxuICAgIGV5ZVBvc1g6IGV5ZVBvc1gsXG4gICAgZXllUG9zWTogZXllUG9zWVxuICB9O1xufTtcblxuXG5mdW5jdGlvbiBDYXJkYm9hcmRWaWV3ZXIocGFyYW1zKSB7XG4gIC8vIEEgbWFjaGluZSByZWFkYWJsZSBJRC5cbiAgdGhpcy5pZCA9IHBhcmFtcy5pZDtcbiAgLy8gQSBodW1hbiByZWFkYWJsZSBsYWJlbC5cbiAgdGhpcy5sYWJlbCA9IHBhcmFtcy5sYWJlbDtcblxuICAvLyBGaWVsZCBvZiB2aWV3IGluIGRlZ3JlZXMgKHBlciBzaWRlKS5cbiAgdGhpcy5mb3YgPSBwYXJhbXMuZm92O1xuXG4gIC8vIERpc3RhbmNlIGJldHdlZW4gbGVucyBjZW50ZXJzIGluIG1ldGVycy5cbiAgdGhpcy5pbnRlckxlbnNEaXN0YW5jZSA9IHBhcmFtcy5pbnRlckxlbnNEaXN0YW5jZTtcbiAgLy8gRGlzdGFuY2UgYmV0d2VlbiB2aWV3ZXIgYmFzZWxpbmUgYW5kIGxlbnMgY2VudGVyIGluIG1ldGVycy5cbiAgdGhpcy5iYXNlbGluZUxlbnNEaXN0YW5jZSA9IHBhcmFtcy5iYXNlbGluZUxlbnNEaXN0YW5jZTtcbiAgLy8gU2NyZWVuLXRvLWxlbnMgZGlzdGFuY2UgaW4gbWV0ZXJzLlxuICB0aGlzLnNjcmVlbkxlbnNEaXN0YW5jZSA9IHBhcmFtcy5zY3JlZW5MZW5zRGlzdGFuY2U7XG5cbiAgLy8gRGlzdG9ydGlvbiBjb2VmZmljaWVudHMuXG4gIHRoaXMuZGlzdG9ydGlvbkNvZWZmaWNpZW50cyA9IHBhcmFtcy5kaXN0b3J0aW9uQ29lZmZpY2llbnRzO1xuICAvLyBJbnZlcnNlIGRpc3RvcnRpb24gY29lZmZpY2llbnRzLlxuICAvLyBUT0RPOiBDYWxjdWxhdGUgdGhlc2UgZnJvbSBkaXN0b3J0aW9uQ29lZmZpY2llbnRzIGluIHRoZSBmdXR1cmUuXG4gIHRoaXMuaW52ZXJzZUNvZWZmaWNpZW50cyA9IHBhcmFtcy5pbnZlcnNlQ29lZmZpY2llbnRzO1xufVxuXG4vLyBFeHBvcnQgdmlld2VyIGluZm9ybWF0aW9uLlxuRGV2aWNlSW5mby5WaWV3ZXJzID0gVmlld2Vycztcbm1vZHVsZS5leHBvcnRzID0gRGV2aWNlSW5mbztcblxufSx7XCIuL2Rpc3RvcnRpb24vZGlzdG9ydGlvbi5qc1wiOjksXCIuL21hdGgtdXRpbC5qc1wiOjE0LFwiLi91dGlsLmpzXCI6MjJ9XSw4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgVlJEaXNwbGF5ID0gX2RlcmVxXygnLi9iYXNlLmpzJykuVlJEaXNwbGF5O1xudmFyIEhNRFZSRGV2aWNlID0gX2RlcmVxXygnLi9iYXNlLmpzJykuSE1EVlJEZXZpY2U7XG52YXIgUG9zaXRpb25TZW5zb3JWUkRldmljZSA9IF9kZXJlcV8oJy4vYmFzZS5qcycpLlBvc2l0aW9uU2Vuc29yVlJEZXZpY2U7XG5cbi8qKlxuICogV3JhcHMgYSBWUkRpc3BsYXkgYW5kIGV4cG9zZXMgaXQgYXMgYSBITURWUkRldmljZVxuICovXG5mdW5jdGlvbiBWUkRpc3BsYXlITUREZXZpY2UoZGlzcGxheSkge1xuICB0aGlzLmRpc3BsYXkgPSBkaXNwbGF5O1xuXG4gIHRoaXMuaGFyZHdhcmVVbml0SWQgPSBkaXNwbGF5LmRpc3BsYXlJZDtcbiAgdGhpcy5kZXZpY2VJZCA9ICd3ZWJ2ci1wb2x5ZmlsbDpITUQ6JyArIGRpc3BsYXkuZGlzcGxheUlkO1xuICB0aGlzLmRldmljZU5hbWUgPSBkaXNwbGF5LmRpc3BsYXlOYW1lICsgJyAoSE1EKSc7XG59XG5WUkRpc3BsYXlITUREZXZpY2UucHJvdG90eXBlID0gbmV3IEhNRFZSRGV2aWNlKCk7XG5cblZSRGlzcGxheUhNRERldmljZS5wcm90b3R5cGUuZ2V0RXllUGFyYW1ldGVycyA9IGZ1bmN0aW9uKHdoaWNoRXllKSB7XG4gIHZhciBleWVQYXJhbWV0ZXJzID0gdGhpcy5kaXNwbGF5LmdldEV5ZVBhcmFtZXRlcnMod2hpY2hFeWUpO1xuXG4gIHJldHVybiB7XG4gICAgY3VycmVudEZpZWxkT2ZWaWV3OiBleWVQYXJhbWV0ZXJzLmZpZWxkT2ZWaWV3LFxuICAgIG1heGltdW1GaWVsZE9mVmlldzogZXllUGFyYW1ldGVycy5maWVsZE9mVmlldyxcbiAgICBtaW5pbXVtRmllbGRPZlZpZXc6IGV5ZVBhcmFtZXRlcnMuZmllbGRPZlZpZXcsXG4gICAgcmVjb21tZW5kZWRGaWVsZE9mVmlldzogZXllUGFyYW1ldGVycy5maWVsZE9mVmlldyxcbiAgICBleWVUcmFuc2xhdGlvbjogeyB4OiBleWVQYXJhbWV0ZXJzLm9mZnNldFswXSwgeTogZXllUGFyYW1ldGVycy5vZmZzZXRbMV0sIHo6IGV5ZVBhcmFtZXRlcnMub2Zmc2V0WzJdIH0sXG4gICAgcmVuZGVyUmVjdDoge1xuICAgICAgeDogKHdoaWNoRXllID09ICdyaWdodCcpID8gZXllUGFyYW1ldGVycy5yZW5kZXJXaWR0aCA6IDAsXG4gICAgICB5OiAwLFxuICAgICAgd2lkdGg6IGV5ZVBhcmFtZXRlcnMucmVuZGVyV2lkdGgsXG4gICAgICBoZWlnaHQ6IGV5ZVBhcmFtZXRlcnMucmVuZGVySGVpZ2h0XG4gICAgfVxuICB9O1xufTtcblxuVlJEaXNwbGF5SE1ERGV2aWNlLnByb3RvdHlwZS5zZXRGaWVsZE9mVmlldyA9XG4gICAgZnVuY3Rpb24ob3B0X2ZvdkxlZnQsIG9wdF9mb3ZSaWdodCwgb3B0X3pOZWFyLCBvcHRfekZhcikge1xuICAvLyBOb3Qgc3VwcG9ydGVkLiBnZXRFeWVQYXJhbWV0ZXJzIHJlcG9ydHMgdGhhdCB0aGUgbWluLCBtYXgsIGFuZCByZWNvbW1lbmRlZFxuICAvLyBGb1YgaXMgYWxsIHRoZSBzYW1lLCBzbyBubyBhZGp1c3RtZW50IGNhbiBiZSBtYWRlLlxufTtcblxuLy8gVE9ETzogTmVlZCB0byBob29rIHJlcXVlc3RGdWxsc2NyZWVuIHRvIHNlZSBpZiBhIHdyYXBwZWQgVlJEaXNwbGF5IHdhcyBwYXNzZWRcbi8vIGluIGFzIGFuIG9wdGlvbi4gSWYgc28gd2Ugc2hvdWxkIHByZXZlbnQgdGhlIGRlZmF1bHQgZnVsbHNjcmVlbiBiZWhhdmlvciBhbmRcbi8vIGNhbGwgVlJEaXNwbGF5LnJlcXVlc3RQcmVzZW50IGluc3RlYWQuXG5cbi8qKlxuICogV3JhcHMgYSBWUkRpc3BsYXkgYW5kIGV4cG9zZXMgaXQgYXMgYSBQb3NpdGlvblNlbnNvclZSRGV2aWNlXG4gKi9cbmZ1bmN0aW9uIFZSRGlzcGxheVBvc2l0aW9uU2Vuc29yRGV2aWNlKGRpc3BsYXkpIHtcbiAgdGhpcy5kaXNwbGF5ID0gZGlzcGxheTtcblxuICB0aGlzLmhhcmR3YXJlVW5pdElkID0gZGlzcGxheS5kaXNwbGF5SWQ7XG4gIHRoaXMuZGV2aWNlSWQgPSAnd2VidnItcG9seWZpbGw6UG9zaXRpb25TZW5zb3I6ICcgKyBkaXNwbGF5LmRpc3BsYXlJZDtcbiAgdGhpcy5kZXZpY2VOYW1lID0gZGlzcGxheS5kaXNwbGF5TmFtZSArICcgKFBvc2l0aW9uU2Vuc29yKSc7XG59XG5WUkRpc3BsYXlQb3NpdGlvblNlbnNvckRldmljZS5wcm90b3R5cGUgPSBuZXcgUG9zaXRpb25TZW5zb3JWUkRldmljZSgpO1xuXG5WUkRpc3BsYXlQb3NpdGlvblNlbnNvckRldmljZS5wcm90b3R5cGUuZ2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBvc2UgPSB0aGlzLmRpc3BsYXkuZ2V0UG9zZSgpO1xuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uOiBwb3NlLnBvc2l0aW9uID8geyB4OiBwb3NlLnBvc2l0aW9uWzBdLCB5OiBwb3NlLnBvc2l0aW9uWzFdLCB6OiBwb3NlLnBvc2l0aW9uWzJdIH0gOiBudWxsLFxuICAgIG9yaWVudGF0aW9uOiBwb3NlLm9yaWVudGF0aW9uID8geyB4OiBwb3NlLm9yaWVudGF0aW9uWzBdLCB5OiBwb3NlLm9yaWVudGF0aW9uWzFdLCB6OiBwb3NlLm9yaWVudGF0aW9uWzJdLCB3OiBwb3NlLm9yaWVudGF0aW9uWzNdIH0gOiBudWxsLFxuICAgIGxpbmVhclZlbG9jaXR5OiBudWxsLFxuICAgIGxpbmVhckFjY2VsZXJhdGlvbjogbnVsbCxcbiAgICBhbmd1bGFyVmVsb2NpdHk6IG51bGwsXG4gICAgYW5ndWxhckFjY2VsZXJhdGlvbjogbnVsbFxuICB9O1xufTtcblxuVlJEaXNwbGF5UG9zaXRpb25TZW5zb3JEZXZpY2UucHJvdG90eXBlLnJlc2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucG9zaXRpb25EZXZpY2UucmVzZXRQb3NlKCk7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzLlZSRGlzcGxheUhNRERldmljZSA9IFZSRGlzcGxheUhNRERldmljZTtcbm1vZHVsZS5leHBvcnRzLlZSRGlzcGxheVBvc2l0aW9uU2Vuc29yRGV2aWNlID0gVlJEaXNwbGF5UG9zaXRpb25TZW5zb3JEZXZpY2U7XG5cblxufSx7XCIuL2Jhc2UuanNcIjoyfV0sOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIFRPRE8oc211cyk6IEltcGxlbWVudCBjb2VmZmljaWVudCBpbnZlcnNpb24uXG4gKi9cbmZ1bmN0aW9uIERpc3RvcnRpb24oY29lZmZpY2llbnRzKSB7XG4gIHRoaXMuY29lZmZpY2llbnRzID0gY29lZmZpY2llbnRzO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2UgZGlzdG9ydGlvbiBmb3IgYSByYWRpdXMuXG4gKiA8L3A+PHA+XG4gKiBBbGxvd3MgdG8gY29tcHV0ZSB0aGUgb3JpZ2luYWwgdW5kaXN0b3J0ZWQgcmFkaXVzIGZyb20gYSBkaXN0b3J0ZWQgb25lLlxuICogU2VlIGFsc28gZ2V0QXBwcm94aW1hdGVJbnZlcnNlRGlzdG9ydGlvbigpIGZvciBhIGZhc3RlciBidXQgcG90ZW50aWFsbHlcbiAqIGxlc3MgYWNjdXJhdGUgbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWRpdXMgRGlzdG9ydGVkIHJhZGl1cyBmcm9tIHRoZSBsZW5zIGNlbnRlciBpbiB0YW4tYW5nbGUgdW5pdHMuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSB1bmRpc3RvcnRlZCByYWRpdXMgaW4gdGFuLWFuZ2xlIHVuaXRzLlxuICovXG5EaXN0b3J0aW9uLnByb3RvdHlwZS5kaXN0b3J0SW52ZXJzZSA9IGZ1bmN0aW9uKHJhZGl1cykge1xuICAvLyBTZWNhbnQgbWV0aG9kLlxuICB2YXIgcjAgPSAwO1xuICB2YXIgcjEgPSAxO1xuICB2YXIgZHIwID0gcmFkaXVzIC0gdGhpcy5kaXN0b3J0KHIwKTtcbiAgd2hpbGUgKE1hdGguYWJzKHIxIC0gcjApID4gMC4wMDAxIC8qKiAwLjFtbSAqLykge1xuICAgIHZhciBkcjEgPSByYWRpdXMgLSB0aGlzLmRpc3RvcnQocjEpO1xuICAgIHZhciByMiA9IHIxIC0gZHIxICogKChyMSAtIHIwKSAvIChkcjEgLSBkcjApKTtcbiAgICByMCA9IHIxO1xuICAgIHIxID0gcjI7XG4gICAgZHIwID0gZHIxO1xuICB9XG4gIHJldHVybiByMTtcbn07XG5cbi8qKlxuICogRGlzdG9ydHMgYSByYWRpdXMgYnkgaXRzIGRpc3RvcnRpb24gZmFjdG9yIGZyb20gdGhlIGNlbnRlciBvZiB0aGUgbGVuc2VzLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWRpdXMgUmFkaXVzIGZyb20gdGhlIGxlbnMgY2VudGVyIGluIHRhbi1hbmdsZSB1bml0cy5cbiAqIEByZXR1cm4ge051bWJlcn0gVGhlIGRpc3RvcnRlZCByYWRpdXMgaW4gdGFuLWFuZ2xlIHVuaXRzLlxuICovXG5EaXN0b3J0aW9uLnByb3RvdHlwZS5kaXN0b3J0ID0gZnVuY3Rpb24ocmFkaXVzKSB7XG4gIHZhciByMiA9IHJhZGl1cyAqIHJhZGl1cztcbiAgdmFyIHJldCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb2VmZmljaWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXQgPSByMiAqIChyZXQgKyB0aGlzLmNvZWZmaWNpZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuIChyZXQgKyAxKSAqIHJhZGl1cztcbn07XG5cbi8vIEZ1bmN0aW9ucyBiZWxvdyByb3VnaGx5IHBvcnRlZCBmcm9tXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlc2FtcGxlcy9jYXJkYm9hcmQtdW5pdHkvYmxvYi9tYXN0ZXIvQ2FyZGJvYXJkL1NjcmlwdHMvQ2FyZGJvYXJkUHJvZmlsZS5jcyNMNDEyXG5cbi8vIFNvbHZlcyBhIHNtYWxsIGxpbmVhciBlcXVhdGlvbiB2aWEgZGVzdHJ1Y3RpdmUgZ2F1c3NpYW5cbi8vIGVsaW1pbmF0aW9uIGFuZCBiYWNrIHN1YnN0aXR1dGlvbi4gIFRoaXMgaXNuJ3QgZ2VuZXJpYyBudW1lcmljXG4vLyBjb2RlLCBpdCdzIGp1c3QgYSBxdWljayBoYWNrIHRvIHdvcmsgd2l0aCB0aGUgZ2VuZXJhbGx5XG4vLyB3ZWxsLWJlaGF2ZWQgc3ltbWV0cmljIG1hdHJpY2VzIGZvciBsZWFzdC1zcXVhcmVzIGZpdHRpbmcuXG4vLyBOb3QgaW50ZW5kZWQgZm9yIHJldXNlLlxuLy9cbi8vIEBwYXJhbSBhIElucHV0IHBvc2l0aXZlIGRlZmluaXRlIHN5bW1ldHJpY2FsIG1hdHJpeC4gRGVzdHJveWVkXG4vLyAgICAgZHVyaW5nIGNhbGN1bGF0aW9uLlxuLy8gQHBhcmFtIHkgSW5wdXQgcmlnaHQtaGFuZC1zaWRlIHZhbHVlcy4gRGVzdHJveWVkIGR1cmluZyBjYWxjdWxhdGlvbi5cbi8vIEByZXR1cm4gUmVzdWx0aW5nIHggdmFsdWUgdmVjdG9yLlxuLy9cbkRpc3RvcnRpb24ucHJvdG90eXBlLnNvbHZlTGluZWFyXyA9IGZ1bmN0aW9uKGEsIHkpIHtcbiAgdmFyIG4gPSBhLmxlbmd0aDtcblxuICAvLyBHYXVzc2lhbiBlbGltaW5hdGlvbiAobm8gcm93IGV4Y2hhbmdlKSB0byB0cmlhbmd1bGFyIG1hdHJpeC5cbiAgLy8gVGhlIGlucHV0IG1hdHJpeCBpcyBhIEFeVCBBIHByb2R1Y3Qgd2hpY2ggc2hvdWxkIGJlIGEgcG9zaXRpdmVcbiAgLy8gZGVmaW5pdGUgc3ltbWV0cmljYWwgbWF0cml4LCBhbmQgaWYgSSByZW1lbWJlciBteSBsaW5lYXJcbiAgLy8gYWxnZWJyYSByaWdodCB0aGlzIGltcGxpZXMgdGhhdCB0aGUgcGl2b3RzIHdpbGwgYmUgbm9uemVybyBhbmRcbiAgLy8gY2FsY3VsYXRpb25zIHN1ZmZpY2llbnRseSBhY2N1cmF0ZSB3aXRob3V0IG5lZWRpbmcgcm93XG4gIC8vIGV4Y2hhbmdlLlxuICBmb3IgKHZhciBqID0gMDsgaiA8IG4gLSAxOyArK2opIHtcbiAgICBmb3IgKHZhciBrID0gaiArIDE7IGsgPCBuOyArK2spIHtcbiAgICAgIHZhciBwID0gYVtqXVtrXSAvIGFbal1bal07XG4gICAgICBmb3IgKHZhciBpID0gaiArIDE7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgYVtpXVtrXSAtPSBwICogYVtpXVtqXTtcbiAgICAgIH1cbiAgICAgIHlba10gLT0gcCAqIHlbal07XG4gICAgfVxuICB9XG4gIC8vIEZyb20gdGhpcyBwb2ludCBvbiwgb25seSB0aGUgbWF0cml4IGVsZW1lbnRzIGFbal1baV0gd2l0aCBpPj1qIGFyZVxuICAvLyB2YWxpZC4gVGhlIGVsaW1pbmF0aW9uIGRvZXNuJ3QgZmlsbCBpbiBlbGltaW5hdGVkIDAgdmFsdWVzLlxuXG4gIHZhciB4ID0gbmV3IEFycmF5KG4pO1xuXG4gIC8vIEJhY2sgc3Vic3RpdHV0aW9uLlxuICBmb3IgKHZhciBqID0gbiAtIDE7IGogPj0gMDsgLS1qKSB7XG4gICAgdmFyIHYgPSB5W2pdO1xuICAgIGZvciAodmFyIGkgPSBqICsgMTsgaSA8IG47ICsraSkge1xuICAgICAgdiAtPSBhW2ldW2pdICogeFtpXTtcbiAgICB9XG4gICAgeFtqXSA9IHYgLyBhW2pdW2pdO1xuICB9XG5cbiAgcmV0dXJuIHg7XG59O1xuXG4vLyBTb2x2ZXMgYSBsZWFzdC1zcXVhcmVzIG1hdHJpeCBlcXVhdGlvbi4gIEdpdmVuIHRoZSBlcXVhdGlvbiBBICogeCA9IHksIGNhbGN1bGF0ZSB0aGVcbi8vIGxlYXN0LXNxdWFyZSBmaXQgeCA9IGludmVyc2UoQSAqIHRyYW5zcG9zZShBKSkgKiB0cmFuc3Bvc2UoQSkgKiB5LiAgVGhlIHdheSB0aGlzIHdvcmtzXG4vLyBpcyB0aGF0LCB3aGlsZSBBIGlzIHR5cGljYWxseSBub3QgYSBzcXVhcmUgbWF0cml4IChhbmQgaGVuY2Ugbm90IGludmVydGlibGUpLCBBICogdHJhbnNwb3NlKEEpXG4vLyBpcyBhbHdheXMgc3F1YXJlLiAgVGhhdCBpczpcbi8vICAgQSAqIHggPSB5XG4vLyAgIHRyYW5zcG9zZShBKSAqIChBICogeCkgPSB0cmFuc3Bvc2UoQSkgKiB5ICAgPC0gbXVsdGlwbHkgYm90aCBzaWRlcyBieSB0cmFuc3Bvc2UoQSlcbi8vICAgKHRyYW5zcG9zZShBKSAqIEEpICogeCA9IHRyYW5zcG9zZShBKSAqIHkgICA8LSBhc3NvY2lhdGl2aXR5XG4vLyAgIHggPSBpbnZlcnNlKHRyYW5zcG9zZShBKSAqIEEpICogdHJhbnNwb3NlKEEpICogeSAgPC0gc29sdmUgZm9yIHhcbi8vIE1hdHJpeCBBJ3Mgcm93IGNvdW50IChmaXJzdCBpbmRleCkgbXVzdCBtYXRjaCB5J3MgdmFsdWUgY291bnQuICBBJ3MgY29sdW1uIGNvdW50IChzZWNvbmQgaW5kZXgpXG4vLyBkZXRlcm1pbmVzIHRoZSBsZW5ndGggb2YgdGhlIHJlc3VsdCB2ZWN0b3IgeC5cbkRpc3RvcnRpb24ucHJvdG90eXBlLnNvbHZlTGVhc3RTcXVhcmVzXyA9IGZ1bmN0aW9uKG1hdEEsIHZlY1kpIHtcbiAgdmFyIGksIGosIGssIHN1bTtcbiAgdmFyIG51bVNhbXBsZXMgPSBtYXRBLmxlbmd0aDtcbiAgdmFyIG51bUNvZWZmaWNpZW50cyA9IG1hdEFbMF0ubGVuZ3RoO1xuICBpZiAobnVtU2FtcGxlcyAhPSB2ZWNZLkxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk1hdHJpeCAvIHZlY3RvciBkaW1lbnNpb24gbWlzbWF0Y2hcIik7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgdHJhbnNwb3NlKEEpICogQVxuICB2YXIgbWF0QVRBID0gbmV3IEFycmF5KG51bUNvZWZmaWNpZW50cyk7XG4gIGZvciAoayA9IDA7IGsgPCBudW1Db2VmZmljaWVudHM7ICsraykge1xuICAgIG1hdEFUQVtrXSA9IG5ldyBBcnJheShudW1Db2VmZmljaWVudHMpO1xuICAgIGZvciAoaiA9IDA7IGogPCBudW1Db2VmZmljaWVudHM7ICsraikge1xuICAgICAgc3VtID0gMDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1TYW1wbGVzOyArK2kpIHtcbiAgICAgICAgc3VtICs9IG1hdEFbal1baV0gKiBtYXRBW2tdW2ldO1xuICAgICAgfVxuICAgICAgbWF0QVRBW2tdW2pdID0gc3VtO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSB0cmFuc3Bvc2UoQSkgKiB5XG4gIHZhciB2ZWNBVFkgPSBuZXcgQXJyYXkobnVtQ29lZmZpY2llbnRzKTtcbiAgZm9yIChqID0gMDsgaiA8IG51bUNvZWZmaWNpZW50czsgKytqKSB7XG4gICAgc3VtID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtU2FtcGxlczsgKytpKSB7XG4gICAgICBzdW0gKz0gbWF0QVtqXVtpXSAqIHZlY1lbaV07XG4gICAgfVxuICAgIHZlY0FUWVtqXSA9IHN1bTtcbiAgfVxuXG4gIC8vIE5vdyBzb2x2ZSAoQSAqIHRyYW5zcG9zZShBKSkgKiB4ID0gdHJhbnNwb3NlKEEpICogeS5cbiAgcmV0dXJuIHRoaXMuc29sdmVMaW5lYXJfKG1hdEFUQSwgdmVjQVRZKTtcbn07XG5cbi8vLyBDYWxjdWxhdGVzIGFuIGFwcHJveGltYXRlIGludmVyc2UgdG8gdGhlIGdpdmVuIHJhZGlhbCBkaXN0b3J0aW9uIHBhcmFtZXRlcnMuXG5EaXN0b3J0aW9uLnByb3RvdHlwZS5hcHByb3hpbWF0ZUludmVyc2UgPSBmdW5jdGlvbihtYXhSYWRpdXMsIG51bVNhbXBsZXMpIHtcbiAgbWF4UmFkaXVzID0gbWF4UmFkaXVzIHx8IDE7XG4gIG51bVNhbXBsZXMgPSBudW1TYW1wbGVzIHx8IDEwMDtcbiAgdmFyIG51bUNvZWZmaWNpZW50cyA9IDY7XG4gIHZhciBpLCBqO1xuXG4gIC8vIFIgKyBLMSpSXjMgKyBLMipSXjUgPSByLCB3aXRoIFIgPSBycCA9IGRpc3RvcnQocilcbiAgLy8gUmVwZWF0aW5nIGZvciBudW1TYW1wbGVzOlxuICAvLyAgIFsgUjBeMywgUjBeNSBdICogWyBLMSBdID0gWyByMCAtIFIwIF1cbiAgLy8gICBbIFIxXjMsIFIxXjUgXSAgIFsgSzIgXSAgIFsgcjEgLSBSMSBdXG4gIC8vICAgWyBSMl4zLCBSMl41IF0gICAgICAgICAgICBbIHIyIC0gUjIgXVxuICAvLyAgIFsgZXRjLi4uIF0gICAgICAgICAgICAgICAgWyBldGMuLi4gXVxuICAvLyBUaGF0IGlzOlxuICAvLyAgIG1hdEEgKiBbSzEsIEsyXSA9IHlcbiAgLy8gU29sdmU6XG4gIC8vICAgW0sxLCBLMl0gPSBpbnZlcnNlKHRyYW5zcG9zZShtYXRBKSAqIG1hdEEpICogdHJhbnNwb3NlKG1hdEEpICogeVxuICB2YXIgbWF0QSA9IG5ldyBBcnJheShudW1Db2VmZmljaWVudHMpO1xuICBmb3IgKGogPSAwOyBqIDwgbnVtQ29lZmZpY2llbnRzOyArK2opIHtcbiAgICBtYXRBW2pdID0gbmV3IEFycmF5KG51bVNhbXBsZXMpO1xuICB9XG4gIHZhciB2ZWNZID0gbmV3IEFycmF5KG51bVNhbXBsZXMpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBudW1TYW1wbGVzOyArK2kpIHtcbiAgICB2YXIgciA9IG1heFJhZGl1cyAqIChpICsgMSkgLyBudW1TYW1wbGVzO1xuICAgIHZhciBycCA9IHRoaXMuZGlzdG9ydChyKTtcbiAgICB2YXIgdiA9IHJwO1xuICAgIGZvciAoaiA9IDA7IGogPCBudW1Db2VmZmljaWVudHM7ICsraikge1xuICAgICAgdiAqPSBycCAqIHJwO1xuICAgICAgbWF0QVtqXVtpXSA9IHY7XG4gICAgfVxuICAgIHZlY1lbaV0gPSByIC0gcnA7XG4gIH1cblxuICB2YXIgaW52ZXJzZUNvZWZmaWNpZW50cyA9IHRoaXMuc29sdmVMZWFzdFNxdWFyZXNfKG1hdEEsIHZlY1kpO1xuXG4gIHJldHVybiBuZXcgRGlzdG9ydGlvbihpbnZlcnNlQ29lZmZpY2llbnRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGlzdG9ydGlvbjtcblxufSx7fV0sMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBEUERCIGNhY2hlLlxuICovXG52YXIgRFBEQl9DQUNIRSA9IHtcbiAgXCJmb3JtYXRcIjogMSxcbiAgXCJsYXN0X3VwZGF0ZWRcIjogXCIyMDE2LTAxLTIwVDAwOjE4OjM1WlwiLFxuICBcImRldmljZXNcIjogW1xuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcImFzdXMvKi9OZXh1cyA3LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTmV4dXMgN1wiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMzIwLjgsIDMyMy4wIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiYXN1cy8qL0FTVVNfWjAwQUQvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJBU1VTX1owMEFEXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0MDMuMCwgNDA0LjYgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiSFRDLyovSFRDNjQzNUxWVy8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkhUQzY0MzVMVldcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQ0OS43LCA0NDMuMyBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJIVEMvKi9IVEMgT25lIFhMLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiSFRDIE9uZSBYTFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMzE1LjMsIDMxNC42IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcImh0Yy8qL05leHVzIDkvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJOZXh1cyA5XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogMjg5LjAsXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiSFRDLyovSFRDIE9uZSBNOS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkhUQyBPbmUgTTlcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQ0Mi41LCA0NDMuMyBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIkhUQy8qL0hUQyBPbmVfTTgvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJIVEMgT25lX004XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0NDkuNywgNDQ3LjQgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJIVEMvKi9IVEMgT25lLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiSFRDIE9uZVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IDQ3Mi44LFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJIdWF3ZWkvKi9OZXh1cyA2UC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIk5leHVzIDZQXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA1MTUuMSwgNTE4LjAgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiTEdFLyovTmV4dXMgNVgvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJOZXh1cyA1WFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDIyLjAsIDQxOS45IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIkxHRS8qL0xHTVMzNDUvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJMR01TMzQ1XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyMjEuNywgMjE5LjEgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJMR0UvKi9MRy1EODAwLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTEctRDgwMFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDIyLjAsIDQyNC4xIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiTEdFLyovTEctRDg1MC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkxHLUQ4NTBcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDUzNy45LCA1NDEuOSBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIkxHRS8qL1ZTOTg1IDRHLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiVlM5ODUgNEdcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDUzNy45LCA1MzUuNiBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJMR0UvKi9OZXh1cyA1LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTmV4dXMgNSBcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQ0Mi40LCA0NDQuOCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJMR0UvKi9OZXh1cyA0LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTmV4dXMgNFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMzE5LjgsIDMxOC40IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIkxHRS8qL0xHLVA3NjkvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJMRy1QNzY5XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyNDAuNiwgMjQ3LjUgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiTEdFLyovTEdNUzMyMy8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkxHTVMzMjNcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDIwNi42LCAyMDQuNiBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJMR0UvKi9MR0xTOTk2LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiTEdMUzk5NlwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDAzLjQsIDQwMS41IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIk1pY3JvbWF4LyovNDU2ME1NWC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIjQ1NjBNTVhcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDI0MC4wLCAyMTkuNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJNaWNyb21heC8qL0EyNTAvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJNaWNyb21heCBBMjUwXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0ODAuMCwgNDQ2LjQgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiTWljcm9tYXgvKi9NaWNyb21heCBBUTQ1MDEvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJNaWNyb21heCBBUTQ1MDFcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiAyNDAuMCxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJtb3Rvcm9sYS8qL0RST0lEIFJBWlIvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJEUk9JRCBSQVpSXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAzNjguMSwgMjU2LjcgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwibW90b3JvbGEvKi9YVDgzMEMvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJYVDgzMENcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDI1NC4wLCAyNTUuOSBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJtb3Rvcm9sYS8qL1hUMTAyMS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlhUMTAyMVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMjU0LjAsIDI1Ni43IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwibW90b3JvbGEvKi9YVDEwMjMvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJYVDEwMjNcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDI1NC4wLCAyNTYuNyBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIm1vdG9yb2xhLyovWFQxMDI4LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiWFQxMDI4XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAzMjYuNiwgMzI3LjYgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwibW90b3JvbGEvKi9YVDEwMzQvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJYVDEwMzRcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDMyNi42LCAzMjguNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIm1vdG9yb2xhLyovWFQxMDUzLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiWFQxMDUzXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAzMTUuMywgMzE2LjEgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwibW90b3JvbGEvKi9YVDE1NjIvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJYVDE1NjJcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQwMy40LCA0MDIuNyBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJtb3Rvcm9sYS8qL05leHVzIDYvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJOZXh1cyA2IFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDk0LjMsIDQ4OS43IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIm1vdG9yb2xhLyovWFQxMDYzLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiWFQxMDYzXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyOTUuMCwgMjk2LjYgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwibW90b3JvbGEvKi9YVDEwNjQvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJYVDEwNjRcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDI5NS4wLCAyOTUuNiBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIm1vdG9yb2xhLyovWFQxMDkyLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiWFQxMDkyXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0MjIuMCwgNDI0LjEgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJtb3Rvcm9sYS8qL1hUMTA5NS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlhUMTA5NVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDIyLjAsIDQyMy40IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIk9uZVBsdXMvKi9BMDAwMS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkEwMDAxXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0MDMuNCwgNDAxLjAgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiT25lUGx1cy8qL09ORSBFMTAwNS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIk9ORSBFMTAwNVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDQyLjQsIDQ0MS40IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIk9uZVBsdXMvKi9PTkUgQTIwMDUvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJPTkUgQTIwMDVcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDM5MS45LCA0MDUuNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJPUFBPLyovWDkwOS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlg5MDlcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQ0Mi40LCA0NDQuMSBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovR1QtSTkwODIvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJHVC1JOTA4MlwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMTg0LjcsIDE4NS40IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1HMzYwUC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLUczNjBQXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAxOTYuNywgMjA1LjQgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL05leHVzIFMvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJOZXh1cyBTXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyMzQuNSwgMjI5LjggXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL0dULUk5MzAwLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiR1QtSTkzMDBcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDMwNC44LCAzMDMuOSBdLFxuICAgIFwiYndcIjogNSxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1UMjMwTlUvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1UMjMwTlVcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiAyMTYuMCxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU0dILVQzOTkvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTR0gtVDM5OVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMjE3LjcsIDIzMS40IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1OOTAwNS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLU45MDA1XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAzODYuNCwgMzg3LjAgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU0FNU1VORy1TTS1OOTAwQS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNBTVNVTkctU00tTjkwMEFcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDM4Ni40LCAzODcuNyBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovR1QtSTk1MDAvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJHVC1JOTUwMFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDQyLjUsIDQ0My4zIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL0dULUk5NTA1LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiR1QtSTk1MDVcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiA0MzkuNCxcbiAgICBcImJ3XCI6IDQsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL1NNLUc5MDBGLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU00tRzkwMEZcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQxNS42LCA0MzEuNiBdLFxuICAgIFwiYndcIjogNSxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tRzkwME0vKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1HOTAwTVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDE1LjYsIDQzMS42IF0sXG4gICAgXCJid1wiOiA1LFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1HODAwRi8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLUc4MDBGXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogMzI2LjgsXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1HOTA2Uy8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLUc5MDZTXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA1NjIuNywgNTcyLjQgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL0dULUk5MzAwLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiR1QtSTkzMDBcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDMwNi43LCAzMDQuOCBdLFxuICAgIFwiYndcIjogNSxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tVDUzNS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLVQ1MzVcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDE0Mi42LCAxMzYuNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1OOTIwQy8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLU45MjBDXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA1MTUuMSwgNTE4LjQgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL0dULUk5MzAwSS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkdULUk5MzAwSVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMzA0LjgsIDMwNS44IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9HVC1JOTE5NS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkdULUk5MTk1XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyNDkuNCwgMjU2LjcgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU1BILUw1MjAvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTUEgtTDUyMFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMjQ5LjQsIDI1NS45IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TQU1TVU5HLVNHSC1JNzE3LypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU0FNU1VORy1TR0gtSTcxN1wiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IDI4NS44LFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU1BILUQ3MTAvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTUEgtRDcxMFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMjE3LjcsIDIwNC4yIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9HVC1ONzEwMC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkdULU43MTAwXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogMjY1LjEsXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TQ0gtSTYwNS8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNDSC1JNjA1XCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogMjY1LjEsXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9HYWxheHkgTmV4dXMvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJHYWxheHkgTmV4dXNcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDMxNS4zLCAzMTQuMiBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tTjkxMEgvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1OOTEwSFwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNTE1LjEsIDUxOC4wIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1OOTEwQy8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLU45MTBDXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA1MTUuMiwgNTIwLjIgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tRzEzME0vKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1HMTMwTVwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgMTY1LjksIDE2NC44IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL1NNLUc5MjhJLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU00tRzkyOElcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDUxNS4xLCA1MTguNCBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tRzkyMEYvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1HOTIwRlwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IDU4MC42LFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDUwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcInNhbXN1bmcvKi9TTS1HOTIwUC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIlNNLUc5MjBQXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA1MjIuNSwgNTc3LjAgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwic2Ftc3VuZy8qL1NNLUc5MjVGLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU00tRzkyNUZcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiA1ODAuNixcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJzYW1zdW5nLyovU00tRzkyNVYvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJTTS1HOTI1VlwiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNTIyLjUsIDU3Ni42IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIlNvbnkvKi9DNjkwMy8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkM2OTAzXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0NDIuNSwgNDQzLjMgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJTb255LyovRDY2NTMvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJENjY1M1wiIH1cbiAgICBdLFxuICAgIFwiZHBpXCI6IFsgNDI4LjYsIDQyNy42IF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJhbmRyb2lkXCIsXG4gICAgXCJydWxlc1wiOiBbXG4gICAgICB7IFwibWRtaFwiOiBcIlNvbnkvKi9FNjY1My8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcIkU2NjUzXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0MjguNiwgNDI1LjcgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiU29ueS8qL0U2ODUzLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiRTY4NTNcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDQwMy40LCA0MDEuOSBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJTb255LyovU0dQMzIxLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiU0dQMzIxXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyAyMjQuNywgMjI0LjEgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiA1MDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJUQ1QvKi9BTENBVEVMIE9ORSBUT1VDSCBGaWVyY2UvKlwiIH0sXG4gICAgICB7IFwidWFcIjogXCJBTENBVEVMIE9ORSBUT1VDSCBGaWVyY2VcIiB9XG4gICAgXSxcbiAgICBcImRwaVwiOiBbIDI0MC4wLCAyNDcuNSBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiYW5kcm9pZFwiLFxuICAgIFwicnVsZXNcIjogW1xuICAgICAgeyBcIm1kbWhcIjogXCJUSEwvKi90aGwgNTAwMC8qXCIgfSxcbiAgICAgIHsgXCJ1YVwiOiBcInRobCA1MDAwXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogWyA0ODAuMCwgNDQzLjMgXSxcbiAgICBcImJ3XCI6IDMsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImFuZHJvaWRcIixcbiAgICBcInJ1bGVzXCI6IFtcbiAgICAgIHsgXCJtZG1oXCI6IFwiWlRFLyovWlRFIEJsYWRlIEwyLypcIiB9LFxuICAgICAgeyBcInVhXCI6IFwiWlRFIEJsYWRlIEwyXCIgfVxuICAgIF0sXG4gICAgXCJkcGlcIjogMjQwLjAsXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogNTAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImlvc1wiLFxuICAgIFwicnVsZXNcIjogWyB7IFwicmVzXCI6IFsgNjQwLCA5NjAgXSB9IF0sXG4gICAgXCJkcGlcIjogWyAzMjUuMSwgMzI4LjQgXSxcbiAgICBcImJ3XCI6IDQsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImlvc1wiLFxuICAgIFwicnVsZXNcIjogWyB7IFwicmVzXCI6IFsgNjQwLCA5NjAgXSB9IF0sXG4gICAgXCJkcGlcIjogWyAzMjUuMSwgMzI4LjQgXSxcbiAgICBcImJ3XCI6IDQsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImlvc1wiLFxuICAgIFwicnVsZXNcIjogWyB7IFwicmVzXCI6IFsgNjQwLCAxMTM2IF0gfSBdLFxuICAgIFwiZHBpXCI6IFsgMzE3LjEsIDMyMC4yIF0sXG4gICAgXCJid1wiOiAzLFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJpb3NcIixcbiAgICBcInJ1bGVzXCI6IFsgeyBcInJlc1wiOiBbIDY0MCwgMTEzNiBdIH0gXSxcbiAgICBcImRwaVwiOiBbIDMxNy4xLCAzMjAuMiBdLFxuICAgIFwiYndcIjogMyxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiaW9zXCIsXG4gICAgXCJydWxlc1wiOiBbIHsgXCJyZXNcIjogWyA3NTAsIDEzMzQgXSB9IF0sXG4gICAgXCJkcGlcIjogMzI2LjQsXG4gICAgXCJid1wiOiA0LFxuICAgIFwiYWNcIjogMTAwMFxuICB9LFxuXG4gIHtcbiAgICBcInR5cGVcIjogXCJpb3NcIixcbiAgICBcInJ1bGVzXCI6IFsgeyBcInJlc1wiOiBbIDc1MCwgMTMzNCBdIH0gXSxcbiAgICBcImRwaVwiOiAzMjYuNCxcbiAgICBcImJ3XCI6IDQsXG4gICAgXCJhY1wiOiAxMDAwXG4gIH0sXG5cbiAge1xuICAgIFwidHlwZVwiOiBcImlvc1wiLFxuICAgIFwicnVsZXNcIjogWyB7IFwicmVzXCI6IFsgMTI0MiwgMjIwOCBdIH0gXSxcbiAgICBcImRwaVwiOiBbIDQ1My42LCA0NTguNCBdLFxuICAgIFwiYndcIjogNCxcbiAgICBcImFjXCI6IDEwMDBcbiAgfSxcblxuICB7XG4gICAgXCJ0eXBlXCI6IFwiaW9zXCIsXG4gICAgXCJydWxlc1wiOiBbIHsgXCJyZXNcIjogWyAxMjQyLCAyMjA4IF0gfSBdLFxuICAgIFwiZHBpXCI6IFsgNDUzLjYsIDQ1OC40IF0sXG4gICAgXCJid1wiOiA0LFxuICAgIFwiYWNcIjogMTAwMFxuICB9XG5dfTtcblxubW9kdWxlLmV4cG9ydHMgPSBEUERCX0NBQ0hFO1xuXG59LHt9XSwxMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBPZmZsaW5lIGNhY2hlIG9mIHRoZSBEUERCLCB0byBiZSB1c2VkIHVudGlsIHdlIGxvYWQgdGhlIG9ubGluZSBvbmUgKGFuZFxuLy8gYXMgYSBmYWxsYmFjayBpbiBjYXNlIHdlIGNhbid0IGxvYWQgdGhlIG9ubGluZSBvbmUpLlxudmFyIERQREJfQ0FDSEUgPSBfZGVyZXFfKCcuL2RwZGItY2FjaGUuanMnKTtcbnZhciBVdGlsID0gX2RlcmVxXygnLi4vdXRpbC5qcycpO1xuXG4vLyBPbmxpbmUgRFBEQiBVUkwuXG52YXIgT05MSU5FX0RQREJfVVJMID0gJ2h0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9jYXJkYm9hcmQtZHBkYi9kcGRiLmpzb24nO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgZGV2aWNlIHBhcmFtZXRlcnMgYmFzZWQgb24gdGhlIERQREIgKERldmljZSBQYXJhbWV0ZXIgRGF0YWJhc2UpLlxuICogSW5pdGlhbGx5LCB1c2VzIHRoZSBjYWNoZWQgRFBEQiB2YWx1ZXMuXG4gKlxuICogSWYgZmV0Y2hPbmxpbmUgPT0gdHJ1ZSwgdGhlbiB0aGlzIG9iamVjdCB0cmllcyB0byBmZXRjaCB0aGUgb25saW5lIHZlcnNpb25cbiAqIG9mIHRoZSBEUERCIGFuZCB1cGRhdGVzIHRoZSBkZXZpY2UgaW5mbyBpZiBhIGJldHRlciBtYXRjaCBpcyBmb3VuZC5cbiAqIENhbGxzIHRoZSBvbkRldmljZVBhcmFtc1VwZGF0ZWQgY2FsbGJhY2sgd2hlbiB0aGVyZSBpcyBhbiB1cGRhdGUgdG8gdGhlXG4gKiBkZXZpY2UgaW5mb3JtYXRpb24uXG4gKi9cbmZ1bmN0aW9uIERwZGIoZmV0Y2hPbmxpbmUsIG9uRGV2aWNlUGFyYW1zVXBkYXRlZCkge1xuICAvLyBTdGFydCB3aXRoIHRoZSBvZmZsaW5lIERQREIgY2FjaGUgd2hpbGUgd2UgYXJlIGxvYWRpbmcgdGhlIHJlYWwgb25lLlxuICB0aGlzLmRwZGIgPSBEUERCX0NBQ0hFO1xuXG4gIC8vIENhbGN1bGF0ZSBkZXZpY2UgcGFyYW1zIGJhc2VkIG9uIHRoZSBvZmZsaW5lIHZlcnNpb24gb2YgdGhlIERQREIuXG4gIHRoaXMucmVjYWxjdWxhdGVEZXZpY2VQYXJhbXNfKCk7XG5cbiAgLy8gWEhSIHRvIGZldGNoIG9ubGluZSBEUERCIGZpbGUsIGlmIHJlcXVlc3RlZC5cbiAgaWYgKGZldGNoT25saW5lKSB7XG4gICAgLy8gU2V0IHRoZSBjYWxsYmFjay5cbiAgICB0aGlzLm9uRGV2aWNlUGFyYW1zVXBkYXRlZCA9IG9uRGV2aWNlUGFyYW1zVXBkYXRlZDtcblxuICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBEUERCLi4uJyk7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBvYmogPSB0aGlzO1xuICAgIHhoci5vcGVuKCdHRVQnLCBPTkxJTkVfRFBEQl9VUkwsIHRydWUpO1xuICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICBvYmoubG9hZGluZyA9IGZhbHNlO1xuICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPD0gMjk5KSB7XG4gICAgICAgIC8vIFN1Y2Nlc3MuXG4gICAgICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgbG9hZGVkIG9ubGluZSBEUERCLicpO1xuICAgICAgICBvYmouZHBkYiA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgb2JqLnJlY2FsY3VsYXRlRGV2aWNlUGFyYW1zXygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRXJyb3IgbG9hZGluZyB0aGUgRFBEQi5cbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBvbmxpbmUgRFBEQiEnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB4aHIuc2VuZCgpO1xuICB9XG59XG5cbi8vIFJldHVybnMgdGhlIGN1cnJlbnQgZGV2aWNlIHBhcmFtZXRlcnMuXG5EcGRiLnByb3RvdHlwZS5nZXREZXZpY2VQYXJhbXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZGV2aWNlUGFyYW1zO1xufTtcblxuLy8gUmVjYWxjdWxhdGVzIHRoaXMgZGV2aWNlJ3MgcGFyYW1ldGVycyBiYXNlZCBvbiB0aGUgRFBEQi5cbkRwZGIucHJvdG90eXBlLnJlY2FsY3VsYXRlRGV2aWNlUGFyYW1zXyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnUmVjYWxjdWxhdGluZyBkZXZpY2UgcGFyYW1zLicpO1xuICB2YXIgbmV3RGV2aWNlUGFyYW1zID0gdGhpcy5jYWxjRGV2aWNlUGFyYW1zXygpO1xuICBjb25zb2xlLmxvZygnTmV3IGRldmljZSBwYXJhbWV0ZXJzOicpO1xuICBjb25zb2xlLmxvZyhuZXdEZXZpY2VQYXJhbXMpO1xuICBpZiAobmV3RGV2aWNlUGFyYW1zKSB7XG4gICAgdGhpcy5kZXZpY2VQYXJhbXMgPSBuZXdEZXZpY2VQYXJhbXM7XG4gICAgLy8gSW52b2tlIGNhbGxiYWNrLCBpZiBpdCBpcyBzZXQuXG4gICAgaWYgKHRoaXMub25EZXZpY2VQYXJhbXNVcGRhdGVkKSB7XG4gICAgICB0aGlzLm9uRGV2aWNlUGFyYW1zVXBkYXRlZCh0aGlzLmRldmljZVBhcmFtcyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZWNhbGN1bGF0ZSBkZXZpY2UgcGFyYW1ldGVycy4nKTtcbiAgfVxufTtcblxuLy8gUmV0dXJucyBhIERldmljZVBhcmFtcyBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBiZXN0IGd1ZXNzIGFzIHRvIHRoaXNcbi8vIGRldmljZSdzIHBhcmFtZXRlcnMuIENhbiByZXR1cm4gbnVsbCBpZiB0aGUgZGV2aWNlIGRvZXMgbm90IG1hdGNoIGFueVxuLy8ga25vd24gZGV2aWNlcy5cbkRwZGIucHJvdG90eXBlLmNhbGNEZXZpY2VQYXJhbXNfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBkYiA9IHRoaXMuZHBkYjsgLy8gc2hvcnRoYW5kXG4gIGlmICghZGIpIHtcbiAgICBjb25zb2xlLmVycm9yKCdEUERCIG5vdCBhdmFpbGFibGUuJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGRiLmZvcm1hdCAhPSAxKSB7XG4gICAgY29uc29sZS5lcnJvcignRFBEQiBoYXMgdW5leHBlY3RlZCBmb3JtYXQgdmVyc2lvbi4nKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIWRiLmRldmljZXMgfHwgIWRiLmRldmljZXMubGVuZ3RoKSB7XG4gICAgY29uc29sZS5lcnJvcignRFBEQiBkb2VzIG5vdCBoYXZlIGEgZGV2aWNlcyBzZWN0aW9uLicpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gR2V0IHRoZSBhY3R1YWwgdXNlciBhZ2VudCBhbmQgc2NyZWVuIGRpbWVuc2lvbnMgaW4gcGl4ZWxzLlxuICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYTtcbiAgdmFyIHdpZHRoID0gVXRpbC5nZXRTY3JlZW5XaWR0aCgpO1xuICB2YXIgaGVpZ2h0ID0gVXRpbC5nZXRTY3JlZW5IZWlnaHQoKTtcbiAgY29uc29sZS5sb2coJ1VzZXIgYWdlbnQ6ICcgKyB1c2VyQWdlbnQpO1xuICBjb25zb2xlLmxvZygnUGl4ZWwgd2lkdGg6ICcgKyB3aWR0aCk7XG4gIGNvbnNvbGUubG9nKCdQaXhlbCBoZWlnaHQ6ICcgKyBoZWlnaHQpO1xuXG4gIGlmICghZGIuZGV2aWNlcykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0RQREIgaGFzIG5vIGRldmljZXMgc2VjdGlvbi4nKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGIuZGV2aWNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXZpY2UgPSBkYi5kZXZpY2VzW2ldO1xuICAgIGlmICghZGV2aWNlLnJ1bGVzKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0RldmljZVsnICsgaSArICddIGhhcyBubyBydWxlcyBzZWN0aW9uLicpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGRldmljZS50eXBlICE9ICdpb3MnICYmIGRldmljZS50eXBlICE9ICdhbmRyb2lkJykge1xuICAgICAgY29uc29sZS53YXJuKCdEZXZpY2VbJyArIGkgKyAnXSBoYXMgaW52YWxpZCB0eXBlLicpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gU2VlIGlmIHRoaXMgZGV2aWNlIGlzIG9mIHRoZSBhcHByb3ByaWF0ZSB0eXBlLlxuICAgIGlmIChVdGlsLmlzSU9TKCkgIT0gKGRldmljZS50eXBlID09ICdpb3MnKSkgY29udGludWU7XG5cbiAgICAvLyBTZWUgaWYgdGhpcyBkZXZpY2UgbWF0Y2hlcyBhbnkgb2YgdGhlIHJ1bGVzOlxuICAgIHZhciBtYXRjaGVkID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBkZXZpY2UucnVsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBydWxlID0gZGV2aWNlLnJ1bGVzW2pdO1xuICAgICAgaWYgKHRoaXMubWF0Y2hSdWxlXyhydWxlLCB1c2VyQWdlbnQsIHdpZHRoLCBoZWlnaHQpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdSdWxlIG1hdGNoZWQ6Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKHJ1bGUpO1xuICAgICAgICBtYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbWF0Y2hlZCkgY29udGludWU7XG5cbiAgICAvLyBkZXZpY2UuZHBpIG1pZ2h0IGJlIGFuIGFycmF5IG9mIFsgeGRwaSwgeWRwaV0gb3IganVzdCBhIHNjYWxhci5cbiAgICB2YXIgeGRwaSA9IGRldmljZS5kcGlbMF0gfHwgZGV2aWNlLmRwaTtcbiAgICB2YXIgeWRwaSA9IGRldmljZS5kcGlbMV0gfHwgZGV2aWNlLmRwaTtcblxuICAgIHJldHVybiBuZXcgRGV2aWNlUGFyYW1zKHsgeGRwaTogeGRwaSwgeWRwaTogeWRwaSwgYmV2ZWxNbTogZGV2aWNlLmJ3IH0pO1xuICB9XG5cbiAgY29uc29sZS53YXJuKCdObyBEUERCIGRldmljZSBtYXRjaC4nKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5EcGRiLnByb3RvdHlwZS5tYXRjaFJ1bGVfID0gZnVuY3Rpb24ocnVsZSwgdWEsIHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpIHtcbiAgLy8gV2UgY2FuIG9ubHkgbWF0Y2ggJ3VhJyBhbmQgJ3JlcycgcnVsZXMsIG5vdCBvdGhlciB0eXBlcyBsaWtlICdtZG1oJ1xuICAvLyAod2hpY2ggYXJlIG1lYW50IGZvciBuYXRpdmUgcGxhdGZvcm1zKS5cbiAgaWYgKCFydWxlLnVhICYmICFydWxlLnJlcykgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIG91ciB1c2VyIGFnZW50IHN0cmluZyBkb2Vzbid0IGNvbnRhaW4gdGhlIGluZGljYXRlZCB1c2VyIGFnZW50IHN0cmluZyxcbiAgLy8gdGhlIG1hdGNoIGZhaWxzLlxuICBpZiAocnVsZS51YSAmJiB1YS5pbmRleE9mKHJ1bGUudWEpIDwgMCkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZSBydWxlIHNwZWNpZmllcyBzY3JlZW4gZGltZW5zaW9ucyB0aGF0IGRvbid0IGNvcnJlc3BvbmQgdG8gb3VycyxcbiAgLy8gdGhlIG1hdGNoIGZhaWxzLlxuICBpZiAocnVsZS5yZXMpIHtcbiAgICBpZiAoIXJ1bGUucmVzWzBdIHx8ICFydWxlLnJlc1sxXSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciByZXNYID0gcnVsZS5yZXNbMF07XG4gICAgdmFyIHJlc1kgPSBydWxlLnJlc1sxXTtcbiAgICAvLyBDb21wYXJlIG1pbiBhbmQgbWF4IHNvIGFzIHRvIG1ha2UgdGhlIG9yZGVyIG5vdCBtYXR0ZXIsIGkuZS4sIGl0IHNob3VsZFxuICAgIC8vIGJlIHRydWUgdGhhdCA2NDB4NDgwID09IDQ4MHg2NDAuXG4gICAgaWYgKE1hdGgubWluKHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpICE9IE1hdGgubWluKHJlc1gsIHJlc1kpIHx8XG4gICAgICAgIChNYXRoLm1heChzY3JlZW5XaWR0aCwgc2NyZWVuSGVpZ2h0KSAhPSBNYXRoLm1heChyZXNYLCByZXNZKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gRGV2aWNlUGFyYW1zKHBhcmFtcykge1xuICB0aGlzLnhkcGkgPSBwYXJhbXMueGRwaTtcbiAgdGhpcy55ZHBpID0gcGFyYW1zLnlkcGk7XG4gIHRoaXMuYmV2ZWxNbSA9IHBhcmFtcy5iZXZlbE1tO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERwZGI7XG59LHtcIi4uL3V0aWwuanNcIjoyMixcIi4vZHBkYi1jYWNoZS5qc1wiOjEwfV0sMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZnVuY3Rpb24gRW1pdHRlcigpIHtcbiAgdGhpcy5jYWxsYmFja3MgPSB7fTtcbn1cblxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3NbZXZlbnROYW1lXTtcbiAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAvL2NvbnNvbGUubG9nKCdObyB2YWxpZCBjYWxsYmFjayBzcGVjaWZpZWQuJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAvLyBFbGltaW5hdGUgdGhlIGZpcnN0IHBhcmFtICh0aGUgY2FsbGJhY2spLlxuICBhcmdzLnNoaWZ0KCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG59O1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgaWYgKGV2ZW50TmFtZSBpbiB0aGlzLmNhbGxiYWNrcykge1xuICAgIHRoaXMuY2FsbGJhY2tzW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5jYWxsYmFja3NbZXZlbnROYW1lXSA9IFtjYWxsYmFja107XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcblxufSx7fV0sMTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBVdGlsID0gX2RlcmVxXygnLi91dGlsLmpzJyk7XG52YXIgV2ViVlJQb2x5ZmlsbCA9IF9kZXJlcV8oJy4vd2VidnItcG9seWZpbGwuanMnKTtcblxuLy8gSW5pdGlhbGl6ZSBhIFdlYlZSQ29uZmlnIGp1c3QgaW4gY2FzZS5cbndpbmRvdy5XZWJWUkNvbmZpZyA9IFV0aWwuZXh0ZW5kKHtcbiAgLy8gRm9yY2VzIGF2YWlsYWJpbGl0eSBvZiBWUiBtb2RlLCBldmVuIGZvciBub24tbW9iaWxlIGRldmljZXMuXG4gIEZPUkNFX0VOQUJMRV9WUjogZmFsc2UsXG5cbiAgLy8gQ29tcGxlbWVudGFyeSBmaWx0ZXIgY29lZmZpY2llbnQuIDAgZm9yIGFjY2VsZXJvbWV0ZXIsIDEgZm9yIGd5cm8uXG4gIEtfRklMVEVSOiAwLjk4LFxuXG4gIC8vIEhvdyBmYXIgaW50byB0aGUgZnV0dXJlIHRvIHByZWRpY3QgZHVyaW5nIGZhc3QgbW90aW9uIChpbiBzZWNvbmRzKS5cbiAgUFJFRElDVElPTl9USU1FX1M6IDAuMDQwLFxuXG4gIC8vIEZsYWcgdG8gZGlzYWJsZSB0b3VjaCBwYW5uZXIuIEluIGNhc2UgeW91IGhhdmUgeW91ciBvd24gdG91Y2ggY29udHJvbHMuXG4gIFRPVUNIX1BBTk5FUl9ESVNBQkxFRDogZmFsc2UsXG5cbiAgLy8gRmxhZyB0byBkaXNhYmxlZCB0aGUgVUkgaW4gVlIgTW9kZS5cbiAgQ0FSREJPQVJEX1VJX0RJU0FCTEVEOiBmYWxzZSwgLy8gRGVmYXVsdDogZmFsc2VcblxuICAvLyBGbGFnIHRvIGRpc2FibGUgdGhlIGluc3RydWN0aW9ucyB0byByb3RhdGUgeW91ciBkZXZpY2UuXG4gIFJPVEFURV9JTlNUUlVDVElPTlNfRElTQUJMRUQ6IGZhbHNlLCAvLyBEZWZhdWx0OiBmYWxzZS5cblxuICAvLyBFbmFibGUgeWF3IHBhbm5pbmcgb25seSwgZGlzYWJsaW5nIHJvbGwgYW5kIHBpdGNoLiBUaGlzIGNhbiBiZSB1c2VmdWxcbiAgLy8gZm9yIHBhbm9yYW1hcyB3aXRoIG5vdGhpbmcgaW50ZXJlc3RpbmcgYWJvdmUgb3IgYmVsb3cuXG4gIFlBV19PTkxZOiBmYWxzZSxcblxuICAvLyBUbyBkaXNhYmxlIGtleWJvYXJkIGFuZCBtb3VzZSBjb250cm9scywgaWYgeW91IHdhbnQgdG8gdXNlIHlvdXIgb3duXG4gIC8vIGltcGxlbWVudGF0aW9uLlxuICBNT1VTRV9LRVlCT0FSRF9DT05UUk9MU19ESVNBQkxFRDogZmFsc2UsXG5cbiAgLy8gUHJldmVudCB0aGUgcG9seWZpbGwgZnJvbSBpbml0aWFsaXppbmcgaW1tZWRpYXRlbHkuIFJlcXVpcmVzIHRoZSBhcHBcbiAgLy8gdG8gY2FsbCBJbml0aWFsaXplV2ViVlJQb2x5ZmlsbCgpIGJlZm9yZSBpdCBjYW4gYmUgdXNlZC5cbiAgREVGRVJfSU5JVElBTElaQVRJT046IGZhbHNlLFxuXG4gIC8vIEVuYWJsZSB0aGUgZGVwcmVjYXRlZCB2ZXJzaW9uIG9mIHRoZSBBUEkgKG5hdmlnYXRvci5nZXRWUkRldmljZXMpLlxuICBFTkFCTEVfREVQUkVDQVRFRF9BUEk6IGZhbHNlLFxuXG4gIC8vIFNjYWxlcyB0aGUgcmVjb21tZW5kZWQgYnVmZmVyIHNpemUgcmVwb3J0ZWQgYnkgV2ViVlIsIHdoaWNoIGNhbiBpbXByb3ZlXG4gIC8vIHBlcmZvcm1hbmNlLlxuICAvLyBVUERBVEUoMjAxNi0wNS0wMyk6IFNldHRpbmcgdGhpcyB0byAwLjUgYnkgZGVmYXVsdCBzaW5jZSAxLjAgZG9lcyBub3RcbiAgLy8gcGVyZm9ybSB3ZWxsIG9uIG1hbnkgbW9iaWxlIGRldmljZXMuXG4gIEJVRkZFUl9TQ0FMRTogMC41LFxuXG4gIC8vIEFsbG93IFZSRGlzcGxheS5zdWJtaXRGcmFtZSB0byBjaGFuZ2UgZ2wgYmluZGluZ3MsIHdoaWNoIGlzIG1vcmVcbiAgLy8gZWZmaWNpZW50IGlmIHRoZSBhcHBsaWNhdGlvbiBjb2RlIHdpbGwgcmUtYmluZCBpdHMgcmVzb3VyY2VzIG9uIHRoZVxuICAvLyBuZXh0IGZyYW1lIGFueXdheS4gVGhpcyBoYXMgYmVlbiBzZWVuIHRvIGNhdXNlIHJlbmRlcmluZyBnbGl0Y2hlcyB3aXRoXG4gIC8vIFRIUkVFLmpzLlxuICAvLyBEaXJ0eSBiaW5kaW5ncyBpbmNsdWRlOiBnbC5GUkFNRUJVRkZFUl9CSU5ESU5HLCBnbC5DVVJSRU5UX1BST0dSQU0sXG4gIC8vIGdsLkFSUkFZX0JVRkZFUl9CSU5ESU5HLCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUl9CSU5ESU5HLFxuICAvLyBhbmQgZ2wuVEVYVFVSRV9CSU5ESU5HXzJEIGZvciB0ZXh0dXJlIHVuaXQgMC5cbiAgRElSVFlfU1VCTUlUX0ZSQU1FX0JJTkRJTkdTOiBmYWxzZVxufSwgd2luZG93LldlYlZSQ29uZmlnKTtcblxuaWYgKCF3aW5kb3cuV2ViVlJDb25maWcuREVGRVJfSU5JVElBTElaQVRJT04pIHtcbiAgbmV3IFdlYlZSUG9seWZpbGwoKTtcbn0gZWxzZSB7XG4gIHdpbmRvdy5Jbml0aWFsaXplV2ViVlJQb2x5ZmlsbCA9IGZ1bmN0aW9uKCkge1xuICAgIG5ldyBXZWJWUlBvbHlmaWxsKCk7XG4gIH1cbn1cblxufSx7XCIuL3V0aWwuanNcIjoyMixcIi4vd2VidnItcG9seWZpbGwuanNcIjoyNX1dLDE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBNYXRoVXRpbCA9IHdpbmRvdy5NYXRoVXRpbCB8fCB7fTtcblxuTWF0aFV0aWwuZGVnVG9SYWQgPSBNYXRoLlBJIC8gMTgwO1xuTWF0aFV0aWwucmFkVG9EZWcgPSAxODAgLyBNYXRoLlBJO1xuXG4vLyBTb21lIG1pbmltYWwgbWF0aCBmdW5jdGlvbmFsaXR5IGJvcnJvd2VkIGZyb20gVEhSRUUuTWF0aCBhbmQgc3RyaXBwZWQgZG93blxuLy8gZm9yIHRoZSBwdXJwb3NlcyBvZiB0aGlzIGxpYnJhcnkuXG5cblxuTWF0aFV0aWwuVmVjdG9yMiA9IGZ1bmN0aW9uICggeCwgeSApIHtcbiAgdGhpcy54ID0geCB8fCAwO1xuICB0aGlzLnkgPSB5IHx8IDA7XG59O1xuXG5NYXRoVXRpbC5WZWN0b3IyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hdGhVdGlsLlZlY3RvcjIsXG5cbiAgc2V0OiBmdW5jdGlvbiAoIHgsIHkgKSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgY29weTogZnVuY3Rpb24gKCB2ICkge1xuICAgIHRoaXMueCA9IHYueDtcbiAgICB0aGlzLnkgPSB2Lnk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBzdWJWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG4gICAgdGhpcy54ID0gYS54IC0gYi54O1xuICAgIHRoaXMueSA9IGEueSAtIGIueTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxufTtcblxuTWF0aFV0aWwuVmVjdG9yMyA9IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcbiAgdGhpcy54ID0geCB8fCAwO1xuICB0aGlzLnkgPSB5IHx8IDA7XG4gIHRoaXMueiA9IHogfHwgMDtcbn07XG5cbk1hdGhVdGlsLlZlY3RvcjMucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTWF0aFV0aWwuVmVjdG9yMyxcblxuICBzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy56ID0gejtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGNvcHk6IGZ1bmN0aW9uICggdiApIHtcbiAgICB0aGlzLnggPSB2Lng7XG4gICAgdGhpcy55ID0gdi55O1xuICAgIHRoaXMueiA9IHYuejtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGxlbmd0aDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiApO1xuICB9LFxuXG4gIG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY2FsYXIgPSB0aGlzLmxlbmd0aCgpO1xuXG4gICAgaWYgKCBzY2FsYXIgIT09IDAgKSB7XG4gICAgICB2YXIgaW52U2NhbGFyID0gMSAvIHNjYWxhcjtcblxuICAgICAgdGhpcy5tdWx0aXBseVNjYWxhcihpbnZTY2FsYXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnggPSAwO1xuICAgICAgdGhpcy55ID0gMDtcbiAgICAgIHRoaXMueiA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgbXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuICAgIHRoaXMueCAqPSBzY2FsYXI7XG4gICAgdGhpcy55ICo9IHNjYWxhcjtcbiAgICB0aGlzLnogKj0gc2NhbGFyO1xuICB9LFxuXG4gIGFwcGx5UXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkge1xuICAgIHZhciB4ID0gdGhpcy54O1xuICAgIHZhciB5ID0gdGhpcy55O1xuICAgIHZhciB6ID0gdGhpcy56O1xuXG4gICAgdmFyIHF4ID0gcS54O1xuICAgIHZhciBxeSA9IHEueTtcbiAgICB2YXIgcXogPSBxLno7XG4gICAgdmFyIHF3ID0gcS53O1xuXG4gICAgLy8gY2FsY3VsYXRlIHF1YXQgKiB2ZWN0b3JcbiAgICB2YXIgaXggPSAgcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuICAgIHZhciBpeSA9ICBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHo7XG4gICAgdmFyIGl6ID0gIHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcbiAgICB2YXIgaXcgPSAtIHF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcblxuICAgIC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcbiAgICB0aGlzLnggPSBpeCAqIHF3ICsgaXcgKiAtIHF4ICsgaXkgKiAtIHF6IC0gaXogKiAtIHF5O1xuICAgIHRoaXMueSA9IGl5ICogcXcgKyBpdyAqIC0gcXkgKyBpeiAqIC0gcXggLSBpeCAqIC0gcXo7XG4gICAgdGhpcy56ID0gaXogKiBxdyArIGl3ICogLSBxeiArIGl4ICogLSBxeSAtIGl5ICogLSBxeDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGRvdDogZnVuY3Rpb24gKCB2ICkge1xuICAgIHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2Lno7XG4gIH0sXG5cbiAgY3Jvc3NWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG4gICAgdmFyIGF4ID0gYS54LCBheSA9IGEueSwgYXogPSBhLno7XG4gICAgdmFyIGJ4ID0gYi54LCBieSA9IGIueSwgYnogPSBiLno7XG5cbiAgICB0aGlzLnggPSBheSAqIGJ6IC0gYXogKiBieTtcbiAgICB0aGlzLnkgPSBheiAqIGJ4IC0gYXggKiBiejtcbiAgICB0aGlzLnogPSBheCAqIGJ5IC0gYXkgKiBieDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxufTtcblxuTWF0aFV0aWwuUXVhdGVybmlvbiA9IGZ1bmN0aW9uICggeCwgeSwgeiwgdyApIHtcbiAgdGhpcy54ID0geCB8fCAwO1xuICB0aGlzLnkgPSB5IHx8IDA7XG4gIHRoaXMueiA9IHogfHwgMDtcbiAgdGhpcy53ID0gKCB3ICE9PSB1bmRlZmluZWQgKSA/IHcgOiAxO1xufTtcblxuTWF0aFV0aWwuUXVhdGVybmlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXRoVXRpbC5RdWF0ZXJuaW9uLFxuXG4gIHNldDogZnVuY3Rpb24gKCB4LCB5LCB6LCB3ICkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLnogPSB6O1xuICAgIHRoaXMudyA9IHc7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBjb3B5OiBmdW5jdGlvbiAoIHF1YXRlcm5pb24gKSB7XG4gICAgdGhpcy54ID0gcXVhdGVybmlvbi54O1xuICAgIHRoaXMueSA9IHF1YXRlcm5pb24ueTtcbiAgICB0aGlzLnogPSBxdWF0ZXJuaW9uLno7XG4gICAgdGhpcy53ID0gcXVhdGVybmlvbi53O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgc2V0RnJvbUV1bGVyWFlaOiBmdW5jdGlvbiggeCwgeSwgeiApIHtcbiAgICB2YXIgYzEgPSBNYXRoLmNvcyggeCAvIDIgKTtcbiAgICB2YXIgYzIgPSBNYXRoLmNvcyggeSAvIDIgKTtcbiAgICB2YXIgYzMgPSBNYXRoLmNvcyggeiAvIDIgKTtcbiAgICB2YXIgczEgPSBNYXRoLnNpbiggeCAvIDIgKTtcbiAgICB2YXIgczIgPSBNYXRoLnNpbiggeSAvIDIgKTtcbiAgICB2YXIgczMgPSBNYXRoLnNpbiggeiAvIDIgKTtcblxuICAgIHRoaXMueCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcbiAgICB0aGlzLnkgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG4gICAgdGhpcy56ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuICAgIHRoaXMudyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIHNldEZyb21FdWxlcllYWjogZnVuY3Rpb24oIHgsIHksIHogKSB7XG4gICAgdmFyIGMxID0gTWF0aC5jb3MoIHggLyAyICk7XG4gICAgdmFyIGMyID0gTWF0aC5jb3MoIHkgLyAyICk7XG4gICAgdmFyIGMzID0gTWF0aC5jb3MoIHogLyAyICk7XG4gICAgdmFyIHMxID0gTWF0aC5zaW4oIHggLyAyICk7XG4gICAgdmFyIHMyID0gTWF0aC5zaW4oIHkgLyAyICk7XG4gICAgdmFyIHMzID0gTWF0aC5zaW4oIHogLyAyICk7XG5cbiAgICB0aGlzLnggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG4gICAgdGhpcy55ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuICAgIHRoaXMueiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcbiAgICB0aGlzLncgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBzZXRGcm9tQXhpc0FuZ2xlOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkge1xuICAgIC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9hbmdsZVRvUXVhdGVybmlvbi9pbmRleC5odG1cbiAgICAvLyBhc3N1bWVzIGF4aXMgaXMgbm9ybWFsaXplZFxuXG4gICAgdmFyIGhhbGZBbmdsZSA9IGFuZ2xlIC8gMiwgcyA9IE1hdGguc2luKCBoYWxmQW5nbGUgKTtcblxuICAgIHRoaXMueCA9IGF4aXMueCAqIHM7XG4gICAgdGhpcy55ID0gYXhpcy55ICogcztcbiAgICB0aGlzLnogPSBheGlzLnogKiBzO1xuICAgIHRoaXMudyA9IE1hdGguY29zKCBoYWxmQW5nbGUgKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG11bHRpcGx5OiBmdW5jdGlvbiAoIHEgKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggdGhpcywgcSApO1xuICB9LFxuXG4gIG11bHRpcGx5UXVhdGVybmlvbnM6IGZ1bmN0aW9uICggYSwgYiApIHtcbiAgICAvLyBmcm9tIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvY29kZS9pbmRleC5odG1cblxuICAgIHZhciBxYXggPSBhLngsIHFheSA9IGEueSwgcWF6ID0gYS56LCBxYXcgPSBhLnc7XG4gICAgdmFyIHFieCA9IGIueCwgcWJ5ID0gYi55LCBxYnogPSBiLnosIHFidyA9IGIudztcblxuICAgIHRoaXMueCA9IHFheCAqIHFidyArIHFhdyAqIHFieCArIHFheSAqIHFieiAtIHFheiAqIHFieTtcbiAgICB0aGlzLnkgPSBxYXkgKiBxYncgKyBxYXcgKiBxYnkgKyBxYXogKiBxYnggLSBxYXggKiBxYno7XG4gICAgdGhpcy56ID0gcWF6ICogcWJ3ICsgcWF3ICogcWJ6ICsgcWF4ICogcWJ5IC0gcWF5ICogcWJ4O1xuICAgIHRoaXMudyA9IHFhdyAqIHFidyAtIHFheCAqIHFieCAtIHFheSAqIHFieSAtIHFheiAqIHFiejtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGludmVyc2U6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnggKj0gLTE7XG4gICAgdGhpcy55ICo9IC0xO1xuICAgIHRoaXMueiAqPSAtMTtcblxuICAgIHRoaXMubm9ybWFsaXplKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbCA9IE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53ICk7XG5cbiAgICBpZiAoIGwgPT09IDAgKSB7XG4gICAgICB0aGlzLnggPSAwO1xuICAgICAgdGhpcy55ID0gMDtcbiAgICAgIHRoaXMueiA9IDA7XG4gICAgICB0aGlzLncgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBsID0gMSAvIGw7XG5cbiAgICAgIHRoaXMueCA9IHRoaXMueCAqIGw7XG4gICAgICB0aGlzLnkgPSB0aGlzLnkgKiBsO1xuICAgICAgdGhpcy56ID0gdGhpcy56ICogbDtcbiAgICAgIHRoaXMudyA9IHRoaXMudyAqIGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgc2xlcnA6IGZ1bmN0aW9uICggcWIsIHQgKSB7XG4gICAgaWYgKCB0ID09PSAwICkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKCB0ID09PSAxICkgcmV0dXJuIHRoaXMuY29weSggcWIgKTtcblxuICAgIHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56LCB3ID0gdGhpcy53O1xuXG4gICAgLy8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9yZWFsTm9ybWVkQWxnZWJyYS9xdWF0ZXJuaW9ucy9zbGVycC9cblxuICAgIHZhciBjb3NIYWxmVGhldGEgPSB3ICogcWIudyArIHggKiBxYi54ICsgeSAqIHFiLnkgKyB6ICogcWIuejtcblxuICAgIGlmICggY29zSGFsZlRoZXRhIDwgMCApIHtcbiAgICAgIHRoaXMudyA9IC0gcWIudztcbiAgICAgIHRoaXMueCA9IC0gcWIueDtcbiAgICAgIHRoaXMueSA9IC0gcWIueTtcbiAgICAgIHRoaXMueiA9IC0gcWIuejtcblxuICAgICAgY29zSGFsZlRoZXRhID0gLSBjb3NIYWxmVGhldGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29weSggcWIgKTtcbiAgICB9XG5cbiAgICBpZiAoIGNvc0hhbGZUaGV0YSA+PSAxLjAgKSB7XG4gICAgICB0aGlzLncgPSB3O1xuICAgICAgdGhpcy54ID0geDtcbiAgICAgIHRoaXMueSA9IHk7XG4gICAgICB0aGlzLnogPSB6O1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgaGFsZlRoZXRhID0gTWF0aC5hY29zKCBjb3NIYWxmVGhldGEgKTtcbiAgICB2YXIgc2luSGFsZlRoZXRhID0gTWF0aC5zcXJ0KCAxLjAgLSBjb3NIYWxmVGhldGEgKiBjb3NIYWxmVGhldGEgKTtcblxuICAgIGlmICggTWF0aC5hYnMoIHNpbkhhbGZUaGV0YSApIDwgMC4wMDEgKSB7XG4gICAgICB0aGlzLncgPSAwLjUgKiAoIHcgKyB0aGlzLncgKTtcbiAgICAgIHRoaXMueCA9IDAuNSAqICggeCArIHRoaXMueCApO1xuICAgICAgdGhpcy55ID0gMC41ICogKCB5ICsgdGhpcy55ICk7XG4gICAgICB0aGlzLnogPSAwLjUgKiAoIHogKyB0aGlzLnogKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHJhdGlvQSA9IE1hdGguc2luKCAoIDEgLSB0ICkgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YSxcbiAgICByYXRpb0IgPSBNYXRoLnNpbiggdCAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhO1xuXG4gICAgdGhpcy53ID0gKCB3ICogcmF0aW9BICsgdGhpcy53ICogcmF0aW9CICk7XG4gICAgdGhpcy54ID0gKCB4ICogcmF0aW9BICsgdGhpcy54ICogcmF0aW9CICk7XG4gICAgdGhpcy55ID0gKCB5ICogcmF0aW9BICsgdGhpcy55ICogcmF0aW9CICk7XG4gICAgdGhpcy56ID0gKCB6ICogcmF0aW9BICsgdGhpcy56ICogcmF0aW9CICk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBzZXRGcm9tVW5pdFZlY3RvcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBodHRwOi8vbG9sZW5naW5lLm5ldC9ibG9nLzIwMTQvMDIvMjQvcXVhdGVybmlvbi1mcm9tLXR3by12ZWN0b3JzLWZpbmFsXG4gICAgLy8gYXNzdW1lcyBkaXJlY3Rpb24gdmVjdG9ycyB2RnJvbSBhbmQgdlRvIGFyZSBub3JtYWxpemVkXG5cbiAgICB2YXIgdjEsIHI7XG4gICAgdmFyIEVQUyA9IDAuMDAwMDAxO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICggdkZyb20sIHZUbyApIHtcbiAgICAgIGlmICggdjEgPT09IHVuZGVmaW5lZCApIHYxID0gbmV3IE1hdGhVdGlsLlZlY3RvcjMoKTtcblxuICAgICAgciA9IHZGcm9tLmRvdCggdlRvICkgKyAxO1xuXG4gICAgICBpZiAoIHIgPCBFUFMgKSB7XG4gICAgICAgIHIgPSAwO1xuXG4gICAgICAgIGlmICggTWF0aC5hYnMoIHZGcm9tLnggKSA+IE1hdGguYWJzKCB2RnJvbS56ICkgKSB7XG4gICAgICAgICAgdjEuc2V0KCAtIHZGcm9tLnksIHZGcm9tLngsIDAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2MS5zZXQoIDAsIC0gdkZyb20ueiwgdkZyb20ueSApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2MS5jcm9zc1ZlY3RvcnMoIHZGcm9tLCB2VG8gKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy54ID0gdjEueDtcbiAgICAgIHRoaXMueSA9IHYxLnk7XG4gICAgICB0aGlzLnogPSB2MS56O1xuICAgICAgdGhpcy53ID0gcjtcblxuICAgICAgdGhpcy5ub3JtYWxpemUoKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9KCksXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGhVdGlsO1xuXG59LHt9XSwxNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgVlJEaXNwbGF5ID0gX2RlcmVxXygnLi9iYXNlLmpzJykuVlJEaXNwbGF5O1xudmFyIE1hdGhVdGlsID0gX2RlcmVxXygnLi9tYXRoLXV0aWwuanMnKTtcbnZhciBVdGlsID0gX2RlcmVxXygnLi91dGlsLmpzJyk7XG5cbi8vIEhvdyBtdWNoIHRvIHJvdGF0ZSBwZXIga2V5IHN0cm9rZS5cbnZhciBLRVlfU1BFRUQgPSAwLjE1O1xudmFyIEtFWV9BTklNQVRJT05fRFVSQVRJT04gPSA4MDtcblxuLy8gSG93IG11Y2ggdG8gcm90YXRlIGZvciBtb3VzZSBldmVudHMuXG52YXIgTU9VU0VfU1BFRURfWCA9IDAuNTtcbnZhciBNT1VTRV9TUEVFRF9ZID0gMC4zO1xuXG4vKipcbiAqIFZSRGlzcGxheSBiYXNlZCBvbiBtb3VzZSBhbmQga2V5Ym9hcmQgaW5wdXQuIERlc2lnbmVkIGZvciBkZXNrdG9wcy9sYXB0b3BzXG4gKiB3aGVyZSBvcmllbnRhdGlvbiBldmVudHMgYXJlbid0IHN1cHBvcnRlZC4gQ2Fubm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIE1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkoKSB7XG4gIHRoaXMuZGlzcGxheU5hbWUgPSAnTW91c2UgYW5kIEtleWJvYXJkIFZSRGlzcGxheSAod2VidnItcG9seWZpbGwpJztcblxuICB0aGlzLmNhcGFiaWxpdGllcy5oYXNPcmllbnRhdGlvbiA9IHRydWU7XG5cbiAgLy8gQXR0YWNoIHRvIG1vdXNlIGFuZCBrZXlib2FyZCBldmVudHMuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleURvd25fLmJpbmQodGhpcykpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZV8uYmluZCh0aGlzKSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duXy5iaW5kKHRoaXMpKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcF8uYmluZCh0aGlzKSk7XG5cbiAgLy8gXCJQcml2YXRlXCIgbWVtYmVycy5cbiAgdGhpcy5waGlfID0gMDtcbiAgdGhpcy50aGV0YV8gPSAwO1xuXG4gIC8vIFZhcmlhYmxlcyBmb3Iga2V5Ym9hcmQtYmFzZWQgcm90YXRpb24gYW5pbWF0aW9uLlxuICB0aGlzLnRhcmdldEFuZ2xlXyA9IG51bGw7XG4gIHRoaXMuYW5nbGVBbmltYXRpb25fID0gbnVsbDtcblxuICAvLyBTdGF0ZSB2YXJpYWJsZXMgZm9yIGNhbGN1bGF0aW9ucy5cbiAgdGhpcy5vcmllbnRhdGlvbl8gPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuXG4gIC8vIFZhcmlhYmxlcyBmb3IgbW91c2UtYmFzZWQgcm90YXRpb24uXG4gIHRoaXMucm90YXRlU3RhcnRfID0gbmV3IE1hdGhVdGlsLlZlY3RvcjIoKTtcbiAgdGhpcy5yb3RhdGVFbmRfID0gbmV3IE1hdGhVdGlsLlZlY3RvcjIoKTtcbiAgdGhpcy5yb3RhdGVEZWx0YV8gPSBuZXcgTWF0aFV0aWwuVmVjdG9yMigpO1xuICB0aGlzLmlzRHJhZ2dpbmdfID0gZmFsc2U7XG5cbiAgdGhpcy5vcmllbnRhdGlvbk91dF8gPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xufVxuTW91c2VLZXlib2FyZFZSRGlzcGxheS5wcm90b3R5cGUgPSBuZXcgVlJEaXNwbGF5KCk7XG5cbk1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkucHJvdG90eXBlLmdldEltbWVkaWF0ZVBvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vcmllbnRhdGlvbl8uc2V0RnJvbUV1bGVyWVhaKHRoaXMucGhpXywgdGhpcy50aGV0YV8sIDApO1xuXG4gIHRoaXMub3JpZW50YXRpb25PdXRfWzBdID0gdGhpcy5vcmllbnRhdGlvbl8ueDtcbiAgdGhpcy5vcmllbnRhdGlvbk91dF9bMV0gPSB0aGlzLm9yaWVudGF0aW9uXy55O1xuICB0aGlzLm9yaWVudGF0aW9uT3V0X1syXSA9IHRoaXMub3JpZW50YXRpb25fLno7XG4gIHRoaXMub3JpZW50YXRpb25PdXRfWzNdID0gdGhpcy5vcmllbnRhdGlvbl8udztcblxuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uOiBudWxsLFxuICAgIG9yaWVudGF0aW9uOiB0aGlzLm9yaWVudGF0aW9uT3V0XyxcbiAgICBsaW5lYXJWZWxvY2l0eTogbnVsbCxcbiAgICBsaW5lYXJBY2NlbGVyYXRpb246IG51bGwsXG4gICAgYW5ndWxhclZlbG9jaXR5OiBudWxsLFxuICAgIGFuZ3VsYXJBY2NlbGVyYXRpb246IG51bGxcbiAgfTtcbn07XG5cbk1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkucHJvdG90eXBlLm9uS2V5RG93bl8gPSBmdW5jdGlvbihlKSB7XG4gIC8vIFRyYWNrIFdBU0QgYW5kIGFycm93IGtleXMuXG4gIGlmIChlLmtleUNvZGUgPT0gMzgpIHsgLy8gVXAga2V5LlxuICAgIHRoaXMuYW5pbWF0ZVBoaV8odGhpcy5waGlfICsgS0VZX1NQRUVEKTtcbiAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT0gMzkpIHsgLy8gUmlnaHQga2V5LlxuICAgIHRoaXMuYW5pbWF0ZVRoZXRhXyh0aGlzLnRoZXRhXyAtIEtFWV9TUEVFRCk7XG4gIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09IDQwKSB7IC8vIERvd24ga2V5LlxuICAgIHRoaXMuYW5pbWF0ZVBoaV8odGhpcy5waGlfIC0gS0VZX1NQRUVEKTtcbiAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT0gMzcpIHsgLy8gTGVmdCBrZXkuXG4gICAgdGhpcy5hbmltYXRlVGhldGFfKHRoaXMudGhldGFfICsgS0VZX1NQRUVEKTtcbiAgfVxufTtcblxuTW91c2VLZXlib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuYW5pbWF0ZVRoZXRhXyA9IGZ1bmN0aW9uKHRhcmdldEFuZ2xlKSB7XG4gIHRoaXMuYW5pbWF0ZUtleVRyYW5zaXRpb25zXygndGhldGFfJywgdGFyZ2V0QW5nbGUpO1xufTtcblxuTW91c2VLZXlib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuYW5pbWF0ZVBoaV8gPSBmdW5jdGlvbih0YXJnZXRBbmdsZSkge1xuICAvLyBQcmV2ZW50IGxvb2tpbmcgdG9vIGZhciB1cCBvciBkb3duLlxuICB0YXJnZXRBbmdsZSA9IFV0aWwuY2xhbXAodGFyZ2V0QW5nbGUsIC1NYXRoLlBJLzIsIE1hdGguUEkvMik7XG4gIHRoaXMuYW5pbWF0ZUtleVRyYW5zaXRpb25zXygncGhpXycsIHRhcmdldEFuZ2xlKTtcbn07XG5cbi8qKlxuICogU3RhcnQgYW4gYW5pbWF0aW9uIHRvIHRyYW5zaXRpb24gYW4gYW5nbGUgZnJvbSBvbmUgdmFsdWUgdG8gYW5vdGhlci5cbiAqL1xuTW91c2VLZXlib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuYW5pbWF0ZUtleVRyYW5zaXRpb25zXyA9IGZ1bmN0aW9uKGFuZ2xlTmFtZSwgdGFyZ2V0QW5nbGUpIHtcbiAgLy8gSWYgYW4gYW5pbWF0aW9uIGlzIGN1cnJlbnRseSBydW5uaW5nLCBjYW5jZWwgaXQuXG4gIGlmICh0aGlzLmFuZ2xlQW5pbWF0aW9uXykge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5nbGVBbmltYXRpb25fKTtcbiAgfVxuICB2YXIgc3RhcnRBbmdsZSA9IHRoaXNbYW5nbGVOYW1lXTtcbiAgdmFyIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XG4gIC8vIFNldCB1cCBhbiBpbnRlcnZhbCB0aW1lciB0byBwZXJmb3JtIHRoZSBhbmltYXRpb24uXG4gIHRoaXMuYW5nbGVBbmltYXRpb25fID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgLy8gT25jZSB3ZSdyZSBmaW5pc2hlZCB0aGUgYW5pbWF0aW9uLCB3ZSdyZSBkb25lLlxuICAgIHZhciBlbGFwc2VkID0gbmV3IERhdGUoKSAtIHN0YXJ0VGltZTtcbiAgICBpZiAoZWxhcHNlZCA+PSBLRVlfQU5JTUFUSU9OX0RVUkFUSU9OKSB7XG4gICAgICB0aGlzW2FuZ2xlTmFtZV0gPSB0YXJnZXRBbmdsZTtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5nbGVBbmltYXRpb25fKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbG9vcCB3aXRoIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgIHRoaXMuYW5nbGVBbmltYXRpb25fID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUuYmluZCh0aGlzKSlcbiAgICAvLyBMaW5lYXJseSBpbnRlcnBvbGF0ZSB0aGUgYW5nbGUgc29tZSBhbW91bnQuXG4gICAgdmFyIHBlcmNlbnQgPSBlbGFwc2VkIC8gS0VZX0FOSU1BVElPTl9EVVJBVElPTjtcbiAgICB0aGlzW2FuZ2xlTmFtZV0gPSBzdGFydEFuZ2xlICsgKHRhcmdldEFuZ2xlIC0gc3RhcnRBbmdsZSkgKiBwZXJjZW50O1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuTW91c2VLZXlib2FyZFZSRGlzcGxheS5wcm90b3R5cGUub25Nb3VzZURvd25fID0gZnVuY3Rpb24oZSkge1xuICB0aGlzLnJvdGF0ZVN0YXJ0Xy5zZXQoZS5jbGllbnRYLCBlLmNsaWVudFkpO1xuICB0aGlzLmlzRHJhZ2dpbmdfID0gdHJ1ZTtcbn07XG5cbi8vIFZlcnkgc2ltaWxhciB0byBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9tcmZsaXgvODM1MTAyMFxuTW91c2VLZXlib2FyZFZSRGlzcGxheS5wcm90b3R5cGUub25Nb3VzZU1vdmVfID0gZnVuY3Rpb24oZSkge1xuICBpZiAoIXRoaXMuaXNEcmFnZ2luZ18gJiYgIXRoaXMuaXNQb2ludGVyTG9ja2VkXygpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIFN1cHBvcnQgcG9pbnRlciBsb2NrIEFQSS5cbiAgaWYgKHRoaXMuaXNQb2ludGVyTG9ja2VkXygpKSB7XG4gICAgdmFyIG1vdmVtZW50WCA9IGUubW92ZW1lbnRYIHx8IGUubW96TW92ZW1lbnRYIHx8IDA7XG4gICAgdmFyIG1vdmVtZW50WSA9IGUubW92ZW1lbnRZIHx8IGUubW96TW92ZW1lbnRZIHx8IDA7XG4gICAgdGhpcy5yb3RhdGVFbmRfLnNldCh0aGlzLnJvdGF0ZVN0YXJ0Xy54IC0gbW92ZW1lbnRYLCB0aGlzLnJvdGF0ZVN0YXJ0Xy55IC0gbW92ZW1lbnRZKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJvdGF0ZUVuZF8uc2V0KGUuY2xpZW50WCwgZS5jbGllbnRZKTtcbiAgfVxuICAvLyBDYWxjdWxhdGUgaG93IG11Y2ggd2UgbW92ZWQgaW4gbW91c2Ugc3BhY2UuXG4gIHRoaXMucm90YXRlRGVsdGFfLnN1YlZlY3RvcnModGhpcy5yb3RhdGVFbmRfLCB0aGlzLnJvdGF0ZVN0YXJ0Xyk7XG4gIHRoaXMucm90YXRlU3RhcnRfLmNvcHkodGhpcy5yb3RhdGVFbmRfKTtcblxuICAvLyBLZWVwIHRyYWNrIG9mIHRoZSBjdW11bGF0aXZlIGV1bGVyIGFuZ2xlcy5cbiAgdGhpcy5waGlfICs9IDIgKiBNYXRoLlBJICogdGhpcy5yb3RhdGVEZWx0YV8ueSAvIHNjcmVlbi5oZWlnaHQgKiBNT1VTRV9TUEVFRF9ZO1xuICB0aGlzLnRoZXRhXyArPSAyICogTWF0aC5QSSAqIHRoaXMucm90YXRlRGVsdGFfLnggLyBzY3JlZW4ud2lkdGggKiBNT1VTRV9TUEVFRF9YO1xuXG4gIC8vIFByZXZlbnQgbG9va2luZyB0b28gZmFyIHVwIG9yIGRvd24uXG4gIHRoaXMucGhpXyA9IFV0aWwuY2xhbXAodGhpcy5waGlfLCAtTWF0aC5QSS8yLCBNYXRoLlBJLzIpO1xufTtcblxuTW91c2VLZXlib2FyZFZSRGlzcGxheS5wcm90b3R5cGUub25Nb3VzZVVwXyA9IGZ1bmN0aW9uKGUpIHtcbiAgdGhpcy5pc0RyYWdnaW5nXyA9IGZhbHNlO1xufTtcblxuTW91c2VLZXlib2FyZFZSRGlzcGxheS5wcm90b3R5cGUuaXNQb2ludGVyTG9ja2VkXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZWwgPSBkb2N1bWVudC5wb2ludGVyTG9ja0VsZW1lbnQgfHwgZG9jdW1lbnQubW96UG9pbnRlckxvY2tFbGVtZW50IHx8XG4gICAgICBkb2N1bWVudC53ZWJraXRQb2ludGVyTG9ja0VsZW1lbnQ7XG4gIHJldHVybiBlbCAhPT0gdW5kZWZpbmVkO1xufTtcblxuTW91c2VLZXlib2FyZFZSRGlzcGxheS5wcm90b3R5cGUucmVzZXRQb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGhpXyA9IDA7XG4gIHRoaXMudGhldGFfID0gMDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTW91c2VLZXlib2FyZFZSRGlzcGxheTtcblxufSx7XCIuL2Jhc2UuanNcIjoyLFwiLi9tYXRoLXV0aWwuanNcIjoxNCxcIi4vdXRpbC5qc1wiOjIyfV0sMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIFV0aWwgPSBfZGVyZXFfKCcuL3V0aWwuanMnKTtcblxuZnVuY3Rpb24gUm90YXRlSW5zdHJ1Y3Rpb25zKCkge1xuICB0aGlzLmxvYWRJY29uXygpO1xuXG4gIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHZhciBzID0gb3ZlcmxheS5zdHlsZTtcbiAgcy5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIHMudG9wID0gMDtcbiAgcy5yaWdodCA9IDA7XG4gIHMuYm90dG9tID0gMDtcbiAgcy5sZWZ0ID0gMDtcbiAgcy5iYWNrZ3JvdW5kQ29sb3IgPSAnZ3JheSc7XG4gIHMuZm9udEZhbWlseSA9ICdzYW5zLXNlcmlmJztcbiAgLy8gRm9yY2UgdGhpcyB0byBiZSBhYm92ZSB0aGUgZnVsbHNjcmVlbiBjYW52YXMsIHdoaWNoIGlzIGF0IHpJbmRleDogOTk5OTk5LlxuICBzLnpJbmRleCA9IDEwMDAwMDA7XG5cbiAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICBpbWcuc3JjID0gdGhpcy5pY29uO1xuICB2YXIgcyA9IGltZy5zdHlsZTtcbiAgcy5tYXJnaW5MZWZ0ID0gJzI1JSc7XG4gIHMubWFyZ2luVG9wID0gJzI1JSc7XG4gIHMud2lkdGggPSAnNTAlJztcbiAgb3ZlcmxheS5hcHBlbmRDaGlsZChpbWcpO1xuXG4gIHZhciB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHZhciBzID0gdGV4dC5zdHlsZTtcbiAgcy50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgcy5mb250U2l6ZSA9ICcxNnB4JztcbiAgcy5saW5lSGVpZ2h0ID0gJzI0cHgnO1xuICBzLm1hcmdpbiA9ICcyNHB4IDI1JSc7XG4gIHMud2lkdGggPSAnNTAlJztcbiAgdGV4dC5pbm5lckhUTUwgPSAnUGxhY2UgeW91ciBwaG9uZSBpbnRvIHlvdXIgQ2FyZGJvYXJkIHZpZXdlci4nO1xuICBvdmVybGF5LmFwcGVuZENoaWxkKHRleHQpO1xuXG4gIHZhciBzbmFja2JhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB2YXIgcyA9IHNuYWNrYmFyLnN0eWxlO1xuICBzLmJhY2tncm91bmRDb2xvciA9ICcjQ0ZEOERDJztcbiAgcy5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIHMuYm90dG9tID0gMDtcbiAgcy53aWR0aCA9ICcxMDAlJztcbiAgcy5oZWlnaHQgPSAnNDhweCc7XG4gIHMucGFkZGluZyA9ICcxNHB4IDI0cHgnO1xuICBzLmJveFNpemluZyA9ICdib3JkZXItYm94JztcbiAgcy5jb2xvciA9ICcjNjU2QTZCJztcbiAgb3ZlcmxheS5hcHBlbmRDaGlsZChzbmFja2Jhcik7XG5cbiAgdmFyIHNuYWNrYmFyVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzbmFja2JhclRleHQuc3R5bGUuZmxvYXQgPSAnbGVmdCc7XG4gIHNuYWNrYmFyVGV4dC5pbm5lckhUTUwgPSAnTm8gQ2FyZGJvYXJkIHZpZXdlcj8nO1xuXG4gIHZhciBzbmFja2JhckJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgc25hY2tiYXJCdXR0b24uaHJlZiA9ICdodHRwczovL3d3dy5nb29nbGUuY29tL2dldC9jYXJkYm9hcmQvZ2V0LWNhcmRib2FyZC8nO1xuICBzbmFja2JhckJ1dHRvbi5pbm5lckhUTUwgPSAnZ2V0IG9uZSc7XG4gIHNuYWNrYmFyQnV0dG9uLnRhcmdldCA9ICdfYmxhbmsnO1xuICB2YXIgcyA9IHNuYWNrYmFyQnV0dG9uLnN0eWxlO1xuICBzLmZsb2F0ID0gJ3JpZ2h0JztcbiAgcy5mb250V2VpZ2h0ID0gNjAwO1xuICBzLnRleHRUcmFuc2Zvcm0gPSAndXBwZXJjYXNlJztcbiAgcy5ib3JkZXJMZWZ0ID0gJzFweCBzb2xpZCBncmF5JztcbiAgcy5wYWRkaW5nTGVmdCA9ICcyNHB4JztcbiAgcy50ZXh0RGVjb3JhdGlvbiA9ICdub25lJztcbiAgcy5jb2xvciA9ICcjNjU2QTZCJztcblxuICBzbmFja2Jhci5hcHBlbmRDaGlsZChzbmFja2JhclRleHQpO1xuICBzbmFja2Jhci5hcHBlbmRDaGlsZChzbmFja2JhckJ1dHRvbik7XG5cbiAgdGhpcy5vdmVybGF5ID0gb3ZlcmxheTtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcblxuICB0aGlzLmhpZGUoKTtcbn1cblxuUm90YXRlSW5zdHJ1Y3Rpb25zLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24ocGFyZW50KSB7XG4gIGlmICghcGFyZW50ICYmICF0aGlzLm92ZXJsYXkucGFyZW50RWxlbWVudCkge1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5vdmVybGF5KTtcbiAgfSBlbHNlIGlmIChwYXJlbnQpIHtcbiAgICBpZiAodGhpcy5vdmVybGF5LnBhcmVudEVsZW1lbnQgJiYgdGhpcy5vdmVybGF5LnBhcmVudEVsZW1lbnQgIT0gcGFyZW50KVxuICAgICAgdGhpcy5vdmVybGF5LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5vdmVybGF5KTtcblxuICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLm92ZXJsYXkpO1xuICB9XG5cbiAgdGhpcy5vdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gIHZhciBpbWcgPSB0aGlzLm92ZXJsYXkucXVlcnlTZWxlY3RvcignaW1nJyk7XG4gIHZhciBzID0gaW1nLnN0eWxlO1xuXG4gIGlmIChVdGlsLmlzTGFuZHNjYXBlTW9kZSgpKSB7XG4gICAgcy53aWR0aCA9ICcyMCUnO1xuICAgIHMubWFyZ2luTGVmdCA9ICc0MCUnO1xuICAgIHMubWFyZ2luVG9wID0gJzMlJztcbiAgfSBlbHNlIHtcbiAgICBzLndpZHRoID0gJzUwJSc7XG4gICAgcy5tYXJnaW5MZWZ0ID0gJzI1JSc7XG4gICAgcy5tYXJnaW5Ub3AgPSAnMjUlJztcbiAgfVxufTtcblxuUm90YXRlSW5zdHJ1Y3Rpb25zLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufTtcblxuUm90YXRlSW5zdHJ1Y3Rpb25zLnByb3RvdHlwZS5zaG93VGVtcG9yYXJpbHkgPSBmdW5jdGlvbihtcywgcGFyZW50KSB7XG4gIHRoaXMuc2hvdyhwYXJlbnQpO1xuICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCh0aGlzLmhpZGUuYmluZCh0aGlzKSwgbXMpO1xufTtcblxuUm90YXRlSW5zdHJ1Y3Rpb25zLnByb3RvdHlwZS5kaXNhYmxlU2hvd1RlbXBvcmFyaWx5ID0gZnVuY3Rpb24oKSB7XG4gIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbn07XG5cblJvdGF0ZUluc3RydWN0aW9ucy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGlzYWJsZVNob3dUZW1wb3JhcmlseSgpO1xuICAvLyBJbiBwb3J0cmFpdCBWUiBtb2RlLCB0ZWxsIHRoZSB1c2VyIHRvIHJvdGF0ZSB0byBsYW5kc2NhcGUuIE90aGVyd2lzZSwgaGlkZVxuICAvLyB0aGUgaW5zdHJ1Y3Rpb25zLlxuICBpZiAoIVV0aWwuaXNMYW5kc2NhcGVNb2RlKCkgJiYgVXRpbC5pc01vYmlsZSgpKSB7XG4gICAgdGhpcy5zaG93KCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5oaWRlKCk7XG4gIH1cbn07XG5cblJvdGF0ZUluc3RydWN0aW9ucy5wcm90b3R5cGUubG9hZEljb25fID0gZnVuY3Rpb24oKSB7XG4gIC8vIEVuY29kZWQgYXNzZXRfc3JjL3JvdGF0ZS1pbnN0cnVjdGlvbnMuc3ZnXG4gIHRoaXMuaWNvbiA9IFV0aWwuYmFzZTY0KCdpbWFnZS9zdmcreG1sJywgJ1BEOTRiV3dnZG1WeWMybHZiajBpTVM0d0lpQmxibU52WkdsdVp6MGlWVlJHTFRnaUlITjBZVzVrWVd4dmJtVTlJbTV2SWo4K0NqeHpkbWNnZDJsa2RHZzlJakU1T0hCNElpQm9aV2xuYUhROUlqSTBNSEI0SWlCMmFXVjNRbTk0UFNJd0lEQWdNVGs0SURJME1DSWdkbVZ5YzJsdmJqMGlNUzR4SWlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhodGJHNXpPbmhzYVc1clBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHhPVGs1TDNoc2FXNXJJaUI0Yld4dWN6cHphMlYwWTJnOUltaDBkSEE2THk5M2QzY3VZbTlvWlcxcFlXNWpiMlJwYm1jdVkyOXRMM05yWlhSamFDOXVjeUkrQ2lBZ0lDQThJUzB0SUVkbGJtVnlZWFJ2Y2pvZ1UydGxkR05vSURNdU15NHpJQ2d4TWpBNE1Ta2dMU0JvZEhSd09pOHZkM2QzTG1KdmFHVnRhV0Z1WTI5a2FXNW5MbU52YlM5emEyVjBZMmdnTFMwK0NpQWdJQ0E4ZEdsMGJHVStkSEpoYm5OcGRHbHZiand2ZEdsMGJHVStDaUFnSUNBOFpHVnpZejVEY21WaGRHVmtJSGRwZEdnZ1UydGxkR05vTGp3dlpHVnpZejRLSUNBZ0lEeGtaV1p6UGp3dlpHVm1jejRLSUNBZ0lEeG5JR2xrUFNKUVlXZGxMVEVpSUhOMGNtOXJaVDBpYm05dVpTSWdjM1J5YjJ0bExYZHBaSFJvUFNJeElpQm1hV3hzUFNKdWIyNWxJaUJtYVd4c0xYSjFiR1U5SW1WMlpXNXZaR1FpSUhOclpYUmphRHAwZVhCbFBTSk5VMUJoWjJVaVBnb2dJQ0FnSUNBZ0lEeG5JR2xrUFNKMGNtRnVjMmwwYVc5dUlpQnphMlYwWTJnNmRIbHdaVDBpVFZOQmNuUmliMkZ5WkVkeWIzVndJajRLSUNBZ0lDQWdJQ0FnSUNBZ1BHY2dhV1E5SWtsdGNHOXlkR1ZrTFV4aGVXVnljeTFEYjNCNUxUUXRLeTFKYlhCdmNuUmxaQzFNWVhsbGNuTXRRMjl3ZVMwckxVbHRjRzl5ZEdWa0xVeGhlV1Z5Y3kxRGIzQjVMVEl0UTI5d2VTSWdjMnRsZEdOb09uUjVjR1U5SWsxVFRHRjVaWEpIY205MWNDSStDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThaeUJwWkQwaVNXMXdiM0owWldRdFRHRjVaWEp6TFVOdmNIa3ROQ0lnZEhKaGJuTm1iM0p0UFNKMGNtRnVjMnhoZEdVb01DNHdNREF3TURBc0lERXdOeTR3TURBd01EQXBJaUJ6YTJWMFkyZzZkSGx3WlQwaVRWTlRhR0Z3WlVkeWIzVndJajRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1UUTVMall5TlN3eUxqVXlOeUJETVRRNUxqWXlOU3d5TGpVeU55QXhOVFV1T0RBMUxEWXVNRGsySURFMU5pNHpOaklzTmk0ME1UZ2dUREUxTmk0ek5qSXNOeTR6TURRZ1F6RTFOaTR6TmpJc055NDBPREVnTVRVMkxqTTNOU3czTGpZMk5DQXhOVFl1TkN3M0xqZzFNeUJETVRVMkxqUXhMRGN1T1RNMElERTFOaTQwTWl3NExqQXhOU0F4TlRZdU5ESTNMRGd1TURrMUlFTXhOVFl1TlRZM0xEa3VOVEVnTVRVM0xqUXdNU3d4TVM0d09UTWdNVFU0TGpVek1pd3hNaTR3T1RRZ1RERTJOQzR5TlRJc01UY3VNVFUySUV3eE5qUXVNek16TERFM0xqQTJOaUJETVRZMExqTXpNeXd4Tnk0d05qWWdNVFk0TGpjeE5Td3hOQzQxTXpZZ01UWTVMalUyT0N3eE5DNHdORElnUXpFM01TNHdNalVzTVRRdU9EZ3pJREU1TlM0MU16Z3NNamt1TURNMUlERTVOUzQxTXpnc01qa3VNRE0xSUV3eE9UVXVOVE00TERnekxqQXpOaUJETVRrMUxqVXpPQ3c0TXk0NE1EY2dNVGsxTGpFMU1pdzROQzR5TlRNZ01UazBMalU1TERnMExqSTFNeUJETVRrMExqTTFOeXc0TkM0eU5UTWdNVGswTGpBNU5TdzROQzR4TnpjZ01Ua3pMamd4T0N3NE5DNHdNVGNnVERFMk9TNDROVEVzTnpBdU1UYzVJRXd4TmprdU9ETTNMRGN3TGpJd015Qk1NVFF5TGpVeE5TdzROUzQ1TnpnZ1RERTBNUzQyTmpVc09EUXVOalUxSUVNeE16WXVPVE0wTERnekxqRXlOaUF4TXpFdU9URTNMRGd4TGpreE5TQXhNall1TnpFMExEZ3hMakEwTlNCRE1USTJMamN3T1N3NE1TNHdOaUF4TWpZdU56QTNMRGd4TGpBMk9TQXhNall1TnpBM0xEZ3hMakEyT1NCTU1USXhMalkwTERrNExqQXpJRXd4TVRNdU56UTVMREV3TWk0MU9EWWdUREV4TXk0M01USXNNVEF5TGpVeU15Qk1NVEV6TGpjeE1pd3hNekF1TVRFeklFTXhNVE11TnpFeUxERXpNQzQ0T0RVZ01URXpMak15Tml3eE16RXVNek1nTVRFeUxqYzJOQ3d4TXpFdU16TWdRekV4TWk0MU16SXNNVE14TGpNeklERXhNaTR5Tmprc01UTXhMakkxTkNBeE1URXVPVGt5TERFek1TNHdPVFFnVERZNUxqVXhPU3d4TURZdU5UY3lJRU0yT0M0MU5qa3NNVEEyTGpBeU15QTJOeTQzT1Rrc01UQTBMalk1TlNBMk55NDNPVGtzTVRBekxqWXdOU0JNTmpjdU56azVMREV3TWk0MU55Qk1OamN1TnpjNExERXdNaTQyTVRjZ1F6WTNMakkzTERFd01pNHpPVE1nTmpZdU5qUTRMREV3TWk0eU5Ea2dOalV1T1RZeUxERXdNaTR5TVRnZ1F6WTFMamczTlN3eE1ESXVNakUwSURZMUxqYzRPQ3d4TURJdU1qRXlJRFkxTGpjd01Td3hNREl1TWpFeUlFTTJOUzQyTURZc01UQXlMakl4TWlBMk5TNDFNVEVzTVRBeUxqSXhOU0EyTlM0ME1UWXNNVEF5TGpJeE9TQkROalV1TVRrMUxERXdNaTR5TWprZ05qUXVPVGMwTERFd01pNHlNelVnTmpRdU56VTBMREV3TWk0eU16VWdRelkwTGpNek1Td3hNREl1TWpNMUlEWXpMamt4TVN3eE1ESXVNakUySURZekxqUTVPQ3d4TURJdU1UYzRJRU0yTVM0NE5ETXNNVEF5TGpBeU5TQTJNQzR5T1Rnc01UQXhMalUzT0NBMU9TNHdPVFFzTVRBd0xqZzRNaUJNTVRJdU5URTRMRGN6TGprNU1pQk1NVEl1TlRJekxEYzBMakF3TkNCTU1pNHlORFVzTlRVdU1qVTBJRU14TGpJME5DdzFNeTQwTWpjZ01pNHdNRFFzTlRFdU1ETTRJRE11T1RRekxEUTVMamt4T0NCTU5Ua3VPVFUwTERFM0xqVTNNeUJETmpBdU5qSTJMREUzTGpFNE5TQTJNUzR6TlN3eE55NHdNREVnTmpJdU1EVXpMREUzTGpBd01TQkROak11TXpjNUxERTNMakF3TVNBMk5DNDJNalVzTVRjdU5qWWdOalV1TWpnc01UZ3VPRFUwSUV3Mk5TNHlPRFVzTVRndU9EVXhJRXcyTlM0MU1USXNNVGt1TWpZMElFdzJOUzQxTURZc01Ua3VNalk0SUVNMk5TNDVNRGtzTWpBdU1EQXpJRFkyTGpRd05Td3lNQzQyT0NBMk5pNDVPRE1zTWpFdU1qZzJJRXcyTnk0eU5pd3lNUzQxTlRZZ1F6WTVMakUzTkN3eU15NDBNRFlnTnpFdU56STRMREkwTGpNMU55QTNOQzR6TnpNc01qUXVNelUzSUVNM05pNHpNaklzTWpRdU16VTNJRGM0TGpNeU1Td3lNeTQ0TkNBNE1DNHhORGdzTWpJdU56ZzFJRU00TUM0eE5qRXNNakl1TnpnMUlEZzNMalEyTnl3eE9DNDFOallnT0RjdU5EWTNMREU0TGpVMk5pQkRPRGd1TVRNNUxERTRMakUzT0NBNE9DNDROak1zTVRjdU9UazBJRGc1TGpVMk5pd3hOeTQ1T1RRZ1F6a3dMamc1TWl3eE55NDVPVFFnT1RJdU1UTTRMREU0TGpZMU1pQTVNaTQzT1RJc01Ua3VPRFEzSUV3NU5pNHdORElzTWpVdU56YzFJRXc1Tmk0d05qUXNNalV1TnpVM0lFd3hNREl1T0RRNUxESTVMalkzTkNCTU1UQXlMamMwTkN3eU9TNDBPVElnVERFME9TNDJNalVzTWk0MU1qY2dUVEUwT1M0Mk1qVXNNQzQ0T1RJZ1F6RTBPUzR6TkRNc01DNDRPVElnTVRRNUxqQTJNaXd3TGprMk5TQXhORGd1T0RFc01TNHhNU0JNTVRBeUxqWTBNU3d5Tnk0Mk5qWWdURGszTGpJek1Td3lOQzQxTkRJZ1REazBMakl5Tml3eE9TNHdOakVnUXprekxqTXhNeXd4Tnk0ek9UUWdPVEV1TlRJM0xERTJMak0xT1NBNE9TNDFOallzTVRZdU16VTRJRU00T0M0MU5UVXNNVFl1TXpVNElEZzNMalUwTml3eE5pNDJNeklnT0RZdU5qUTVMREUzTGpFMUlFTTRNeTQ0Tnpnc01UZ3VOelVnTnprdU5qZzNMREl4TGpFMk9TQTNPUzR6TnpRc01qRXVNelExSUVNM09TNHpOVGtzTWpFdU16VXpJRGM1TGpNME5Td3lNUzR6TmpFZ056a3VNek1zTWpFdU16WTVJRU0zTnk0M09UZ3NNakl1TWpVMElEYzJMakE0TkN3eU1pNDNNaklnTnpRdU16Y3pMREl5TGpjeU1pQkROekl1TURneExESXlMamN5TWlBMk9TNDVOVGtzTWpFdU9Ea2dOamd1TXprM0xESXdMak00SUV3Mk9DNHhORFVzTWpBdU1UTTFJRU0yTnk0M01EWXNNVGt1TmpjeUlEWTNMak15TXl3eE9TNHhOVFlnTmpjdU1EQTJMREU0TGpZd01TQkROall1T1RnNExERTRMalUxT1NBMk5pNDVOamdzTVRndU5URTVJRFkyTGprME5pd3hPQzQwTnprZ1REWTJMamN4T1N3eE9DNHdOalVnUXpZMkxqWTVMREU0TGpBeE1pQTJOaTQyTlRnc01UY3VPVFlnTmpZdU5qSTBMREUzTGpreE1TQkROalV1TmpnMkxERTJMak16TnlBMk15NDVOVEVzTVRVdU16WTJJRFl5TGpBMU15d3hOUzR6TmpZZ1F6WXhMakEwTWl3eE5TNHpOallnTmpBdU1ETXpMREUxTGpZMElEVTVMakV6Tml3eE5pNHhOVGdnVERNdU1USTFMRFE0TGpVd01pQkRNQzQwTWpZc05UQXVNRFl4SUMwd0xqWXhNeXcxTXk0ME5ESWdNQzQ0TVRFc05UWXVNRFFnVERFeExqQTRPU3czTkM0M09TQkRNVEV1TWpZMkxEYzFMakV4TXlBeE1TNDFNemNzTnpVdU16VXpJREV4TGpnMUxEYzFMalE1TkNCTU5UZ3VNamMyTERFd01pNHlPVGdnUXpVNUxqWTNPU3d4TURNdU1UQTRJRFl4TGpRek15d3hNRE11TmpNZ05qTXVNelE0TERFd015NDRNRFlnUXpZekxqZ3hNaXd4TURNdU9EUTRJRFkwTGpJNE5Td3hNRE11T0RjZ05qUXVOelUwTERFd015NDROeUJETmpVc01UQXpMamczSURZMUxqSTBPU3d4TURNdU9EWTBJRFkxTGpRNU5Dd3hNRE11T0RVeUlFTTJOUzQxTmpNc01UQXpMamcwT1NBMk5TNDJNeklzTVRBekxqZzBOeUEyTlM0M01ERXNNVEF6TGpnME55QkROalV1TnpZMExERXdNeTQ0TkRjZ05qVXVPREk0TERFd015NDRORGtnTmpVdU9Ea3NNVEF6TGpnMU1pQkROalV1T1RnMkxERXdNeTQ0TlRZZ05qWXVNRGdzTVRBekxqZzJNeUEyTmk0eE56TXNNVEF6TGpnM05DQkROall1TWpneUxERXdOUzQwTmpjZ05qY3VNek15TERFd055NHhPVGNnTmpndU56QXlMREV3Tnk0NU9EZ2dUREV4TVM0eE56UXNNVE15TGpVeElFTXhNVEV1TmprNExERXpNaTQ0TVRJZ01URXlMakl6TWl3eE16SXVPVFkxSURFeE1pNDNOalFzTVRNeUxqazJOU0JETVRFMExqSTJNU3d4TXpJdU9UWTFJREV4TlM0ek5EY3NNVE14TGpjMk5TQXhNVFV1TXpRM0xERXpNQzR4TVRNZ1RERXhOUzR6TkRjc01UQXpMalUxTVNCTU1USXlMalExT0N3NU9TNDBORFlnUXpFeU1pNDRNVGtzT1RrdU1qTTNJREV5TXk0d09EY3NPVGd1T0RrNElERXlNeTR5TURjc09UZ3VORGs0SUV3eE1qY3VPRFkxTERneUxqa3dOU0JETVRNeUxqSTNPU3c0TXk0M01ESWdNVE0yTGpVMU55dzROQzQzTlRNZ01UUXdMall3Tnl3NE5pNHdNek1nVERFME1TNHhOQ3c0Tmk0NE5qSWdRekUwTVM0ME5URXNPRGN1TXpRMklERTBNUzQ1Tnpjc09EY3VOakV6SURFME1pNDFNVFlzT0RjdU5qRXpJRU14TkRJdU56azBMRGczTGpZeE15QXhORE11TURjMkxEZzNMalUwTWlBeE5ETXVNek16TERnM0xqTTVNeUJNTVRZNUxqZzJOU3czTWk0d056WWdUREU1TXl3NE5TNDBNek1nUXpFNU15NDFNak1zT0RVdU56TTFJREU1TkM0d05UZ3NPRFV1T0RnNElERTVOQzQxT1N3NE5TNDRPRGdnUXpFNU5pNHdPRGNzT0RVdU9EZzRJREU1Tnk0eE56TXNPRFF1TmpnNUlERTVOeTR4TnpNc09ETXVNRE0ySUV3eE9UY3VNVGN6TERJNUxqQXpOU0JETVRrM0xqRTNNeXd5T0M0ME5URWdNVGsyTGpnMk1Td3lOeTQ1TVRFZ01UazJMak0xTlN3eU55NDJNVGtnUXpFNU5pNHpOVFVzTWpjdU5qRTVJREUzTVM0NE5ETXNNVE11TkRZM0lERTNNQzR6T0RVc01USXVOakkySUVNeE56QXVNVE15TERFeUxqUTRJREUyT1M0NE5Td3hNaTQwTURjZ01UWTVMalUyT0N3eE1pNDBNRGNnUXpFMk9TNHlPRFVzTVRJdU5EQTNJREUyT1M0d01ESXNNVEl1TkRneElERTJPQzQzTkRrc01USXVOakkzSUVNeE5qZ3VNVFF6TERFeUxqazNPQ0F4TmpVdU56VTJMREUwTGpNMU55QXhOalF1TkRJMExERTFMakV5TlNCTU1UVTVMall4TlN3eE1DNDROeUJETVRVNExqYzVOaXd4TUM0eE5EVWdNVFU0TGpFMU5DdzRMamt6TnlBeE5UZ3VNRFUwTERjdU9UTTBJRU14TlRndU1EUTFMRGN1T0RNM0lERTFPQzR3TXpRc055NDNNemtnTVRVNExqQXlNU3czTGpZMElFTXhOVGd1TURBMUxEY3VOVEl6SURFMU55NDVPVGdzTnk0ME1TQXhOVGN1T1RrNExEY3VNekEwSUV3eE5UY3VPVGs0TERZdU5ERTRJRU14TlRjdU9UazRMRFV1T0RNMElERTFOeTQyT0RZc05TNHlPVFVnTVRVM0xqRTRNU3cxTGpBd01pQkRNVFUyTGpZeU5DdzBMalk0SURFMU1DNDBORElzTVM0eE1URWdNVFV3TGpRME1pd3hMakV4TVNCRE1UVXdMakU0T1N3d0xqazJOU0F4TkRrdU9UQTNMREF1T0RreUlERTBPUzQyTWpVc01DNDRPVElpSUdsa1BTSkdhV3hzTFRFaUlHWnBiR3c5SWlNME5UVkJOalFpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk9UWXVNREkzTERJMUxqWXpOaUJNTVRReUxqWXdNeXcxTWk0MU1qY2dRekUwTXk0NE1EY3NOVE11TWpJeUlERTBOQzQxT0RJc05UUXVNVEUwSURFME5DNDRORFVzTlRVdU1EWTRJRXd4TkRRdU9ETTFMRFUxTGpBM05TQk1Oak11TkRZeExERXdNaTR3TlRjZ1REWXpMalEyTERFd01pNHdOVGNnUXpZeExqZ3dOaXd4TURFdU9UQTFJRFl3TGpJMk1Td3hNREV1TkRVM0lEVTVMakExTnl3eE1EQXVOell5SUV3eE1pNDBPREVzTnpNdU9EY3hJRXc1Tmk0d01qY3NNalV1TmpNMklpQnBaRDBpUm1sc2JDMHlJaUJtYVd4c1BTSWpSa0ZHUVVaQklqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVFl6TGpRMk1Td3hNREl1TVRjMElFTTJNeTQwTlRNc01UQXlMakUzTkNBMk15NDBORFlzTVRBeUxqRTNOQ0EyTXk0ME16a3NNVEF5TGpFM01pQkROakV1TnpRMkxERXdNaTR3TVRZZ05qQXVNakV4TERFd01TNDFOak1nTlRndU9UazRMREV3TUM0NE5qTWdUREV5TGpReU1pdzNNeTQ1TnpNZ1F6RXlMak00Tml3M015NDVOVElnTVRJdU16WTBMRGN6TGpreE5DQXhNaTR6TmpRc056TXVPRGN4SUVNeE1pNHpOalFzTnpNdU9ETWdNVEl1TXpnMkxEY3pMamM1TVNBeE1pNDBNaklzTnpNdU56Y2dURGsxTGprMk9Dd3lOUzQxTXpVZ1F6azJMakF3TkN3eU5TNDFNVFFnT1RZdU1EUTVMREkxTGpVeE5DQTVOaTR3T0RVc01qVXVOVE0xSUV3eE5ESXVOall4TERVeUxqUXlOaUJETVRRekxqZzRPQ3cxTXk0eE16UWdNVFEwTGpZNE1pdzFOQzR3TXpnZ01UUTBMamsxTnl3MU5TNHdNemNnUXpFME5DNDVOeXcxTlM0d09ETWdNVFEwTGprMU15dzFOUzR4TXpNZ01UUTBMamt4TlN3MU5TNHhOakVnUXpFME5DNDVNVEVzTlRVdU1UWTFJREUwTkM0NE9UZ3NOVFV1TVRjMElERTBOQzQ0T1RRc05UVXVNVGMzSUV3Mk15NDFNVGtzTVRBeUxqRTFPQ0JETmpNdU5UQXhMREV3TWk0eE5qa2dOak11TkRneExERXdNaTR4TnpRZ05qTXVORFl4TERFd01pNHhOelFnVERZekxqUTJNU3d4TURJdU1UYzBJRm9nVFRFeUxqY3hOQ3czTXk0NE56RWdURFU1TGpFeE5Td3hNREF1TmpZeElFTTJNQzR5T1RNc01UQXhMak0wTVNBMk1TNDNPRFlzTVRBeExqYzRNaUEyTXk0ME16VXNNVEF4TGprek55Qk1NVFEwTGpjd055dzFOUzR3TVRVZ1F6RTBOQzQwTWpnc05UUXVNVEE0SURFME15NDJPRElzTlRNdU1qZzFJREUwTWk0MU5EUXNOVEl1TmpJNElFdzVOaTR3TWpjc01qVXVOemN4SUV3eE1pNDNNVFFzTnpNdU9EY3hJRXd4TWk0M01UUXNOek11T0RjeElGb2lJR2xrUFNKR2FXeHNMVE1pSUdacGJHdzlJaU0yTURkRU9FSWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOTVRRNExqTXlOeXcxT0M0ME56RWdRekUwT0M0eE5EVXNOVGd1TkRnZ01UUTNMamsyTWl3MU9DNDBPQ0F4TkRjdU56Z3hMRFU0TGpRM01pQkRNVFExTGpnNE55dzFPQzR6T0RrZ01UUTBMalEzT1N3MU55NDBNelFnTVRRMExqWXpOaXcxTmk0ek5DQkRNVFEwTGpZNE9TdzFOUzQ1TmpjZ01UUTBMalkyTkN3MU5TNDFPVGNnTVRRMExqVTJOQ3cxTlM0eU16VWdURFl6TGpRMk1Td3hNREl1TURVM0lFTTJOQzR3T0Rrc01UQXlMakV4TlNBMk5DNDNNek1zTVRBeUxqRXpJRFkxTGpNM09Td3hNREl1TURrNUlFTTJOUzQxTmpFc01UQXlMakE1SURZMUxqYzBNeXd4TURJdU1Ea2dOalV1T1RJMUxERXdNaTR3T1RnZ1F6WTNMamd4T1N3eE1ESXVNVGd4SURZNUxqSXlOeXd4TURNdU1UTTJJRFk1TGpBM0xERXdOQzR5TXlCTU1UUTRMak15Tnl3MU9DNDBOekVpSUdsa1BTSkdhV3hzTFRRaUlHWnBiR3c5SWlOR1JrWkdSa1lpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk5qa3VNRGNzTVRBMExqTTBOeUJETmprdU1EUTRMREV3TkM0ek5EY2dOamt1TURJMUxERXdOQzR6TkNBMk9TNHdNRFVzTVRBMExqTXlOeUJETmpndU9UWTRMREV3TkM0ek1ERWdOamd1T1RRNExERXdOQzR5TlRjZ05qZ3VPVFUxTERFd05DNHlNVE1nUXpZNUxERXdNeTQ0T1RZZ05qZ3VPRGs0TERFd015NDFOellnTmpndU5qVTRMREV3TXk0eU9EZ2dRelk0TGpFMU15d3hNREl1TmpjNElEWTNMakV3TXl3eE1ESXVNalkySURZMUxqa3lMREV3TWk0eU1UUWdRelkxTGpjME1pd3hNREl1TWpBMklEWTFMalUyTXl3eE1ESXVNakEzSURZMUxqTTROU3d4TURJdU1qRTFJRU0yTkM0M05ESXNNVEF5TGpJME5pQTJOQzR3T0Rjc01UQXlMakl6TWlBMk15NDBOU3d4TURJdU1UYzBJRU0yTXk0ek9Ua3NNVEF5TGpFMk9TQTJNeTR6TlRnc01UQXlMakV6TWlBMk15NHpORGNzTVRBeUxqQTRNaUJETmpNdU16TTJMREV3TWk0d016TWdOak11TXpVNExERXdNUzQ1T0RFZ05qTXVOREF5TERFd01TNDVOVFlnVERFME5DNDFNRFlzTlRVdU1UTTBJRU14TkRRdU5UTTNMRFUxTGpFeE5pQXhORFF1TlRjMUxEVTFMakV4TXlBeE5EUXVOakE1TERVMUxqRXlOeUJETVRRMExqWTBNaXcxTlM0eE5ERWdNVFEwTGpZMk9DdzFOUzR4TnlBeE5EUXVOamMzTERVMUxqSXdOQ0JETVRRMExqYzRNU3cxTlM0MU9EVWdNVFEwTGpnd05pdzFOUzQ1TnpJZ01UUTBMamMxTVN3MU5pNHpOVGNnUXpFME5DNDNNRFlzTlRZdU5qY3pJREUwTkM0NE1EZ3NOVFl1T1RrMElERTBOUzR3TkRjc05UY3VNamd5SUVNeE5EVXVOVFV6TERVM0xqZzVNaUF4TkRZdU5qQXlMRFU0TGpNd015QXhORGN1TnpnMkxEVTRMak0xTlNCRE1UUTNMamsyTkN3MU9DNHpOak1nTVRRNExqRTBNeXcxT0M0ek5qTWdNVFE0TGpNeU1TdzFPQzR6TlRRZ1F6RTBPQzR6Tnpjc05UZ3VNelV5SURFME9DNDBNalFzTlRndU16ZzNJREUwT0M0ME16a3NOVGd1TkRNNElFTXhORGd1TkRVMExEVTRMalE1SURFME9DNDBNeklzTlRndU5UUTFJREUwT0M0ek9EVXNOVGd1TlRjeUlFdzJPUzR4TWprc01UQTBMak16TVNCRE5qa3VNVEV4TERFd05DNHpORElnTmprdU1Ea3NNVEEwTGpNME55QTJPUzR3Tnl3eE1EUXVNelEzSUV3Mk9TNHdOeXd4TURRdU16UTNJRm9nVFRZMUxqWTJOU3d4TURFdU9UYzFJRU0yTlM0M05UUXNNVEF4TGprM05TQTJOUzQ0TkRJc01UQXhMamszTnlBMk5TNDVNeXd4TURFdU9UZ3hJRU0yTnk0eE9UWXNNVEF5TGpBek55QTJPQzR5T0RNc01UQXlMalEyT1NBMk9DNDRNemdzTVRBekxqRXpPU0JETmprdU1EWTFMREV3TXk0ME1UTWdOamt1TVRnNExERXdNeTQzTVRRZ05qa3VNVGs0TERFd05DNHdNakVnVERFME55NDRPRE1zTlRndU5Ua3lJRU14TkRjdU9EUTNMRFU0TGpVNU1pQXhORGN1T0RFeExEVTRMalU1TVNBeE5EY3VOemMyTERVNExqVTRPU0JETVRRMkxqVXdPU3cxT0M0MU16TWdNVFExTGpReU1pdzFPQzR4SURFME5DNDROamNzTlRjdU5ETXhJRU14TkRRdU5UZzFMRFUzTGpBNU1TQXhORFF1TkRZMUxEVTJMamN3TnlBeE5EUXVOVElzTlRZdU16STBJRU14TkRRdU5UWXpMRFUyTGpBeU1TQXhORFF1TlRVeUxEVTFMamN4TmlBeE5EUXVORGc0TERVMUxqUXhOQ0JNTmpNdU9EUTJMREV3TVM0NU55QkROalF1TXpVekxERXdNaTR3TURJZ05qUXVPRFkzTERFd01pNHdNRFlnTmpVdU16YzBMREV3TVM0NU9ESWdRelkxTGpRM01Td3hNREV1T1RjM0lEWTFMalUyT0N3eE1ERXVPVGMxSURZMUxqWTJOU3d4TURFdU9UYzFJRXcyTlM0Mk5qVXNNVEF4TGprM05TQmFJaUJwWkQwaVJtbHNiQzAxSWlCbWFXeHNQU0lqTmpBM1JEaENJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRJdU1qQTRMRFUxTGpFek5DQkRNUzR5TURjc05UTXVNekEzSURFdU9UWTNMRFV3TGpreE55QXpMamt3Tml3ME9TNDNPVGNnVERVNUxqa3hOeXd4Tnk0ME5UTWdRell4TGpnMU5pd3hOaTR6TXpNZ05qUXVNalF4TERFMkxqa3dOeUEyTlM0eU5ETXNNVGd1TnpNMElFdzJOUzQwTnpVc01Ua3VNVFEwSUVNMk5TNDROeklzTVRrdU9EZ3lJRFkyTGpNMk9Dd3lNQzQxTmlBMk5pNDVORFVzTWpFdU1UWTFJRXcyTnk0eU1qTXNNakV1TkRNMUlFTTNNQzQxTkRnc01qUXVOalE1SURjMUxqZ3dOaXd5TlM0eE5URWdPREF1TVRFeExESXlMalkyTlNCTU9EY3VORE1zTVRndU5EUTFJRU00T1M0ek55d3hOeTR6TWpZZ09URXVOelUwTERFM0xqZzVPU0E1TWk0M05UVXNNVGt1TnpJM0lFdzVOaTR3TURVc01qVXVOalUxSUV3eE1pNDBPRFlzTnpNdU9EZzBJRXd5TGpJd09DdzFOUzR4TXpRZ1dpSWdhV1E5SWtacGJHd3ROaUlnWm1sc2JEMGlJMFpCUmtGR1FTSStQQzl3WVhSb1Bnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh3WVhSb0lHUTlJazB4TWk0ME9EWXNOelF1TURBeElFTXhNaTQwTnpZc056UXVNREF4SURFeUxqUTJOU3czTXk0NU9Ua2dNVEl1TkRVMUxEY3pMams1TmlCRE1USXVOREkwTERjekxqazRPQ0F4TWk0ek9Ua3NOek11T1RZM0lERXlMak00TkN3M015NDVOQ0JNTWk0eE1EWXNOVFV1TVRrZ1F6RXVNRGMxTERVekxqTXhJREV1T0RVM0xEVXdMamcwTlNBekxqZzBPQ3cwT1M0Mk9UWWdURFU1TGpnMU9Dd3hOeTR6TlRJZ1F6WXdMalV5TlN3eE5pNDVOamNnTmpFdU1qY3hMREUyTGpjMk5DQTJNaTR3TVRZc01UWXVOelkwSUVNMk15NDBNekVzTVRZdU56WTBJRFkwTGpZMk5pd3hOeTQwTmpZZ05qVXVNekkzTERFNExqWTBOaUJETmpVdU16TTNMREU0TGpZMU5DQTJOUzR6TkRVc01UZ3VOall6SURZMUxqTTFNU3d4T0M0Mk56UWdURFkxTGpVM09Dd3hPUzR3T0RnZ1F6WTFMalU0TkN3eE9TNHhJRFkxTGpVNE9Td3hPUzR4TVRJZ05qVXVOVGt4TERFNUxqRXlOaUJETmpVdU9UZzFMREU1TGpnek9DQTJOaTQwTmprc01qQXVORGszSURZM0xqQXpMREl4TGpBNE5TQk1OamN1TXpBMUxESXhMak0xTVNCRE5qa3VNVFV4TERJekxqRXpOeUEzTVM0Mk5Ea3NNalF1TVRJZ056UXVNek0yTERJMExqRXlJRU0zTmk0ek1UTXNNalF1TVRJZ056Z3VNamtzTWpNdU5UZ3lJRGd3TGpBMU15d3lNaTQxTmpNZ1F6Z3dMakEyTkN3eU1pNDFOVGNnT0RBdU1EYzJMREl5TGpVMU15QTRNQzR3T0Rnc01qSXVOVFVnVERnM0xqTTNNaXd4T0M0ek5EUWdRemc0TGpBek9Dd3hOeTQ1TlRrZ09EZ3VOemcwTERFM0xqYzFOaUE0T1M0MU1qa3NNVGN1TnpVMklFTTVNQzQ1TlRZc01UY3VOelUySURreUxqSXdNU3d4T0M0ME56SWdPVEl1T0RVNExERTVMalkzSUV3NU5pNHhNRGNzTWpVdU5UazVJRU01Tmk0eE16Z3NNalV1TmpVMElEazJMakV4T0N3eU5TNDNNalFnT1RZdU1EWXpMREkxTGpjMU5pQk1NVEl1TlRRMUxEY3pMams0TlNCRE1USXVOVEkyTERjekxqazVOaUF4TWk0MU1EWXNOelF1TURBeElERXlMalE0Tml3M05DNHdNREVnVERFeUxqUTROaXczTkM0d01ERWdXaUJOTmpJdU1ERTJMREUyTGprNU55QkROakV1TXpFeUxERTJMams1TnlBMk1DNDJNRFlzTVRjdU1Ua2dOVGt1T1RjMUxERTNMalUxTkNCTU15NDVOalVzTkRrdU9EazVJRU15TGpBNE15dzFNQzQ1T0RVZ01TNHpOREVzTlRNdU16QTRJREl1TXpFc05UVXVNRGM0SUV3eE1pNDFNekVzTnpNdU56SXpJRXc1TlM0NE5EZ3NNalV1TmpFeElFdzVNaTQyTlRNc01Ua3VOemd5SUVNNU1pNHdNemdzTVRndU5qWWdPVEF1T0Rjc01UY3VPVGtnT0RrdU5USTVMREUzTGprNUlFTTRPQzQ0TWpVc01UY3VPVGtnT0RndU1URTVMREU0TGpFNE1pQTROeTQwT0Rrc01UZ3VOVFEzSUV3NE1DNHhOeklzTWpJdU56Y3lJRU00TUM0eE5qRXNNakl1TnpjNElEZ3dMakUwT1N3eU1pNDNPRElnT0RBdU1UTTNMREl5TGpjNE5TQkROemd1TXpRMkxESXpMamd4TVNBM05pNHpOREVzTWpRdU16VTBJRGMwTGpNek5pd3lOQzR6TlRRZ1F6Y3hMalU0T0N3eU5DNHpOVFFnTmprdU1ETXpMREl6TGpNME55QTJOeTR4TkRJc01qRXVOVEU1SUV3Mk5pNDROalFzTWpFdU1qUTVJRU0yTmk0eU56Y3NNakF1TmpNMElEWTFMamMzTkN3eE9TNDVORGNnTmpVdU16WTNMREU1TGpJd015QkROalV1TXpZc01Ua3VNVGt5SURZMUxqTTFOaXd4T1M0eE56a2dOalV1TXpVMExERTVMakUyTmlCTU5qVXVNVFl6TERFNExqZ3hPU0JETmpVdU1UVTBMREU0TGpneE1TQTJOUzR4TkRZc01UZ3VPREF4SURZMUxqRTBMREU0TGpjNUlFTTJOQzQxTWpVc01UY3VOalkzSURZekxqTTFOeXd4Tmk0NU9UY2dOakl1TURFMkxERTJMams1TnlCTU5qSXVNREUyTERFMkxqazVOeUJhSWlCcFpEMGlSbWxzYkMwM0lpQm1hV3hzUFNJak5qQTNSRGhDSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRUUXlMalF6TkN3ME9DNDRNRGdnVERReUxqUXpOQ3cwT0M0NE1EZ2dRek01TGpreU5DdzBPQzQ0TURjZ016Y3VOek0zTERRM0xqVTFJRE0yTGpVNE1pdzBOUzQwTkRNZ1F6TTBMamMzTVN3ME1pNHhNemtnTXpZdU1UUTBMRE0zTGpnd09TQXpPUzQyTkRFc016VXVOemc1SUV3MU1TNDVNeklzTWpndU5qa3hJRU0xTXk0eE1ETXNNamd1TURFMUlEVTBMalF4TXl3eU55NDJOVGdnTlRVdU56SXhMREkzTGpZMU9DQkROVGd1TWpNeExESTNMalkxT0NBMk1DNDBNVGdzTWpndU9URTJJRFl4TGpVM015d3pNUzR3TWpNZ1F6WXpMak00TkN3ek5DNHpNamNnTmpJdU1ERXlMRE00TGpZMU55QTFPQzQxTVRRc05EQXVOamMzSUV3ME5pNHlNak1zTkRjdU56YzFJRU0wTlM0d05UTXNORGd1TkRVZ05ETXVOelF5TERRNExqZ3dPQ0EwTWk0ME16UXNORGd1T0RBNElFdzBNaTQwTXpRc05EZ3VPREE0SUZvZ1RUVTFMamN5TVN3eU9DNHhNalVnUXpVMExqUTVOU3d5T0M0eE1qVWdOVE11TWpZMUxESTRMalEyTVNBMU1pNHhOallzTWprdU1EazJJRXd6T1M0NE56VXNNell1TVRrMElFTXpOaTQxT1RZc016Z3VNRGczSURNMUxqTXdNaXcwTWk0eE16WWdNell1T1RreUxEUTFMakl4T0NCRE16Z3VNRFl6TERRM0xqRTNNeUEwTUM0d09UZ3NORGd1TXpRZ05ESXVORE0wTERRNExqTTBJRU0wTXk0Mk5qRXNORGd1TXpRZ05EUXVPRGtzTkRndU1EQTFJRFExTGprNUxEUTNMak0zSUV3MU9DNHlPREVzTkRBdU1qY3lJRU0yTVM0MU5pd3pPQzR6TnprZ05qSXVPRFV6TERNMExqTXpJRFl4TGpFMk5Dd3pNUzR5TkRnZ1F6WXdMakE1TWl3eU9TNHlPVE1nTlRndU1EVTRMREk0TGpFeU5TQTFOUzQzTWpFc01qZ3VNVEkxSUV3MU5TNDNNakVzTWpndU1USTFJRm9pSUdsa1BTSkdhV3hzTFRnaUlHWnBiR3c5SWlNMk1EZEVPRUlpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1UUTVMalU0T0N3eUxqUXdOeUJETVRRNUxqVTRPQ3d5TGpRd055QXhOVFV1TnpZNExEVXVPVGMxSURFMU5pNHpNalVzTmk0eU9UY2dUREUxTmk0ek1qVXNOeTR4T0RRZ1F6RTFOaTR6TWpVc055NHpOaUF4TlRZdU16TTRMRGN1TlRRMElERTFOaTR6TmpJc055NDNNek1nUXpFMU5pNHpOek1zTnk0NE1UUWdNVFUyTGpNNE1pdzNMamc1TkNBeE5UWXVNemtzTnk0NU56VWdRekUxTmk0MU15dzVMak01SURFMU55NHpOak1zTVRBdU9UY3pJREUxT0M0ME9UVXNNVEV1T1RjMElFd3hOalV1T0RreExERTRMalV4T1NCRE1UWTJMakEyT0N3eE9DNDJOelVnTVRZMkxqSTBPU3d4T0M0NE1UUWdNVFkyTGpRek1pd3hPQzQ1TXpRZ1F6RTJPQzR3TVRFc01Ua3VPVGMwSURFMk9TNHpPRElzTVRrdU5DQXhOamt1TkRrMExERTNMalkxTWlCRE1UWTVMalUwTXl3eE5pNDROamdnTVRZNUxqVTFNU3d4Tmk0d05UY2dNVFk1TGpVeE55d3hOUzR5TWpNZ1RERTJPUzQxTVRRc01UVXVNRFl6SUV3eE5qa3VOVEUwTERFekxqa3hNaUJETVRjd0xqYzRMREUwTGpZME1pQXhPVFV1TlRBeExESTRMamt4TlNBeE9UVXVOVEF4TERJNExqa3hOU0JNTVRrMUxqVXdNU3c0TWk0NU1UVWdRekU1TlM0MU1ERXNPRFF1TURBMUlERTVOQzQzTXpFc09EUXVORFExSURFNU15NDNPREVzT0RNdU9EazNJRXd4TlRFdU16QTRMRFU1TGpNM05DQkRNVFV3TGpNMU9DdzFPQzQ0TWpZZ01UUTVMalU0T0N3MU55NDBPVGNnTVRRNUxqVTRPQ3cxTmk0ME1EZ2dUREUwT1M0MU9EZ3NNakl1TXpjMUlpQnBaRDBpUm1sc2JDMDVJaUJtYVd4c1BTSWpSa0ZHUVVaQklqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVEU1TkM0MU5UTXNPRFF1TWpVZ1F6RTVOQzR5T1RZc09EUXVNalVnTVRrMExqQXhNeXc0TkM0eE5qVWdNVGt6TGpjeU1pdzRNeTQ1T1RjZ1RERTFNUzR5TlN3MU9TNDBOellnUXpFMU1DNHlOamtzTlRndU9UQTVJREUwT1M0ME56RXNOVGN1TlRNeklERTBPUzQwTnpFc05UWXVOREE0SUV3eE5Ea3VORGN4TERJeUxqTTNOU0JNTVRRNUxqY3dOU3d5TWk0ek56VWdUREUwT1M0M01EVXNOVFl1TkRBNElFTXhORGt1TnpBMUxEVTNMalExT1NBeE5UQXVORFVzTlRndU56UTBJREUxTVM0ek5qWXNOVGt1TWpjMElFd3hPVE11T0RNNUxEZ3pMamM1TlNCRE1UazBMakkyTXl3NE5DNHdOQ0F4T1RRdU5qVTFMRGcwTGpBNE15QXhPVFF1T1RReUxEZ3pMamt4TnlCRE1UazFMakl5Tnl3NE15NDNOVE1nTVRrMUxqTTROQ3c0TXk0ek9UY2dNVGsxTGpNNE5DdzRNaTQ1TVRVZ1RERTVOUzR6T0RRc01qZ3VPVGd5SUVNeE9UUXVNVEF5TERJNExqSTBNaUF4TnpJdU1UQTBMREUxTGpVME1pQXhOamt1TmpNeExERTBMakV4TkNCTU1UWTVMall6TkN3eE5TNHlNaUJETVRZNUxqWTJPQ3d4Tmk0d05USWdNVFk1TGpZMkxERTJMamczTkNBeE5qa3VOakVzTVRjdU5qVTVJRU14TmprdU5UVTJMREU0TGpVd015QXhOamt1TWpFMExERTVMakV5TXlBeE5qZ3VOalEzTERFNUxqUXdOU0JETVRZNExqQXlPQ3d4T1M0M01UUWdNVFkzTGpFNU55d3hPUzQxTnpnZ01UWTJMak0yTnl3eE9TNHdNeklnUXpFMk5pNHhPREVzTVRndU9UQTVJREUyTlM0NU9UVXNNVGd1TnpZMklERTJOUzQ0TVRRc01UZ3VOakEySUV3eE5UZ3VOREUzTERFeUxqQTJNaUJETVRVM0xqSTFPU3d4TVM0d016WWdNVFUyTGpReE9DdzVMalF6TnlBeE5UWXVNamMwTERjdU9UZzJJRU14TlRZdU1qWTJMRGN1T1RBM0lERTFOaTR5TlRjc055NDRNamNnTVRVMkxqSTBOeXczTGpjME9DQkRNVFUyTGpJeU1TdzNMalUxTlNBeE5UWXVNakE1TERjdU16WTFJREUxTmk0eU1Ea3NOeTR4T0RRZ1RERTFOaTR5TURrc05pNHpOalFnUXpFMU5TNHpOelVzTlM0NE9ETWdNVFE1TGpVeU9Td3lMalV3T0NBeE5Ea3VOVEk1TERJdU5UQTRJRXd4TkRrdU5qUTJMREl1TXpBMklFTXhORGt1TmpRMkxESXVNekEySURFMU5TNDRNamNzTlM0NE56UWdNVFUyTGpNNE5DdzJMakU1TmlCTU1UVTJMalEwTWl3MkxqSXpJRXd4TlRZdU5EUXlMRGN1TVRnMElFTXhOVFl1TkRReUxEY3VNelUxSURFMU5pNDBOVFFzTnk0MU16VWdNVFUyTGpRM09DdzNMamN4TnlCRE1UVTJMalE0T1N3M0xqZ2dNVFUyTGpRNU9TdzNMamc0TWlBeE5UWXVOVEEzTERjdU9UWXpJRU14TlRZdU5qUTFMRGt1TXpVNElERTFOeTQwTlRVc01UQXVPRGs0SURFMU9DNDFOeklzTVRFdU9EZzJJRXd4TmpVdU9UWTVMREU0TGpRek1TQkRNVFkyTGpFME1pd3hPQzQxT0RRZ01UWTJMak14T1N3eE9DNDNNaUF4TmpZdU5EazJMREU0TGpnek55QkRNVFkzTGpJMU5Dd3hPUzR6TXpZZ01UWTRMREU1TGpRMk55QXhOamd1TlRRekxERTVMakU1TmlCRE1UWTVMakF6TXl3eE9DNDVOVE1nTVRZNUxqTXlPU3d4T0M0ME1ERWdNVFk1TGpNM055d3hOeTQyTkRVZ1F6RTJPUzQwTWpjc01UWXVPRFkzSURFMk9TNDBNelFzTVRZdU1EVTBJREUyT1M0ME1ERXNNVFV1TWpJNElFd3hOamt1TXprM0xERTFMakEyTlNCTU1UWTVMak01Tnl3eE15NDNNU0JNTVRZNUxqVTNNaXd4TXk0NE1TQkRNVGN3TGpnek9Td3hOQzQxTkRFZ01UazFMalUxT1N3eU9DNDRNVFFnTVRrMUxqVTFPU3d5T0M0NE1UUWdUREU1TlM0Mk1UZ3NNamd1T0RRM0lFd3hPVFV1TmpFNExEZ3lMamt4TlNCRE1UazFMall4T0N3NE15NDBPRFFnTVRrMUxqUXlMRGd6TGpreE1TQXhPVFV1TURVNUxEZzBMakV4T1NCRE1UazBMamt3T0N3NE5DNHlNRFlnTVRrMExqY3pOeXc0TkM0eU5TQXhPVFF1TlRVekxEZzBMakkxSWlCcFpEMGlSbWxzYkMweE1DSWdabWxzYkQwaUl6WXdOMFE0UWlJK1BDOXdZWFJvUGdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHdZWFJvSUdROUlrMHhORFV1TmpnMUxEVTJMakUyTVNCTU1UWTVMamdzTnpBdU1EZ3pJRXd4TkRNdU9ESXlMRGcxTGpBNE1TQk1NVFF5TGpNMkxEZzBMamMzTkNCRE1UTTFMamd5Tml3NE1pNDJNRFFnTVRJNExqY3pNaXc0TVM0d05EWWdNVEl4TGpNME1TdzRNQzR4TlRnZ1F6RXhOaTQ1TnpZc056a3VOak0wSURFeE1pNDJOemdzT0RFdU1qVTBJREV4TVM0M05ETXNPRE11TnpjNElFTXhNVEV1TlRBMkxEZzBMalF4TkNBeE1URXVOVEF6TERnMUxqQTNNU0F4TVRFdU56TXlMRGcxTGpjd05pQkRNVEV6TGpJM0xEZzVMamszTXlBeE1UVXVPVFk0TERrMExqQTJPU0F4TVRrdU56STNMRGszTGpnME1TQk1NVEl3TGpJMU9TdzVPQzQyT0RZZ1F6RXlNQzR5Tml3NU9DNDJPRFVnT1RRdU1qZ3lMREV4TXk0Mk9ETWdPVFF1TWpneUxERXhNeTQyT0RNZ1REY3dMakUyTnl3NU9TNDNOakVnVERFME5TNDJPRFVzTlRZdU1UWXhJaUJwWkQwaVJtbHNiQzB4TVNJZ1ptbHNiRDBpSTBaR1JrWkdSaUkrUEM5d1lYUm9QZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4d1lYUm9JR1E5SWswNU5DNHlPRElzTVRFekxqZ3hPQ0JNT1RRdU1qSXpMREV4TXk0M09EVWdURFk1TGprek15dzVPUzQzTmpFZ1REY3dMakV3T0N3NU9TNDJOaUJNTVRRMUxqWTROU3cxTmk0d01qWWdUREUwTlM0M05ETXNOVFl1TURVNUlFd3hOekF1TURNekxEY3dMakE0TXlCTU1UUXpMamcwTWl3NE5TNHlNRFVnVERFME15NDNPVGNzT0RVdU1UazFJRU14TkRNdU56Y3lMRGcxTGpFNUlERTBNaTR6TXpZc09EUXVPRGc0SURFME1pNHpNellzT0RRdU9EZzRJRU14TXpVdU56ZzNMRGd5TGpjeE5DQXhNamd1TnpJekxEZ3hMakUyTXlBeE1qRXVNekkzTERnd0xqSTNOQ0JETVRJd0xqYzRPQ3c0TUM0eU1Ea2dNVEl3TGpJek5pdzRNQzR4TnpjZ01URTVMalk0T1N3NE1DNHhOemNnUXpFeE5TNDVNekVzT0RBdU1UYzNJREV4TWk0Mk16VXNPREV1TnpBNElERXhNUzQ0TlRJc09ETXVPREU1SUVNeE1URXVOakkwTERnMExqUXpNaUF4TVRFdU5qSXhMRGcxTGpBMU15QXhNVEV1T0RReUxEZzFMalkyTnlCRE1URXpMak0zTnl3NE9TNDVNalVnTVRFMkxqQTFPQ3c1TXk0NU9UTWdNVEU1TGpneExEazNMamMxT0NCTU1URTVMamd5Tml3NU55NDNOemtnVERFeU1DNHpOVElzT1RndU5qRTBJRU14TWpBdU16VTBMRGs0TGpZeE55QXhNakF1TXpVMkxEazRMall5SURFeU1DNHpOVGdzT1RndU5qSTBJRXd4TWpBdU5ESXlMRGs0TGpjeU5pQk1NVEl3TGpNeE55dzVPQzQzT0RjZ1F6RXlNQzR5TmpRc09UZ3VPREU0SURrMExqVTVPU3d4TVRNdU5qTTFJRGswTGpNMExERXhNeTQzT0RVZ1REazBMakk0TWl3eE1UTXVPREU0SUV3NU5DNHlPRElzTVRFekxqZ3hPQ0JhSUUwM01DNDBNREVzT1RrdU56WXhJRXc1TkM0eU9ESXNNVEV6TGpVME9TQk1NVEU1TGpBNE5DdzVPUzR5TWprZ1F6RXhPUzQyTXl3NU9DNDVNVFFnTVRFNUxqa3pMRGs0TGpjMElERXlNQzR4TURFc09UZ3VOalUwSUV3eE1Ua3VOak0xTERrM0xqa3hOQ0JETVRFMUxqZzJOQ3c1TkM0eE1qY2dNVEV6TGpFMk9DdzVNQzR3TXpNZ01URXhMall5TWl3NE5TNDNORFlnUXpFeE1TNHpPRElzT0RVdU1EYzVJREV4TVM0ek9EWXNPRFF1TkRBMElERXhNUzQyTXpNc09ETXVOek00SUVNeE1USXVORFE0TERneExqVXpPU0F4TVRVdU9ETTJMRGM1TGprME15QXhNVGt1TmpnNUxEYzVMamswTXlCRE1USXdMakkwTml3M09TNDVORE1nTVRJd0xqZ3dOaXczT1M0NU56WWdNVEl4TGpNMU5TdzRNQzR3TkRJZ1F6RXlPQzQzTmpjc09EQXVPVE16SURFek5TNDRORFlzT0RJdU5EZzNJREUwTWk0ek9UWXNPRFF1TmpZeklFTXhORE11TWpNeUxEZzBMamd6T0NBeE5ETXVOakV4TERnMExqa3hOeUF4TkRNdU56ZzJMRGcwTGprMk55Qk1NVFk1TGpVMk5pdzNNQzR3T0RNZ1RERTBOUzQyT0RVc05UWXVNamsxSUV3M01DNDBNREVzT1RrdU56WXhJRXczTUM0ME1ERXNPVGt1TnpZeElGb2lJR2xrUFNKR2FXeHNMVEV5SWlCbWFXeHNQU0lqTmpBM1JEaENJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRFMk55NHlNeXd4T0M0NU56a2dUREUyTnk0eU15dzJPUzQ0TlNCTU1UTTVMamt3T1N3NE5TNDJNak1nVERFek15NDBORGdzTnpFdU5EVTJJRU14TXpJdU5UTTRMRFk1TGpRMklERXpNQzR3TWl3Mk9TNDNNVGdnTVRJM0xqZ3lOQ3czTWk0d015QkRNVEkyTGpjMk9TdzNNeTR4TkNBeE1qVXVPVE14TERjMExqVTROU0F4TWpVdU5EazBMRGMyTGpBME9DQk1NVEU1TGpBek5DdzVOeTQyTnpZZ1REa3hMamN4TWl3eE1UTXVORFVnVERreExqY3hNaXcyTWk0MU56a2dUREUyTnk0eU15d3hPQzQ1TnpraUlHbGtQU0pHYVd4c0xURXpJaUJtYVd4c1BTSWpSa1pHUmtaR0lqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVGt4TGpjeE1pd3hNVE11TlRZM0lFTTVNUzQyT1RJc01URXpMalUyTnlBNU1TNDJOeklzTVRFekxqVTJNU0E1TVM0Mk5UTXNNVEV6TGpVMU1TQkRPVEV1TmpFNExERXhNeTQxTXlBNU1TNDFPVFVzTVRFekxqUTVNaUE1TVM0MU9UVXNNVEV6TGpRMUlFdzVNUzQxT1RVc05qSXVOVGM1SUVNNU1TNDFPVFVzTmpJdU5UTTNJRGt4TGpZeE9DdzJNaTQwT1RrZ09URXVOalV6TERZeUxqUTNPQ0JNTVRZM0xqRTNNaXd4T0M0NE56Z2dRekUyTnk0eU1EZ3NNVGd1T0RVM0lERTJOeTR5TlRJc01UZ3VPRFUzSURFMk55NHlPRGdzTVRndU9EYzRJRU14TmpjdU16STBMREU0TGpnNU9TQXhOamN1TXpRM0xERTRMamt6TnlBeE5qY3VNelEzTERFNExqazNPU0JNTVRZM0xqTTBOeXcyT1M0NE5TQkRNVFkzTGpNME55dzJPUzQ0T1RFZ01UWTNMak15TkN3Mk9TNDVNeUF4TmpjdU1qZzRMRFk1TGprMUlFd3hNemt1T1RZM0xEZzFMamN5TlNCRE1UTTVMamt6T1N3NE5TNDNOREVnTVRNNUxqa3dOU3c0TlM0M05EVWdNVE01TGpnM015dzROUzQzTXpVZ1F6RXpPUzQ0TkRJc09EVXVOekkxSURFek9TNDRNVFlzT0RVdU56QXlJREV6T1M0NE1ESXNPRFV1TmpjeUlFd3hNek11TXpReUxEY3hMalV3TkNCRE1UTXlMamsyTnl3M01DNDJPRElnTVRNeUxqSTRMRGN3TGpJeU9TQXhNekV1TkRBNExEY3dMakl5T1NCRE1UTXdMak14T1N3M01DNHlNamtnTVRJNUxqQTBOQ3czTUM0NU1UVWdNVEkzTGprd09DdzNNaTR4TVNCRE1USTJMamczTkN3M015NHlJREV5Tmk0d016UXNOelF1TmpRM0lERXlOUzQyTURZc056WXVNRGd5SUV3eE1Ua3VNVFEyTERrM0xqY3dPU0JETVRFNUxqRXpOeXc1Tnk0M016Z2dNVEU1TGpFeE9DdzVOeTQzTmpJZ01URTVMakE1TWl3NU55NDNOemNnVERreExqYzNMREV4TXk0MU5URWdRemt4TGpjMU1pd3hNVE11TlRZeElEa3hMamN6TWl3eE1UTXVOVFkzSURreExqY3hNaXd4TVRNdU5UWTNJRXc1TVM0M01USXNNVEV6TGpVMk55QmFJRTA1TVM0NE1qa3NOakl1TmpRM0lFdzVNUzQ0TWprc01URXpMakkwT0NCTU1URTRMamt6TlN3NU55NDFPVGdnVERFeU5TNHpPRElzTnpZdU1ERTFJRU14TWpVdU9ESTNMRGMwTGpVeU5TQXhNall1TmpZMExEY3pMakE0TVNBeE1qY3VOek01TERjeExqazFJRU14TWpndU9URTVMRGN3TGpjd09DQXhNekF1TWpVMkxEWTVMams1TmlBeE16RXVOREE0TERZNUxqazVOaUJETVRNeUxqTTNOeXcyT1M0NU9UWWdNVE16TGpFek9TdzNNQzQwT1RjZ01UTXpMalUxTkN3M01TNDBNRGNnVERFek9TNDVOakVzT0RVdU5EVTRJRXd4TmpjdU1URXpMRFk1TGpjNE1pQk1NVFkzTGpFeE15d3hPUzR4T0RFZ1REa3hMamd5T1N3Mk1pNDJORGNnVERreExqZ3lPU3cyTWk0Mk5EY2dXaUlnYVdROUlrWnBiR3d0TVRRaUlHWnBiR3c5SWlNMk1EZEVPRUlpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1UWTRMalUwTXl3eE9TNHlNVE1nVERFMk9DNDFORE1zTnpBdU1EZ3pJRXd4TkRFdU1qSXhMRGcxTGpnMU55Qk1NVE0wTGpjMk1TdzNNUzQyT0RrZ1F6RXpNeTQ0TlRFc05qa3VOamswSURFek1TNHpNek1zTmprdU9UVXhJREV5T1M0eE16Y3NOekl1TWpZeklFTXhNamd1TURneUxEY3pMak0zTkNBeE1qY3VNalEwTERjMExqZ3hPU0F4TWpZdU9EQTNMRGMyTGpJNE1pQk1NVEl3TGpNME5pdzVOeTQ1TURrZ1REa3pMakF5TlN3eE1UTXVOamd6SUV3NU15NHdNalVzTmpJdU9ERXpJRXd4TmpndU5UUXpMREU1TGpJeE15SWdhV1E5SWtacGJHd3RNVFVpSUdacGJHdzlJaU5HUmtaR1JrWWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOT1RNdU1ESTFMREV4TXk0NElFTTVNeTR3TURVc01URXpMamdnT1RJdU9UZzBMREV4TXk0M09UVWdPVEl1T1RZMkxERXhNeTQzT0RVZ1F6a3lMamt6TVN3eE1UTXVOelkwSURreUxqa3dPQ3d4TVRNdU56STFJRGt5TGprd09Dd3hNVE11TmpnMElFdzVNaTQ1TURnc05qSXVPREV6SUVNNU1pNDVNRGdzTmpJdU56Y3hJRGt5TGprek1TdzJNaTQzTXpNZ09USXVPVFkyTERZeUxqY3hNaUJNTVRZNExqUTROQ3d4T1M0eE1USWdRekUyT0M0MU1pd3hPUzR3T1NBeE5qZ3VOVFkxTERFNUxqQTVJREUyT0M0Mk1ERXNNVGt1TVRFeUlFTXhOamd1TmpNM0xERTVMakV6TWlBeE5qZ3VOallzTVRrdU1UY3hJREUyT0M0Mk5pd3hPUzR5TVRJZ1RERTJPQzQyTml3M01DNHdPRE1nUXpFMk9DNDJOaXczTUM0eE1qVWdNVFk0TGpZek55dzNNQzR4TmpRZ01UWTRMall3TVN3M01DNHhPRFFnVERFME1TNHlPQ3c0TlM0NU5UZ2dRekUwTVM0eU5URXNPRFV1T1RjMUlERTBNUzR5TVRjc09EVXVPVGM1SURFME1TNHhPRFlzT0RVdU9UWTRJRU14TkRFdU1UVTBMRGcxTGprMU9DQXhOREV1TVRJNUxEZzFMamt6TmlBeE5ERXVNVEUxTERnMUxqa3dOaUJNTVRNMExqWTFOU3czTVM0M016Z2dRekV6TkM0eU9DdzNNQzQ1TVRVZ01UTXpMalU1TXl3M01DNDBOak1nTVRNeUxqY3lMRGN3TGpRMk15QkRNVE14TGpZek1pdzNNQzQwTmpNZ01UTXdMak0xTnl3M01TNHhORGdnTVRJNUxqSXlNU3czTWk0ek5EUWdRekV5T0M0eE9EWXNOek11TkRNeklERXlOeTR6TkRjc056UXVPRGd4SURFeU5pNDVNVGtzTnpZdU16RTFJRXd4TWpBdU5EVTRMRGszTGprME15QkRNVEl3TGpRMUxEazNMamszTWlBeE1qQXVORE14TERrM0xqazVOaUF4TWpBdU5EQTFMRGs0TGpBeElFdzVNeTR3T0RNc01URXpMamM0TlNCRE9UTXVNRFkxTERFeE15NDNPVFVnT1RNdU1EUTFMREV4TXk0NElEa3pMakF5TlN3eE1UTXVPQ0JNT1RNdU1ESTFMREV4TXk0NElGb2dUVGt6TGpFME1pdzJNaTQ0T0RFZ1REa3pMakUwTWl3eE1UTXVORGd4SUV3eE1qQXVNalE0TERrM0xqZ3pNaUJNTVRJMkxqWTVOU3czTmk0eU5EZ2dRekV5Tnk0eE5DdzNOQzQzTlRnZ01USTNMamszTnl3M015NHpNVFVnTVRJNUxqQTFNaXczTWk0eE9ETWdRekV6TUM0eU16RXNOekF1T1RReUlERXpNUzQxTmpnc056QXVNakk1SURFek1pNDNNaXczTUM0eU1qa2dRekV6TXk0Mk9Ea3NOekF1TWpJNUlERXpOQzQwTlRJc056QXVOek14SURFek5DNDROamNzTnpFdU5qUXhJRXd4TkRFdU1qYzBMRGcxTGpZNU1pQk1NVFk0TGpReU5pdzNNQzR3TVRZZ1RERTJPQzQwTWpZc01Ua3VOREUxSUV3NU15NHhORElzTmpJdU9EZ3hJRXc1TXk0eE5ESXNOakl1T0RneElGb2lJR2xrUFNKR2FXeHNMVEUySWlCbWFXeHNQU0lqTmpBM1JEaENJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRFMk9TNDRMRGN3TGpBNE15Qk1NVFF5TGpRM09DdzROUzQ0TlRjZ1RERXpOaTR3TVRnc056RXVOamc1SUVNeE16VXVNVEE0TERZNUxqWTVOQ0F4TXpJdU5Ua3NOamt1T1RVeElERXpNQzR6T1RNc056SXVNall6SUVNeE1qa3VNek01TERjekxqTTNOQ0F4TWpndU5TdzNOQzQ0TVRrZ01USTRMakEyTkN3M05pNHlPRElnVERFeU1TNDJNRE1zT1RjdU9UQTVJRXc1TkM0eU9ESXNNVEV6TGpZNE15Qk1PVFF1TWpneUxEWXlMamd4TXlCTU1UWTVMamdzTVRrdU1qRXpJRXd4TmprdU9DdzNNQzR3T0RNZ1dpSWdhV1E5SWtacGJHd3RNVGNpSUdacGJHdzlJaU5HUVVaQlJrRWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOT1RRdU1qZ3lMREV4TXk0NU1UY2dRemswTGpJME1Td3hNVE11T1RFM0lEazBMakl3TVN3eE1UTXVPVEEzSURrMExqRTJOU3d4TVRNdU9EZzJJRU01TkM0d09UTXNNVEV6TGpnME5TQTVOQzR3TkRnc01URXpMamMyTnlBNU5DNHdORGdzTVRFekxqWTROQ0JNT1RRdU1EUTRMRFl5TGpneE15QkRPVFF1TURRNExEWXlMamN6SURrMExqQTVNeXcyTWk0Mk5USWdPVFF1TVRZMUxEWXlMall4TVNCTU1UWTVMalk0TXl3eE9TNHdNU0JETVRZNUxqYzFOU3d4T0M0NU5qa2dNVFk1TGpnME5Dd3hPQzQ1TmprZ01UWTVMamt4Tnl3eE9TNHdNU0JETVRZNUxqazRPU3d4T1M0d05USWdNVGN3TGpBek15d3hPUzR4TWprZ01UY3dMakF6TXl3eE9TNHlNVElnVERFM01DNHdNek1zTnpBdU1EZ3pJRU14TnpBdU1ETXpMRGN3TGpFMk5pQXhOamt1T1RnNUxEY3dMakkwTkNBeE5qa3VPVEUzTERjd0xqSTROU0JNTVRReUxqVTVOU3c0Tmk0d05pQkRNVFF5TGpVek9DdzROaTR3T1RJZ01UUXlMalEyT1N3NE5pNHhJREUwTWk0ME1EY3NPRFl1TURnZ1F6RTBNaTR6TkRRc09EWXVNRFlnTVRReUxqSTVNeXc0Tmk0d01UUWdNVFF5TGpJMk5pdzROUzQ1TlRRZ1RERXpOUzQ0TURVc056RXVOemcySUVNeE16VXVORFExTERjd0xqazVOeUF4TXpRdU9ERXpMRGN3TGpVNElERXpNeTQ1Tnpjc056QXVOVGdnUXpFek1pNDVNakVzTnpBdU5UZ2dNVE14TGpZM05pdzNNUzR5TlRJZ01UTXdMalUyTWl3M01pNDBNalFnUXpFeU9TNDFOQ3czTXk0MU1ERWdNVEk0TGpjeE1TdzNOQzQ1TXpFZ01USTRMakk0Tnl3M05pNHpORGdnVERFeU1TNDRNamNzT1RjdU9UYzJJRU14TWpFdU9ERXNPVGd1TURNMElERXlNUzQzTnpFc09UZ3VNRGd5SURFeU1TNDNNaXc1T0M0eE1USWdURGswTGpNNU9Dd3hNVE11T0RnMklFTTVOQzR6TmpJc01URXpMamt3TnlBNU5DNHpNaklzTVRFekxqa3hOeUE1TkM0eU9ESXNNVEV6TGpreE55Qk1PVFF1TWpneUxERXhNeTQ1TVRjZ1dpQk5PVFF1TlRFMUxEWXlMamswT0NCTU9UUXVOVEUxTERFeE15NHlOemtnVERFeU1TNDBNRFlzT1RjdU56VTBJRXd4TWpjdU9EUXNOell1TWpFMUlFTXhNamd1TWprc056UXVOekE0SURFeU9TNHhNemNzTnpNdU1qUTNJREV6TUM0eU1qUXNOekl1TVRBeklFTXhNekV1TkRJMUxEY3dMamd6T0NBeE16SXVOemt6TERjd0xqRXhNaUF4TXpNdU9UYzNMRGN3TGpFeE1pQkRNVE0wTGprNU5TdzNNQzR4TVRJZ01UTTFMamM1TlN3M01DNDJNemdnTVRNMkxqSXpMRGN4TGpVNU1pQk1NVFF5TGpVNE5DdzROUzQxTWpZZ1RERTJPUzQxTmpZc05qa3VPVFE0SUV3eE5qa3VOVFkyTERFNUxqWXhOeUJNT1RRdU5URTFMRFl5TGprME9DQk1PVFF1TlRFMUxEWXlMamswT0NCYUlpQnBaRDBpUm1sc2JDMHhPQ0lnWm1sc2JEMGlJell3TjBRNFFpSStQQzl3WVhSb1Bnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh3WVhSb0lHUTlJazB4TURrdU9EazBMRGt5TGprME15Qk1NVEE1TGpnNU5DdzVNaTQ1TkRNZ1F6RXdPQzR4TWl3NU1pNDVORE1nTVRBMkxqWTFNeXc1TWk0eU1UZ2dNVEExTGpZMUxEa3dMamd5TXlCRE1UQTFMalU0TXl3NU1DNDNNekVnTVRBMUxqVTVNeXc1TUM0Mk1TQXhNRFV1TmpjekxEa3dMalV5T1NCRE1UQTFMamMxTXl3NU1DNDBORGdnTVRBMUxqZzRMRGt3TGpRMElERXdOUzQ1TnpRc09UQXVOVEEySUVNeE1EWXVOelUwTERreExqQTFNeUF4TURjdU5qYzVMRGt4TGpNek15QXhNRGd1TnpJMExEa3hMak16TXlCRE1URXdMakEwTnl3NU1TNHpNek1nTVRFeExqUTNPQ3c1TUM0NE9UUWdNVEV5TGprNExEa3dMakF5TnlCRE1URTRMakk1TVN3NE5pNDVOaUF4TWpJdU5qRXhMRGM1TGpVd09TQXhNakl1TmpFeExEY3pMalF4TmlCRE1USXlMall4TVN3M01TNDBPRGtnTVRJeUxqRTJPU3cyT1M0NE5UWWdNVEl4TGpNek15dzJPQzQyT1RJZ1F6RXlNUzR5TmpZc05qZ3VOaUF4TWpFdU1qYzJMRFk0TGpRM015QXhNakV1TXpVMkxEWTRMak01TWlCRE1USXhMalF6Tml3Mk9DNHpNVEVnTVRJeExqVTJNeXcyT0M0eU9Ua2dNVEl4TGpZMU5pdzJPQzR6TmpVZ1F6RXlNeTR6TWpjc05qa3VOVE0zSURFeU5DNHlORGNzTnpFdU56UTJJREV5TkM0eU5EY3NOelF1TlRnMElFTXhNalF1TWpRM0xEZ3dMamd5TmlBeE1Ua3VPREl4TERnNExqUTBOeUF4TVRRdU16Z3lMRGt4TGpVNE55QkRNVEV5TGpnd09DdzVNaTQwT1RVZ01URXhMakk1T0N3NU1pNDVORE1nTVRBNUxqZzVOQ3c1TWk0NU5ETWdUREV3T1M0NE9UUXNPVEl1T1RReklGb2dUVEV3Tmk0NU1qVXNPVEV1TkRBeElFTXhNRGN1TnpNNExEa3lMakExTWlBeE1EZ3VOelExTERreUxqSTNPQ0F4TURrdU9Ea3pMRGt5TGpJM09DQk1NVEE1TGpnNU5DdzVNaTR5TnpnZ1F6RXhNUzR5TVRVc09USXVNamM0SURFeE1pNDJORGNzT1RFdU9UVXhJREV4TkM0eE5EZ3NPVEV1TURnMElFTXhNVGt1TkRVNUxEZzRMakF4TnlBeE1qTXVOemdzT0RBdU5qSXhJREV5TXk0M09DdzNOQzQxTWpnZ1F6RXlNeTQzT0N3M01pNDFORGtnTVRJekxqTXhOeXczTUM0NU1qa2dNVEl5TGpRMU5DdzJPUzQzTmpjZ1F6RXlNaTQ0TmpVc056QXVPREF5SURFeU15NHdOemtzTnpJdU1EUXlJREV5TXk0d056a3NOek11TkRBeUlFTXhNak11TURjNUxEYzVMalkwTlNBeE1UZ3VOalV6TERnM0xqSTROU0F4TVRNdU1qRTBMRGt3TGpReU5TQkRNVEV4TGpZMExEa3hMak16TkNBeE1UQXVNVE1zT1RFdU56UXlJREV3T0M0M01qUXNPVEV1TnpReUlFTXhNRGd1TURnekxEa3hMamMwTWlBeE1EY3VORGd4TERreExqVTVNeUF4TURZdU9USTFMRGt4TGpRd01TQk1NVEEyTGpreU5TdzVNUzQwTURFZ1dpSWdhV1E5SWtacGJHd3RNVGtpSUdacGJHdzlJaU0yTURkRU9FSWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOTVRFekxqQTVOeXc1TUM0eU15QkRNVEU0TGpRNE1TdzROeTR4TWpJZ01USXlMamcwTlN3M09TNDFPVFFnTVRJeUxqZzBOU3czTXk0ME1UWWdRekV5TWk0NE5EVXNOekV1TXpZMUlERXlNaTR6TmpJc05qa3VOekkwSURFeU1TNDFNaklzTmpndU5UVTJJRU14TVRrdU56TTRMRFkzTGpNd05DQXhNVGN1TVRRNExEWTNMak0yTWlBeE1UUXVNalkxTERZNUxqQXlOaUJETVRBNExqZzRNU3czTWk0eE16UWdNVEEwTGpVeE55dzNPUzQyTmpJZ01UQTBMalV4Tnl3NE5TNDROQ0JETVRBMExqVXhOeXc0Tnk0NE9URWdNVEExTERnNUxqVXpNaUF4TURVdU9EUXNPVEF1TnlCRE1UQTNMall5TkN3NU1TNDVOVElnTVRFd0xqSXhOQ3c1TVM0NE9UUWdNVEV6TGpBNU55dzVNQzR5TXlJZ2FXUTlJa1pwYkd3dE1qQWlJR1pwYkd3OUlpTkdRVVpCUmtFaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5NVEE0TGpjeU5DdzVNUzQyTVRRZ1RERXdPQzQzTWpRc09URXVOakUwSUVNeE1EY3VOVGd5TERreExqWXhOQ0F4TURZdU5UWTJMRGt4TGpRd01TQXhNRFV1TnpBMUxEa3dMamM1TnlCRE1UQTFMalk0TkN3NU1DNDNPRE1nTVRBMUxqWTJOU3c1TUM0NE1URWdNVEExTGpZMUxEa3dMamM1SUVNeE1EUXVOelUyTERnNUxqVTBOaUF4TURRdU1qZ3pMRGczTGpnME1pQXhNRFF1TWpnekxEZzFMamd4TnlCRE1UQTBMakk0TXl3M09TNDFOelVnTVRBNExqY3dPU3czTVM0NU5UTWdNVEUwTGpFME9DdzJPQzQ0TVRJZ1F6RXhOUzQzTWpJc05qY3VPVEEwSURFeE55NHlNeklzTmpjdU5EUTVJREV4T0M0Mk16Z3NOamN1TkRRNUlFTXhNVGt1Tnpnc05qY3VORFE1SURFeU1DNDNPVFlzTmpjdU56VTRJREV5TVM0Mk5UWXNOamd1TXpZeUlFTXhNakV1TmpjNExEWTRMak0zTnlBeE1qRXVOamszTERZNExqTTVOeUF4TWpFdU56RXlMRFk0TGpReE9DQkRNVEl5TGpZd05pdzJPUzQyTmpJZ01USXpMakEzT1N3M01TNHpPU0F4TWpNdU1EYzVMRGN6TGpReE5TQkRNVEl6TGpBM09TdzNPUzQyTlRnZ01URTRMalkxTXl3NE55NHhPVGdnTVRFekxqSXhOQ3c1TUM0ek16Z2dRekV4TVM0Mk5DdzVNUzR5TkRjZ01URXdMakV6TERreExqWXhOQ0F4TURndU56STBMRGt4TGpZeE5DQk1NVEE0TGpjeU5DdzVNUzQyTVRRZ1dpQk5NVEEyTGpBd05pdzVNQzQxTURVZ1F6RXdOaTQzT0N3NU1TNHdNemNnTVRBM0xqWTVOQ3c1TVM0eU9ERWdNVEE0TGpjeU5DdzVNUzR5T0RFZ1F6RXhNQzR3TkRjc09URXVNamd4SURFeE1TNDBOemdzT1RBdU9EWTRJREV4TWk0NU9DdzVNQzR3TURFZ1F6RXhPQzR5T1RFc09EWXVPVE0xSURFeU1pNDJNVEVzTnprdU5EazJJREV5TWk0Mk1URXNOek11TkRBeklFTXhNakl1TmpFeExEY3hMalE1TkNBeE1qSXVNVGMzTERZNUxqZzRJREV5TVM0ek5UWXNOamd1TnpFNElFTXhNakF1TlRneUxEWTRMakU0TlNBeE1Ua3VOalk0TERZM0xqa3hPU0F4TVRndU5qTTRMRFkzTGpreE9TQkRNVEUzTGpNeE5TdzJOeTQ1TVRrZ01URTFMamc0TXl3Mk9DNHpOaUF4TVRRdU16Z3lMRFk1TGpJeU55QkRNVEE1TGpBM01TdzNNaTR5T1RNZ01UQTBMamMxTVN3M09TNDNNek1nTVRBMExqYzFNU3c0TlM0NE1qWWdRekV3TkM0M05URXNPRGN1TnpNMUlERXdOUzR4T0RVc09Ea3VNelF6SURFd05pNHdNRFlzT1RBdU5UQTFJRXd4TURZdU1EQTJMRGt3TGpVd05TQmFJaUJwWkQwaVJtbHNiQzB5TVNJZ1ptbHNiRDBpSXpZd04wUTRRaUkrUEM5d1lYUm9QZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4d1lYUm9JR1E5SWsweE5Ea3VNekU0TERjdU1qWXlJRXd4TXprdU16TTBMREUyTGpFMElFd3hOVFV1TWpJM0xESTNMakUzTVNCTU1UWXdMamd4Tml3eU1TNHdOVGtnVERFME9TNHpNVGdzTnk0eU5qSWlJR2xrUFNKR2FXeHNMVEl5SWlCbWFXeHNQU0lqUmtGR1FVWkJJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRFMk9TNDJOellzTVRNdU9EUWdUREUxT1M0NU1qZ3NNVGt1TkRZM0lFTXhOVFl1TWpnMkxESXhMalUzSURFMU1DNDBMREl4TGpVNElERTBOaTQzT0RFc01Ua3VORGt4SUVNeE5ETXVNVFl4TERFM0xqUXdNaUF4TkRNdU1UZ3NNVFF1TURBeklERTBOaTQ0TWpJc01URXVPU0JNTVRVMkxqTXhOeXcyTGpJNU1pQk1NVFE1TGpVNE9Dd3lMalF3TnlCTU5qY3VOelV5TERRNUxqUTNPQ0JNTVRFekxqWTNOU3czTlM0NU9USWdUREV4Tmk0M05UWXNOelF1TWpFeklFTXhNVGN1TXpnM0xEY3pMamcwT0NBeE1UY3VOakkxTERjekxqTXhOU0F4TVRjdU16YzBMRGN5TGpneU15QkRNVEUxTGpBeE55dzJPQzR4T1RFZ01URTBMamM0TVN3Mk15NHlOemNnTVRFMkxqWTVNU3cxT0M0MU5qRWdRekV5TWk0ek1qa3NORFF1TmpReElERTBNUzR5TERNekxqYzBOaUF4TmpVdU16QTVMRE13TGpRNU1TQkRNVGN6TGpRM09Dd3lPUzR6T0RnZ01UZ3hMams0T1N3eU9TNDFNalFnTVRrd0xqQXhNeXd6TUM0NE9EVWdRekU1TUM0NE5qVXNNekV1TURNZ01Ua3hMamM0T1N3ek1DNDRPVE1nTVRreUxqUXlMRE13TGpVeU9DQk1NVGsxTGpVd01Td3lPQzQzTlNCTU1UWTVMalkzTml3eE15NDROQ0lnYVdROUlrWnBiR3d0TWpNaUlHWnBiR3c5SWlOR1FVWkJSa0VpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1URXpMalkzTlN3M05pNDBOVGtnUXpFeE15NDFPVFFzTnpZdU5EVTVJREV4TXk0MU1UUXNOell1TkRNNElERXhNeTQwTkRJc056WXVNemszSUV3Mk55NDFNVGdzTkRrdU9EZ3lJRU0yTnk0ek56UXNORGt1TnprNUlEWTNMakk0TkN3ME9TNDJORFVnTmpjdU1qZzFMRFE1TGpRM09DQkROamN1TWpnMUxEUTVMak14TVNBMk55NHpOelFzTkRrdU1UVTNJRFkzTGpVeE9TdzBPUzR3TnpNZ1RERTBPUzR6TlRVc01pNHdNRElnUXpFME9TNDBPVGtzTVM0NU1Ua2dNVFE1TGpZM055d3hMamt4T1NBeE5Ea3VPREl4TERJdU1EQXlJRXd4TlRZdU5UVXNOUzQ0T0RjZ1F6RTFOaTQzTnpRc05pNHdNVGNnTVRVMkxqZzFMRFl1TXpBeUlERTFOaTQzTWpJc05pNDFNallnUXpFMU5pNDFPVElzTmk0M05Ea2dNVFUyTGpNd055dzJMamd5TmlBeE5UWXVNRGd6TERZdU5qazJJRXd4TkRrdU5UZzNMREl1T1RRMklFdzJPQzQyT0Rjc05Ea3VORGM1SUV3eE1UTXVOamMxTERjMUxqUTFNaUJNTVRFMkxqVXlNeXczTXk0NE1EZ2dRekV4Tmk0M01UVXNOek11TmprM0lERXhOeTR4TkRNc056TXVNems1SURFeE5pNDVOVGdzTnpNdU1ETTFJRU14TVRRdU5UUXlMRFk0TGpJNE55QXhNVFF1TXl3Mk15NHlNakVnTVRFMkxqSTFPQ3cxT0M0ek9EVWdRekV4T1M0d05qUXNOVEV1TkRVNElERXlOUzR4TkRNc05EVXVNVFF6SURFek15NDROQ3cwTUM0eE1qSWdRekUwTWk0ME9UY3NNelV1TVRJMElERTFNeTR6TlRnc016RXVOak16SURFMk5TNHlORGNzTXpBdU1ESTRJRU14TnpNdU5EUTFMREk0TGpreU1TQXhPREl1TURNM0xESTVMakExT0NBeE9UQXVNRGt4TERNd0xqUXlOU0JETVRrd0xqZ3pMRE13TGpVMUlERTVNUzQyTlRJc016QXVORE15SURFNU1pNHhPRFlzTXpBdU1USTBJRXd4T1RRdU5UWTNMREk0TGpjMUlFd3hOamt1TkRReUxERTBMakkwTkNCRE1UWTVMakl4T1N3eE5DNHhNVFVnTVRZNUxqRTBNaXd4TXk0NE1qa2dNVFk1TGpJM01Td3hNeTQyTURZZ1F6RTJPUzQwTERFekxqTTRNaUF4TmprdU5qZzFMREV6TGpNd05pQXhOamt1T1RBNUxERXpMalF6TlNCTU1UazFMamN6TkN3eU9DNHpORFVnUXpFNU5TNDROemtzTWpndU5ESTRJREU1TlM0NU5qZ3NNamd1TlRneklERTVOUzQ1Tmpnc01qZ3VOelVnUXpFNU5TNDVOamdzTWpndU9URTJJREU1TlM0NE56a3NNamt1TURjeElERTVOUzQzTXpRc01qa3VNVFUwSUV3eE9USXVOalV6TERNd0xqa3pNeUJETVRreExqa3pNaXd6TVM0ek5TQXhPVEF1T0Rrc016RXVOVEE0SURFNE9TNDVNelVzTXpFdU16UTJJRU14T0RFdU9UY3lMREk1TGprNU5TQXhOek11TkRjNExESTVMamcySURFMk5TNHpOeklzTXpBdU9UVTBJRU14TlRNdU5qQXlMRE15TGpVME15QXhOREl1T0RZc016VXVPVGt6SURFek5DNHpNRGNzTkRBdU9UTXhJRU14TWpVdU56a3pMRFExTGpnME55QXhNVGt1T0RVeExEVXlMakF3TkNBeE1UY3VNVEkwTERVNExqY3pOaUJETVRFMUxqSTNMRFl6TGpNeE5DQXhNVFV1TlRBeExEWTRMakV4TWlBeE1UY3VOemtzTnpJdU5qRXhJRU14TVRndU1UWXNOek11TXpNMklERXhOeTQ0TkRVc056UXVNVEkwSURFeE5pNDVPU3czTkM0Mk1UY2dUREV4TXk0NU1Ea3NOell1TXprM0lFTXhNVE11T0RNMkxEYzJMalF6T0NBeE1UTXVOelUyTERjMkxqUTFPU0F4TVRNdU5qYzFMRGMyTGpRMU9TSWdhV1E5SWtacGJHd3RNalFpSUdacGJHdzlJaU0wTlRWQk5qUWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOTVRVekxqTXhOaXd5TVM0eU56a2dRekUxTUM0NU1ETXNNakV1TWpjNUlERTBPQzQwT1RVc01qQXVOelV4SURFME5pNDJOalFzTVRrdU5qa3pJRU14TkRRdU9EUTJMREU0TGpZME5DQXhORE11T0RRMExERTNMakl6TWlBeE5ETXVPRFEwTERFMUxqY3hPQ0JETVRRekxqZzBOQ3d4TkM0eE9URWdNVFEwTGpnMkxERXlMamMyTXlBeE5EWXVOekExTERFeExqWTVPQ0JNTVRVMkxqRTVPQ3cyTGpBNU1TQkRNVFUyTGpNd09TdzJMakF5TlNBeE5UWXVORFV5TERZdU1EWXlJREUxTmk0MU1UZ3NOaTR4TnpNZ1F6RTFOaTQxT0RNc05pNHlPRFFnTVRVMkxqVTBOeXcyTGpReU55QXhOVFl1TkRNMkxEWXVORGt6SUV3eE5EWXVPVFFzTVRJdU1UQXlJRU14TkRVdU1qUTBMREV6TGpBNE1TQXhORFF1TXpFeUxERTBMak0yTlNBeE5EUXVNekV5TERFMUxqY3hPQ0JETVRRMExqTXhNaXd4Tnk0d05UZ2dNVFExTGpJekxERTRMak15TmlBeE5EWXVPRGszTERFNUxqSTRPU0JETVRVd0xqUTBOaXd5TVM0ek16Z2dNVFUyTGpJMExESXhMak15TnlBeE5Ua3VPREV4TERFNUxqSTJOU0JNTVRZNUxqVTFPU3d4TXk0Mk16Y2dRekUyT1M0Mk55d3hNeTQxTnpNZ01UWTVMamd4TXl3eE15NDJNVEVnTVRZNUxqZzNPQ3d4TXk0M01qTWdRekUyT1M0NU5ETXNNVE11T0RNMElERTJPUzQ1TURRc01UTXVPVGMzSURFMk9TNDNPVE1zTVRRdU1EUXlJRXd4TmpBdU1EUTFMREU1TGpZM0lFTXhOVGd1TVRnM0xESXdMamMwTWlBeE5UVXVOelE1TERJeExqSTNPU0F4TlRNdU16RTJMREl4TGpJM09TSWdhV1E5SWtacGJHd3RNalVpSUdacGJHdzlJaU0yTURkRU9FSWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOTVRFekxqWTNOU3czTlM0NU9USWdURFkzTGpjMk1pdzBPUzQwT0RRaUlHbGtQU0pHYVd4c0xUSTJJaUJtYVd4c1BTSWpORFUxUVRZMElqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVEV4TXk0Mk56VXNOell1TXpReUlFTXhNVE11TmpFMUxEYzJMak0wTWlBeE1UTXVOVFUxTERjMkxqTXlOeUF4TVRNdU5TdzNOaTR5T1RVZ1REWTNMalU0Tnl3ME9TNDNPRGNnUXpZM0xqUXhPU3cwT1M0Mk9TQTJOeTR6TmpJc05Ea3VORGMySURZM0xqUTFPU3cwT1M0ek1Ea2dRelkzTGpVMU5pdzBPUzR4TkRFZ05qY3VOemNzTkRrdU1EZ3pJRFkzTGprek55dzBPUzR4T0NCTU1URXpMamcxTERjMUxqWTRPQ0JETVRFMExqQXhPQ3czTlM0M09EVWdNVEUwTGpBM05TdzNOaUF4TVRNdU9UYzRMRGMyTGpFMk55QkRNVEV6TGpreE5DdzNOaTR5TnprZ01URXpMamM1Tml3M05pNHpORElnTVRFekxqWTNOU3czTmk0ek5ESWlJR2xrUFNKR2FXeHNMVEkzSWlCbWFXeHNQU0lqTkRVMVFUWTBJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRZM0xqYzJNaXcwT1M0ME9EUWdURFkzTGpjMk1pd3hNRE11TkRnMUlFTTJOeTQzTmpJc01UQTBMalUzTlNBMk9DNDFNeklzTVRBMUxqa3dNeUEyT1M0ME9ESXNNVEEyTGpRMU1pQk1NVEV4TGprMU5Td3hNekF1T1RjeklFTXhNVEl1T1RBMUxERXpNUzQxTWpJZ01URXpMalkzTlN3eE16RXVNRGd6SURFeE15NDJOelVzTVRJNUxqazVNeUJNTVRFekxqWTNOU3czTlM0NU9USWlJR2xrUFNKR2FXeHNMVEk0SWlCbWFXeHNQU0lqUmtGR1FVWkJJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRFeE1pNDNNamNzTVRNeExqVTJNU0JETVRFeUxqUXpMREV6TVM0MU5qRWdNVEV5TGpFd055d3hNekV1TkRZMklERXhNUzQzT0N3eE16RXVNamMySUV3Mk9TNHpNRGNzTVRBMkxqYzFOU0JETmpndU1qUTBMREV3Tmk0eE5ESWdOamN1TkRFeUxERXdOQzQzTURVZ05qY3VOREV5TERFd015NDBPRFVnVERZM0xqUXhNaXcwT1M0ME9EUWdRelkzTGpReE1pdzBPUzR5T1NBMk55NDFOamtzTkRrdU1UTTBJRFkzTGpjMk1pdzBPUzR4TXpRZ1F6WTNMamsxTml3ME9TNHhNelFnTmpndU1URXpMRFE1TGpJNUlEWTRMakV4TXl3ME9TNDBPRFFnVERZNExqRXhNeXd4TURNdU5EZzFJRU0yT0M0eE1UTXNNVEEwTGpRME5TQTJPQzQ0TWl3eE1EVXVOalkxSURZNUxqWTFOeXd4TURZdU1UUTRJRXd4TVRJdU1UTXNNVE13TGpZM0lFTXhNVEl1TkRjMExERXpNQzQ0TmpnZ01URXlMamM1TVN3eE16QXVPVEV6SURFeE15d3hNekF1TnpreUlFTXhNVE11TWpBMkxERXpNQzQyTnpNZ01URXpMak15TlN3eE16QXVNemd4SURFeE15NHpNalVzTVRJNUxqazVNeUJNTVRFekxqTXlOU3czTlM0NU9USWdRekV4TXk0ek1qVXNOelV1TnprNElERXhNeTQwT0RJc056VXVOalF4SURFeE15NDJOelVzTnpVdU5qUXhJRU14TVRNdU9EWTVMRGMxTGpZME1TQXhNVFF1TURJMUxEYzFMamM1T0NBeE1UUXVNREkxTERjMUxqazVNaUJNTVRFMExqQXlOU3d4TWprdU9Ua3pJRU14TVRRdU1ESTFMREV6TUM0Mk5EZ2dNVEV6TGpjNE5pd3hNekV1TVRRM0lERXhNeTR6TlN3eE16RXVNems1SUVNeE1UTXVNVFl5TERFek1TNDFNRGNnTVRFeUxqazFNaXd4TXpFdU5UWXhJREV4TWk0M01qY3NNVE14TGpVMk1TSWdhV1E5SWtacGJHd3RNamtpSUdacGJHdzlJaU0wTlRWQk5qUWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOTVRFeUxqZzJMRFF3TGpVeE1pQkRNVEV5TGpnMkxEUXdMalV4TWlBeE1USXVPRFlzTkRBdU5URXlJREV4TWk0NE5Ua3NOREF1TlRFeUlFTXhNVEF1TlRReExEUXdMalV4TWlBeE1EZ3VNellzTXprdU9Ua2dNVEEyTGpjeE55d3pPUzR3TkRFZ1F6RXdOUzR3TVRJc016Z3VNRFUzSURFd05DNHdOelFzTXpZdU56STJJREV3TkM0d056UXNNelV1TWpreUlFTXhNRFF1TURjMExETXpMamcwTnlBeE1EVXVNREkyTERNeUxqVXdNU0F4TURZdU56VTBMRE14TGpVd05DQk1NVEU0TGpjNU5Td3lOQzQxTlRFZ1F6RXlNQzQwTmpNc01qTXVOVGc1SURFeU1pNDJOamtzTWpNdU1EVTRJREV5TlM0d01EY3NNak11TURVNElFTXhNamN1TXpJMUxESXpMakExT0NBeE1qa3VOVEEyTERJekxqVTRNU0F4TXpFdU1UVXNNalF1TlRNZ1F6RXpNaTQ0TlRRc01qVXVOVEUwSURFek15NDNPVE1zTWpZdU9EUTFJREV6TXk0M09UTXNNamd1TWpjNElFTXhNek11TnprekxESTVMamN5TkNBeE16SXVPRFF4TERNeExqQTJPU0F4TXpFdU1URXpMRE15TGpBMk55Qk1NVEU1TGpBM01Td3pPUzR3TVRrZ1F6RXhOeTQwTURNc016a3VPVGd5SURFeE5TNHhPVGNzTkRBdU5URXlJREV4TWk0NE5pdzBNQzQxTVRJZ1RERXhNaTQ0Tml3ME1DNDFNVElnV2lCTk1USTFMakF3Tnl3eU15NDNOVGtnUXpFeU1pNDNPU3d5TXk0M05Ua2dNVEl3TGpjd09Td3lOQzR5TlRZZ01URTVMakUwTml3eU5TNHhOVGdnVERFd055NHhNRFFzTXpJdU1URWdRekV3TlM0Mk1ESXNNekl1T1RjNElERXdOQzQzTnpRc016UXVNVEE0SURFd05DNDNOelFzTXpVdU1qa3lJRU14TURRdU56YzBMRE0yTGpRMk5TQXhNRFV1TlRnNUxETTNMalU0TVNBeE1EY3VNRFkzTERNNExqUXpOQ0JETVRBNExqWXdOU3d6T1M0ek1qTWdNVEV3TGpZMk15d3pPUzQ0TVRJZ01URXlMamcxT1N3ek9TNDRNVElnVERFeE1pNDROaXd6T1M0NE1USWdRekV4TlM0d056WXNNemt1T0RFeUlERXhOeTR4TlRnc016a3VNekUxSURFeE9DNDNNakVzTXpndU5ERXpJRXd4TXpBdU56WXlMRE14TGpRMklFTXhNekl1TWpZMExETXdMalU1TXlBeE16TXVNRGt5TERJNUxqUTJNeUF4TXpNdU1Ea3lMREk0TGpJM09DQkRNVE16TGpBNU1pd3lOeTR4TURZZ01UTXlMakkzT0N3eU5TNDVPU0F4TXpBdU9Dd3lOUzR4TXpZZ1F6RXlPUzR5TmpFc01qUXVNalE0SURFeU55NHlNRFFzTWpNdU56VTVJREV5TlM0d01EY3NNak11TnpVNUlFd3hNalV1TURBM0xESXpMamMxT1NCYUlpQnBaRDBpUm1sc2JDMHpNQ0lnWm1sc2JEMGlJell3TjBRNFFpSStQQzl3WVhSb1Bnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh3WVhSb0lHUTlJazB4TmpVdU5qTXNNVFl1TWpFNUlFd3hOVGt1T0RrMkxERTVMalV6SUVNeE5UWXVOekk1TERJeExqTTFPQ0F4TlRFdU5qRXNNakV1TXpZM0lERTBPQzQwTmpNc01Ua3VOVFVnUXpFME5TNHpNVFlzTVRjdU56TXpJREUwTlM0ek16SXNNVFF1TnpjNElERTBPQzQwT1Rrc01USXVPVFE1SUV3eE5UUXVNak16TERrdU5qTTVJRXd4TmpVdU5qTXNNVFl1TWpFNUlpQnBaRDBpUm1sc2JDMHpNU0lnWm1sc2JEMGlJMFpCUmtGR1FTSStQQzl3WVhSb1Bnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh3WVhSb0lHUTlJazB4TlRRdU1qTXpMREV3TGpRME9DQk1NVFkwTGpJeU9Dd3hOaTR5TVRrZ1RERTFPUzQxTkRZc01UZ3VPVEl6SUVNeE5UZ3VNVEV5TERFNUxqYzFJREUxTmk0eE9UUXNNakF1TWpBMklERTFOQzR4TkRjc01qQXVNakEySUVNeE5USXVNVEU0TERJd0xqSXdOaUF4TlRBdU1qSTBMREU1TGpjMU55QXhORGd1T0RFMExERTRMamswTXlCRE1UUTNMalV5TkN3eE9DNHhPVGtnTVRRMkxqZ3hOQ3d4Tnk0eU5Ea2dNVFEyTGpneE5Dd3hOaTR5TmprZ1F6RTBOaTQ0TVRRc01UVXVNamM0SURFME55NDFNemNzTVRRdU16RTBJREUwT0M0NE5Td3hNeTQxTlRZZ1RERTFOQzR5TXpNc01UQXVORFE0SUUweE5UUXVNak16TERrdU5qTTVJRXd4TkRndU5EazVMREV5TGprME9TQkRNVFExTGpNek1pd3hOQzQzTnpnZ01UUTFMak14Tml3eE55NDNNek1nTVRRNExqUTJNeXd4T1M0MU5TQkRNVFV3TGpBek1Td3lNQzQwTlRVZ01UVXlMakE0Tml3eU1DNDVNRGNnTVRVMExqRTBOeXd5TUM0NU1EY2dRekUxTmk0eU1qUXNNakF1T1RBM0lERTFPQzR6TURZc01qQXVORFEzSURFMU9TNDRPVFlzTVRrdU5UTWdUREUyTlM0Mk15d3hOaTR5TVRrZ1RERTFOQzR5TXpNc09TNDJNemtpSUdsa1BTSkdhV3hzTFRNeUlpQm1hV3hzUFNJak5qQTNSRGhDSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRURTBOUzQwTkRVc056SXVOalkzSUV3eE5EVXVORFExTERjeUxqWTJOeUJETVRRekxqWTNNaXczTWk0Mk5qY2dNVFF5TGpJd05DdzNNUzQ0TVRjZ01UUXhMakl3TWl3M01DNDBNaklnUXpFME1TNHhNelVzTnpBdU16TWdNVFF4TGpFME5TdzNNQzR4TkRjZ01UUXhMakl5TlN3M01DNHdOallnUXpFME1TNHpNRFVzTmprdU9UZzFJREUwTVM0ME16SXNOamt1T1RRMklERTBNUzQxTWpVc056QXVNREV4SUVNeE5ESXVNekEyTERjd0xqVTFPU0F4TkRNdU1qTXhMRGN3TGpneU15QXhORFF1TWpjMkxEY3dMamd5TWlCRE1UUTFMalU1T0N3M01DNDRNaklnTVRRM0xqQXpMRGN3TGpNM05pQXhORGd1TlRNeUxEWTVMalV3T1NCRE1UVXpMamcwTWl3Mk5pNDBORE1nTVRVNExqRTJNeXcxT0M0NU9EY2dNVFU0TGpFMk15dzFNaTQ0T1RRZ1F6RTFPQzR4TmpNc05UQXVPVFkzSURFMU55NDNNakVzTkRrdU16TXlJREUxTmk0NE9EUXNORGd1TVRZNElFTXhOVFl1T0RFNExEUTRMakEzTmlBeE5UWXVPREk0TERRM0xqazBPQ0F4TlRZdU9UQTRMRFEzTGpnMk55QkRNVFUyTGprNE9DdzBOeTQzT0RZZ01UVTNMakV4TkN3ME55NDNOelFnTVRVM0xqSXdPQ3cwTnk0NE5DQkRNVFU0TGpnM09DdzBPUzR3TVRJZ01UVTVMamM1T0N3MU1TNHlNaUF4TlRrdU56azRMRFUwTGpBMU9TQkRNVFU1TGpjNU9DdzJNQzR6TURFZ01UVTFMak0zTXl3Mk9DNHdORFlnTVRRNUxqa3pNeXczTVM0eE9EWWdRekUwT0M0ek5pdzNNaTR3T1RRZ01UUTJMamcxTERjeUxqWTJOeUF4TkRVdU5EUTFMRGN5TGpZMk55Qk1NVFExTGpRME5TdzNNaTQyTmpjZ1dpQk5NVFF5TGpRM05pdzNNU0JETVRRekxqSTVMRGN4TGpZMU1TQXhORFF1TWprMkxEY3lMakF3TWlBeE5EVXVORFExTERjeUxqQXdNaUJETVRRMkxqYzJOeXczTWk0d01ESWdNVFE0TGpFNU9DdzNNUzQxTlNBeE5Ea3VOeXczTUM0Mk9ESWdRekUxTlM0d01TdzJOeTQyTVRjZ01UVTVMak16TVN3Mk1DNHhOVGtnTVRVNUxqTXpNU3cxTkM0d05qVWdRekUxT1M0ek16RXNOVEl1TURnMUlERTFPQzQ0Tmpnc05UQXVORE0xSURFMU9DNHdNRFlzTkRrdU1qY3lJRU14TlRndU5ERTNMRFV3TGpNd055QXhOVGd1TmpNc05URXVOVE15SURFMU9DNDJNeXcxTWk0NE9USWdRekUxT0M0Mk15dzFPUzR4TXpRZ01UVTBMakl3TlN3Mk5pNDNOamNnTVRRNExqYzJOU3cyT1M0NU1EY2dRekUwTnk0eE9USXNOekF1T0RFMklERTBOUzQyT0RFc056RXVNamd6SURFME5DNHlOellzTnpFdU1qZ3pJRU14TkRNdU5qTTBMRGN4TGpJNE15QXhORE11TURNekxEY3hMakU1TWlBeE5ESXVORGMyTERjeElFd3hOREl1TkRjMkxEY3hJRm9pSUdsa1BTSkdhV3hzTFRNeklpQm1hV3hzUFNJak5qQTNSRGhDSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRURTBPQzQyTkRnc05qa3VOekEwSUVNeE5UUXVNRE15TERZMkxqVTVOaUF4TlRndU16azJMRFU1TGpBMk9DQXhOVGd1TXprMkxEVXlMamc1TVNCRE1UVTRMak01Tml3MU1DNDRNemtnTVRVM0xqa3hNeXcwT1M0eE9UZ2dNVFUzTGpBM05DdzBPQzR3TXlCRE1UVTFMakk0T1N3ME5pNDNOemdnTVRVeUxqWTVPU3cwTmk0NE16WWdNVFE1TGpneE5pdzBPQzQxTURFZ1F6RTBOQzQwTXpNc05URXVOakE1SURFME1DNHdOamdzTlRrdU1UTTNJREUwTUM0d05qZ3NOalV1TXpFMElFTXhOREF1TURZNExEWTNMak0yTlNBeE5EQXVOVFV5TERZNUxqQXdOaUF4TkRFdU16a3hMRGN3TGpFM05DQkRNVFF6TGpFM05pdzNNUzQwTWpjZ01UUTFMamMyTlN3M01TNHpOamtnTVRRNExqWTBPQ3cyT1M0M01EUWlJR2xrUFNKR2FXeHNMVE0wSWlCbWFXeHNQU0lqUmtGR1FVWkJJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRFME5DNHlOellzTnpFdU1qYzJJRXd4TkRRdU1qYzJMRGN4TGpJM05pQkRNVFF6TGpFek15dzNNUzR5TnpZZ01UUXlMakV4T0N3M01DNDVOamtnTVRReExqSTFOeXczTUM0ek5qVWdRekUwTVM0eU16WXNOekF1TXpVeElERTBNUzR5TVRjc056QXVNek15SURFME1TNHlNRElzTnpBdU16RXhJRU14TkRBdU16QTNMRFk1TGpBMk55QXhNemt1T0RNMUxEWTNMak16T1NBeE16a3VPRE0xTERZMUxqTXhOQ0JETVRNNUxqZ3pOU3cxT1M0d056TWdNVFEwTGpJMkxEVXhMalF6T1NBeE5Ea3VOeXcwT0M0eU9UZ2dRekUxTVM0eU56TXNORGN1TXprZ01UVXlMamM0TkN3ME5pNDVNamtnTVRVMExqRTRPU3cwTmk0NU1qa2dRekUxTlM0ek16SXNORFl1T1RJNUlERTFOaTR6TkRjc05EY3VNak0ySURFMU55NHlNRGdzTkRjdU9ETTVJRU14TlRjdU1qSTVMRFEzTGpnMU5DQXhOVGN1TWpRNExEUTNMamczTXlBeE5UY3VNall6TERRM0xqZzVOQ0JETVRVNExqRTFOeXcwT1M0eE16Z2dNVFU0TGpZekxEVXdMamcyTlNBeE5UZ3VOak1zTlRJdU9Ea3hJRU14TlRndU5qTXNOVGt1TVRNeUlERTFOQzR5TURVc05qWXVOelkySURFME9DNDNOalVzTmprdU9UQTNJRU14TkRjdU1Ua3lMRGN3TGpneE5TQXhORFV1TmpneExEY3hMakkzTmlBeE5EUXVNamMyTERjeExqSTNOaUJNTVRRMExqSTNOaXczTVM0eU56WWdXaUJOTVRReExqVTFPQ3czTUM0eE1EUWdRekUwTWk0ek16RXNOekF1TmpNM0lERTBNeTR5TkRVc056RXVNREExSURFME5DNHlOellzTnpFdU1EQTFJRU14TkRVdU5UazRMRGN4TGpBd05TQXhORGN1TURNc056QXVORFkzSURFME9DNDFNeklzTmprdU5pQkRNVFV6TGpnME1pdzJOaTQxTXpRZ01UVTRMakUyTXl3MU9TNHdNek1nTVRVNExqRTJNeXcxTWk0NU16a2dRekUxT0M0eE5qTXNOVEV1TURNeElERTFOeTQzTWprc05Ea3VNemcxSURFMU5pNDVNRGNzTkRndU1qSXpJRU14TlRZdU1UTXpMRFEzTGpZNU1TQXhOVFV1TWpFNUxEUTNMalF3T1NBeE5UUXVNVGc1TERRM0xqUXdPU0JETVRVeUxqZzJOeXcwTnk0ME1Ea2dNVFV4TGpRek5TdzBOeTQ0TkRJZ01UUTVMamt6TXl3ME9DNDNNRGtnUXpFME5DNDJNak1zTlRFdU56YzFJREUwTUM0ek1ESXNOVGt1TWpjeklERTBNQzR6TURJc05qVXVNelkySUVNeE5EQXVNekF5TERZM0xqSTNOaUF4TkRBdU56TTJMRFk0TGprME1pQXhOREV1TlRVNExEY3dMakV3TkNCTU1UUXhMalUxT0N3M01DNHhNRFFnV2lJZ2FXUTlJa1pwYkd3dE16VWlJR1pwYkd3OUlpTTJNRGRFT0VJaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5NVFV3TGpjeUxEWTFMak0yTVNCTU1UVXdMak0xTnl3Mk5TNHdOallnUXpFMU1TNHhORGNzTmpRdU1Ea3lJREUxTVM0NE5qa3NOak11TURRZ01UVXlMalV3TlN3Mk1TNDVNemdnUXpFMU15NHpNVE1zTmpBdU5UTTVJREUxTXk0NU56Z3NOVGt1TURZM0lERTFOQzQwT0RJc05UY3VOVFl6SUV3eE5UUXVPVEkxTERVM0xqY3hNaUJETVRVMExqUXhNaXcxT1M0eU5EVWdNVFV6TGpjek15dzJNQzQzTkRVZ01UVXlMamt4TERZeUxqRTNNaUJETVRVeUxqSTJNaXcyTXk0eU9UVWdNVFV4TGpVeU5TdzJOQzR6TmpnZ01UVXdMamN5TERZMUxqTTJNU0lnYVdROUlrWnBiR3d0TXpZaUlHWnBiR3c5SWlNMk1EZEVPRUlpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1URTFMamt4Tnl3NE5DNDFNVFFnVERFeE5TNDFOVFFzT0RRdU1qSWdRekV4Tmk0ek5EUXNPRE11TWpRMUlERXhOeTR3TmpZc09ESXVNVGswSURFeE55NDNNRElzT0RFdU1Ea3lJRU14TVRndU5URXNOemt1TmpreUlERXhPUzR4TnpVc056Z3VNaklnTVRFNUxqWTNPQ3czTmk0M01UY2dUREV5TUM0eE1qRXNOell1T0RZMUlFTXhNVGt1TmpBNExEYzRMak01T0NBeE1UZ3VPVE1zTnprdU9EazVJREV4T0M0eE1EWXNPREV1TXpJMklFTXhNVGN1TkRVNExEZ3lMalEwT0NBeE1UWXVOekl5TERnekxqVXlNU0F4TVRVdU9URTNMRGcwTGpVeE5DSWdhV1E5SWtacGJHd3RNemNpSUdacGJHdzlJaU0yTURkRU9FSWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOTVRFMExERXpNQzQwTnpZZ1RERXhOQ3d4TXpBdU1EQTRJRXd4TVRRc056WXVNRFV5SUV3eE1UUXNOelV1TlRnMElFd3hNVFFzTnpZdU1EVXlJRXd4TVRRc01UTXdMakF3T0NCTU1URTBMREV6TUM0ME56WWlJR2xrUFNKR2FXeHNMVE00SWlCbWFXeHNQU0lqTmpBM1JEaENJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMmMrQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WnlCcFpEMGlTVzF3YjNKMFpXUXRUR0Y1WlhKekxVTnZjSGtpSUhSeVlXNXpabTl5YlQwaWRISmhibk5zWVhSbEtEWXlMakF3TURBd01Dd2dNQzR3TURBd01EQXBJaUJ6YTJWMFkyZzZkSGx3WlQwaVRWTlRhR0Z3WlVkeWIzVndJajRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1Ua3VPREl5TERNM0xqUTNOQ0JETVRrdU9ETTVMRE0zTGpNek9TQXhPUzQzTkRjc016Y3VNVGswSURFNUxqVTFOU3d6Tnk0d09ESWdRekU1TGpJeU9Dd3pOaTQ0T1RRZ01UZ3VOekk1TERNMkxqZzNNaUF4T0M0ME5EWXNNemN1TURNM0lFd3hNaTQwTXpRc05EQXVOVEE0SUVNeE1pNHpNRE1zTkRBdU5UZzBJREV5TGpJMExEUXdMalk0TmlBeE1pNHlORE1zTkRBdU56a3pJRU14TWk0eU5EVXNOREF1T1RJMUlERXlMakkwTlN3ME1TNHlOVFFnTVRJdU1qUTFMRFF4TGpNM01TQk1NVEl1TWpRMUxEUXhMalF4TkNCTU1USXVNak00TERReExqVTBNaUJET0M0eE5EZ3NORE11T0RnM0lEVXVOalEzTERRMUxqTXlNU0ExTGpZME55dzBOUzR6TWpFZ1F6VXVOalEyTERRMUxqTXlNU0F6TGpVM0xEUTJMak0yTnlBeUxqZzJMRFV3TGpVeE15QkRNaTQ0Tml3MU1DNDFNVE1nTVM0NU5EZ3NOVGN1TkRjMElERXVPVFl5TERjd0xqSTFPQ0JETVM0NU56Y3NPREl1T0RJNElESXVOVFk0TERnM0xqTXlPQ0F6TGpFeU9TdzVNUzQyTURrZ1F6TXVNelE1TERrekxqSTVNeUEyTGpFekxEa3pMamN6TkNBMkxqRXpMRGt6TGpjek5DQkROaTQwTmpFc09UTXVOemMwSURZdU9ESTRMRGt6TGpjd055QTNMakl4TERrekxqUTROaUJNT0RJdU5EZ3pMRFE1TGprek5TQkRPRFF1TWpreExEUTRMamcyTmlBNE5TNHhOU3cwTmk0eU1UWWdPRFV1TlRNNUxEUXpMalkxTVNCRE9EWXVOelV5TERNMUxqWTJNU0E0Tnk0eU1UUXNNVEF1TmpjeklEZzFMakkyTkN3ekxqYzNNeUJET0RVdU1EWTRMRE11TURnZ09EUXVOelUwTERJdU5qa2dPRFF1TXprMkxESXVORGt4SUV3NE1pNHpNU3d4TGpjd01TQkRPREV1TlRnekxERXVOekk1SURnd0xqZzVOQ3d5TGpFMk9DQTRNQzQzTnpZc01pNHlNellnUXpnd0xqWXpOaXd5TGpNeE55QTBNUzQ0TURjc01qUXVOVGcxSURJd0xqQXpNaXd6Tnk0d056SWdUREU1TGpneU1pd3pOeTQwTnpRaUlHbGtQU0pHYVd4c0xURWlJR1pwYkd3OUlpTkdSa1pHUmtZaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5PREl1TXpFeExERXVOekF4SUV3NE5DNHpPVFlzTWk0ME9URWdRemcwTGpjMU5Dd3lMalk1SURnMUxqQTJPQ3d6TGpBNElEZzFMakkyTkN3ekxqYzNNeUJET0RjdU1qRXpMREV3TGpZM015QTROaTQzTlRFc016VXVOallnT0RVdU5UTTVMRFF6TGpZMU1TQkRPRFV1TVRRNUxEUTJMakl4TmlBNE5DNHlPU3cwT0M0NE5qWWdPREl1TkRnekxEUTVMamt6TlNCTU55NHlNU3c1TXk0ME9EWWdRell1T0RrM0xEa3pMalkyTnlBMkxqVTVOU3c1TXk0M05EUWdOaTR6TVRRc09UTXVOelEwSUV3MkxqRXpNU3c1TXk0M016TWdRell1TVRNeExEa3pMamN6TkNBekxqTTBPU3c1TXk0eU9UTWdNeTR4TWpnc09URXVOakE1SUVNeUxqVTJPQ3c0Tnk0ek1qY2dNUzQ1Tnpjc09ESXVPREk0SURFdU9UWXpMRGN3TGpJMU9DQkRNUzQ1TkRnc05UY3VORGMwSURJdU9EWXNOVEF1TlRFeklESXVPRFlzTlRBdU5URXpJRU16TGpVM0xEUTJMak0yTnlBMUxqWTBOeXcwTlM0ek1qRWdOUzQyTkRjc05EVXVNekl4SUVNMUxqWTBOeXcwTlM0ek1qRWdPQzR4TkRnc05ETXVPRGczSURFeUxqSXpPQ3cwTVM0MU5ESWdUREV5TGpJME5TdzBNUzQwTVRRZ1RERXlMakkwTlN3ME1TNHpOekVnUXpFeUxqSTBOU3cwTVM0eU5UUWdNVEl1TWpRMUxEUXdMamt5TlNBeE1pNHlORE1zTkRBdU56a3pJRU14TWk0eU5DdzBNQzQyT0RZZ01USXVNekF5TERRd0xqVTRNeUF4TWk0ME16UXNOREF1TlRBNElFd3hPQzQwTkRZc016Y3VNRE0ySUVNeE9DNDFOelFzTXpZdU9UWXlJREU0TGpjME5pd3pOaTQ1TWpZZ01UZ3VPVEkzTERNMkxqa3lOaUJETVRrdU1UUTFMRE0yTGpreU5pQXhPUzR6TnpZc016WXVPVGM1SURFNUxqVTFOQ3d6Tnk0d09ESWdRekU1TGpjME55d3pOeTR4T1RRZ01Ua3VPRE01TERNM0xqTTBJREU1TGpneU1pd3pOeTQwTnpRZ1RESXdMakF6TXl3ek55NHdOeklnUXpReExqZ3dOaXd5TkM0MU9EVWdPREF1TmpNMkxESXVNekU0SURnd0xqYzNOeXd5TGpJek5pQkRPREF1T0RrMExESXVNVFk0SURneExqVTRNeXd4TGpjeU9TQTRNaTR6TVRFc01TNDNNREVnVFRneUxqTXhNU3d3TGpjd05DQk1PREl1TWpjeUxEQXVOekExSUVNNE1TNDJOVFFzTUM0M01qZ2dPREF1T1RnNUxEQXVPVFE1SURnd0xqSTVPQ3d4TGpNMk1TQk1PREF1TWpjM0xERXVNemN6SUVNNE1DNHhNamtzTVM0ME5UZ2dOVGt1TnpZNExERXpMakV6TlNBeE9TNDNOVGdzTXpZdU1EYzVJRU14T1M0MUxETTFMams0TVNBeE9TNHlNVFFzTXpVdU9USTVJREU0TGpreU55d3pOUzQ1TWprZ1F6RTRMalUyTWl3ek5TNDVNamtnTVRndU1qSXpMRE0yTGpBeE15QXhOeTQ1TkRjc016WXVNVGN6SUV3eE1TNDVNelVzTXprdU5qUTBJRU14TVM0ME9UTXNNemt1T0RrNUlERXhMakl6Tml3ME1DNHpNelFnTVRFdU1qUTJMRFF3TGpneElFd3hNUzR5TkRjc05EQXVPVFlnVERVdU1UWTNMRFEwTGpRME55QkROQzQzT1RRc05EUXVOalEySURJdU5qSTFMRFExTGprM09DQXhMamczTnl3MU1DNHpORFVnVERFdU9EY3hMRFV3TGpNNE5DQkRNUzQ0TmpJc05UQXVORFUwSURBdU9UVXhMRFUzTGpVMU55QXdMamsyTlN3M01DNHlOVGtnUXpBdU9UYzVMRGd5TGpnM09TQXhMalUyT0N3NE55NHpOelVnTWk0eE16Y3NPVEV1TnpJMElFd3lMakV6T1N3NU1TNDNNemtnUXpJdU5EUTNMRGswTGpBNU5DQTFMall4TkN3NU5DNDJOaklnTlM0NU56VXNPVFF1TnpFNUlFdzJMakF3T1N3NU5DNDNNak1nUXpZdU1URXNPVFF1TnpNMklEWXVNakV6TERrMExqYzBNaUEyTGpNeE5DdzVOQzQzTkRJZ1F6WXVOemtzT1RRdU56UXlJRGN1TWpZc09UUXVOakVnTnk0M01TdzVOQzR6TlNCTU9ESXVPVGd6TERVd0xqYzVPQ0JET0RRdU56azBMRFE1TGpjeU55QTROUzQ1T0RJc05EY3VNemMxSURnMkxqVXlOU3cwTXk0NE1ERWdRemczTGpjeE1Td3pOUzQ1T0RjZ09EZ3VNalU1TERFd0xqY3dOU0E0Tmk0eU1qUXNNeTQxTURJZ1F6ZzFMamszTVN3eUxqWXdPU0E0TlM0MU1pd3hMamszTlNBNE5DNDRPREVzTVM0Mk1pQk1PRFF1TnpRNUxERXVOVFU0SUV3NE1pNDJOalFzTUM0M05qa2dRemd5TGpVMU1Td3dMamN5TlNBNE1pNDBNekVzTUM0M01EUWdPREl1TXpFeExEQXVOekEwSWlCcFpEMGlSbWxzYkMweUlpQm1hV3hzUFNJak5EVTFRVFkwSWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRUWTJMakkyTnl3eE1TNDFOalVnVERZM0xqYzJNaXd4TVM0NU9Ua2dUREV4TGpReU15dzBOQzR6TWpVaUlHbGtQU0pHYVd4c0xUTWlJR1pwYkd3OUlpTkdSa1pHUmtZaVBqd3ZjR0YwYUQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjR0YwYUNCa1BTSk5NVEl1TWpBeUxEa3dMalUwTlNCRE1USXVNREk1TERrd0xqVTBOU0F4TVM0NE5qSXNPVEF1TkRVMUlERXhMamMyT1N3NU1DNHlPVFVnUXpFeExqWXpNaXc1TUM0d05UY2dNVEV1TnpFekxEZzVMamMxTWlBeE1TNDVOVElzT0RrdU5qRTBJRXd6TUM0ek9Ea3NOemd1T1RZNUlFTXpNQzQyTWpnc056Z3VPRE14SURNd0xqa3pNeXczT0M0NU1UTWdNekV1TURjeExEYzVMakUxTWlCRE16RXVNakE0TERjNUxqTTVJRE14TGpFeU55dzNPUzQyT1RZZ016QXVPRGc0TERjNUxqZ3pNeUJNTVRJdU5EVXhMRGt3TGpRM09DQk1NVEl1TWpBeUxEa3dMalUwTlNJZ2FXUTlJa1pwYkd3dE5DSWdabWxzYkQwaUl6WXdOMFE0UWlJK1BDOXdZWFJvUGdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHdZWFJvSUdROUlrMHhNeTQzTmpRc05ESXVOalUwSUV3eE15NDJOVFlzTkRJdU5Ua3lJRXd4TXk0M01ESXNOREl1TkRJeElFd3hPQzQ0TXpjc016a3VORFUzSUV3eE9TNHdNRGNzTXprdU5UQXlJRXd4T0M0NU5qSXNNemt1TmpjeklFd3hNeTQ0TWpjc05ESXVOak0zSUV3eE15NDNOalFzTkRJdU5qVTBJaUJwWkQwaVJtbHNiQzAxSWlCbWFXeHNQU0lqTmpBM1JEaENJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRndU5USXNPVEF1TXpjMUlFdzRMalV5TERRMkxqUXlNU0JNT0M0MU9ETXNORFl1TXpnMUlFdzNOUzQ0TkN3M0xqVTFOQ0JNTnpVdU9EUXNOVEV1TlRBNElFdzNOUzQzTnpnc05URXVOVFEwSUV3NExqVXlMRGt3TGpNM05TQk1PQzQxTWl3NU1DNHpOelVnV2lCTk9DNDNOeXcwTmk0MU5qUWdURGd1Tnpjc09Ea3VPVFEwSUV3M05TNDFPVEVzTlRFdU16WTFJRXczTlM0MU9URXNOeTQ1T0RVZ1REZ3VOemNzTkRZdU5UWTBJRXc0TGpjM0xEUTJMalUyTkNCYUlpQnBaRDBpUm1sc2JDMDJJaUJtYVd4c1BTSWpOakEzUkRoQ0lqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVEkwTGprNE5pdzRNeTR4T0RJZ1F6STBMamMxTml3NE15NHpNekVnTWpRdU16YzBMRGd6TGpVMk5pQXlOQzR4TXpjc09ETXVOekExSUV3eE1pNDJNeklzT1RBdU5EQTJJRU14TWk0ek9UVXNPVEF1TlRRMUlERXlMalF5Tml3NU1DNDJOVGdnTVRJdU55dzVNQzQyTlRnZ1RERXpMakkyTlN3NU1DNDJOVGdnUXpFekxqVTBMRGt3TGpZMU9DQXhNeTQ1TlRnc09UQXVOVFExSURFMExqRTVOU3c1TUM0ME1EWWdUREkxTGpjc09ETXVOekExSUVNeU5TNDVNemNzT0RNdU5UWTJJREkyTGpFeU9DdzRNeTQwTlRJZ01qWXVNVEkxTERnekxqUTBPU0JETWpZdU1USXlMRGd6TGpRME55QXlOaTR4TVRrc09ETXVNaklnTWpZdU1URTVMRGd5TGprME5pQkRNall1TVRFNUxEZ3lMalkzTWlBeU5TNDVNekVzT0RJdU5UWTVJREkxTGpjd01TdzRNaTQzTVRrZ1RESTBMams0Tml3NE15NHhPRElpSUdsa1BTSkdhV3hzTFRjaUlHWnBiR3c5SWlNMk1EZEVPRUlpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk1UTXVNalkyTERrd0xqYzRNaUJNTVRJdU55dzVNQzQzT0RJZ1F6RXlMalVzT1RBdU56Z3lJREV5TGpNNE5DdzVNQzQzTWpZZ01USXVNelUwTERrd0xqWXhOaUJETVRJdU16STBMRGt3TGpVd05pQXhNaTR6T1Rjc09UQXVNems1SURFeUxqVTJPU3c1TUM0eU9Ua2dUREkwTGpBM05DdzRNeTQxT1RjZ1F6STBMak14TERnekxqUTFPU0F5TkM0Mk9Ea3NPRE11TWpJMklESTBMamt4T0N3NE15NHdOemdnVERJMUxqWXpNeXc0TWk0Mk1UUWdRekkxTGpjeU15dzRNaTQxTlRVZ01qVXVPREV6TERneUxqVXlOU0F5TlM0NE9Ua3NPREl1TlRJMUlFTXlOaTR3TnpFc09ESXVOVEkxSURJMkxqSTBOQ3c0TWk0Mk5UVWdNall1TWpRMExEZ3lMamswTmlCRE1qWXVNalEwTERnekxqRTJJREkyTGpJME5TdzRNeTR6TURrZ01qWXVNalEzTERnekxqTTRNeUJNTWpZdU1qVXpMRGd6TGpNNE55Qk1Nall1TWpRNUxEZ3pMalExTmlCRE1qWXVNalEyTERnekxqVXpNU0F5Tmk0eU5EWXNPRE11TlRNeElESTFMamMyTXl3NE15NDRNVElnVERFMExqSTFPQ3c1TUM0MU1UUWdRekUwTERrd0xqWTJOU0F4TXk0MU5qUXNPVEF1TnpneUlERXpMakkyTml3NU1DNDNPRElnVERFekxqSTJOaXc1TUM0M09ESWdXaUJOTVRJdU5qWTJMRGt3TGpVek1pQk1NVEl1Tnl3NU1DNDFNek1nVERFekxqSTJOaXc1TUM0MU16TWdRekV6TGpVeE9DdzVNQzQxTXpNZ01UTXVPVEUxTERrd0xqUXlOU0F4TkM0eE16SXNPVEF1TWprNUlFd3lOUzQyTXpjc09ETXVOVGszSUVNeU5TNDRNRFVzT0RNdU5EazVJREkxTGprek1TdzRNeTQwTWpRZ01qVXVPVGs0TERnekxqTTRNeUJETWpVdU9UazBMRGd6TGpJNU9TQXlOUzQ1T1RRc09ETXVNVFkxSURJMUxqazVOQ3c0TWk0NU5EWWdUREkxTGpnNU9TdzRNaTQzTnpVZ1RESTFMamMyT0N3NE1pNDRNalFnVERJMUxqQTFOQ3c0TXk0eU9EY2dRekkwTGpneU1pdzRNeTQwTXpjZ01qUXVORE00TERnekxqWTNNeUF5TkM0eUxEZ3pMamd4TWlCTU1USXVOamsxTERrd0xqVXhOQ0JNTVRJdU5qWTJMRGt3TGpVek1pQk1NVEl1TmpZMkxEa3dMalV6TWlCYUlpQnBaRDBpUm1sc2JDMDRJaUJtYVd4c1BTSWpOakEzUkRoQ0lqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVEV6TGpJMk5pdzRPUzQ0TnpFZ1RERXlMamNzT0RrdU9EY3hJRU14TWk0MUxEZzVMamczTVNBeE1pNHpPRFFzT0RrdU9ERTFJREV5TGpNMU5DdzRPUzQzTURVZ1F6RXlMak15TkN3NE9TNDFPVFVnTVRJdU16azNMRGc1TGpRNE9DQXhNaTQxTmprc09Ea3VNemc0SUV3eU5DNHdOelFzT0RJdU5qZzJJRU15TkM0ek16SXNPREl1TlRNMUlESTBMamMyT0N3NE1pNDBNVGdnTWpVdU1EWTNMRGd5TGpReE9DQk1NalV1TmpNeUxEZ3lMalF4T0NCRE1qVXVPRE15TERneUxqUXhPQ0F5TlM0NU5EZ3NPREl1TkRjMElESTFMamszT0N3NE1pNDFPRFFnUXpJMkxqQXdPQ3c0TWk0Mk9UUWdNalV1T1RNMUxEZ3lMamd3TVNBeU5TNDNOak1zT0RJdU9UQXhJRXd4TkM0eU5UZ3NPRGt1TmpBeklFTXhOQ3c0T1M0M05UUWdNVE11TlRZMExEZzVMamczTVNBeE15NHlOallzT0RrdU9EY3hJRXd4TXk0eU5qWXNPRGt1T0RjeElGb2dUVEV5TGpZMk5pdzRPUzQyTWpFZ1RERXlMamNzT0RrdU5qSXlJRXd4TXk0eU5qWXNPRGt1TmpJeUlFTXhNeTQxTVRnc09Ea3VOakl5SURFekxqa3hOU3c0T1M0MU1UVWdNVFF1TVRNeUxEZzVMak00T0NCTU1qVXVOak0zTERneUxqWTROaUJNTWpVdU5qWTNMRGd5TGpZMk9DQk1NalV1TmpNeUxEZ3lMalkyTnlCTU1qVXVNRFkzTERneUxqWTJOeUJETWpRdU9ERTFMRGd5TGpZMk55QXlOQzQwTVRnc09ESXVOemMxSURJMExqSXNPREl1T1RBeElFd3hNaTQyT1RVc09Ea3VOakF6SUV3eE1pNDJOallzT0RrdU5qSXhJRXd4TWk0Mk5qWXNPRGt1TmpJeElGb2lJR2xrUFNKR2FXeHNMVGtpSUdacGJHdzlJaU0yTURkRU9FSWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOTVRJdU16Y3NPVEF1T0RBeElFd3hNaTR6Tnl3NE9TNDFOVFFnVERFeUxqTTNMRGt3TGpnd01TSWdhV1E5SWtacGJHd3RNVEFpSUdacGJHdzlJaU0yTURkRU9FSWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Y0dGMGFDQmtQU0pOTmk0eE15dzVNeTQ1TURFZ1F6VXVNemM1TERrekxqZ3dPQ0EwTGpneE5pdzVNeTR4TmpRZ05DNDJPVEVzT1RJdU5USTFJRU16TGpnMkxEZzRMakk0TnlBekxqVTBMRGd6TGpjME15QXpMalV5Tml3M01TNHhOek1nUXpNdU5URXhMRFU0TGpNNE9TQTBMalF5TXl3MU1TNDBNamdnTkM0ME1qTXNOVEV1TkRJNElFTTFMakV6TkN3ME55NHlPRElnTnk0eU1TdzBOaTR5TXpZZ055NHlNU3cwTmk0eU16WWdRemN1TWpFc05EWXVNak0ySURneExqWTJOeXd6TGpJMUlEZ3lMakEyT1N3ekxqQXhOeUJET0RJdU1qa3lMREl1T0RnNElEZzBMalUxTml3eExqUXpNeUE0TlM0eU5qUXNNeTQ1TkNCRE9EY3VNakUwTERFd0xqZzBJRGcyTGpjMU1pd3pOUzQ0TWpjZ09EVXVOVE01TERRekxqZ3hPQ0JET0RVdU1UVXNORFl1TXpneklEZzBMakk1TVN3ME9TNHdNek1nT0RJdU5EZ3pMRFV3TGpFd01TQk1OeTR5TVN3NU15NDJOVE1nUXpZdU9ESTRMRGt6TGpnM05DQTJMalEyTVN3NU15NDVOREVnTmk0eE15dzVNeTQ1TURFZ1F6WXVNVE1zT1RNdU9UQXhJRE11TXpRNUxEa3pMalEySURNdU1USTVMRGt4TGpjM05pQkRNaTQxTmpnc09EY3VORGsxSURFdU9UYzNMRGd5TGprNU5TQXhMamsyTWl3M01DNDBNalVnUXpFdU9UUTRMRFUzTGpZME1TQXlMamcyTERVd0xqWTRJREl1T0RZc05UQXVOamdnUXpNdU5UY3NORFl1TlRNMElEVXVOalEzTERRMUxqUTRPU0ExTGpZME55dzBOUzQwT0RrZ1F6VXVOalEyTERRMUxqUTRPU0E0TGpBMk5TdzBOQzR3T1RJZ01USXVNalExTERReExqWTNPU0JNTVRNdU1URTJMRFF4TGpVMklFd3hPUzQzTVRVc016Y3VOek1nVERFNUxqYzJNU3d6Tnk0eU5qa2dURFl1TVRNc09UTXVPVEF4SWlCcFpEMGlSbWxzYkMweE1TSWdabWxzYkQwaUkwWkJSa0ZHUVNJK1BDOXdZWFJvUGdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHdZWFJvSUdROUlrMDJMak14Tnl3NU5DNHhOakVnVERZdU1UQXlMRGswTGpFME9DQk1OaTR4TURFc09UUXVNVFE0SUV3MUxqZzFOeXc1TkM0eE1ERWdRelV1TVRNNExEa3pMamswTlNBekxqQTROU3c1TXk0ek5qVWdNaTQ0T0RFc09URXVPREE1SUVNeUxqTXhNeXc0Tnk0ME5qa2dNUzQzTWpjc09ESXVPVGsySURFdU56RXpMRGN3TGpReU5TQkRNUzQyT1Rrc05UY3VOemN4SURJdU5qQTBMRFV3TGpjeE9DQXlMall4TXl3MU1DNDJORGdnUXpNdU16TTRMRFEyTGpReE55QTFMalEwTlN3ME5TNHpNU0ExTGpVek5TdzBOUzR5TmpZZ1RERXlMakUyTXl3ME1TNDBNemtnVERFekxqQXpNeXcwTVM0ek1pQk1NVGt1TkRjNUxETTNMalUzT0NCTU1Ua3VOVEV6TERNM0xqSTBOQ0JETVRrdU5USTJMRE0zTGpFd055QXhPUzQyTkRjc016Y3VNREE0SURFNUxqYzROaXd6Tnk0d01qRWdRekU1TGpreU1pd3pOeTR3TXpRZ01qQXVNREl6TERNM0xqRTFOaUF5TUM0d01Ea3NNemN1TWpreklFd3hPUzQ1TlN3ek55NDRPRElnVERFekxqRTVPQ3cwTVM0NE1ERWdUREV5TGpNeU9DdzBNUzQ1TVRrZ1REVXVOemN5TERRMUxqY3dOQ0JETlM0M05ERXNORFV1TnpJZ015NDNPRElzTkRZdU56Y3lJRE11TVRBMkxEVXdMamN5TWlCRE15NHdPVGtzTlRBdU56Z3lJREl1TVRrNExEVTNMamd3T0NBeUxqSXhNaXczTUM0ME1qUWdRekl1TWpJMkxEZ3lMamsyTXlBeUxqZ3dPU3c0Tnk0ME1pQXpMak0zTXl3NU1TNDNNamtnUXpNdU5EWTBMRGt5TGpReUlEUXVNRFl5TERreUxqZzRNeUEwTGpZNE1pdzVNeTR4T0RFZ1F6UXVOVFkyTERreUxqazROQ0EwTGpRNE5pdzVNaTQzTnpZZ05DNDBORFlzT1RJdU5UY3lJRU16TGpZMk5TdzRPQzQxT0RnZ015NHlPVEVzT0RRdU16Y2dNeTR5TnpZc056RXVNVGN6SUVNekxqSTJNaXcxT0M0MU1pQTBMakUyTnl3MU1TNDBOallnTkM0eE56WXNOVEV1TXprMklFTTBMamt3TVN3ME55NHhOalVnTnk0d01EZ3NORFl1TURVNUlEY3VNRGs0TERRMkxqQXhOQ0JETnk0d09UUXNORFl1TURFMUlEZ3hMalUwTWl3ekxqQXpOQ0E0TVM0NU5EUXNNaTQ0TURJZ1REZ3hMamszTWl3eUxqYzROU0JET0RJdU9EYzJMREl1TWpRM0lEZ3pMalk1TWl3eUxqQTVOeUE0TkM0ek16SXNNaTR6TlRJZ1F6ZzBMamc0Tnl3eUxqVTNNeUE0TlM0eU9ERXNNeTR3T0RVZ09EVXVOVEEwTERNdU9EY3lJRU00Tnk0MU1UZ3NNVEVnT0RZdU9UWTBMRE0yTGpBNU1TQTROUzQzT0RVc05ETXVPRFUxSUVNNE5TNHlOemdzTkRjdU1UazJJRGcwTGpJeExEUTVMak0zSURneUxqWXhMRFV3TGpNeE55Qk1OeTR6TXpVc09UTXVPRFk1SUVNMkxqazVPU3c1TkM0d05qTWdOaTQyTlRnc09UUXVNVFl4SURZdU16RTNMRGswTGpFMk1TQk1OaTR6TVRjc09UUXVNVFl4SUZvZ1RUWXVNVGNzT1RNdU5qVTBJRU0yTGpRMk15dzVNeTQyT1NBMkxqYzNOQ3c1TXk0Mk1UY2dOeTR3T0RVc09UTXVORE0zSUV3NE1pNHpOVGdzTkRrdU9EZzJJRU00TkM0eE9ERXNORGd1T0RBNElEZzBMamsyTERRMUxqazNNU0E0TlM0eU9USXNORE11TnpnZ1F6ZzJMalEyTml3ek5pNHdORGtnT0RjdU1ESXpMREV4TGpBNE5TQTROUzR3TWpRc05DNHdNRGdnUXpnMExqZzBOaXd6TGpNM055QTROQzQxTlRFc01pNDVOellnT0RRdU1UUTRMREl1T0RFMklFTTRNeTQyTmpRc01pNDJNak1nT0RJdU9UZ3lMREl1TnpZMElEZ3lMakl5Tnl3ekxqSXhNeUJNT0RJdU1Ua3pMRE11TWpNMElFTTRNUzQzT1RFc015NDBOallnTnk0ek16VXNORFl1TkRVeUlEY3VNek0xTERRMkxqUTFNaUJETnk0ek1EUXNORFl1TkRZNUlEVXVNelEyTERRM0xqVXlNU0EwTGpZMk9TdzFNUzQwTnpFZ1F6UXVOall5TERVeExqVXpJRE11TnpZeExEVTRMalUxTmlBekxqYzNOU3czTVM0eE56TWdRek11Tnprc09EUXVNekk0SURRdU1UWXhMRGc0TGpVeU5DQTBMamt6Tml3NU1pNDBOellnUXpVdU1ESTJMRGt5TGprek55QTFMalF4TWl3NU15NDBOVGtnTlM0NU56TXNPVE11TmpFMUlFTTJMakE0Tnl3NU15NDJOQ0EyTGpFMU9DdzVNeTQyTlRJZ05pNHhOamtzT1RNdU5qVTBJRXcyTGpFM0xEa3pMalkxTkNCTU5pNHhOeXc1TXk0Mk5UUWdXaUlnYVdROUlrWnBiR3d0TVRJaUlHWnBiR3c5SWlNME5UVkJOalFpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk55NHpNVGNzTmpndU9UZ3lJRU0zTGpnd05pdzJPQzQzTURFZ09DNHlNRElzTmpndU9USTJJRGd1TWpBeUxEWTVMalE0TnlCRE9DNHlNRElzTnpBdU1EUTNJRGN1T0RBMkxEY3dMamN6SURjdU16RTNMRGN4TGpBeE1pQkROaTQ0TWprc056RXVNamswSURZdU5ETXpMRGN4TGpBMk9TQTJMalF6TXl3M01DNDFNRGdnUXpZdU5ETXpMRFk1TGprME9DQTJMamd5T1N3Mk9TNHlOalVnTnk0ek1UY3NOamd1T1RneUlpQnBaRDBpUm1sc2JDMHhNeUlnWm1sc2JEMGlJMFpHUmtaR1JpSStQQzl3WVhSb1Bnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh3WVhSb0lHUTlJazAyTGpreUxEY3hMakV6TXlCRE5pNDJNekVzTnpFdU1UTXpJRFl1TkRNekxEY3dMamt3TlNBMkxqUXpNeXczTUM0MU1EZ2dRell1TkRNekxEWTVMamswT0NBMkxqZ3lPU3cyT1M0eU5qVWdOeTR6TVRjc05qZ3VPVGd5SUVNM0xqUTJMRFk0TGprZ055NDFPVFVzTmpndU9EWXhJRGN1TnpFMExEWTRMamcyTVNCRE9DNHdNRE1zTmpndU9EWXhJRGd1TWpBeUxEWTVMakE1SURndU1qQXlMRFk1TGpRNE55QkRPQzR5TURJc056QXVNRFEzSURjdU9EQTJMRGN3TGpjeklEY3VNekUzTERjeExqQXhNaUJETnk0eE56UXNOekV1TURrMElEY3VNRE01TERjeExqRXpNeUEyTGpreUxEY3hMakV6TXlCTk55NDNNVFFzTmpndU5qYzBJRU0zTGpVMU55dzJPQzQyTnpRZ055NHpPVElzTmpndU56SXpJRGN1TWpJMExEWTRMamd5TVNCRE5pNDJOellzTmprdU1UTTRJRFl1TWpRMkxEWTVMamczT1NBMkxqSTBOaXczTUM0MU1EZ2dRell1TWpRMkxEY3dMams1TkNBMkxqVXhOeXczTVM0ek1pQTJMamt5TERjeExqTXlJRU0zTGpBM09DdzNNUzR6TWlBM0xqSTBNeXczTVM0eU56RWdOeTQwTVRFc056RXVNVGMwSUVNM0xqazFPU3czTUM0NE5UY2dPQzR6T0Rrc056QXVNVEUzSURndU16ZzVMRFk1TGpRNE55QkRPQzR6T0Rrc05qa3VNREF4SURndU1URTNMRFk0TGpZM05DQTNMamN4TkN3Mk9DNDJOelFpSUdsa1BTSkdhV3hzTFRFMElpQm1hV3hzUFNJak9EQTVOMEV5SWo0OEwzQmhkR2crQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwaVRUWXVPVElzTnpBdU9UUTNJRU0yTGpZME9TdzNNQzQ1TkRjZ05pNDJNakVzTnpBdU5qUWdOaTQyTWpFc056QXVOVEE0SUVNMkxqWXlNU3czTUM0d01UY2dOaTQ1T0RJc05qa3VNemt5SURjdU5ERXhMRFk1TGpFME5TQkROeTQxTWpFc05qa3VNRGd5SURjdU5qSTFMRFk1TGpBME9TQTNMamN4TkN3Mk9TNHdORGtnUXpjdU9UZzJMRFk1TGpBME9TQTRMakF4TlN3Mk9TNHpOVFVnT0M0d01UVXNOamt1TkRnM0lFTTRMakF4TlN3Mk9TNDVOemdnTnk0Mk5USXNOekF1TmpBeklEY3VNakkwTERjd0xqZzFNU0JETnk0eE1UVXNOekF1T1RFMElEY3VNREVzTnpBdU9UUTNJRFl1T1RJc056QXVPVFEzSUUwM0xqY3hOQ3cyT0M0NE5qRWdRemN1TlRrMUxEWTRMamcyTVNBM0xqUTJMRFk0TGprZ055NHpNVGNzTmpndU9UZ3lJRU0yTGpneU9TdzJPUzR5TmpVZ05pNDBNek1zTmprdU9UUTRJRFl1TkRNekxEY3dMalV3T0NCRE5pNDBNek1zTnpBdU9UQTFJRFl1TmpNeExEY3hMakV6TXlBMkxqa3lMRGN4TGpFek15QkROeTR3TXprc056RXVNVE16SURjdU1UYzBMRGN4TGpBNU5DQTNMak14Tnl3M01TNHdNVElnUXpjdU9EQTJMRGN3TGpjeklEZ3VNakF5TERjd0xqQTBOeUE0TGpJd01pdzJPUzQwT0RjZ1F6Z3VNakF5TERZNUxqQTVJRGd1TURBekxEWTRMamcyTVNBM0xqY3hOQ3cyT0M0NE5qRWlJR2xrUFNKR2FXeHNMVEUxSWlCbWFXeHNQU0lqT0RBNU4wRXlJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRjdU5EUTBMRGcxTGpNMUlFTTNMamN3T0N3NE5TNHhPVGdnTnk0NU1qRXNPRFV1TXpFNUlEY3VPVEl4TERnMUxqWXlNaUJETnk0NU1qRXNPRFV1T1RJMUlEY3VOekE0TERnMkxqSTVNaUEzTGpRME5DdzROaTQwTkRRZ1F6Y3VNVGd4TERnMkxqVTVOeUEyTGprMk55dzROaTQwTnpVZ05pNDVOamNzT0RZdU1UY3pJRU0yTGprMk55dzROUzQ0TnpFZ055NHhPREVzT0RVdU5UQXlJRGN1TkRRMExEZzFMak0xSWlCcFpEMGlSbWxzYkMweE5pSWdabWxzYkQwaUkwWkdSa1pHUmlJK1BDOXdZWFJvUGdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHdZWFJvSUdROUlrMDNMakl6TERnMkxqVXhJRU0zTGpBM05DdzROaTQxTVNBMkxqazJOeXc0Tmk0ek9EY2dOaTQ1Tmpjc09EWXVNVGN6SUVNMkxqazJOeXc0TlM0NE56RWdOeTR4T0RFc09EVXVOVEF5SURjdU5EUTBMRGcxTGpNMUlFTTNMalV5TVN3NE5TNHpNRFVnTnk0MU9UUXNPRFV1TWpnMElEY3VOalU0TERnMUxqSTROQ0JETnk0NE1UUXNPRFV1TWpnMElEY3VPVEl4TERnMUxqUXdPQ0EzTGpreU1TdzROUzQyTWpJZ1F6Y3VPVEl4TERnMUxqa3lOU0EzTGpjd09DdzROaTR5T1RJZ055NDBORFFzT0RZdU5EUTBJRU0zTGpNMk55dzROaTQwT0RrZ055NHlPVFFzT0RZdU5URWdOeTR5TXl3NE5pNDFNU0JOTnk0Mk5UZ3NPRFV1TURrNElFTTNMalUxT0N3NE5TNHdPVGdnTnk0ME5UVXNPRFV1TVRJM0lEY3VNelV4TERnMUxqRTRPQ0JETnk0d016RXNPRFV1TXpjeklEWXVOemd4TERnMUxqZ3dOaUEyTGpjNE1TdzROaTR4TnpNZ1F6WXVOemd4TERnMkxqUTRNaUEyTGprMk5pdzROaTQyT1RjZ055NHlNeXc0Tmk0Mk9UY2dRemN1TXpNc09EWXVOamszSURjdU5ETXpMRGcyTGpZMk5pQTNMalV6T0N3NE5pNDJNRGNnUXpjdU9EVTRMRGcyTGpReU1pQTRMakV3T0N3NE5TNDVPRGtnT0M0eE1EZ3NPRFV1TmpJeUlFTTRMakV3T0N3NE5TNHpNVE1nTnk0NU1qTXNPRFV1TURrNElEY3VOalU0TERnMUxqQTVPQ0lnYVdROUlrWnBiR3d0TVRjaUlHWnBiR3c5SWlNNE1EazNRVElpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNHRjBhQ0JrUFNKTk55NHlNeXc0Tmk0ek1qSWdURGN1TVRVMExEZzJMakUzTXlCRE55NHhOVFFzT0RVdU9UTTRJRGN1TXpNekxEZzFMall5T1NBM0xqVXpPQ3c0TlM0MU1USWdURGN1TmpVNExEZzFMalEzTVNCTU55NDNNelFzT0RVdU5qSXlJRU0zTGpjek5DdzROUzQ0TlRZZ055NDFOVFVzT0RZdU1UWTBJRGN1TXpVeExEZzJMakk0TWlCTU55NHlNeXc0Tmk0ek1qSWdUVGN1TmpVNExEZzFMakk0TkNCRE55NDFPVFFzT0RVdU1qZzBJRGN1TlRJeExEZzFMak13TlNBM0xqUTBOQ3c0TlM0ek5TQkROeTR4T0RFc09EVXVOVEF5SURZdU9UWTNMRGcxTGpnM01TQTJMamsyTnl3NE5pNHhOek1nUXpZdU9UWTNMRGcyTGpNNE55QTNMakEzTkN3NE5pNDFNU0EzTGpJekxEZzJMalV4SUVNM0xqSTVOQ3c0Tmk0MU1TQTNMak0yTnl3NE5pNDBPRGtnTnk0ME5EUXNPRFl1TkRRMElFTTNMamN3T0N3NE5pNHlPVElnTnk0NU1qRXNPRFV1T1RJMUlEY3VPVEl4TERnMUxqWXlNaUJETnk0NU1qRXNPRFV1TkRBNElEY3VPREUwTERnMUxqSTROQ0EzTGpZMU9DdzROUzR5T0RRaUlHbGtQU0pHYVd4c0xURTRJaUJtYVd4c1BTSWpPREE1TjBFeUlqNDhMM0JoZEdnK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEJoZEdnZ1pEMGlUVGMzTGpJM09DdzNMamMyT1NCTU56Y3VNamM0TERVeExqUXpOaUJNTVRBdU1qQTRMRGt3TGpFMklFd3hNQzR5TURnc05EWXVORGt6SUV3M055NHlOemdzTnk0M05qa2lJR2xrUFNKR2FXeHNMVEU1SWlCbWFXeHNQU0lqTkRVMVFUWTBJajQ4TDNCaGRHZytDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhCaGRHZ2daRDBpVFRFd0xqQTRNeXc1TUM0ek56VWdUREV3TGpBNE15dzBOaTQwTWpFZ1RERXdMakUwTml3ME5pNHpPRFVnVERjM0xqUXdNeXczTGpVMU5DQk1OemN1TkRBekxEVXhMalV3T0NCTU56Y3VNelF4TERVeExqVTBOQ0JNTVRBdU1EZ3pMRGt3TGpNM05TQk1NVEF1TURnekxEa3dMak0zTlNCYUlFMHhNQzR6TXpNc05EWXVOVFkwSUV3eE1DNHpNek1zT0RrdU9UUTBJRXczTnk0eE5UUXNOVEV1TXpZMUlFdzNOeTR4TlRRc055NDVPRFVnVERFd0xqTXpNeXcwTmk0MU5qUWdUREV3TGpNek15dzBOaTQxTmpRZ1dpSWdhV1E5SWtacGJHd3RNakFpSUdacGJHdzlJaU0yTURkRU9FSWlQand2Y0dGMGFENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZaejRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh3WVhSb0lHUTlJazB4TWpVdU56TTNMRGc0TGpZME55Qk1NVEU0TGpBNU9DdzVNUzQ1T0RFZ1RERXhPQzR3T1Rnc09EUWdUREV3Tmk0Mk16a3NPRGd1TnpFeklFd3hNRFl1TmpNNUxEazJMams0TWlCTU9Ua3NNVEF3TGpNeE5TQk1NVEV5TGpNMk9Td3hNRE11T1RZeElFd3hNalV1TnpNM0xEZzRMalkwTnlJZ2FXUTlJa2x0Y0c5eWRHVmtMVXhoZVdWeWN5MURiM0I1TFRJaUlHWnBiR3c5SWlNME5UVkJOalFpSUhOclpYUmphRHAwZVhCbFBTSk5VMU5vWVhCbFIzSnZkWEFpUGp3dmNHRjBhRDRLSUNBZ0lDQWdJQ0FnSUNBZ1BDOW5QZ29nSUNBZ0lDQWdJRHd2Wno0S0lDQWdJRHd2Wno0S1BDOXpkbWMrJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJvdGF0ZUluc3RydWN0aW9ucztcblxufSx7XCIuL3V0aWwuanNcIjoyMn1dLDE3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogVE9ETzogRml4IHVwIGFsbCBcIm5ldyBUSFJFRVwiIGluc3RhbnRpYXRpb25zIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UuXG4gKi9cbnZhciBTZW5zb3JTYW1wbGUgPSBfZGVyZXFfKCcuL3NlbnNvci1zYW1wbGUuanMnKTtcbnZhciBNYXRoVXRpbCA9IF9kZXJlcV8oJy4uL21hdGgtdXRpbC5qcycpO1xudmFyIFV0aWwgPSBfZGVyZXFfKCcuLi91dGlsLmpzJyk7XG5cbnZhciBERUJVRyA9IGZhbHNlO1xuXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIGEgc2ltcGxlIGNvbXBsZW1lbnRhcnkgZmlsdGVyLCB3aGljaCBmdXNlcyBneXJvc2NvcGUgYW5kXG4gKiBhY2NlbGVyb21ldGVyIGRhdGEgZnJvbSB0aGUgJ2RldmljZW1vdGlvbicgZXZlbnQuXG4gKlxuICogQWNjZWxlcm9tZXRlciBkYXRhIGlzIHZlcnkgbm9pc3ksIGJ1dCBzdGFibGUgb3ZlciB0aGUgbG9uZyB0ZXJtLlxuICogR3lyb3Njb3BlIGRhdGEgaXMgc21vb3RoLCBidXQgdGVuZHMgdG8gZHJpZnQgb3ZlciB0aGUgbG9uZyB0ZXJtLlxuICpcbiAqIFRoaXMgZnVzaW9uIGlzIHJlbGF0aXZlbHkgc2ltcGxlOlxuICogMS4gR2V0IG9yaWVudGF0aW9uIGVzdGltYXRlcyBmcm9tIGFjY2VsZXJvbWV0ZXIgYnkgYXBwbHlpbmcgYSBsb3ctcGFzcyBmaWx0ZXJcbiAqICAgIG9uIHRoYXQgZGF0YS5cbiAqIDIuIEdldCBvcmllbnRhdGlvbiBlc3RpbWF0ZXMgZnJvbSBneXJvc2NvcGUgYnkgaW50ZWdyYXRpbmcgb3ZlciB0aW1lLlxuICogMy4gQ29tYmluZSB0aGUgdHdvIGVzdGltYXRlcywgd2VpZ2hpbmcgKDEpIGluIHRoZSBsb25nIHRlcm0sIGJ1dCAoMikgZm9yIHRoZVxuICogICAgc2hvcnQgdGVybS5cbiAqL1xuZnVuY3Rpb24gQ29tcGxlbWVudGFyeUZpbHRlcihrRmlsdGVyKSB7XG4gIHRoaXMua0ZpbHRlciA9IGtGaWx0ZXI7XG5cbiAgLy8gUmF3IHNlbnNvciBtZWFzdXJlbWVudHMuXG4gIHRoaXMuY3VycmVudEFjY2VsTWVhc3VyZW1lbnQgPSBuZXcgU2Vuc29yU2FtcGxlKCk7XG4gIHRoaXMuY3VycmVudEd5cm9NZWFzdXJlbWVudCA9IG5ldyBTZW5zb3JTYW1wbGUoKTtcbiAgdGhpcy5wcmV2aW91c0d5cm9NZWFzdXJlbWVudCA9IG5ldyBTZW5zb3JTYW1wbGUoKTtcblxuICAvLyBDdXJyZW50IGZpbHRlciBvcmllbnRhdGlvblxuICB0aGlzLmZpbHRlclEgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuICB0aGlzLnByZXZpb3VzRmlsdGVyUSA9IG5ldyBNYXRoVXRpbC5RdWF0ZXJuaW9uKCk7XG5cbiAgLy8gT3JpZW50YXRpb24gYmFzZWQgb24gdGhlIGFjY2VsZXJvbWV0ZXIuXG4gIHRoaXMuYWNjZWxRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgLy8gV2hldGhlciBvciBub3QgdGhlIG9yaWVudGF0aW9uIGhhcyBiZWVuIGluaXRpYWxpemVkLlxuICB0aGlzLmlzT3JpZW50YXRpb25Jbml0aWFsaXplZCA9IGZhbHNlO1xuICAvLyBSdW5uaW5nIGVzdGltYXRlIG9mIGdyYXZpdHkgYmFzZWQgb24gdGhlIGN1cnJlbnQgb3JpZW50YXRpb24uXG4gIHRoaXMuZXN0aW1hdGVkR3Jhdml0eSA9IG5ldyBNYXRoVXRpbC5WZWN0b3IzKCk7XG4gIC8vIE1lYXN1cmVkIGdyYXZpdHkgYmFzZWQgb24gYWNjZWxlcm9tZXRlci5cbiAgdGhpcy5tZWFzdXJlZEdyYXZpdHkgPSBuZXcgTWF0aFV0aWwuVmVjdG9yMygpO1xuXG4gIC8vIERlYnVnIG9ubHkgcXVhdGVybmlvbiBvZiBneXJvLWJhc2VkIG9yaWVudGF0aW9uLlxuICB0aGlzLmd5cm9JbnRlZ3JhbFEgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xufVxuXG5Db21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5hZGRBY2NlbE1lYXN1cmVtZW50ID0gZnVuY3Rpb24odmVjdG9yLCB0aW1lc3RhbXBTKSB7XG4gIHRoaXMuY3VycmVudEFjY2VsTWVhc3VyZW1lbnQuc2V0KHZlY3RvciwgdGltZXN0YW1wUyk7XG59O1xuXG5Db21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5hZGRHeXJvTWVhc3VyZW1lbnQgPSBmdW5jdGlvbih2ZWN0b3IsIHRpbWVzdGFtcFMpIHtcbiAgdGhpcy5jdXJyZW50R3lyb01lYXN1cmVtZW50LnNldCh2ZWN0b3IsIHRpbWVzdGFtcFMpO1xuXG4gIHZhciBkZWx0YVQgPSB0aW1lc3RhbXBTIC0gdGhpcy5wcmV2aW91c0d5cm9NZWFzdXJlbWVudC50aW1lc3RhbXBTO1xuICBpZiAoVXRpbC5pc1RpbWVzdGFtcERlbHRhVmFsaWQoZGVsdGFUKSkge1xuICAgIHRoaXMucnVuXygpO1xuICB9XG5cbiAgdGhpcy5wcmV2aW91c0d5cm9NZWFzdXJlbWVudC5jb3B5KHRoaXMuY3VycmVudEd5cm9NZWFzdXJlbWVudCk7XG59O1xuXG5Db21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5ydW5fID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKCF0aGlzLmlzT3JpZW50YXRpb25Jbml0aWFsaXplZCkge1xuICAgIHRoaXMuYWNjZWxRID0gdGhpcy5hY2NlbFRvUXVhdGVybmlvbl8odGhpcy5jdXJyZW50QWNjZWxNZWFzdXJlbWVudC5zYW1wbGUpO1xuICAgIHRoaXMucHJldmlvdXNGaWx0ZXJRLmNvcHkodGhpcy5hY2NlbFEpO1xuICAgIHRoaXMuaXNPcmllbnRhdGlvbkluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGVsdGFUID0gdGhpcy5jdXJyZW50R3lyb01lYXN1cmVtZW50LnRpbWVzdGFtcFMgLVxuICAgICAgdGhpcy5wcmV2aW91c0d5cm9NZWFzdXJlbWVudC50aW1lc3RhbXBTO1xuXG4gIC8vIENvbnZlcnQgZ3lybyByb3RhdGlvbiB2ZWN0b3IgdG8gYSBxdWF0ZXJuaW9uIGRlbHRhLlxuICB2YXIgZ3lyb0RlbHRhUSA9IHRoaXMuZ3lyb1RvUXVhdGVybmlvbkRlbHRhXyh0aGlzLmN1cnJlbnRHeXJvTWVhc3VyZW1lbnQuc2FtcGxlLCBkZWx0YVQpO1xuICB0aGlzLmd5cm9JbnRlZ3JhbFEubXVsdGlwbHkoZ3lyb0RlbHRhUSk7XG5cbiAgLy8gZmlsdGVyXzEgPSBLICogKGZpbHRlcl8wICsgZ3lybyAqIGRUKSArICgxIC0gSykgKiBhY2NlbC5cbiAgdGhpcy5maWx0ZXJRLmNvcHkodGhpcy5wcmV2aW91c0ZpbHRlclEpO1xuICB0aGlzLmZpbHRlclEubXVsdGlwbHkoZ3lyb0RlbHRhUSk7XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBkZWx0YSBiZXR3ZWVuIHRoZSBjdXJyZW50IGVzdGltYXRlZCBncmF2aXR5IGFuZCB0aGUgcmVhbFxuICAvLyBncmF2aXR5IHZlY3RvciBmcm9tIGFjY2VsZXJvbWV0ZXIuXG4gIHZhciBpbnZGaWx0ZXJRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgaW52RmlsdGVyUS5jb3B5KHRoaXMuZmlsdGVyUSk7XG4gIGludkZpbHRlclEuaW52ZXJzZSgpO1xuXG4gIHRoaXMuZXN0aW1hdGVkR3Jhdml0eS5zZXQoMCwgMCwgLTEpO1xuICB0aGlzLmVzdGltYXRlZEdyYXZpdHkuYXBwbHlRdWF0ZXJuaW9uKGludkZpbHRlclEpO1xuICB0aGlzLmVzdGltYXRlZEdyYXZpdHkubm9ybWFsaXplKCk7XG5cbiAgdGhpcy5tZWFzdXJlZEdyYXZpdHkuY29weSh0aGlzLmN1cnJlbnRBY2NlbE1lYXN1cmVtZW50LnNhbXBsZSk7XG4gIHRoaXMubWVhc3VyZWRHcmF2aXR5Lm5vcm1hbGl6ZSgpO1xuXG4gIC8vIENvbXBhcmUgZXN0aW1hdGVkIGdyYXZpdHkgd2l0aCBtZWFzdXJlZCBncmF2aXR5LCBnZXQgdGhlIGRlbHRhIHF1YXRlcm5pb25cbiAgLy8gYmV0d2VlbiB0aGUgdHdvLlxuICB2YXIgZGVsdGFRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgZGVsdGFRLnNldEZyb21Vbml0VmVjdG9ycyh0aGlzLmVzdGltYXRlZEdyYXZpdHksIHRoaXMubWVhc3VyZWRHcmF2aXR5KTtcbiAgZGVsdGFRLmludmVyc2UoKTtcblxuICBpZiAoREVCVUcpIHtcbiAgICBjb25zb2xlLmxvZygnRGVsdGE6ICVkIGRlZywgR19lc3Q6ICglcywgJXMsICVzKSwgR19tZWFzOiAoJXMsICVzLCAlcyknLFxuICAgICAgICAgICAgICAgIE1hdGhVdGlsLnJhZFRvRGVnICogVXRpbC5nZXRRdWF0ZXJuaW9uQW5nbGUoZGVsdGFRKSxcbiAgICAgICAgICAgICAgICAodGhpcy5lc3RpbWF0ZWRHcmF2aXR5LngpLnRvRml4ZWQoMSksXG4gICAgICAgICAgICAgICAgKHRoaXMuZXN0aW1hdGVkR3Jhdml0eS55KS50b0ZpeGVkKDEpLFxuICAgICAgICAgICAgICAgICh0aGlzLmVzdGltYXRlZEdyYXZpdHkueikudG9GaXhlZCgxKSxcbiAgICAgICAgICAgICAgICAodGhpcy5tZWFzdXJlZEdyYXZpdHkueCkudG9GaXhlZCgxKSxcbiAgICAgICAgICAgICAgICAodGhpcy5tZWFzdXJlZEdyYXZpdHkueSkudG9GaXhlZCgxKSxcbiAgICAgICAgICAgICAgICAodGhpcy5tZWFzdXJlZEdyYXZpdHkueikudG9GaXhlZCgxKSk7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgdGhlIFNMRVJQIHRhcmdldDogY3VycmVudCBvcmllbnRhdGlvbiBwbHVzIHRoZSBtZWFzdXJlZC1lc3RpbWF0ZWRcbiAgLy8gcXVhdGVybmlvbiBkZWx0YS5cbiAgdmFyIHRhcmdldFEgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuICB0YXJnZXRRLmNvcHkodGhpcy5maWx0ZXJRKTtcbiAgdGFyZ2V0US5tdWx0aXBseShkZWx0YVEpO1xuXG4gIC8vIFNMRVJQIGZhY3RvcjogMCBpcyBwdXJlIGd5cm8sIDEgaXMgcHVyZSBhY2NlbC5cbiAgdGhpcy5maWx0ZXJRLnNsZXJwKHRhcmdldFEsIDEgLSB0aGlzLmtGaWx0ZXIpO1xuXG4gIHRoaXMucHJldmlvdXNGaWx0ZXJRLmNvcHkodGhpcy5maWx0ZXJRKTtcbn07XG5cbkNvbXBsZW1lbnRhcnlGaWx0ZXIucHJvdG90eXBlLmdldE9yaWVudGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbHRlclE7XG59O1xuXG5Db21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5hY2NlbFRvUXVhdGVybmlvbl8gPSBmdW5jdGlvbihhY2NlbCkge1xuICB2YXIgbm9ybUFjY2VsID0gbmV3IE1hdGhVdGlsLlZlY3RvcjMoKTtcbiAgbm9ybUFjY2VsLmNvcHkoYWNjZWwpO1xuICBub3JtQWNjZWwubm9ybWFsaXplKCk7XG4gIHZhciBxdWF0ID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgcXVhdC5zZXRGcm9tVW5pdFZlY3RvcnMobmV3IE1hdGhVdGlsLlZlY3RvcjMoMCwgMCwgLTEpLCBub3JtQWNjZWwpO1xuICBxdWF0LmludmVyc2UoKTtcbiAgcmV0dXJuIHF1YXQ7XG59O1xuXG5Db21wbGVtZW50YXJ5RmlsdGVyLnByb3RvdHlwZS5neXJvVG9RdWF0ZXJuaW9uRGVsdGFfID0gZnVuY3Rpb24oZ3lybywgZHQpIHtcbiAgLy8gRXh0cmFjdCBheGlzIGFuZCBhbmdsZSBmcm9tIHRoZSBneXJvc2NvcGUgZGF0YS5cbiAgdmFyIHF1YXQgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuICB2YXIgYXhpcyA9IG5ldyBNYXRoVXRpbC5WZWN0b3IzKCk7XG4gIGF4aXMuY29weShneXJvKTtcbiAgYXhpcy5ub3JtYWxpemUoKTtcbiAgcXVhdC5zZXRGcm9tQXhpc0FuZ2xlKGF4aXMsIGd5cm8ubGVuZ3RoKCkgKiBkdCk7XG4gIHJldHVybiBxdWF0O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBsZW1lbnRhcnlGaWx0ZXI7XG5cbn0se1wiLi4vbWF0aC11dGlsLmpzXCI6MTQsXCIuLi91dGlsLmpzXCI6MjIsXCIuL3NlbnNvci1zYW1wbGUuanNcIjoyMH1dLDE4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgQ29tcGxlbWVudGFyeUZpbHRlciA9IF9kZXJlcV8oJy4vY29tcGxlbWVudGFyeS1maWx0ZXIuanMnKTtcbnZhciBQb3NlUHJlZGljdG9yID0gX2RlcmVxXygnLi9wb3NlLXByZWRpY3Rvci5qcycpO1xudmFyIFRvdWNoUGFubmVyID0gX2RlcmVxXygnLi4vdG91Y2gtcGFubmVyLmpzJyk7XG52YXIgTWF0aFV0aWwgPSBfZGVyZXFfKCcuLi9tYXRoLXV0aWwuanMnKTtcbnZhciBVdGlsID0gX2RlcmVxXygnLi4vdXRpbC5qcycpO1xuXG4vKipcbiAqIFRoZSBwb3NlIHNlbnNvciwgaW1wbGVtZW50ZWQgdXNpbmcgRGV2aWNlTW90aW9uIEFQSXMuXG4gKi9cbmZ1bmN0aW9uIEZ1c2lvblBvc2VTZW5zb3IoKSB7XG4gIHRoaXMuZGV2aWNlSWQgPSAnd2VidnItcG9seWZpbGw6ZnVzZWQnO1xuICB0aGlzLmRldmljZU5hbWUgPSAnVlIgUG9zaXRpb24gRGV2aWNlICh3ZWJ2ci1wb2x5ZmlsbDpmdXNlZCknO1xuXG4gIHRoaXMuYWNjZWxlcm9tZXRlciA9IG5ldyBNYXRoVXRpbC5WZWN0b3IzKCk7XG4gIHRoaXMuZ3lyb3Njb3BlID0gbmV3IE1hdGhVdGlsLlZlY3RvcjMoKTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlbW90aW9uJywgdGhpcy5vbkRldmljZU1vdGlvbkNoYW5nZV8uYmluZCh0aGlzKSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMub25TY3JlZW5PcmllbnRhdGlvbkNoYW5nZV8uYmluZCh0aGlzKSk7XG5cbiAgdGhpcy5maWx0ZXIgPSBuZXcgQ29tcGxlbWVudGFyeUZpbHRlcihXZWJWUkNvbmZpZy5LX0ZJTFRFUik7XG4gIHRoaXMucG9zZVByZWRpY3RvciA9IG5ldyBQb3NlUHJlZGljdG9yKFdlYlZSQ29uZmlnLlBSRURJQ1RJT05fVElNRV9TKTtcbiAgdGhpcy50b3VjaFBhbm5lciA9IG5ldyBUb3VjaFBhbm5lcigpO1xuXG4gIHRoaXMuZmlsdGVyVG9Xb3JsZFEgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuXG4gIC8vIFNldCB0aGUgZmlsdGVyIHRvIHdvcmxkIHRyYW5zZm9ybSwgZGVwZW5kaW5nIG9uIE9TLlxuICBpZiAoVXRpbC5pc0lPUygpKSB7XG4gICAgdGhpcy5maWx0ZXJUb1dvcmxkUS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBNYXRoVXRpbC5WZWN0b3IzKDEsIDAsIDApLCBNYXRoLlBJIC8gMik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5maWx0ZXJUb1dvcmxkUS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBNYXRoVXRpbC5WZWN0b3IzKDEsIDAsIDApLCAtTWF0aC5QSSAvIDIpO1xuICB9XG5cbiAgdGhpcy5pbnZlcnNlV29ybGRUb1NjcmVlblEgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuICB0aGlzLndvcmxkVG9TY3JlZW5RID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgdGhpcy5vcmlnaW5hbFBvc2VBZGp1c3RRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbiAgdGhpcy5vcmlnaW5hbFBvc2VBZGp1c3RRLnNldEZyb21BeGlzQW5nbGUobmV3IE1hdGhVdGlsLlZlY3RvcjMoMCwgMCwgMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLXdpbmRvdy5vcmllbnRhdGlvbiAqIE1hdGguUEkgLyAxODApO1xuXG4gIHRoaXMuc2V0U2NyZWVuVHJhbnNmb3JtXygpO1xuICAvLyBBZGp1c3QgdGhpcyBmaWx0ZXIgZm9yIGJlaW5nIGluIGxhbmRzY2FwZSBtb2RlLlxuICBpZiAoVXRpbC5pc0xhbmRzY2FwZU1vZGUoKSkge1xuICAgIHRoaXMuZmlsdGVyVG9Xb3JsZFEubXVsdGlwbHkodGhpcy5pbnZlcnNlV29ybGRUb1NjcmVlblEpO1xuICB9XG5cbiAgLy8gS2VlcCB0cmFjayBvZiBhIHJlc2V0IHRyYW5zZm9ybSBmb3IgcmVzZXRTZW5zb3IuXG4gIHRoaXMucmVzZXRRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcblxuICB0aGlzLmlzRmlyZWZveEFuZHJvaWQgPSBVdGlsLmlzRmlyZWZveEFuZHJvaWQoKTtcbiAgdGhpcy5pc0lPUyA9IFV0aWwuaXNJT1MoKTtcblxuICB0aGlzLm9yaWVudGF0aW9uT3V0XyA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7XG59XG5cbkZ1c2lvblBvc2VTZW5zb3IucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRoaXMgUG9zZVNlbnNvciBkb2Vzbid0IHN1cHBvcnQgcG9zaXRpb25cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5GdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5nZXRPcmllbnRhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAvLyBDb252ZXJ0IGZyb20gZmlsdGVyIHNwYWNlIHRvIHRoZSB0aGUgc2FtZSBzeXN0ZW0gdXNlZCBieSB0aGVcbiAgLy8gZGV2aWNlb3JpZW50YXRpb24gZXZlbnQuXG4gIHZhciBvcmllbnRhdGlvbiA9IHRoaXMuZmlsdGVyLmdldE9yaWVudGF0aW9uKCk7XG5cbiAgLy8gUHJlZGljdCBvcmllbnRhdGlvbi5cbiAgdGhpcy5wcmVkaWN0ZWRRID0gdGhpcy5wb3NlUHJlZGljdG9yLmdldFByZWRpY3Rpb24ob3JpZW50YXRpb24sIHRoaXMuZ3lyb3Njb3BlLCB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyk7XG5cbiAgLy8gQ29udmVydCB0byBUSFJFRSBjb29yZGluYXRlIHN5c3RlbTogLVogZm9yd2FyZCwgWSB1cCwgWCByaWdodC5cbiAgdmFyIG91dCA9IG5ldyBNYXRoVXRpbC5RdWF0ZXJuaW9uKCk7XG4gIG91dC5jb3B5KHRoaXMuZmlsdGVyVG9Xb3JsZFEpO1xuICBvdXQubXVsdGlwbHkodGhpcy5yZXNldFEpO1xuICBpZiAoIVdlYlZSQ29uZmlnLlRPVUNIX1BBTk5FUl9ESVNBQkxFRCkge1xuICAgIG91dC5tdWx0aXBseSh0aGlzLnRvdWNoUGFubmVyLmdldE9yaWVudGF0aW9uKCkpO1xuICB9XG4gIG91dC5tdWx0aXBseSh0aGlzLnByZWRpY3RlZFEpO1xuICBvdXQubXVsdGlwbHkodGhpcy53b3JsZFRvU2NyZWVuUSk7XG5cbiAgLy8gSGFuZGxlIHRoZSB5YXctb25seSBjYXNlLlxuICBpZiAoV2ViVlJDb25maWcuWUFXX09OTFkpIHtcbiAgICAvLyBNYWtlIGEgcXVhdGVybmlvbiB0aGF0IG9ubHkgdHVybnMgYXJvdW5kIHRoZSBZLWF4aXMuXG4gICAgb3V0LnggPSAwO1xuICAgIG91dC56ID0gMDtcbiAgICBvdXQubm9ybWFsaXplKCk7XG4gIH1cblxuICB0aGlzLm9yaWVudGF0aW9uT3V0X1swXSA9IG91dC54O1xuICB0aGlzLm9yaWVudGF0aW9uT3V0X1sxXSA9IG91dC55O1xuICB0aGlzLm9yaWVudGF0aW9uT3V0X1syXSA9IG91dC56O1xuICB0aGlzLm9yaWVudGF0aW9uT3V0X1szXSA9IG91dC53O1xuICByZXR1cm4gdGhpcy5vcmllbnRhdGlvbk91dF87XG59O1xuXG5GdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5yZXNldFBvc2UgPSBmdW5jdGlvbigpIHtcbiAgLy8gUmVkdWNlIHRvIGludmVydGVkIHlhdy1vbmx5LlxuICB0aGlzLnJlc2V0US5jb3B5KHRoaXMuZmlsdGVyLmdldE9yaWVudGF0aW9uKCkpO1xuICB0aGlzLnJlc2V0US54ID0gMDtcbiAgdGhpcy5yZXNldFEueSA9IDA7XG4gIHRoaXMucmVzZXRRLnogKj0gLTE7XG4gIHRoaXMucmVzZXRRLm5vcm1hbGl6ZSgpO1xuXG4gIC8vIFRha2UgaW50byBhY2NvdW50IGV4dHJhIHRyYW5zZm9ybWF0aW9ucyBpbiBsYW5kc2NhcGUgbW9kZS5cbiAgaWYgKFV0aWwuaXNMYW5kc2NhcGVNb2RlKCkpIHtcbiAgICB0aGlzLnJlc2V0US5tdWx0aXBseSh0aGlzLmludmVyc2VXb3JsZFRvU2NyZWVuUSk7XG4gIH1cblxuICAvLyBUYWtlIGludG8gYWNjb3VudCBvcmlnaW5hbCBwb3NlLlxuICB0aGlzLnJlc2V0US5tdWx0aXBseSh0aGlzLm9yaWdpbmFsUG9zZUFkanVzdFEpO1xuXG4gIGlmICghV2ViVlJDb25maWcuVE9VQ0hfUEFOTkVSX0RJU0FCTEVEKSB7XG4gICAgdGhpcy50b3VjaFBhbm5lci5yZXNldFNlbnNvcigpO1xuICB9XG59O1xuXG5GdXNpb25Qb3NlU2Vuc29yLnByb3RvdHlwZS5vbkRldmljZU1vdGlvbkNoYW5nZV8gPSBmdW5jdGlvbihkZXZpY2VNb3Rpb24pIHtcbiAgdmFyIGFjY0dyYXZpdHkgPSBkZXZpY2VNb3Rpb24uYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eTtcbiAgdmFyIHJvdFJhdGUgPSBkZXZpY2VNb3Rpb24ucm90YXRpb25SYXRlO1xuICB2YXIgdGltZXN0YW1wUyA9IGRldmljZU1vdGlvbi50aW1lU3RhbXAgLyAxMDAwO1xuXG4gIC8vIEZpcmVmb3ggQW5kcm9pZCB0aW1lU3RhbXAgcmV0dXJucyBvbmUgdGhvdXNhbmR0aCBvZiBhIG1pbGxpc2Vjb25kLlxuICBpZiAodGhpcy5pc0ZpcmVmb3hBbmRyb2lkKSB7XG4gICAgdGltZXN0YW1wUyAvPSAxMDAwO1xuICB9XG5cbiAgdmFyIGRlbHRhUyA9IHRpbWVzdGFtcFMgLSB0aGlzLnByZXZpb3VzVGltZXN0YW1wUztcbiAgaWYgKGRlbHRhUyA8PSBVdGlsLk1JTl9USU1FU1RFUCB8fCBkZWx0YVMgPiBVdGlsLk1BWF9USU1FU1RFUCkge1xuICAgIGNvbnNvbGUud2FybignSW52YWxpZCB0aW1lc3RhbXBzIGRldGVjdGVkLiBUaW1lIHN0ZXAgYmV0d2VlbiBzdWNjZXNzaXZlICcgK1xuICAgICAgICAgICAgICAgICAnZ3lyb3Njb3BlIHNlbnNvciBzYW1wbGVzIGlzIHZlcnkgc21hbGwgb3Igbm90IG1vbm90b25pYycpO1xuICAgIHRoaXMucHJldmlvdXNUaW1lc3RhbXBTID0gdGltZXN0YW1wUztcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5hY2NlbGVyb21ldGVyLnNldCgtYWNjR3Jhdml0eS54LCAtYWNjR3Jhdml0eS55LCAtYWNjR3Jhdml0eS56KTtcbiAgdGhpcy5neXJvc2NvcGUuc2V0KHJvdFJhdGUuYWxwaGEsIHJvdFJhdGUuYmV0YSwgcm90UmF0ZS5nYW1tYSk7XG5cbiAgLy8gV2l0aCBpT1MgYW5kIEZpcmVmb3ggQW5kcm9pZCwgcm90YXRpb25SYXRlIGlzIHJlcG9ydGVkIGluIGRlZ3JlZXMsXG4gIC8vIHNvIHdlIGZpcnN0IGNvbnZlcnQgdG8gcmFkaWFucy5cbiAgaWYgKHRoaXMuaXNJT1MgfHwgdGhpcy5pc0ZpcmVmb3hBbmRyb2lkKSB7XG4gICAgdGhpcy5neXJvc2NvcGUubXVsdGlwbHlTY2FsYXIoTWF0aC5QSSAvIDE4MCk7XG4gIH1cblxuICB0aGlzLmZpbHRlci5hZGRBY2NlbE1lYXN1cmVtZW50KHRoaXMuYWNjZWxlcm9tZXRlciwgdGltZXN0YW1wUyk7XG4gIHRoaXMuZmlsdGVyLmFkZEd5cm9NZWFzdXJlbWVudCh0aGlzLmd5cm9zY29wZSwgdGltZXN0YW1wUyk7XG5cbiAgdGhpcy5wcmV2aW91c1RpbWVzdGFtcFMgPSB0aW1lc3RhbXBTO1xufTtcblxuRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUub25TY3JlZW5PcmllbnRhdGlvbkNoYW5nZV8gPVxuICAgIGZ1bmN0aW9uKHNjcmVlbk9yaWVudGF0aW9uKSB7XG4gIHRoaXMuc2V0U2NyZWVuVHJhbnNmb3JtXygpO1xufTtcblxuRnVzaW9uUG9zZVNlbnNvci5wcm90b3R5cGUuc2V0U2NyZWVuVHJhbnNmb3JtXyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLndvcmxkVG9TY3JlZW5RLnNldCgwLCAwLCAwLCAxKTtcbiAgc3dpdGNoICh3aW5kb3cub3JpZW50YXRpb24pIHtcbiAgICBjYXNlIDA6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDkwOlxuICAgICAgdGhpcy53b3JsZFRvU2NyZWVuUS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBNYXRoVXRpbC5WZWN0b3IzKDAsIDAsIDEpLCAtTWF0aC5QSSAvIDIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAtOTA6XG4gICAgICB0aGlzLndvcmxkVG9TY3JlZW5RLnNldEZyb21BeGlzQW5nbGUobmV3IE1hdGhVdGlsLlZlY3RvcjMoMCwgMCwgMSksIE1hdGguUEkgLyAyKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTgwOlxuICAgICAgLy8gVE9ETy5cbiAgICAgIGJyZWFrO1xuICB9XG4gIHRoaXMuaW52ZXJzZVdvcmxkVG9TY3JlZW5RLmNvcHkodGhpcy53b3JsZFRvU2NyZWVuUSk7XG4gIHRoaXMuaW52ZXJzZVdvcmxkVG9TY3JlZW5RLmludmVyc2UoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVzaW9uUG9zZVNlbnNvcjtcblxufSx7XCIuLi9tYXRoLXV0aWwuanNcIjoxNCxcIi4uL3RvdWNoLXBhbm5lci5qc1wiOjIxLFwiLi4vdXRpbC5qc1wiOjIyLFwiLi9jb21wbGVtZW50YXJ5LWZpbHRlci5qc1wiOjE3LFwiLi9wb3NlLXByZWRpY3Rvci5qc1wiOjE5fV0sMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBNYXRoVXRpbCA9IF9kZXJlcV8oJy4uL21hdGgtdXRpbC5qcycpO1xudmFyIERFQlVHID0gZmFsc2U7XG5cbi8qKlxuICogR2l2ZW4gYW4gb3JpZW50YXRpb24gYW5kIHRoZSBneXJvc2NvcGUgZGF0YSwgcHJlZGljdHMgdGhlIGZ1dHVyZSBvcmllbnRhdGlvblxuICogb2YgdGhlIGhlYWQuIFRoaXMgbWFrZXMgcmVuZGVyaW5nIGFwcGVhciBmYXN0ZXIuXG4gKlxuICogQWxzbyBzZWU6IGh0dHA6Ly9tc2wuY3MudWl1Yy5lZHUvfmxhdmFsbGUvcGFwZXJzL0xhdlllckthdEFudDE0LnBkZlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBwcmVkaWN0aW9uVGltZVMgdGltZSBmcm9tIGhlYWQgbW92ZW1lbnQgdG8gdGhlIGFwcGVhcmFuY2Ugb2ZcbiAqIHRoZSBjb3JyZXNwb25kaW5nIGltYWdlLlxuICovXG5mdW5jdGlvbiBQb3NlUHJlZGljdG9yKHByZWRpY3Rpb25UaW1lUykge1xuICB0aGlzLnByZWRpY3Rpb25UaW1lUyA9IHByZWRpY3Rpb25UaW1lUztcblxuICAvLyBUaGUgcXVhdGVybmlvbiBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcmV2aW91cyBzdGF0ZS5cbiAgdGhpcy5wcmV2aW91c1EgPSBuZXcgTWF0aFV0aWwuUXVhdGVybmlvbigpO1xuICAvLyBQcmV2aW91cyB0aW1lIGEgcHJlZGljdGlvbiBvY2N1cnJlZC5cbiAgdGhpcy5wcmV2aW91c1RpbWVzdGFtcFMgPSBudWxsO1xuXG4gIC8vIFRoZSBkZWx0YSBxdWF0ZXJuaW9uIHRoYXQgYWRqdXN0cyB0aGUgY3VycmVudCBwb3NlLlxuICB0aGlzLmRlbHRhUSA9IG5ldyBNYXRoVXRpbC5RdWF0ZXJuaW9uKCk7XG4gIC8vIFRoZSBvdXRwdXQgcXVhdGVybmlvbi5cbiAgdGhpcy5vdXRRID0gbmV3IE1hdGhVdGlsLlF1YXRlcm5pb24oKTtcbn1cblxuUG9zZVByZWRpY3Rvci5wcm90b3R5cGUuZ2V0UHJlZGljdGlvbiA9IGZ1bmN0aW9uKGN1cnJlbnRRLCBneXJvLCB0aW1lc3RhbXBTKSB7XG4gIGlmICghdGhpcy5wcmV2aW91c1RpbWVzdGFtcFMpIHtcbiAgICB0aGlzLnByZXZpb3VzUS5jb3B5KGN1cnJlbnRRKTtcbiAgICB0aGlzLnByZXZpb3VzVGltZXN0YW1wUyA9IHRpbWVzdGFtcFM7XG4gICAgcmV0dXJuIGN1cnJlbnRRO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIGF4aXMgYW5kIGFuZ2xlIGJhc2VkIG9uIGd5cm9zY29wZSByb3RhdGlvbiByYXRlIGRhdGEuXG4gIHZhciBheGlzID0gbmV3IE1hdGhVdGlsLlZlY3RvcjMoKTtcbiAgYXhpcy5jb3B5KGd5cm8pO1xuICBheGlzLm5vcm1hbGl6ZSgpO1xuXG4gIHZhciBhbmd1bGFyU3BlZWQgPSBneXJvLmxlbmd0aCgpO1xuXG4gIC8vIElmIHdlJ3JlIHJvdGF0aW5nIHNsb3dseSwgZG9uJ3QgZG8gcHJlZGljdGlvbi5cbiAgaWYgKGFuZ3VsYXJTcGVlZCA8IE1hdGhVdGlsLmRlZ1RvUmFkICogMjApIHtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdNb3Zpbmcgc2xvd2x5LCBhdCAlcyBkZWcvczogbm8gcHJlZGljdGlvbicsXG4gICAgICAgICAgICAgICAgICAoTWF0aFV0aWwucmFkVG9EZWcgKiBhbmd1bGFyU3BlZWQpLnRvRml4ZWQoMSkpO1xuICAgIH1cbiAgICB0aGlzLm91dFEuY29weShjdXJyZW50USk7XG4gICAgdGhpcy5wcmV2aW91c1EuY29weShjdXJyZW50USk7XG4gICAgcmV0dXJuIHRoaXMub3V0UTtcbiAgfVxuXG4gIC8vIEdldCB0aGUgcHJlZGljdGVkIGFuZ2xlIGJhc2VkIG9uIHRoZSB0aW1lIGRlbHRhIGFuZCBsYXRlbmN5LlxuICB2YXIgZGVsdGFUID0gdGltZXN0YW1wUyAtIHRoaXMucHJldmlvdXNUaW1lc3RhbXBTO1xuICB2YXIgcHJlZGljdEFuZ2xlID0gYW5ndWxhclNwZWVkICogdGhpcy5wcmVkaWN0aW9uVGltZVM7XG5cbiAgdGhpcy5kZWx0YVEuc2V0RnJvbUF4aXNBbmdsZShheGlzLCBwcmVkaWN0QW5nbGUpO1xuICB0aGlzLm91dFEuY29weSh0aGlzLnByZXZpb3VzUSk7XG4gIHRoaXMub3V0US5tdWx0aXBseSh0aGlzLmRlbHRhUSk7XG5cbiAgdGhpcy5wcmV2aW91c1EuY29weShjdXJyZW50USk7XG5cbiAgcmV0dXJuIHRoaXMub3V0UTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQb3NlUHJlZGljdG9yO1xuXG59LHtcIi4uL21hdGgtdXRpbC5qc1wiOjE0fV0sMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuZnVuY3Rpb24gU2Vuc29yU2FtcGxlKHNhbXBsZSwgdGltZXN0YW1wUykge1xuICB0aGlzLnNldChzYW1wbGUsIHRpbWVzdGFtcFMpO1xufTtcblxuU2Vuc29yU2FtcGxlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihzYW1wbGUsIHRpbWVzdGFtcFMpIHtcbiAgdGhpcy5zYW1wbGUgPSBzYW1wbGU7XG4gIHRoaXMudGltZXN0YW1wUyA9IHRpbWVzdGFtcFM7XG59O1xuXG5TZW5zb3JTYW1wbGUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbihzZW5zb3JTYW1wbGUpIHtcbiAgdGhpcy5zZXQoc2Vuc29yU2FtcGxlLnNhbXBsZSwgc2Vuc29yU2FtcGxlLnRpbWVzdGFtcFMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZW5zb3JTYW1wbGU7XG5cbn0se31dLDIxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgTWF0aFV0aWwgPSBfZGVyZXFfKCcuL21hdGgtdXRpbC5qcycpO1xudmFyIFV0aWwgPSBfZGVyZXFfKCcuL3V0aWwuanMnKTtcblxudmFyIFJPVEFURV9TUEVFRCA9IDAuNTtcbi8qKlxuICogUHJvdmlkZXMgYSBxdWF0ZXJuaW9uIHJlc3BvbnNpYmxlIGZvciBwcmUtcGFubmluZyB0aGUgc2NlbmUgYmVmb3JlIGZ1cnRoZXJcbiAqIHRyYW5zZm9ybWF0aW9ucyBkdWUgdG8gZGV2aWNlIHNlbnNvcnMuXG4gKi9cbmZ1bmN0aW9uIFRvdWNoUGFubmVyKCkge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaFN0YXJ0Xy5iaW5kKHRoaXMpKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmVfLmJpbmQodGhpcykpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmRfLmJpbmQodGhpcykpO1xuXG4gIHRoaXMuaXNUb3VjaGluZyA9IGZhbHNlO1xuICB0aGlzLnJvdGF0ZVN0YXJ0ID0gbmV3IE1hdGhVdGlsLlZlY3RvcjIoKTtcbiAgdGhpcy5yb3RhdGVFbmQgPSBuZXcgTWF0aFV0aWwuVmVjdG9yMigpO1xuICB0aGlzLnJvdGF0ZURlbHRhID0gbmV3IE1hdGhVdGlsLlZlY3RvcjIoKTtcblxuICB0aGlzLnRoZXRhID0gMDtcbiAgdGhpcy5vcmllbnRhdGlvbiA9IG5ldyBNYXRoVXRpbC5RdWF0ZXJuaW9uKCk7XG59XG5cblRvdWNoUGFubmVyLnByb3RvdHlwZS5nZXRPcmllbnRhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9yaWVudGF0aW9uLnNldEZyb21FdWxlclhZWigwLCAwLCB0aGlzLnRoZXRhKTtcbiAgcmV0dXJuIHRoaXMub3JpZW50YXRpb247XG59O1xuXG5Ub3VjaFBhbm5lci5wcm90b3R5cGUucmVzZXRTZW5zb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy50aGV0YSA9IDA7XG59O1xuXG5Ub3VjaFBhbm5lci5wcm90b3R5cGUub25Ub3VjaFN0YXJ0XyA9IGZ1bmN0aW9uKGUpIHtcbiAgLy8gT25seSByZXNwb25kIGlmIHRoZXJlIGlzIGV4YWN0bHkgb25lIHRvdWNoLlxuICBpZiAoZS50b3VjaGVzLmxlbmd0aCAhPSAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucm90YXRlU3RhcnQuc2V0KGUudG91Y2hlc1swXS5wYWdlWCwgZS50b3VjaGVzWzBdLnBhZ2VZKTtcbiAgdGhpcy5pc1RvdWNoaW5nID0gdHJ1ZTtcbn07XG5cblRvdWNoUGFubmVyLnByb3RvdHlwZS5vblRvdWNoTW92ZV8gPSBmdW5jdGlvbihlKSB7XG4gIGlmICghdGhpcy5pc1RvdWNoaW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucm90YXRlRW5kLnNldChlLnRvdWNoZXNbMF0ucGFnZVgsIGUudG91Y2hlc1swXS5wYWdlWSk7XG4gIHRoaXMucm90YXRlRGVsdGEuc3ViVmVjdG9ycyh0aGlzLnJvdGF0ZUVuZCwgdGhpcy5yb3RhdGVTdGFydCk7XG4gIHRoaXMucm90YXRlU3RhcnQuY29weSh0aGlzLnJvdGF0ZUVuZCk7XG5cbiAgLy8gT24gaU9TLCBkaXJlY3Rpb24gaXMgaW52ZXJ0ZWQuXG4gIGlmIChVdGlsLmlzSU9TKCkpIHtcbiAgICB0aGlzLnJvdGF0ZURlbHRhLnggKj0gLTE7XG4gIH1cblxuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmJvZHk7XG4gIHRoaXMudGhldGEgKz0gMiAqIE1hdGguUEkgKiB0aGlzLnJvdGF0ZURlbHRhLnggLyBlbGVtZW50LmNsaWVudFdpZHRoICogUk9UQVRFX1NQRUVEO1xufTtcblxuVG91Y2hQYW5uZXIucHJvdG90eXBlLm9uVG91Y2hFbmRfID0gZnVuY3Rpb24oZSkge1xuICB0aGlzLmlzVG91Y2hpbmcgPSBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVG91Y2hQYW5uZXI7XG5cbn0se1wiLi9tYXRoLXV0aWwuanNcIjoxNCxcIi4vdXRpbC5qc1wiOjIyfV0sMjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIG9iamVjdEFzc2lnbiA9IF9kZXJlcV8oJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFV0aWwgPSB3aW5kb3cuVXRpbCB8fCB7fTtcblxuVXRpbC5NSU5fVElNRVNURVAgPSAwLjAwMTtcblV0aWwuTUFYX1RJTUVTVEVQID0gMTtcblxuVXRpbC5iYXNlNjQgPSBmdW5jdGlvbihtaW1lVHlwZSwgYmFzZTY0KSB7XG4gIHJldHVybiAnZGF0YTonICsgbWltZVR5cGUgKyAnO2Jhc2U2NCwnICsgYmFzZTY0O1xufTtcblxuVXRpbC5jbGFtcCA9IGZ1bmN0aW9uKHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG59O1xuXG5VdGlsLmxlcnAgPSBmdW5jdGlvbihhLCBiLCB0KSB7XG4gIHJldHVybiBhICsgKChiIC0gYSkgKiB0KTtcbn07XG5cblV0aWwuaXNJT1MgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBpc0lPUyA9IC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaXNJT1M7XG4gIH07XG59KSgpO1xuXG5VdGlsLmlzU2FmYXJpID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgaXNTYWZhcmkgPSAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlzU2FmYXJpO1xuICB9O1xufSkoKTtcblxuVXRpbC5pc0ZpcmVmb3hBbmRyb2lkID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgaXNGaXJlZm94QW5kcm9pZCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpICE9PSAtMSAmJlxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdBbmRyb2lkJykgIT09IC0xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlzRmlyZWZveEFuZHJvaWQ7XG4gIH07XG59KSgpO1xuXG5VdGlsLmlzTGFuZHNjYXBlTW9kZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKHdpbmRvdy5vcmllbnRhdGlvbiA9PSA5MCB8fCB3aW5kb3cub3JpZW50YXRpb24gPT0gLTkwKTtcbn07XG5cbi8vIEhlbHBlciBtZXRob2QgdG8gdmFsaWRhdGUgdGhlIHRpbWUgc3RlcHMgb2Ygc2Vuc29yIHRpbWVzdGFtcHMuXG5VdGlsLmlzVGltZXN0YW1wRGVsdGFWYWxpZCA9IGZ1bmN0aW9uKHRpbWVzdGFtcERlbHRhUykge1xuICBpZiAoaXNOYU4odGltZXN0YW1wRGVsdGFTKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodGltZXN0YW1wRGVsdGFTIDw9IFV0aWwuTUlOX1RJTUVTVEVQKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0aW1lc3RhbXBEZWx0YVMgPiBVdGlsLk1BWF9USU1FU1RFUCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblV0aWwuZ2V0U2NyZWVuV2lkdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGgubWF4KHdpbmRvdy5zY3JlZW4ud2lkdGgsIHdpbmRvdy5zY3JlZW4uaGVpZ2h0KSAqXG4gICAgICB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbn07XG5cblV0aWwuZ2V0U2NyZWVuSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLm1pbih3aW5kb3cuc2NyZWVuLndpZHRoLCB3aW5kb3cuc2NyZWVuLmhlaWdodCkgKlxuICAgICAgd2luZG93LmRldmljZVBpeGVsUmF0aW87XG59O1xuXG5VdGlsLnJlcXVlc3RGdWxsc2NyZWVuID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgIGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgfSBlbHNlIGlmIChlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgZWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4pIHtcbiAgICBlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5VdGlsLmV4aXRGdWxsc2NyZWVuID0gZnVuY3Rpb24oKSB7XG4gIGlmIChkb2N1bWVudC5leGl0RnVsbHNjcmVlbikge1xuICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHtcbiAgICBkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4pIHtcbiAgICBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbikge1xuICAgIGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblV0aWwuZ2V0RnVsbHNjcmVlbkVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8XG4gICAgICBkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudCB8fFxuICAgICAgZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgfHxcbiAgICAgIGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnQ7XG59O1xuXG5VdGlsLmxpbmtQcm9ncmFtID0gZnVuY3Rpb24oZ2wsIHZlcnRleFNvdXJjZSwgZnJhZ21lbnRTb3VyY2UsIGF0dHJpYkxvY2F0aW9uTWFwKSB7XG4gIC8vIE5vIGVycm9yIGNoZWNraW5nIGZvciBicmV2aXR5LlxuICB2YXIgdmVydGV4U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpO1xuICBnbC5zaGFkZXJTb3VyY2UodmVydGV4U2hhZGVyLCB2ZXJ0ZXhTb3VyY2UpO1xuICBnbC5jb21waWxlU2hhZGVyKHZlcnRleFNoYWRlcik7XG5cbiAgdmFyIGZyYWdtZW50U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUik7XG4gIGdsLnNoYWRlclNvdXJjZShmcmFnbWVudFNoYWRlciwgZnJhZ21lbnRTb3VyY2UpO1xuICBnbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTtcblxuICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG5cbiAgZm9yICh2YXIgYXR0cmliTmFtZSBpbiBhdHRyaWJMb2NhdGlvbk1hcClcbiAgICBnbC5iaW5kQXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgYXR0cmliTG9jYXRpb25NYXBbYXR0cmliTmFtZV0sIGF0dHJpYk5hbWUpO1xuXG4gIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuXG4gIGdsLmRlbGV0ZVNoYWRlcih2ZXJ0ZXhTaGFkZXIpO1xuICBnbC5kZWxldGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpO1xuXG4gIHJldHVybiBwcm9ncmFtO1xufTtcblxuVXRpbC5nZXRQcm9ncmFtVW5pZm9ybXMgPSBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICB2YXIgdW5pZm9ybXMgPSB7fTtcbiAgdmFyIHVuaWZvcm1Db3VudCA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuQUNUSVZFX1VOSUZPUk1TKTtcbiAgdmFyIHVuaWZvcm1OYW1lID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdW5pZm9ybUNvdW50OyBpKyspIHtcbiAgICB2YXIgdW5pZm9ybUluZm8gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKHByb2dyYW0sIGkpO1xuICAgIHVuaWZvcm1OYW1lID0gdW5pZm9ybUluZm8ubmFtZS5yZXBsYWNlKCdbMF0nLCAnJyk7XG4gICAgdW5pZm9ybXNbdW5pZm9ybU5hbWVdID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIHVuaWZvcm1OYW1lKTtcbiAgfVxuICByZXR1cm4gdW5pZm9ybXM7XG59O1xuXG5VdGlsLm9ydGhvTWF0cml4ID0gZnVuY3Rpb24gKG91dCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcbiAgdmFyIGxyID0gMSAvIChsZWZ0IC0gcmlnaHQpLFxuICAgICAgYnQgPSAxIC8gKGJvdHRvbSAtIHRvcCksXG4gICAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gIG91dFswXSA9IC0yICogbHI7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IC0yICogYnQ7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAyICogbmY7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gKGxlZnQgKyByaWdodCkgKiBscjtcbiAgb3V0WzEzXSA9ICh0b3AgKyBib3R0b20pICogYnQ7XG4gIG91dFsxNF0gPSAoZmFyICsgbmVhcikgKiBuZjtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5VdGlsLmlzTW9iaWxlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjaGVjayA9IGZhbHNlO1xuICAoZnVuY3Rpb24oYSl7aWYoLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLnRlc3QoYSl8fC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLnRlc3QoYS5zdWJzdHIoMCw0KSkpY2hlY2sgPSB0cnVlfSkobmF2aWdhdG9yLnVzZXJBZ2VudHx8bmF2aWdhdG9yLnZlbmRvcnx8d2luZG93Lm9wZXJhKTtcbiAgcmV0dXJuIGNoZWNrO1xufTtcblxuVXRpbC5leHRlbmQgPSBvYmplY3RBc3NpZ247XG5cblV0aWwuc2FmYXJpQ3NzU2l6ZVdvcmthcm91bmQgPSBmdW5jdGlvbihjYW52YXMpIHtcbiAgLy8gVE9ETyhzbXVzKTogUmVtb3ZlIHRoaXMgd29ya2Fyb3VuZCB3aGVuIFNhZmFyaSBmb3IgaU9TIGlzIGZpeGVkLlxuICAvLyBpT1Mgb25seSB3b3JrYXJvdW5kIChmb3IgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1MjU1NikuXG4gIC8vXG4gIC8vIFwiVG8gdGhlIGxhc3QgSSBncmFwcGxlIHdpdGggdGhlZTtcbiAgLy8gIGZyb20gaGVsbCdzIGhlYXJ0IEkgc3RhYiBhdCB0aGVlO1xuICAvLyAgZm9yIGhhdGUncyBzYWtlIEkgc3BpdCBteSBsYXN0IGJyZWF0aCBhdCB0aGVlLlwiXG4gIC8vIC0tIE1vYnkgRGljaywgYnkgSGVybWFuIE1lbHZpbGxlXG4gIGlmIChVdGlsLmlzSU9TKCkpIHtcbiAgICB2YXIgd2lkdGggPSBjYW52YXMuc3R5bGUud2lkdGg7XG4gICAgdmFyIGhlaWdodCA9IGNhbnZhcy5zdHlsZS5oZWlnaHQ7XG4gICAgY2FudmFzLnN0eWxlLndpZHRoID0gKHBhcnNlSW50KHdpZHRoKSArIDEpICsgJ3B4JztcbiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gKHBhcnNlSW50KGhlaWdodCkpICsgJ3B4JztcbiAgICBjb25zb2xlLmxvZygnUmVzZXR0aW5nIHdpZHRoIHRvLi4uJywgd2lkdGgpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygnRG9uZS4gV2lkdGggaXMgbm93Jywgd2lkdGgpO1xuICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGg7XG4gICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH0sIDEwMCk7XG4gIH1cblxuICAvLyBEZWJ1ZyBvbmx5LlxuICB3aW5kb3cuVXRpbCA9IFV0aWw7XG4gIHdpbmRvdy5jYW52YXMgPSBjYW52YXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFV0aWw7XG5cbn0se1wib2JqZWN0LWFzc2lnblwiOjF9XSwyMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgRW1pdHRlciA9IF9kZXJlcV8oJy4vZW1pdHRlci5qcycpO1xudmFyIFV0aWwgPSBfZGVyZXFfKCcuL3V0aWwuanMnKTtcbnZhciBEZXZpY2VJbmZvID0gX2RlcmVxXygnLi9kZXZpY2UtaW5mby5qcycpO1xuXG52YXIgREVGQVVMVF9WSUVXRVIgPSAnQ2FyZGJvYXJkVjEnO1xudmFyIFZJRVdFUl9LRVkgPSAnV0VCVlJfQ0FSREJPQVJEX1ZJRVdFUic7XG52YXIgQ0xBU1NfTkFNRSA9ICd3ZWJ2ci1wb2x5ZmlsbC12aWV3ZXItc2VsZWN0b3InO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB2aWV3ZXIgc2VsZWN0b3Igd2l0aCB0aGUgb3B0aW9ucyBzcGVjaWZpZWQuIFN1cHBvcnRzIGJlaW5nIHNob3duXG4gKiBhbmQgaGlkZGVuLiBHZW5lcmF0ZXMgZXZlbnRzIHdoZW4gdmlld2VyIHBhcmFtZXRlcnMgY2hhbmdlLiBBbHNvIHN1cHBvcnRzXG4gKiBzYXZpbmcgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpbmRleCBpbiBsb2NhbFN0b3JhZ2UuXG4gKi9cbmZ1bmN0aW9uIFZpZXdlclNlbGVjdG9yKCkge1xuICAvLyBUcnkgdG8gbG9hZCB0aGUgc2VsZWN0ZWQga2V5IGZyb20gbG9jYWwgc3RvcmFnZS4gSWYgbm9uZSBleGlzdHMsIHVzZSB0aGVcbiAgLy8gZGVmYXVsdCBrZXkuXG4gIHRyeSB7XG4gICAgdGhpcy5zZWxlY3RlZEtleSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFZJRVdFUl9LRVkpIHx8IERFRkFVTFRfVklFV0VSO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHZpZXdlciBwcm9maWxlOiAlcycsIGVycm9yKTtcbiAgfVxuICB0aGlzLmRpYWxvZyA9IHRoaXMuY3JlYXRlRGlhbG9nXyhEZXZpY2VJbmZvLlZpZXdlcnMpO1xuICB0aGlzLnJvb3QgPSBudWxsO1xufVxuVmlld2VyU2VsZWN0b3IucHJvdG90eXBlID0gbmV3IEVtaXR0ZXIoKTtcblxuVmlld2VyU2VsZWN0b3IucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbihyb290KSB7XG4gIHRoaXMucm9vdCA9IHJvb3Q7XG5cbiAgcm9vdC5hcHBlbmRDaGlsZCh0aGlzLmRpYWxvZyk7XG4gIC8vY29uc29sZS5sb2coJ1ZpZXdlclNlbGVjdG9yLnNob3cnKTtcblxuICAvLyBFbnN1cmUgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpdGVtIGlzIGNoZWNrZWQuXG4gIHZhciBzZWxlY3RlZCA9IHRoaXMuZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoJyMnICsgdGhpcy5zZWxlY3RlZEtleSk7XG4gIHNlbGVjdGVkLmNoZWNrZWQgPSB0cnVlO1xuXG4gIC8vIFNob3cgdGhlIFVJLlxuICB0aGlzLmRpYWxvZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbn07XG5cblZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnJvb3QgJiYgdGhpcy5yb290LmNvbnRhaW5zKHRoaXMuZGlhbG9nKSkge1xuICAgIHRoaXMucm9vdC5yZW1vdmVDaGlsZCh0aGlzLmRpYWxvZyk7XG4gIH1cbiAgLy9jb25zb2xlLmxvZygnVmlld2VyU2VsZWN0b3IuaGlkZScpO1xuICB0aGlzLmRpYWxvZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufTtcblxuVmlld2VyU2VsZWN0b3IucHJvdG90eXBlLmdldEN1cnJlbnRWaWV3ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIERldmljZUluZm8uVmlld2Vyc1t0aGlzLnNlbGVjdGVkS2V5XTtcbn07XG5cblZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5nZXRTZWxlY3RlZEtleV8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGlucHV0ID0gdGhpcy5kaWFsb2cucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1maWVsZF06Y2hlY2tlZCcpO1xuICBpZiAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQuaWQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5WaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUub25TYXZlXyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNlbGVjdGVkS2V5ID0gdGhpcy5nZXRTZWxlY3RlZEtleV8oKTtcbiAgaWYgKCF0aGlzLnNlbGVjdGVkS2V5IHx8ICFEZXZpY2VJbmZvLlZpZXdlcnNbdGhpcy5zZWxlY3RlZEtleV0pIHtcbiAgICBjb25zb2xlLmVycm9yKCdWaWV3ZXJTZWxlY3Rvci5vblNhdmVfOiB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4hJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lbWl0KCdjaGFuZ2UnLCBEZXZpY2VJbmZvLlZpZXdlcnNbdGhpcy5zZWxlY3RlZEtleV0pO1xuXG4gIC8vIEF0dGVtcHQgdG8gc2F2ZSB0aGUgdmlld2VyIHByb2ZpbGUsIGJ1dCBmYWlscyBpbiBwcml2YXRlIG1vZGUuXG4gIHRyeSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oVklFV0VSX0tFWSwgdGhpcy5zZWxlY3RlZEtleSk7XG4gIH0gY2F0Y2goZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2F2ZSB2aWV3ZXIgcHJvZmlsZTogJXMnLCBlcnJvcik7XG4gIH1cbiAgdGhpcy5oaWRlKCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGRpYWxvZy5cbiAqL1xuVmlld2VyU2VsZWN0b3IucHJvdG90eXBlLmNyZWF0ZURpYWxvZ18gPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRSk7XG4gIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAvLyBDcmVhdGUgYW4gb3ZlcmxheSB0aGF0IGRpbXMgdGhlIGJhY2tncm91bmQsIGFuZCB3aGljaCBnb2VzIGF3YXkgd2hlbiB5b3VcbiAgLy8gdGFwIGl0LlxuICB2YXIgb3ZlcmxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB2YXIgcyA9IG92ZXJsYXkuc3R5bGU7XG4gIHMucG9zaXRpb24gPSAnZml4ZWQnO1xuICBzLmxlZnQgPSAwO1xuICBzLnRvcCA9IDA7XG4gIHMud2lkdGggPSAnMTAwJSc7XG4gIHMuaGVpZ2h0ID0gJzEwMCUnO1xuICBzLmJhY2tncm91bmQgPSAncmdiYSgwLCAwLCAwLCAwLjMpJztcbiAgb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGlkZS5iaW5kKHRoaXMpKTtcblxuICB2YXIgd2lkdGggPSAyODA7XG4gIHZhciBkaWFsb2cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmFyIHMgPSBkaWFsb2cuc3R5bGU7XG4gIHMuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuICBzLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgcy50b3AgPSAnMjRweCc7XG4gIHMubGVmdCA9ICc1MCUnO1xuICBzLm1hcmdpbkxlZnQgPSAoLXdpZHRoLzIpICsgJ3B4JztcbiAgcy53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgcy5wYWRkaW5nID0gJzI0cHgnO1xuICBzLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gIHMuYmFja2dyb3VuZCA9ICcjZmFmYWZhJztcbiAgcy5mb250RmFtaWx5ID0gXCInUm9ib3RvJywgc2Fucy1zZXJpZlwiO1xuICBzLmJveFNoYWRvdyA9ICcwcHggNXB4IDIwcHggIzY2Nic7XG5cbiAgZGlhbG9nLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlSDFfKCdTZWxlY3QgeW91ciB2aWV3ZXInKSk7XG4gIGZvciAodmFyIGlkIGluIG9wdGlvbnMpIHtcbiAgICBkaWFsb2cuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVDaG9pY2VfKGlkLCBvcHRpb25zW2lkXS5sYWJlbCkpO1xuICB9XG4gIGRpYWxvZy5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZUJ1dHRvbl8oJ1NhdmUnLCB0aGlzLm9uU2F2ZV8uYmluZCh0aGlzKSkpO1xuXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChvdmVybGF5KTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpYWxvZyk7XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn07XG5cblZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5jcmVhdGVIMV8gPSBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBoMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gIHZhciBzID0gaDEuc3R5bGU7XG4gIHMuY29sb3IgPSAnYmxhY2snO1xuICBzLmZvbnRTaXplID0gJzIwcHgnO1xuICBzLmZvbnRXZWlnaHQgPSAnYm9sZCc7XG4gIHMubWFyZ2luVG9wID0gMDtcbiAgcy5tYXJnaW5Cb3R0b20gPSAnMjRweCc7XG4gIGgxLmlubmVySFRNTCA9IG5hbWU7XG4gIHJldHVybiBoMTtcbn07XG5cblZpZXdlclNlbGVjdG9yLnByb3RvdHlwZS5jcmVhdGVDaG9pY2VfID0gZnVuY3Rpb24oaWQsIG5hbWUpIHtcbiAgLypcbiAgPGRpdiBjbGFzcz1cImNob2ljZVwiPlxuICA8aW5wdXQgaWQ9XCJ2MVwiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJmaWVsZFwiIHZhbHVlPVwidjFcIj5cbiAgPGxhYmVsIGZvcj1cInYxXCI+Q2FyZGJvYXJkIFYxPC9sYWJlbD5cbiAgPC9kaXY+XG4gICovXG4gIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2LnN0eWxlLm1hcmdpblRvcCA9ICc4cHgnO1xuICBkaXYuc3R5bGUuY29sb3IgPSAnYmxhY2snO1xuXG4gIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gIGlucHV0LnN0eWxlLmZvbnRTaXplID0gJzMwcHgnO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAncmFkaW8nKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIGlkKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgJ2ZpZWxkJyk7XG5cbiAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgbGFiZWwuc3R5bGUubWFyZ2luTGVmdCA9ICc0cHgnO1xuICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGlkKTtcbiAgbGFiZWwuaW5uZXJIVE1MID0gbmFtZTtcblxuICBkaXYuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICBkaXYuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gIHJldHVybiBkaXY7XG59O1xuXG5WaWV3ZXJTZWxlY3Rvci5wcm90b3R5cGUuY3JlYXRlQnV0dG9uXyA9IGZ1bmN0aW9uKGxhYmVsLCBvbmNsaWNrKSB7XG4gIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgYnV0dG9uLmlubmVySFRNTCA9IGxhYmVsO1xuICB2YXIgcyA9IGJ1dHRvbi5zdHlsZTtcbiAgcy5mbG9hdCA9ICdyaWdodCc7XG4gIHMudGV4dFRyYW5zZm9ybSA9ICd1cHBlcmNhc2UnO1xuICBzLmNvbG9yID0gJyMxMDk0ZjcnO1xuICBzLmZvbnRTaXplID0gJzE0cHgnO1xuICBzLmxldHRlclNwYWNpbmcgPSAwO1xuICBzLmJvcmRlciA9IDA7XG4gIHMuYmFja2dyb3VuZCA9ICdub25lJztcbiAgcy5tYXJnaW5Ub3AgPSAnMTZweCc7XG5cbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25jbGljayk7XG5cbiAgcmV0dXJuIGJ1dHRvbjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVmlld2VyU2VsZWN0b3I7XG5cbn0se1wiLi9kZXZpY2UtaW5mby5qc1wiOjcsXCIuL2VtaXR0ZXIuanNcIjoxMixcIi4vdXRpbC5qc1wiOjIyfV0sMjQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIFV0aWwgPSBfZGVyZXFfKCcuL3V0aWwuanMnKTtcblxuLyoqXG4gKiBBbmRyb2lkIGFuZCBpT1MgY29tcGF0aWJsZSB3YWtlbG9jayBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBSZWZhY3RvcmVkIHRoYW5rcyB0byBka292YWxldkAuXG4gKi9cbmZ1bmN0aW9uIEFuZHJvaWRXYWtlTG9jaygpIHtcbiAgdmFyIHZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcblxuICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIGZ1bmN0aW9uKCkge1xuICAgIHZpZGVvLnBsYXkoKTtcbiAgfSk7XG5cbiAgdGhpcy5yZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHZpZGVvLnBhdXNlZCkge1xuICAgICAgLy8gQmFzZTY0IHZlcnNpb24gb2YgdmlkZW9zX3NyYy9uby1zbGVlcC0xMjBzLm1wNC5cbiAgICAgIHZpZGVvLnNyYyA9IFV0aWwuYmFzZTY0KCd2aWRlby9tcDQnLCAnQUFBQUdHWjBlWEJwYzI5dEFBQUFBRzF3TkRGaGRtTXhBQUFJQTIxdmIzWUFBQUJzYlhab1pBQUFBQURTYTl2NjBtdmIrZ0FCWDVBQWx3L2dBQUVBQUFFQUFBQUFBQUFBQUFBQUFBQUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSUFBQWRrZEhKaGF3QUFBRngwYTJoa0FBQUFBZEpyMi9yU2E5djZBQUFBQVFBQUFBQUFsdy9nQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQVFBQUFBQUFRQUFBQUhBQUFBQUFBSkdWa2RITUFBQUFjWld4emRBQUFBQUFBQUFBQkFKY1A0QUFBQUFBQUFRQUFBQUFHM0cxa2FXRUFBQUFnYldSb1pBQUFBQURTYTl2NjBtdmIrZ0FQUWtBR2puZUFGY2NBQUFBQUFDMW9aR3h5QUFBQUFBQUFBQUIyYVdSbEFBQUFBQUFBQUFBQUFBQUFWbWxrWlc5SVlXNWtiR1Z5QUFBQUJvZHRhVzVtQUFBQUZIWnRhR1FBQUFBQkFBQUFBQUFBQUFBQUFBQWtaR2x1WmdBQUFCeGtjbVZtQUFBQUFBQUFBQUVBQUFBTWRYSnNJQUFBQUFFQUFBWkhjM1JpYkFBQUFKZHpkSE5rQUFBQUFBQUFBQUVBQUFDSFlYWmpNUUFBQUFBQUFBQUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU1BQndBU0FBQUFFZ0FBQUFBQUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJqLy93QUFBREZoZG1OREFXUUFDLy9oQUJsblpBQUxyTmxmbGx3NFFBQUFBd0JBQUFBREFLUEZDbVdBQVFBRmFPdnNzaXdBQUFBWWMzUjBjd0FBQUFBQUFBQUJBQUFBYmdBUFFrQUFBQUFVYzNSemN3QUFBQUFBQUFBQkFBQUFBUUFBQTRCamRIUnpBQUFBQUFBQUFHNEFBQUFCQUQwSkFBQUFBQUVBZWhJQUFBQUFBUUE5Q1FBQUFBQUJBQUFBQUFBQUFBRUFEMEpBQUFBQUFRQk1TMEFBQUFBQkFCNkVnQUFBQUFFQUFBQUFBQUFBQVFBUFFrQUFBQUFCQUV4TFFBQUFBQUVBSG9TQUFBQUFBUUFBQUFBQUFBQUJBQTlDUUFBQUFBRUFURXRBQUFBQUFRQWVoSUFBQUFBQkFBQUFBQUFBQUFFQUQwSkFBQUFBQVFCTVMwQUFBQUFCQUI2RWdBQUFBQUVBQUFBQUFBQUFBUUFQUWtBQUFBQUJBRXhMUUFBQUFBRUFIb1NBQUFBQUFRQUFBQUFBQUFBQkFBOUNRQUFBQUFFQVRFdEFBQUFBQVFBZWhJQUFBQUFCQUFBQUFBQUFBQUVBRDBKQUFBQUFBUUJNUzBBQUFBQUJBQjZFZ0FBQUFBRUFBQUFBQUFBQUFRQVBRa0FBQUFBQkFFeExRQUFBQUFFQUhvU0FBQUFBQVFBQUFBQUFBQUFCQUE5Q1FBQUFBQUVBVEV0QUFBQUFBUUFlaElBQUFBQUJBQUFBQUFBQUFBRUFEMEpBQUFBQUFRQk1TMEFBQUFBQkFCNkVnQUFBQUFFQUFBQUFBQUFBQVFBUFFrQUFBQUFCQUV4TFFBQUFBQUVBSG9TQUFBQUFBUUFBQUFBQUFBQUJBQTlDUUFBQUFBRUFURXRBQUFBQUFRQWVoSUFBQUFBQkFBQUFBQUFBQUFFQUQwSkFBQUFBQVFCTVMwQUFBQUFCQUI2RWdBQUFBQUVBQUFBQUFBQUFBUUFQUWtBQUFBQUJBRXhMUUFBQUFBRUFIb1NBQUFBQUFRQUFBQUFBQUFBQkFBOUNRQUFBQUFFQVRFdEFBQUFBQVFBZWhJQUFBQUFCQUFBQUFBQUFBQUVBRDBKQUFBQUFBUUJNUzBBQUFBQUJBQjZFZ0FBQUFBRUFBQUFBQUFBQUFRQVBRa0FBQUFBQkFFeExRQUFBQUFFQUhvU0FBQUFBQVFBQUFBQUFBQUFCQUE5Q1FBQUFBQUVBVEV0QUFBQUFBUUFlaElBQUFBQUJBQUFBQUFBQUFBRUFEMEpBQUFBQUFRQk1TMEFBQUFBQkFCNkVnQUFBQUFFQUFBQUFBQUFBQVFBUFFrQUFBQUFCQUV4TFFBQUFBQUVBSG9TQUFBQUFBUUFBQUFBQUFBQUJBQTlDUUFBQUFBRUFURXRBQUFBQUFRQWVoSUFBQUFBQkFBQUFBQUFBQUFFQUQwSkFBQUFBQVFCTVMwQUFBQUFCQUI2RWdBQUFBQUVBQUFBQUFBQUFBUUFQUWtBQUFBQUJBRXhMUUFBQUFBRUFIb1NBQUFBQUFRQUFBQUFBQUFBQkFBOUNRQUFBQUFFQVRFdEFBQUFBQVFBZWhJQUFBQUFCQUFBQUFBQUFBQUVBRDBKQUFBQUFBUUJNUzBBQUFBQUJBQjZFZ0FBQUFBRUFBQUFBQUFBQUFRQVBRa0FBQUFBQkFFeExRQUFBQUFFQUhvU0FBQUFBQVFBQUFBQUFBQUFCQUE5Q1FBQUFBQUVBTGNiQUFBQUFISE4wYzJNQUFBQUFBQUFBQVFBQUFBRUFBQUJ1QUFBQUFRQUFBY3h6ZEhONkFBQUFBQUFBQUFBQUFBQnVBQUFEQ1FBQUFCZ0FBQUFPQUFBQURnQUFBQXdBQUFBU0FBQUFEZ0FBQUF3QUFBQU1BQUFBRWdBQUFBNEFBQUFNQUFBQURBQUFBQklBQUFBT0FBQUFEQUFBQUF3QUFBQVNBQUFBRGdBQUFBd0FBQUFNQUFBQUVnQUFBQTRBQUFBTUFBQUFEQUFBQUJJQUFBQU9BQUFBREFBQUFBd0FBQUFTQUFBQURnQUFBQXdBQUFBTUFBQUFFZ0FBQUE0QUFBQU1BQUFBREFBQUFCSUFBQUFPQUFBQURBQUFBQXdBQUFBU0FBQUFEZ0FBQUF3QUFBQU1BQUFBRWdBQUFBNEFBQUFNQUFBQURBQUFBQklBQUFBT0FBQUFEQUFBQUF3QUFBQVNBQUFBRGdBQUFBd0FBQUFNQUFBQUVnQUFBQTRBQUFBTUFBQUFEQUFBQUJJQUFBQU9BQUFBREFBQUFBd0FBQUFTQUFBQURnQUFBQXdBQUFBTUFBQUFFZ0FBQUE0QUFBQU1BQUFBREFBQUFCSUFBQUFPQUFBQURBQUFBQXdBQUFBU0FBQUFEZ0FBQUF3QUFBQU1BQUFBRWdBQUFBNEFBQUFNQUFBQURBQUFBQklBQUFBT0FBQUFEQUFBQUF3QUFBQVNBQUFBRGdBQUFBd0FBQUFNQUFBQUVnQUFBQTRBQUFBTUFBQUFEQUFBQUJJQUFBQU9BQUFBREFBQUFBd0FBQUFTQUFBQURnQUFBQXdBQUFBTUFBQUFFZ0FBQUE0QUFBQU1BQUFBREFBQUFCTUFBQUFVYzNSamJ3QUFBQUFBQUFBQkFBQUlLd0FBQUN0MVpIUmhBQUFBSTZsbGJtTUFGd0FBZG14aklESXVNaTR4SUhOMGNtVmhiU0J2ZFhSd2RYUUFBQUFJZDJsa1pRQUFDUlJ0WkdGMEFBQUNyZ1gvLzZ2Y1JlbTk1dGxJdDVZczJDRFpJKzd2ZURJMk5DQXRJR052Y21VZ01UUXlJQzBnU0M0eU5qUXZUVkJGUnkwMElFRldReUJqYjJSbFl5QXRJRU52Y0hsc1pXWjBJREl3TURNdE1qQXhOQ0F0SUdoMGRIQTZMeTkzZDNjdWRtbGtaVzlzWVc0dWIzSm5MM2d5TmpRdWFIUnRiQ0F0SUc5d2RHbHZibk02SUdOaFltRmpQVEVnY21WbVBUTWdaR1ZpYkc5amF6MHhPakE2TUNCaGJtRnNlWE5sUFRCNE16b3dlREV6SUcxbFBXaGxlQ0J6ZFdKdFpUMDNJSEJ6ZVQweElIQnplVjl5WkQweExqQXdPakF1TURBZ2JXbDRaV1JmY21WbVBURWdiV1ZmY21GdVoyVTlNVFlnWTJoeWIyMWhYMjFsUFRFZ2RISmxiR3hwY3oweElEaDRPR1JqZEQweElHTnhiVDB3SUdSbFlXUjZiMjVsUFRJeExERXhJR1poYzNSZmNITnJhWEE5TVNCamFISnZiV0ZmY1hCZmIyWm1jMlYwUFMweUlIUm9jbVZoWkhNOU1USWdiRzl2YTJGb1pXRmtYM1JvY21WaFpITTlNU0J6YkdsalpXUmZkR2h5WldGa2N6MHdJRzV5UFRBZ1pHVmphVzFoZEdVOU1TQnBiblJsY214aFkyVmtQVEFnWW14MWNtRjVYMk52YlhCaGREMHdJR052Ym5OMGNtRnBibVZrWDJsdWRISmhQVEFnWW1aeVlXMWxjejB6SUdKZmNIbHlZVzFwWkQweUlHSmZZV1JoY0hROU1TQmlYMkpwWVhNOU1DQmthWEpsWTNROU1TQjNaV2xuYUhSaVBURWdiM0JsYmw5bmIzQTlNQ0IzWldsbmFIUndQVElnYTJWNWFXNTBQVEkxTUNCclpYbHBiblJmYldsdVBURWdjMk5sYm1WamRYUTlOREFnYVc1MGNtRmZjbVZtY21WemFEMHdJSEpqWDJ4dmIydGhhR1ZoWkQwME1DQnlZejFoWW5JZ2JXSjBjbVZsUFRFZ1ltbDBjbUYwWlQweE1EQWdjbUYwWlhSdmJEMHhMakFnY1dOdmJYQTlNQzQyTUNCeGNHMXBiajB4TUNCeGNHMWhlRDAxTVNCeGNITjBaWEE5TkNCcGNGOXlZWFJwYnoweExqUXdJR0Z4UFRFNk1TNHdNQUNBQUFBQVUyV0loQUFRLzhsdGxPZStjVFp1R2tLZythUnR1aXZjRFowcEJzZnNFaTlwL2kxeVU5RHhTMmxxNGRYVGluVmlGMVVSQktYZ256S0JkL1VoMWJraEh0TXJ3clJjT0pzbEQwMVVCK2Z5YUw2ZWYrREJBQUFBRkVHYUpHeEJENUIrdithKzRRcUYzTWdCWHo5TUFBQUFDa0dlUW5pSC8rOTRyNkVBQUFBS0FaNWhkRU4vOFF5dHdBQUFBQWdCbm1OcVEzL0VnUUFBQUE1Qm1taEpxRUZvbVV3SUlmLys0UUFBQUFwQm5vWkZFU3cvLzc2QkFBQUFDQUdlcFhSRGY4U0JBQUFBQ0FHZXAycERmOFNBQUFBQURrR2FyRW1vUVd5WlRBZ2gvLzdnQUFBQUNrR2V5a1VWTEQvL3ZvRUFBQUFJQVo3cGRFTi94SUFBQUFBSUFaN3Jha04veElBQUFBQU9RWnJ3U2FoQmJKbE1DQ0gvL3VFQUFBQUtRWjhPUlJVc1AvKytnUUFBQUFnQm55MTBRMy9FZ1FBQUFBZ0JueTlxUTMvRWdBQUFBQTVCbXpSSnFFRnNtVXdJSWYvKzRBQUFBQXBCbjFKRkZTdy8vNzZCQUFBQUNBR2ZjWFJEZjhTQUFBQUFDQUdmYzJwRGY4U0FBQUFBRGtHYmVFbW9RV3laVEFnaC8vN2hBQUFBQ2tHZmxrVVZMRC8vdm9BQUFBQUlBWisxZEVOL3hJRUFBQUFJQVorM2FrTi94SUVBQUFBT1FadThTYWhCYkpsTUNDSC8vdUFBQUFBS1FaL2FSUlVzUC8rK2dRQUFBQWdCbi9sMFEzL0VnQUFBQUFnQm4vdHFRMy9FZ1FBQUFBNUJtK0JKcUVGc21Vd0lJZi8rNFFBQUFBcEJuaDVGRlN3Ly83NkFBQUFBQ0FHZVBYUkRmOFNBQUFBQUNBR2VQMnBEZjhTQkFBQUFEa0dhSkVtb1FXeVpUQWdoLy83Z0FBQUFDa0dlUWtVVkxELy92b0VBQUFBSUFaNWhkRU4veElBQUFBQUlBWjVqYWtOL3hJRUFBQUFPUVpwb1NhaEJiSmxNQ0NILy91RUFBQUFLUVo2R1JSVXNQLysrZ1FBQUFBZ0JucVYwUTMvRWdRQUFBQWdCbnFkcVEzL0VnQUFBQUE1Qm1xeEpxRUZzbVV3SUlmLys0QUFBQUFwQm5zcEZGU3cvLzc2QkFBQUFDQUdlNlhSRGY4U0FBQUFBQ0FHZTYycERmOFNBQUFBQURrR2E4RW1vUVd5WlRBZ2gvLzdoQUFBQUNrR2ZEa1VWTEQvL3ZvRUFBQUFJQVo4dGRFTi94SUVBQUFBSUFaOHZha04veElBQUFBQU9RWnMwU2FoQmJKbE1DQ0gvL3VBQUFBQUtRWjlTUlJVc1AvKytnUUFBQUFnQm4zRjBRMy9FZ0FBQUFBZ0JuM05xUTMvRWdBQUFBQTVCbTNoSnFFRnNtVXdJSWYvKzRRQUFBQXBCbjVaRkZTdy8vNzZBQUFBQUNBR2Z0WFJEZjhTQkFBQUFDQUdmdDJwRGY4U0JBQUFBRGtHYnZFbW9RV3laVEFnaC8vN2dBQUFBQ2tHZjJrVVZMRC8vdm9FQUFBQUlBWi81ZEVOL3hJQUFBQUFJQVovN2FrTi94SUVBQUFBT1FadmdTYWhCYkpsTUNDSC8vdUVBQUFBS1FaNGVSUlVzUC8rK2dBQUFBQWdCbmoxMFEzL0VnQUFBQUFnQm5qOXFRMy9FZ1FBQUFBNUJtaVJKcUVGc21Vd0lJZi8rNEFBQUFBcEJua0pGRlN3Ly83NkJBQUFBQ0FHZVlYUkRmOFNBQUFBQUNBR2VZMnBEZjhTQkFBQUFEa0dhYUVtb1FXeVpUQWdoLy83aEFBQUFDa0dlaGtVVkxELy92b0VBQUFBSUFaNmxkRU4veElFQUFBQUlBWjZuYWtOL3hJQUFBQUFPUVpxc1NhaEJiSmxNQ0NILy91QUFBQUFLUVo3S1JSVXNQLysrZ1FBQUFBZ0JudWwwUTMvRWdBQUFBQWdCbnV0cVEzL0VnQUFBQUE1Qm12QkpxRUZzbVV3SUlmLys0UUFBQUFwQm53NUZGU3cvLzc2QkFBQUFDQUdmTFhSRGY4U0JBQUFBQ0FHZkwycERmOFNBQUFBQURrR2JORW1vUVd5WlRBZ2gvLzdnQUFBQUNrR2ZVa1VWTEQvL3ZvRUFBQUFJQVo5eGRFTi94SUFBQUFBSUFaOXpha04veElBQUFBQU9RWnQ0U2FoQmJKbE1DQ0gvL3VFQUFBQUtRWitXUlJVc1AvKytnQUFBQUFnQm43VjBRMy9FZ1FBQUFBZ0JuN2RxUTMvRWdRQUFBQTVCbTd4SnFFRnNtVXdJSWYvKzRBQUFBQXBCbjlwRkZTdy8vNzZCQUFBQUNBR2YrWFJEZjhTQUFBQUFDQUdmKzJwRGY4U0JBQUFBRGtHYjRFbW9RV3laVEFnaC8vN2hBQUFBQ2tHZUhrVVZMRC8vdm9BQUFBQUlBWjQ5ZEVOL3hJQUFBQUFJQVo0L2FrTi94SUVBQUFBT1Fab2tTYWhCYkpsTUNDSC8vdUFBQUFBS1FaNUNSUlVzUC8rK2dRQUFBQWdCbm1GMFEzL0VnQUFBQUFnQm5tTnFRMy9FZ1FBQUFBNUJtbWhKcUVGc21Vd0lJZi8rNFFBQUFBcEJub1pGRlN3Ly83NkJBQUFBQ0FHZXBYUkRmOFNCQUFBQUNBR2VwMnBEZjhTQUFBQUFEa0dhckVtb1FXeVpUQWdoLy83Z0FBQUFDa0dleWtVVkxELy92b0VBQUFBSUFaN3BkRU4veElBQUFBQUlBWjdyYWtOL3hJQUFBQUFQUVpydVNhaEJiSmxNRkV3My8vN0InKTtcbiAgICAgIHZpZGVvLnBsYXkoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5yZWxlYXNlID0gZnVuY3Rpb24oKSB7XG4gICAgdmlkZW8ucGF1c2UoKTtcbiAgICB2aWRlby5zcmMgPSAnJztcbiAgfTtcbn1cblxuZnVuY3Rpb24gaU9TV2FrZUxvY2soKSB7XG4gIHZhciB0aW1lciA9IG51bGw7XG5cbiAgdGhpcy5yZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aW1lcikge1xuICAgICAgdGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgICAgICBzZXRUaW1lb3V0KHdpbmRvdy5zdG9wLCAwKTtcbiAgICAgIH0sIDMwMDAwKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLnJlbGVhc2UgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGltZXIpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGdldFdha2VMb2NrKCkge1xuICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYTtcbiAgaWYgKHVzZXJBZ2VudC5tYXRjaCgvaVBob25lL2kpIHx8IHVzZXJBZ2VudC5tYXRjaCgvaVBvZC9pKSkge1xuICAgIHJldHVybiBpT1NXYWtlTG9jaztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQW5kcm9pZFdha2VMb2NrO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0V2FrZUxvY2soKTtcbn0se1wiLi91dGlsLmpzXCI6MjJ9XSwyNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgQ2FyZGJvYXJkVlJEaXNwbGF5ID0gX2RlcmVxXygnLi9jYXJkYm9hcmQtdnItZGlzcGxheS5qcycpO1xudmFyIE1vdXNlS2V5Ym9hcmRWUkRpc3BsYXkgPSBfZGVyZXFfKCcuL21vdXNlLWtleWJvYXJkLXZyLWRpc3BsYXkuanMnKTtcbi8vIFVuY29tbWVudCB0byBhZGQgcG9zaXRpb25hbCB0cmFja2luZyB2aWEgd2ViY2FtLlxuLy92YXIgV2ViY2FtUG9zaXRpb25TZW5zb3JWUkRldmljZSA9IHJlcXVpcmUoJy4vd2ViY2FtLXBvc2l0aW9uLXNlbnNvci12ci1kZXZpY2UuanMnKTtcbnZhciBWUkRpc3BsYXkgPSBfZGVyZXFfKCcuL2Jhc2UuanMnKS5WUkRpc3BsYXk7XG52YXIgSE1EVlJEZXZpY2UgPSBfZGVyZXFfKCcuL2Jhc2UuanMnKS5ITURWUkRldmljZTtcbnZhciBQb3NpdGlvblNlbnNvclZSRGV2aWNlID0gX2RlcmVxXygnLi9iYXNlLmpzJykuUG9zaXRpb25TZW5zb3JWUkRldmljZTtcbnZhciBWUkRpc3BsYXlITUREZXZpY2UgPSBfZGVyZXFfKCcuL2Rpc3BsYXktd3JhcHBlcnMuanMnKS5WUkRpc3BsYXlITUREZXZpY2U7XG52YXIgVlJEaXNwbGF5UG9zaXRpb25TZW5zb3JEZXZpY2UgPSBfZGVyZXFfKCcuL2Rpc3BsYXktd3JhcHBlcnMuanMnKS5WUkRpc3BsYXlQb3NpdGlvblNlbnNvckRldmljZTtcblxuZnVuY3Rpb24gV2ViVlJQb2x5ZmlsbCgpIHtcbiAgdGhpcy5kaXNwbGF5cyA9IFtdO1xuICB0aGlzLmRldmljZXMgPSBbXTsgLy8gRm9yIGRlcHJlY2F0ZWQgb2JqZWN0c1xuICB0aGlzLmRldmljZXNQb3B1bGF0ZWQgPSBmYWxzZTtcbiAgdGhpcy5uYXRpdmVXZWJWUkF2YWlsYWJsZSA9IHRoaXMuaXNXZWJWUkF2YWlsYWJsZSgpO1xuICB0aGlzLm5hdGl2ZUxlZ2FjeVdlYlZSQXZhaWxhYmxlID0gdGhpcy5pc0RlcHJlY2F0ZWRXZWJWUkF2YWlsYWJsZSgpO1xuXG4gIGlmICghdGhpcy5uYXRpdmVMZWdhY3lXZWJWUkF2YWlsYWJsZSkge1xuICAgIGlmICghdGhpcy5uYXRpdmVXZWJWUkF2YWlsYWJsZSkge1xuICAgICAgdGhpcy5lbmFibGVQb2x5ZmlsbCgpO1xuICAgIH1cbiAgICBpZiAoV2ViVlJDb25maWcuRU5BQkxFX0RFUFJFQ0FURURfQVBJKSB7XG4gICAgICB0aGlzLmVuYWJsZURlcHJlY2F0ZWRQb2x5ZmlsbCgpO1xuICAgIH1cbiAgfVxufVxuXG5XZWJWUlBvbHlmaWxsLnByb3RvdHlwZS5pc1dlYlZSQXZhaWxhYmxlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAoJ2dldFZSRGlzcGxheXMnIGluIG5hdmlnYXRvcik7XG59O1xuXG5XZWJWUlBvbHlmaWxsLnByb3RvdHlwZS5pc0RlcHJlY2F0ZWRXZWJWUkF2YWlsYWJsZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKCdnZXRWUkRldmljZXMnIGluIG5hdmlnYXRvcikgfHwgKCdtb3pHZXRWUkRldmljZXMnIGluIG5hdmlnYXRvcik7XG59O1xuXG5XZWJWUlBvbHlmaWxsLnByb3RvdHlwZS5wb3B1bGF0ZURldmljZXMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuZGV2aWNlc1BvcHVsYXRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEluaXRpYWxpemUgb3VyIHZpcnR1YWwgVlIgZGV2aWNlcy5cbiAgdmFyIHZyRGlzcGxheSA9IG51bGw7XG5cbiAgLy8gQWRkIGEgQ2FyZGJvYXJkIFZSRGlzcGxheSBvbiBjb21wYXRpYmxlIG1vYmlsZSBkZXZpY2VzXG4gIGlmICh0aGlzLmlzQ2FyZGJvYXJkQ29tcGF0aWJsZSgpKSB7XG4gICAgdnJEaXNwbGF5ID0gbmV3IENhcmRib2FyZFZSRGlzcGxheSgpO1xuICAgIHRoaXMuZGlzcGxheXMucHVzaCh2ckRpc3BsYXkpO1xuXG4gICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgaWYgKFdlYlZSQ29uZmlnLkVOQUJMRV9ERVBSRUNBVEVEX0FQSSkge1xuICAgICAgdGhpcy5kZXZpY2VzLnB1c2gobmV3IFZSRGlzcGxheUhNRERldmljZSh2ckRpc3BsYXkpKTtcbiAgICAgIHRoaXMuZGV2aWNlcy5wdXNoKG5ldyBWUkRpc3BsYXlQb3NpdGlvblNlbnNvckRldmljZSh2ckRpc3BsYXkpKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYSBNb3VzZSBhbmQgS2V5Ym9hcmQgZHJpdmVuIFZSRGlzcGxheSBmb3IgZGVza3RvcHMvbGFwdG9wc1xuICBpZiAoIXRoaXMuaXNNb2JpbGUoKSAmJiAhV2ViVlJDb25maWcuTU9VU0VfS0VZQk9BUkRfQ09OVFJPTFNfRElTQUJMRUQpIHtcbiAgICB2ckRpc3BsYXkgPSBuZXcgTW91c2VLZXlib2FyZFZSRGlzcGxheSgpO1xuICAgIHRoaXMuZGlzcGxheXMucHVzaCh2ckRpc3BsYXkpO1xuXG4gICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgaWYgKFdlYlZSQ29uZmlnLkVOQUJMRV9ERVBSRUNBVEVEX0FQSSkge1xuICAgICAgdGhpcy5kZXZpY2VzLnB1c2gobmV3IFZSRGlzcGxheUhNRERldmljZSh2ckRpc3BsYXkpKTtcbiAgICAgIHRoaXMuZGV2aWNlcy5wdXNoKG5ldyBWUkRpc3BsYXlQb3NpdGlvblNlbnNvckRldmljZSh2ckRpc3BsYXkpKTtcbiAgICB9XG4gIH1cblxuICAvLyBVbmNvbW1lbnQgdG8gYWRkIHBvc2l0aW9uYWwgdHJhY2tpbmcgdmlhIHdlYmNhbS5cbiAgLy9pZiAoIXRoaXMuaXNNb2JpbGUoKSAmJiBXZWJWUkNvbmZpZy5FTkFCTEVfREVQUkVDQVRFRF9BUEkpIHtcbiAgLy8gIHBvc2l0aW9uRGV2aWNlID0gbmV3IFdlYmNhbVBvc2l0aW9uU2Vuc29yVlJEZXZpY2UoKTtcbiAgLy8gIHRoaXMuZGV2aWNlcy5wdXNoKHBvc2l0aW9uRGV2aWNlKTtcbiAgLy99XG5cbiAgdGhpcy5kZXZpY2VzUG9wdWxhdGVkID0gdHJ1ZTtcbn07XG5cbldlYlZSUG9seWZpbGwucHJvdG90eXBlLmVuYWJsZVBvbHlmaWxsID0gZnVuY3Rpb24oKSB7XG4gIC8vIFByb3ZpZGUgbmF2aWdhdG9yLmdldFZSRGlzcGxheXMuXG4gIG5hdmlnYXRvci5nZXRWUkRpc3BsYXlzID0gdGhpcy5nZXRWUkRpc3BsYXlzLmJpbmQodGhpcyk7XG5cbiAgLy8gUHJvdmlkZSB0aGUgVlJEaXNwbGF5IG9iamVjdC5cbiAgd2luZG93LlZSRGlzcGxheSA9IFZSRGlzcGxheTtcbn07XG5cbldlYlZSUG9seWZpbGwucHJvdG90eXBlLmVuYWJsZURlcHJlY2F0ZWRQb2x5ZmlsbCA9IGZ1bmN0aW9uKCkge1xuICAvLyBQcm92aWRlIG5hdmlnYXRvci5nZXRWUkRldmljZXMuXG4gIG5hdmlnYXRvci5nZXRWUkRldmljZXMgPSB0aGlzLmdldFZSRGV2aWNlcy5iaW5kKHRoaXMpO1xuXG4gIC8vIFByb3ZpZGUgdGhlIENhcmRib2FyZEhNRFZSRGV2aWNlIGFuZCBQb3NpdGlvblNlbnNvclZSRGV2aWNlIG9iamVjdHMuXG4gIHdpbmRvdy5ITURWUkRldmljZSA9IEhNRFZSRGV2aWNlO1xuICB3aW5kb3cuUG9zaXRpb25TZW5zb3JWUkRldmljZSA9IFBvc2l0aW9uU2Vuc29yVlJEZXZpY2U7XG59O1xuXG5XZWJWUlBvbHlmaWxsLnByb3RvdHlwZS5nZXRWUkRpc3BsYXlzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucG9wdWxhdGVEZXZpY2VzKCk7XG4gIHZhciBkaXNwbGF5cyA9IHRoaXMuZGlzcGxheXM7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB0cnkge1xuICAgICAgcmVzb2x2ZShkaXNwbGF5cyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmVqZWN0KGUpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5XZWJWUlBvbHlmaWxsLnByb3RvdHlwZS5nZXRWUkRldmljZXMgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS53YXJuKCdnZXRWUkRldmljZXMgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlIGdldFZSRGlzcGxheXMgaW5zdGVhZC4nKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghc2VsZi5kZXZpY2VzUG9wdWxhdGVkKSB7XG4gICAgICAgIGlmIChzZWxmLm5hdGl2ZVdlYlZSQXZhaWxhYmxlKSB7XG4gICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5nZXRWUkRpc3BsYXlzKGZ1bmN0aW9uKGRpc3BsYXlzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BsYXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIHNlbGYuZGV2aWNlcy5wdXNoKG5ldyBWUkRpc3BsYXlITUREZXZpY2UoZGlzcGxheXNbaV0pKTtcbiAgICAgICAgICAgICAgc2VsZi5kZXZpY2VzLnB1c2gobmV3IFZSRGlzcGxheVBvc2l0aW9uU2Vuc29yRGV2aWNlKGRpc3BsYXlzW2ldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmRldmljZXNQb3B1bGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmVzb2x2ZShzZWxmLmRldmljZXMpO1xuICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5uYXRpdmVMZWdhY3lXZWJWUkF2YWlsYWJsZSkge1xuICAgICAgICAgIHJldHVybiAobmF2aWdhdG9yLmdldFZSRERldmljZXMgfHwgbmF2aWdhdG9yLm1vekdldFZSRGV2aWNlcykoZnVuY3Rpb24oZGV2aWNlcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXZpY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGlmIChkZXZpY2VzW2ldIGluc3RhbmNlb2YgSE1EVlJEZXZpY2UpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmRldmljZXMucHVzaChkZXZpY2VzW2ldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZGV2aWNlc1tpXSBpbnN0YW5jZW9mIFBvc2l0aW9uU2Vuc29yVlJEZXZpY2UpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmRldmljZXMucHVzaChkZXZpY2VzW2ldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5kZXZpY2VzUG9wdWxhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlc29sdmUoc2VsZi5kZXZpY2VzKTtcbiAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNlbGYucG9wdWxhdGVEZXZpY2VzKCk7XG4gICAgICByZXNvbHZlKHNlbGYuZGV2aWNlcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmVqZWN0KGUpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIGRldmljZSBpcyBtb2JpbGUuXG4gKi9cbldlYlZSUG9seWZpbGwucHJvdG90eXBlLmlzTW9iaWxlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvQW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHxcbiAgICAgIC9pUGhvbmV8aVBhZHxpUG9kL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbn07XG5cbldlYlZSUG9seWZpbGwucHJvdG90eXBlLmlzQ2FyZGJvYXJkQ29tcGF0aWJsZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBGb3Igbm93LCBzdXBwb3J0IGFsbCBpT1MgYW5kIEFuZHJvaWQgZGV2aWNlcy5cbiAgLy8gQWxzbyBlbmFibGUgdGhlIFdlYlZSQ29uZmlnLkZPUkNFX1ZSIGZsYWcgZm9yIGRlYnVnZ2luZy5cbiAgcmV0dXJuIHRoaXMuaXNNb2JpbGUoKSB8fCBXZWJWUkNvbmZpZy5GT1JDRV9FTkFCTEVfVlI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlZSUG9seWZpbGw7XG5cbn0se1wiLi9iYXNlLmpzXCI6MixcIi4vY2FyZGJvYXJkLXZyLWRpc3BsYXkuanNcIjo1LFwiLi9kaXNwbGF5LXdyYXBwZXJzLmpzXCI6OCxcIi4vbW91c2Uta2V5Ym9hcmQtdnItZGlzcGxheS5qc1wiOjE1fV19LHt9LFsxM10pO1xuIiwidmFyIEVtaXR0ZXIgPSByZXF1aXJlKCcuL2VtaXR0ZXInKTtcbnZhciBzaGFrYSA9IHJlcXVpcmUoJ3NoYWthLXBsYXllcicpO1xuXG52YXIgVHlwZXMgPSB7XG4gIEhMUzogMSxcbiAgREFTSDogMixcbiAgVklERU86IDNcbn1cblxuLyoqXG4gKiBTdXBwb3J0cyByZWd1bGFyIHZpZGVvIFVSTHMgKGVnLiBtcDQpLCBhcyB3ZWxsIGFzIGFkYXB0aXZlIG1hbmlmZXN0cyBsaWtlXG4gKiBEQVNIICgubXBkKSBhbmQgc29vbiBITFMgKC5tM3U4KS5cbiAqXG4gKiBFdmVudHM6IFxuICogICBsb2FkKHZpZGVvKTogV2hlbiB0aGUgdmlkZW8gaXMgbG9hZGVkLlxuICogICBlcnJvcihtZXNzYWdlKTogSWYgYW4gZXJyb3Igb2NjdXJzLlxuICpcbiAqIFRvIHBsYXkvcGF1c2Uvc2Vlay9ldGMsIHBsZWFzZSB1c2UgdGhlIHVuZGVybHlpbmcgdmlkZW8gZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gQWRhcHRpdmVQbGF5ZXIoKSB7XG4gIC8vIEluc3RhbGwgYnVpbHQtaW4gcG9seWZpbGxzIHRvIHBhdGNoIGJyb3dzZXIgaW5jb21wYXRpYmlsaXRpZXMuXG4gIHNoYWthLnBvbHlmaWxsLmluc3RhbGxBbGwoKTtcblxuICB0aGlzLmluaXRQbGF5ZXJfKCk7XG59XG5BZGFwdGl2ZVBsYXllci5wcm90b3R5cGUgPSBuZXcgRW1pdHRlcigpO1xuXG5BZGFwdGl2ZVBsYXllci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKHVybCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8vIFRPRE8oc211cyk6IEludmVzdGlnYXRlIHdoZXRoZXIgb3Igbm90IGRpZmZlcmVudGlhdGlvbiBpcyBiZXN0IGRvbmUgYnlcbiAgLy8gbWltZVR5cGUgYWZ0ZXIgYWxsLiBDdXJzb3J5IHJlc2VhcmNoIHN1Z2dlc3RzIHRoYXQgYWRhcHRpdmUgc3RyZWFtaW5nXG4gIC8vIG1hbmlmZXN0IG1pbWUgdHlwZXMgYXJlbid0IHByb3Blcmx5IHN1cHBvcnRlZC5cbiAgLy9cbiAgLy8gRm9yIG5vdywgbWFrZSBkZXRlcm1pbmF0aW9uIGJhc2VkIG9uIGV4dGVuc2lvbi5cbiAgdmFyIGV4dGVuc2lvbiA9IFV0aWwuZ2V0RXh0ZW5zaW9uKHVybCk7XG4gIHN3aXRjaCAoZXh0ZW5zaW9uKSB7XG4gICAgY2FzZSAnbTN1OCc6IC8vIEhMU1xuICAgICAgdGhpcy50eXBlID0gVHlwZXMuSExTO1xuICAgICAgY29uc29sZS5lcnJvcignSExTIGlzIG5vdCB5ZXQgc3VwcG9ydGVkLicpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbXBkJzogLy8gTVBFRy1EQVNIXG4gICAgICB0aGlzLnR5cGUgPSBUeXBlcy5EQVNIO1xuICAgICAgdGhpcy5wbGF5ZXIubG9hZCh1cmwpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdUaGUgdmlkZW8gaGFzIG5vdyBiZWVuIGxvYWRlZCEnKTtcbiAgICAgICAgc2VsZi5lbWl0KCdsb2FkJywgc2VsZi52aWRlbyk7XG4gICAgICB9KS5jYXRjaCh0aGlzLm9uRXJyb3JfLmJpbmQodGhpcykpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDogLy8gQSByZWd1bGFyIHZpZGVvLCBub3QgYW4gYWRhcHRpdmUgbWFuaWZlc3QuXG4gICAgICB0aGlzLnR5cGUgPSBUeXBlcy5WSURFTztcbiAgICAgIHRoaXMubG9hZFZpZGVvXyh1cmwpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuZW1pdCgnbG9hZCcsIHNlbGYudmlkZW8pO1xuICAgICAgfSkuY2F0Y2godGhpcy5vbkVycm9yXy5iaW5kKHRoaXMpKTtcbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG5cbi8qKiogUFJJVkFURSBBUEkgKioqL1xuXG5BZGFwdGl2ZVBsYXllci5wcm90b3R5cGUuaW5pdFBsYXllcl8gPSBmdW5jdGlvbigpIHtcbiAgLy8gQ3JlYXRlIGEgUGxheWVyIGluc3RhbmNlLlxuICB2YXIgdmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICB2YXIgcGxheWVyID0gbmV3IHNoYWthLlBsYXllcih2aWRlbyk7XG5cbiAgLy8gTGlzdGVuIGZvciBlcnJvciBldmVudHMuXG4gIHBsYXllci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMub25FcnJvcl8pO1xuXG4gIC8vIFNhdmUgcGxheWVyLlxuICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgdGhpcy52aWRlbyA9IHZpZGVvO1xufVxuXG5BZGFwdGl2ZVBsYXllci5wcm90b3R5cGUub25FcnJvcl8gPSBmdW5jdGlvbihlKSB7XG4gIGNvbnNvbGUuZXJyb3IoZSk7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlKTtcbn07XG5cbkFkYXB0aXZlUGxheWVyLnByb3RvdHlwZS5sb2FkVmlkZW9fID0gZnVuY3Rpb24odXJsKSB7XG4gIHZhciB2aWRlbyA9IHRoaXMudmlkZW87XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2aWRlby5sb29wID0gdHJ1ZTtcbiAgICB2aWRlby5zcmMgPSB1cmw7XG4gICAgLy8gRW5hYmxlIGlubGluZSB2aWRlbyBwbGF5YmFjayBpbiBpT1MgMTArLlxuICAgIHZpZGVvLnNldEF0dHJpYnV0ZSgnd2Via2l0LXBsYXlzaW5saW5lJywgdHJ1ZSk7XG4gICAgdmlkZW8uc2V0QXR0cmlidXRlKCdjcm9zc29yaWdpbicsICdhbm9ueW1vdXMnKTtcbiAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdjYW5wbGF5dGhyb3VnaCcsIHJlc29sdmUpO1xuICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgcmVqZWN0KTtcbiAgICB2aWRlby5sb2FkKCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBZGFwdGl2ZVBsYXllcjtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuLyoqXG4gKiBTaXRzIGluIGFuIGVtYmVkZGVkIGlmcmFtZSwgcmVjZWl2aW5nIERldmljZU1vdGlvbiBtZXNzYWdlcyBmcm9tIGEgY29udGFpbmluZ1xuICogaUZyYW1lLiBUaGVzZSBtZXNzYWdlcyBhcmUgY29udmVydGVkIGludG8gc3ludGhldGljIERldmljZU1vdGlvbiBldmVudHMuXG4gKlxuICogVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTAwNzIuXG4gKi9cbmZ1bmN0aW9uIERldmljZU1vdGlvblJlY2VpdmVyKCkge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMub25NZXNzYWdlXy5iaW5kKHRoaXMpLCBmYWxzZSk7XG59XG5cbkRldmljZU1vdGlvblJlY2VpdmVyLnByb3RvdHlwZS5vbk1lc3NhZ2VfID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgdmFyIG1lc3NhZ2UgPSBldmVudC5kYXRhO1xuICBpZiAobWVzc2FnZS50eXBlICE9PSAnRGV2aWNlTW90aW9uJykge1xuICAgIGNvbnNvbGUud2FybignR290IHVua25vd24gbWVzc2FnZSBvZiB0eXBlICVzIGZyb20gJXMnLCBtZXNzYWdlLnR5cGUsIG1lc3NhZ2Uub3JpZ2luKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zb2xlLmxvZygnb25NZXNzYWdlXycsIGV2ZW50KTtcblxuICAvLyBTeW50aGVzaXplIGEgRGV2aWNlTW90aW9uIGV2ZW50LlxuICB0aGlzLnN5bnRoZXNpemVEZXZpY2VNb3Rpb25FdmVudF8obWVzc2FnZS5kZXZpY2VNb3Rpb25FdmVudCk7XG59O1xuXG5EZXZpY2VNb3Rpb25SZWNlaXZlci5wcm90b3R5cGUuc3ludGhlc2l6ZURldmljZU1vdGlvbkV2ZW50XyA9IGZ1bmN0aW9uKGV2ZW50RGF0YSkge1xuICB2YXIgdHlwZSA9ICdkZXZpY2Vtb3Rpb24taWZyYW1lJztcbiAgdmFyIGNhbkJ1YmJsZSA9IGZhbHNlO1xuICB2YXIgY2FuY2VsYWJsZSA9IGZhbHNlO1xuXG4gIHZhciBkbWUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRGV2aWNlTW90aW9uRXZlbnQnKTtcbiAgZG1lLmluaXREZXZpY2VNb3Rpb25FdmVudCh0eXBlLCBjYW5CdWJibGUsIGNhbmNlbGFibGUsXG4gICAgICBldmVudERhdGEuYWNjZWxlcmF0aW9uLFxuICAgICAgZXZlbnREYXRhLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHksXG4gICAgICBldmVudERhdGEucm90YXRpb25SYXRlLFxuICAgICAgZXZlbnREYXRhLmludGVydmFsKTtcblxuICB3aW5kb3cuZGlzcGF0Y2hFdmVudChkbWUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZXZpY2VNb3Rpb25SZWNlaXZlcjtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuZnVuY3Rpb24gRW1pdHRlcigpIHtcbiAgdGhpcy5pbml0RW1pdHRlcigpO1xufVxuXG5FbWl0dGVyLnByb3RvdHlwZS5pbml0RW1pdHRlciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNhbGxiYWNrcyA9IHt9O1xufTtcblxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5jYWxsYmFja3NbZXZlbnROYW1lXTtcbiAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICBjb25zb2xlLmxvZygnTm8gdmFsaWQgY2FsbGJhY2sgc3BlY2lmaWVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICAvLyBFbGltaW5hdGUgdGhlIGZpcnN0IHBhcmFtICh0aGUgY2FsbGJhY2spLlxuICBhcmdzLnNoaWZ0KCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG59O1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgaWYgKGV2ZW50TmFtZSBpbiB0aGlzLmNhbGxiYWNrcykge1xuICAgIHZhciBjYnMgPSB0aGlzLmNhbGxiYWNrc1tldmVudE5hbWVdXG4gICAgaWYgKGNicy5pbmRleE9mKGNhbGxiYWNrKSA9PSAtMSkge1xuICAgICAgY2JzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmNhbGxiYWNrc1tldmVudE5hbWVdID0gW2NhbGxiYWNrXTtcbiAgfVxufTtcblxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gIGlmICghKGV2ZW50TmFtZSBpbiB0aGlzLmNhbGxiYWNrcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGNicyA9IHRoaXMuY2FsbGJhY2tzW2V2ZW50TmFtZV07XG4gIHZhciBpbmQgPSBjYnMuaW5kZXhPZihjYWxsYmFjayk7XG4gIGlmIChpbmQgPT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ05vIG1hdGNoaW5nIGNhbGxiYWNrIGZvdW5kJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNicy5zcGxpY2UoaW5kLCAxKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgRXllcyA9IHtcbiAgTEVGVDogMSxcbiAgUklHSFQ6IDJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXllcztcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogU2hvd3MgYSAyRCBsb2FkaW5nIGluZGljYXRvciB3aGlsZSB2YXJpb3VzIHBpZWNlcyBvZiBFbWJlZFZSIGxvYWQuXG4gKi9cbmZ1bmN0aW9uIExvYWRpbmdJbmRpY2F0b3IoKSB7XG4gIHRoaXMuZWwgPSB0aGlzLmJ1aWxkXygpO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICB0aGlzLnNob3coKTtcbn1cblxuTG9hZGluZ0luZGljYXRvci5wcm90b3R5cGUuYnVpbGRfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHZhciBzID0gb3ZlcmxheS5zdHlsZTtcbiAgcy5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIHMudG9wID0gMDtcbiAgcy5sZWZ0ID0gMDtcbiAgcy53aWR0aCA9ICcxMDAlJztcbiAgcy5oZWlnaHQgPSAnMTAwJSc7XG4gIHMuYmFja2dyb3VuZCA9ICcjZWVlJztcbiAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICBpbWcuc3JjID0gJ2ltYWdlcy9sb2FkaW5nLmdpZic7XG4gIHZhciBzID0gaW1nLnN0eWxlO1xuICBzLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgcy50b3AgPSAnNTAlJztcbiAgcy5sZWZ0ID0gJzUwJSc7XG4gIHMudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKSc7XG5cbiAgb3ZlcmxheS5hcHBlbmRDaGlsZChpbWcpO1xuICByZXR1cm4gb3ZlcmxheTtcbn07XG5cbkxvYWRpbmdJbmRpY2F0b3IucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufTtcblxuTG9hZGluZ0luZGljYXRvci5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMb2FkaW5nSW5kaWNhdG9yO1xuIiwiLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gSW5pdGlhbGl6ZSB0aGUgbG9hZGluZyBpbmRpY2F0b3IgYXMgcXVpY2tseSBhcyBwb3NzaWJsZSB0byBnaXZlIHRoZSB1c2VyXG4vLyBpbW1lZGlhdGUgZmVlZGJhY2suXG52YXIgTG9hZGluZ0luZGljYXRvciA9IHJlcXVpcmUoJy4vbG9hZGluZy1pbmRpY2F0b3InKTtcbnZhciBsb2FkSW5kaWNhdG9yID0gbmV3IExvYWRpbmdJbmRpY2F0b3IoKTtcblxudmFyIEVTNlByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpO1xuLy8gUG9seWZpbGwgRVM2IHByb21pc2VzIGZvciBJRS5cbkVTNlByb21pc2UucG9seWZpbGwoKTtcblxudmFyIEFkYXB0aXZlUGxheWVyID0gcmVxdWlyZSgnLi9hZGFwdGl2ZS1wbGF5ZXInKTtcbnZhciBQaG90b3NwaGVyZVJlbmRlcmVyID0gcmVxdWlyZSgnLi9waG90b3NwaGVyZS1yZW5kZXJlcicpO1xudmFyIFNjZW5lTG9hZGVyID0gcmVxdWlyZSgnLi9zY2VuZS1sb2FkZXInKTtcbnZhciBTdGF0cyA9IHJlcXVpcmUoJy4uL25vZGVfbW9kdWxlcy9zdGF0cy1qcy9idWlsZC9zdGF0cy5taW4nKTtcbnZhciBVdGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgVmlkZW9Qcm94eSA9IHJlcXVpcmUoJy4vdmlkZW8tcHJveHknKTtcbnZhciBXZWJWUlBvbHlmaWxsID0gcmVxdWlyZSgnd2VidnItcG9seWZpbGwnKTtcblxuLy8gSW5jbHVkZSB0aGUgRGV2aWNlTW90aW9uUmVjZWl2ZXIgZm9yIHRoZSBpT1MgY3Jvc3MgZG9tYWluIGlmcmFtZSB3b3JrYXJvdW5kLlxuLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTAwNzIuXG52YXIgRGV2aWNlTW90aW9uUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2RldmljZS1tb3Rpb24tcmVjZWl2ZXInKTtcbnZhciBkbXIgPSBuZXcgRGV2aWNlTW90aW9uUmVjZWl2ZXIoKTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBpbml0KTtcblxudmFyIHN0YXRzID0gbmV3IFN0YXRzKCk7XG5cbnZhciBsb2FkZXIgPSBuZXcgU2NlbmVMb2FkZXIoKTtcbmxvYWRlci5vbignZXJyb3InLCBvblNjZW5lRXJyb3IpO1xubG9hZGVyLm9uKCdsb2FkJywgb25TY2VuZUxvYWQpO1xuXG52YXIgcmVuZGVyZXIgPSBuZXcgUGhvdG9zcGhlcmVSZW5kZXJlcigpO1xucmVuZGVyZXIub24oJ2Vycm9yJywgb25SZW5kZXJFcnJvcik7XG5cbnZhciB2aWRlb1Byb3h5ID0gbnVsbDtcbi8vIFRPRE86IE1ha2UgdGhpcyBub3QgZ2xvYmFsLlxuLy8gQ3VycmVudGx5IGdsb2JhbCBpbiBvcmRlciB0byBhbGxvdyBjYWxsYmFja3MuXG52YXIgbG9hZGVkU2NlbmUgPSBudWxsO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICBpZiAoIVV0aWwuaXNXZWJHTEVuYWJsZWQoKSkge1xuICAgIHNob3dFcnJvcignV2ViR0wgbm90IHN1cHBvcnRlZC4nKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gTG9hZCB0aGUgc2NlbmUuXG4gIGxvYWRlci5sb2FkU2NlbmUoKTtcblxuICBpZiAoVXRpbC5nZXRRdWVyeVBhcmFtZXRlcignZGVidWcnKSkge1xuICAgIHNob3dTdGF0cygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvYWRJbWFnZShzcmMsIHBhcmFtcykge1xuICByZW5kZXJlci5vbignbG9hZCcsIG9uUmVuZGVyTG9hZCk7XG4gIHJlbmRlcmVyLnNldFBob3Rvc3BoZXJlKHNyYywgcGFyYW1zKTtcbn1cblxuZnVuY3Rpb24gb25TY2VuZUxvYWQoc2NlbmUpIHtcbiAgaWYgKCFzY2VuZSB8fCAhc2NlbmUuaXNDb21wbGV0ZSgpKSB7XG4gICAgc2hvd0Vycm9yKCdTY2VuZSBmYWlsZWQgdG8gbG9hZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvYWRlZFNjZW5lID0gc2NlbmU7XG5cbiAgdmFyIHBhcmFtcyA9IHtcbiAgICBpc1N0ZXJlbzogc2NlbmUuaXNTdGVyZW8sXG4gIH1cbiAgcmVuZGVyZXIuc2V0RGVmYXVsdExvb2tEaXJlY3Rpb24oc2NlbmUueWF3IHx8IDApO1xuXG4gIGlmIChzY2VuZS5wcmV2aWV3KSB7XG4gICAgdmFyIG9uUHJldmlld0xvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGxvYWRJbmRpY2F0b3IuaGlkZSgpO1xuICAgICAgcmVuZGVyZXIucmVtb3ZlTGlzdGVuZXIoJ2xvYWQnLCBvblByZXZpZXdMb2FkKTtcbiAgICAgIHJlbmRlcmVyLnNldFBob3Rvc3BoZXJlKHNjZW5lLmltYWdlLCBwYXJhbXMpO1xuICAgIH1cbiAgICByZW5kZXJlci5yZW1vdmVMaXN0ZW5lcignbG9hZCcsIG9uUmVuZGVyTG9hZCk7XG4gICAgcmVuZGVyZXIub24oJ2xvYWQnLCBvblByZXZpZXdMb2FkKTtcbiAgICByZW5kZXJlci5zZXRQaG90b3NwaGVyZShzY2VuZS5wcmV2aWV3LCBwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHNjZW5lLnZpZGVvKSB7XG4gICAgaWYgKFV0aWwuaXNJRTExKCkpIHtcbiAgICAgIC8vIE9uIGlPUyBhbmQgSUUgMTEsIGlmIGFuICdpbWFnZScgcGFyYW0gaXMgcHJvdmlkZWQsIGxvYWQgaXQgaW5zdGVhZCBvZlxuICAgICAgLy8gc2hvd2luZyBhbiBlcnJvci5cbiAgICAgIC8vXG4gICAgICAvLyBUT0RPKHNtdXMpOiBPbmNlIHZpZGVvIHRleHR1cmVzIGFyZSBzdXBwb3J0ZWQsIHJlbW92ZSB0aGlzIGZhbGxiYWNrLlxuICAgICAgaWYgKHNjZW5lLmltYWdlKSB7XG4gICAgICAgIGxvYWRJbWFnZShzY2VuZS5pbWFnZSwgcGFyYW1zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNob3dFcnJvcignVmlkZW8gaXMgbm90IHN1cHBvcnRlZCBvbiBJRTExLicpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGxheWVyID0gbmV3IEFkYXB0aXZlUGxheWVyKCk7XG4gICAgICBwbGF5ZXIub24oJ2xvYWQnLCBvblZpZGVvTG9hZCk7XG4gICAgICBwbGF5ZXIub24oJ2Vycm9yJywgb25WaWRlb0xvYWQpO1xuICAgICAgcGxheWVyLmxvYWQoc2NlbmUudmlkZW8pO1xuXG4gICAgICB2aWRlb1Byb3h5ID0gbmV3IFZpZGVvUHJveHkocGxheWVyLnZpZGVvKTtcbiAgICAgIC8vIERlYnVnIG9ubHkuXG4gICAgICB3aW5kb3cudmlkZW9Qcm94eSA9IHZpZGVvUHJveHk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHNjZW5lLmltYWdlKSB7XG4gICAgLy8gT3RoZXJ3aXNlLCBqdXN0IHJlbmRlciB0aGUgcGhvdG9zcGhlcmUuXG4gICAgbG9hZEltYWdlKHNjZW5lLmltYWdlLCBwYXJhbXMpO1xuICB9XG5cbiAgY29uc29sZS5sb2coJ0xvYWRlZCBzY2VuZScsIHNjZW5lKTtcbn1cblxuZnVuY3Rpb24gb25WaWRlb0xvYWQodmlkZW8pIHtcbiAgY29uc29sZS5sb2coJ29uVmlkZW9Mb2FkJyk7XG4gIC8vIFJlbmRlciB0aGUgc3RlcmVvIHZpZGVvLlxuICB2YXIgcGFyYW1zID0ge1xuICAgIGlzU3RlcmVvOiBsb2FkZWRTY2VuZS5pc1N0ZXJlbyxcbiAgfVxuICBsb2FkSW5kaWNhdG9yLmhpZGUoKTtcblxuICByZW5kZXJlci5zZXQzNjBWaWRlbyh2aWRlbywgcGFyYW1zKTtcblxuICAvLyBPbiBtb2JpbGUsIHRlbGwgdGhlIHVzZXIgdGhleSBuZWVkIHRvIHRhcCB0byBzdGFydC4gT3RoZXJ3aXNlLCBhdXRvcGxheS5cbiAgaWYgKFV0aWwuaXNNb2JpbGUoKSkge1xuICAgIC8vIFRlbGwgdXNlciB0byB0YXAgdG8gc3RhcnQuXG4gICAgc2hvd1BsYXlCdXR0b24oKTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25WaWRlb1RhcCk7XG4gIH0gZWxzZSB7XG4gICAgdmlkZW8ucGxheSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uVmlkZW9UYXAoKSB7XG4gIHZpZGVvUHJveHkucGxheSgpO1xuICBoaWRlUGxheUJ1dHRvbigpO1xuXG4gIC8vIFByZXZlbnQgbXVsdGlwbGUgcGxheSgpIGNhbGxzIG9uIHRoZSB2aWRlbyBlbGVtZW50LlxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25WaWRlb1RhcCk7XG59XG5cbmZ1bmN0aW9uIG9uUmVuZGVyTG9hZCgpIHtcbiAgLy8gSGlkZSBsb2FkaW5nIGluZGljYXRvci5cbiAgbG9hZEluZGljYXRvci5oaWRlKCk7XG59XG5cbmZ1bmN0aW9uIG9uU2NlbmVFcnJvcihtZXNzYWdlKSB7XG4gIHNob3dFcnJvcignTG9hZGVyOiAnICsgbWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVuZGVyRXJyb3IobWVzc2FnZSkge1xuICBzaG93RXJyb3IoJ1JlbmRlcjogJyArIG1lc3NhZ2UpO1xufVxuXG5mdW5jdGlvbiBvblZpZGVvRXJyb3IoZSkge1xuICBzaG93RXJyb3IoJ1ZpZGVvIGxvYWQgZXJyb3InKTtcbiAgY29uc29sZS5sb2coZSk7XG59XG5cbmZ1bmN0aW9uIHNob3dFcnJvcihtZXNzYWdlLCBvcHRfdGl0bGUpIHtcbiAgLy8gSGlkZSBsb2FkaW5nIGluZGljYXRvci5cbiAgbG9hZEluZGljYXRvci5oaWRlKCk7XG5cbiAgdmFyIGVycm9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Vycm9yJyk7XG4gIGVycm9yLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcbiAgZXJyb3IucXVlcnlTZWxlY3RvcignLm1lc3NhZ2UnKS5pbm5lckhUTUwgPSBtZXNzYWdlO1xuXG4gIHZhciB0aXRsZSA9IChvcHRfdGl0bGUgIT09IHVuZGVmaW5lZCA/IG9wdF90aXRsZSA6ICdFcnJvcicpO1xuICBlcnJvci5xdWVyeVNlbGVjdG9yKCcudGl0bGUnKS5pbm5lckhUTUwgPSB0aXRsZTtcbn1cblxuZnVuY3Rpb24gaGlkZUVycm9yKCkge1xuICB2YXIgZXJyb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZXJyb3InKTtcbiAgZXJyb3IuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xufVxuXG5mdW5jdGlvbiBzaG93UGxheUJ1dHRvbigpIHtcbiAgdmFyIHBsYXlCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGxheS1vdmVybGF5Jyk7XG4gIHBsYXlCdXR0b24uY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xufVxuXG5mdW5jdGlvbiBoaWRlUGxheUJ1dHRvbigpIHtcbiAgdmFyIHBsYXlCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGxheS1vdmVybGF5Jyk7XG4gIHBsYXlCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xufVxuXG5mdW5jdGlvbiBzaG93U3RhdHMoKSB7XG4gIHN0YXRzLnNldE1vZGUoMCk7IC8vIDA6IGZwcywgMTogbXNcblxuICAvLyBBbGlnbiBib3R0b20tbGVmdC5cbiAgc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHN0YXRzLmRvbUVsZW1lbnQuc3R5bGUubGVmdCA9ICcwcHgnO1xuICBzdGF0cy5kb21FbGVtZW50LnN0eWxlLmJvdHRvbSA9ICcwcHgnO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN0YXRzLmRvbUVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBsb29wKHRpbWUpIHtcbiAgc3RhdHMuYmVnaW4oKTtcbiAgLy8gVXBkYXRlIHRoZSB2aWRlbyBpZiBuZWVkZWQuXG4gIGlmICh2aWRlb1Byb3h5KSB7XG4gICAgdmlkZW9Qcm94eS51cGRhdGUodGltZSk7XG4gIH1cbiAgcmVuZGVyZXIucmVuZGVyKHRpbWUpO1xuICBzdGF0cy5lbmQoKTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xufVxucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuIiwiLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCcuL2VtaXR0ZXInKTtcbnZhciBFeWVzID0gcmVxdWlyZSgnLi9leWVzJyk7XG52YXIgVXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIFZlcnRleERpc3RvcnRlciA9IHJlcXVpcmUoJy4vdmVydGV4LWRpc3RvcnRlcicpO1xudmFyIFdlYlZSTWFuYWdlciA9IHJlcXVpcmUoJ3dlYnZyLWJvaWxlcnBsYXRlJyk7XG5cbmZ1bmN0aW9uIFBob3Rvc3BoZXJlUmVuZGVyZXIoKSB7XG4gIHRoaXMuaW5pdCgpO1xufVxuUGhvdG9zcGhlcmVSZW5kZXJlci5wcm90b3R5cGUgPSBuZXcgRW1pdHRlcigpO1xuXG5QaG90b3NwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gIHZhciBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNzUsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAwLjEsIDEwMCk7XG4gIGNhbWVyYS5sYXllcnMuZW5hYmxlKDEpO1xuXG4gIHZhciBjYW1lcmFEdW1teSA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICBjYW1lcmFEdW1teS5hZGQoY2FtZXJhKTtcblxuICAvLyBBbnRpYWxpYXNpbmcgdGVtcG9yYXJpbHkgZGlzYWJsZWQgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS5cbiAgdmFyIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe2FudGlhbGlhczogZmFsc2V9KTtcbiAgcmVuZGVyZXIuc2V0Q2xlYXJDb2xvcigweDAwMDAwMCwgMCk7XG4gIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcblxuICB2YXIgY29udHJvbHMgPSBuZXcgVEhSRUUuVlJDb250cm9scyhjYW1lcmEpO1xuICB2YXIgZWZmZWN0ID0gbmV3IFRIUkVFLlZSRWZmZWN0KHJlbmRlcmVyKTtcbiAgLy8gRGlzYWJsZSBleWUgc2VwYXJhdGlvbi5cbiAgZWZmZWN0LnNjYWxlID0gMDtcbiAgZWZmZWN0LnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG5cbiAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XG4gIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgdGhpcy5lZmZlY3QgPSBlZmZlY3Q7XG4gIHRoaXMuY29udHJvbHMgPSBjb250cm9scztcbiAgdGhpcy5tYW5hZ2VyID0gbmV3IFdlYlZSTWFuYWdlcihyZW5kZXJlciwgZWZmZWN0LCB7cHJlZGlzdG9ydGVkOiB0cnVlfSk7XG5cbiAgdGhpcy5pbml0U2NlbmVzXygpO1xuXG4gIC8vIFRoZSB2ZXJ0ZXggZGlzdG9ydGVyLlxuICB0aGlzLmRpc3RvcnRlciA9IG5ldyBWZXJ0ZXhEaXN0b3J0ZXIoKTtcblxuICAvLyBXYXRjaCB0aGUgcmVzaXplIGV2ZW50LlxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZV8uYmluZCh0aGlzKSk7XG5cbiAgLy8gV2F0Y2ggdGhlIGN1c3RvbSB2cmRpc3BsYXlkZXZpY2VwYXJhbXNjaGFuZ2UgZXZlbnQsIHdoaWNoIGZpcmVzIHdoZW5ldmVyXG4gIC8vIHRoZSB2aWV3ZXIgcGFyYW1ldGVycyBjaGFuZ2UuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd2cmRpc3BsYXlkZXZpY2VwYXJhbXNjaGFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uVlJEaXNwbGF5UGFyYW1zQ2hhbmdlXy5iaW5kKHRoaXMpKTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndnJkaXNwbGF5cHJlc2VudGNoYW5nZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlXy5iaW5kKHRoaXMpKTtcbn07XG5cblBob3Rvc3BoZXJlUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKHRpbWVzdGFtcCkge1xuICB0aGlzLmNvbnRyb2xzLnVwZGF0ZSgpO1xuICB0aGlzLmVmZmVjdC5yZW5kZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEpO1xufTtcblxuUGhvdG9zcGhlcmVSZW5kZXJlci5wcm90b3R5cGUuc2V0RGVmYXVsdExvb2tEaXJlY3Rpb24gPSBmdW5jdGlvbih5YXcpIHtcbiAgLy8gUm90YXRlIHRoZSBjYW1lcmEgcGFyZW50IHRvIHRha2UgaW50byBhY2NvdW50IHRoZSBzY2VuZSdzIHJvdGF0aW9uLlxuICAvLyBCeSBkZWZhdWx0LCBpdCBzaG91bGQgYmUgYXQgdGhlIGNlbnRlciBvZiB0aGUgaW1hZ2UuXG4gIHRoaXMuY2FtZXJhLnBhcmVudC5yb3RhdGlvbi55ID0gKE1hdGguUEkgLyAyLjApICsgeWF3O1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBwaG90b3NwaGVyZSBiYXNlZCBvbiB0aGUgaW1hZ2UgaW4gdGhlIHNvdXJjZS4gU3VwcG9ydHMgc3RlcmVvIGFuZFxuICogbW9ubyBwaG90b3NwaGVyZXMuXG4gKlxuICogRW1pdHMgJ2xvYWQnIGFuZCAnZXJyb3InIGV2ZW50cy5cbiAqL1xuUGhvdG9zcGhlcmVSZW5kZXJlci5wcm90b3R5cGUuc2V0UGhvdG9zcGhlcmUgPSBmdW5jdGlvbihzcmMsIG9wdF9wYXJhbXMpIHtcbiAgdmFyIHBhcmFtcyA9IG9wdF9wYXJhbXMgfHwge307XG5cbiAgdGhpcy5pc1N0ZXJlbyA9ICEhcGFyYW1zLmlzU3RlcmVvO1xuICB0aGlzLnNyYyA9IHNyYztcblxuICAvLyBMb2FkIHRleHR1cmUuXG4gIHZhciBsb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpO1xuICBsb2FkZXIuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcbiAgbG9hZGVyLmxvYWQoc3JjLCB0aGlzLm9uVGV4dHVyZUxvYWRlZF8uYmluZCh0aGlzKSwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICB0aGlzLm9uVGV4dHVyZUVycm9yXy5iaW5kKHRoaXMpKTtcbn07XG5cblBob3Rvc3BoZXJlUmVuZGVyZXIucHJvdG90eXBlLnNldDM2MFZpZGVvID0gZnVuY3Rpb24odmlkZW9FbGVtZW50LCBvcHRfcGFyYW1zKSB7XG4gIC8vIERpc2FibGUgdmlkZW8gVlIgbW9kZSBpbiBpT1M5IGFuZCBiZWxvdy5cbiAgaWYgKFV0aWwuaXNJT1M5T3JMZXNzKCkpIHtcbiAgICB0aGlzLm1hbmFnZXIuc2V0VlJDb21wYXRpYmxlT3ZlcnJpZGUoZmFsc2UpO1xuICB9XG5cbiAgdmFyIHBhcmFtcyA9IG9wdF9wYXJhbXMgfHwge307XG5cbiAgdGhpcy5pc1N0ZXJlbyA9ICEhcGFyYW1zLmlzU3RlcmVvO1xuXG4gIC8vIExvYWQgdGhlIHZpZGVvIHRleHR1cmUuXG4gIHZhciB2aWRlb1RleHR1cmUgPSBuZXcgVEhSRUUuVmlkZW9UZXh0dXJlKHZpZGVvRWxlbWVudCk7XG4gIHZpZGVvVGV4dHVyZS5taW5GaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuICB2aWRlb1RleHR1cmUubWFnRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcbiAgdmlkZW9UZXh0dXJlLmZvcm1hdCA9IFRIUkVFLlJHQkZvcm1hdDtcbiAgdmlkZW9UZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuICB2aWRlb1RleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG4gIHRoaXMub25UZXh0dXJlTG9hZGVkXyh2aWRlb1RleHR1cmUpO1xufTtcblxuUGhvdG9zcGhlcmVSZW5kZXJlci5wcm90b3R5cGUuaW5pdFNjZW5lc18gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zY2VuZSA9IHRoaXMuY3JlYXRlU2NlbmVfKCk7XG4gIHRoaXMuc2NlbmUuYWRkKHRoaXMuY2FtZXJhLnBhcmVudCk7XG59O1xuXG5QaG90b3NwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS5vblRleHR1cmVMb2FkZWRfID0gZnVuY3Rpb24odGV4dHVyZSkge1xuICB2YXIgc3BoZXJlTGVmdDtcbiAgdmFyIHNwaGVyZVJpZ2h0O1xuICBpZiAodGhpcy5pc1N0ZXJlbykge1xuICAgIHNwaGVyZUxlZnQgPSB0aGlzLmNyZWF0ZVBob3Rvc3BoZXJlXyh0ZXh0dXJlLCB7b2Zmc2V0WTogMC41LCBzY2FsZVk6IDAuNX0pO1xuICAgIHNwaGVyZVJpZ2h0ID0gdGhpcy5jcmVhdGVQaG90b3NwaGVyZV8odGV4dHVyZSwge29mZnNldFk6IDAsIHNjYWxlWTogMC41fSk7XG4gIH0gZWxzZSB7XG4gICAgc3BoZXJlTGVmdCA9IHRoaXMuY3JlYXRlUGhvdG9zcGhlcmVfKHRleHR1cmUpO1xuICAgIHNwaGVyZVJpZ2h0ID0gdGhpcy5jcmVhdGVQaG90b3NwaGVyZV8odGV4dHVyZSk7XG4gIH1cblxuICAvLyBEaXNwbGF5IGluIGxlZnQgYW5kIHJpZ2h0IGV5ZSByZXNwZWN0aXZlbHkuXG4gIHNwaGVyZUxlZnQubGF5ZXJzLnNldChFeWVzLkxFRlQpO1xuICBzcGhlcmVMZWZ0LmV5ZSA9IEV5ZXMuTEVGVDtcbiAgc3BoZXJlUmlnaHQubGF5ZXJzLnNldChFeWVzLlJJR0hUKTtcbiAgc3BoZXJlUmlnaHQuZXllID0gRXllcy5SSUdIVDtcblxuICB0aGlzLnNjZW5lLmdldE9iamVjdEJ5TmFtZSgncGhvdG8nKS5jaGlsZHJlbiA9IFtzcGhlcmVMZWZ0LCBzcGhlcmVSaWdodF07XG5cbiAgdGhpcy5lbWl0KCdsb2FkJyk7XG59O1xuXG5QaG90b3NwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS5vblRleHR1cmVFcnJvcl8gPSBmdW5jdGlvbihlcnJvcikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgJ1VuYWJsZSB0byBsb2FkIHRleHR1cmUgZnJvbSAnICsgdGhpcy5zcmMpO1xufTtcblxuXG5QaG90b3NwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVQaG90b3NwaGVyZV8gPSBmdW5jdGlvbih0ZXh0dXJlLCBvcHRfcGFyYW1zKSB7XG4gIHZhciBwID0gb3B0X3BhcmFtcyB8fCB7fTtcbiAgcC5zY2FsZVggPSBwLnNjYWxlWCB8fCAxO1xuICBwLnNjYWxlWSA9IHAuc2NhbGVZIHx8IDE7XG4gIHAub2Zmc2V0WCA9IHAub2Zmc2V0WCB8fCAwO1xuICBwLm9mZnNldFkgPSBwLm9mZnNldFkgfHwgMDtcbiAgcC5waGlTdGFydCA9IHAucGhpU3RhcnQgfHwgMDtcbiAgcC5waGlMZW5ndGggPSBwLnBoaUxlbmd0aCB8fCBNYXRoLlBJICogMjtcbiAgcC50aGV0YVN0YXJ0ID0gcC50aGV0YVN0YXJ0IHx8IDA7XG4gIHAudGhldGFMZW5ndGggPSBwLnRoZXRhTGVuZ3RoIHx8IE1hdGguUEk7XG5cbiAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDEsIDQ4LCA0OCxcbiAgICAgIHAucGhpU3RhcnQsIHAucGhpTGVuZ3RoLCBwLnRoZXRhU3RhcnQsIHAudGhldGFMZW5ndGgpO1xuICBnZW9tZXRyeS5hcHBseU1hdHJpeChuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VTY2FsZSgtMSwgMSwgMSkpO1xuICB2YXIgdXZzID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2c1swXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB1dnMubGVuZ3RoOyBpICsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCAzOyBqICsrKSB7XG4gICAgICB1dnNbaV1bal0ueCAqPSBwLnNjYWxlWDtcbiAgICAgIHV2c1tpXVtqXS54ICs9IHAub2Zmc2V0WDtcbiAgICAgIHV2c1tpXVtqXS55ICo9IHAuc2NhbGVZO1xuICAgICAgdXZzW2ldW2pdLnkgKz0gcC5vZmZzZXRZO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IG1hcDogdGV4dHVyZSB9KTtcbiAgdGhpcy5kaXN0b3J0ZXIuc2V0TWFwKHRleHR1cmUpO1xuICB2YXIgb3V0ID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgb3V0LnJlbmRlck9yZGVyID0gLTE7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5QaG90b3NwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVTY2VuZV8gPSBmdW5jdGlvbihvcHRfcGFyYW1zKSB7XG4gIHZhciBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuXG4gIC8vIEFkZCBhIGdyb3VwIGZvciB0aGUgcGhvdG9zcGhlcmUuXG4gIHZhciBwaG90b0dyb3VwID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gIHBob3RvR3JvdXAubmFtZSA9ICdwaG90byc7XG4gIHNjZW5lLmFkZChwaG90b0dyb3VwKTtcblxuICByZXR1cm4gc2NlbmU7XG59O1xuXG5QaG90b3NwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS51cGRhdGVNYXRlcmlhbF8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNoaWxkcmVuID0gdGhpcy5zY2VuZS5nZXRPYmplY3RCeU5hbWUoJ3Bob3RvJykuY2hpbGRyZW47XG4gIGZvciAodmFyIGogPSAwOyBqIDwgY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltqXTtcbiAgICB2YXIgbWF0ZXJpYWwgPSB0aGlzLmRpc3RvcnRlci5nZXRTaGFkZXJNYXRlcmlhbChjaGlsZC5leWUpO1xuICAgIGNoaWxkLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG4gICAgY2hpbGQubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuICB9XG59O1xuXG5QaG90b3NwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS5vblZpZXdlckNoYW5nZV8gPSBmdW5jdGlvbihuZXdWaWV3ZXIpIHtcbiAgY29uc29sZS5sb2coJ29uVmlld2VyQ2hhbmdlXycsIG5ld1ZpZXdlcik7XG5cbiAgLy8gUmVzZXQgdGhlIHBob3Rvc3BoZXJlIHdpdGggbmV3IGNvZWZmaWNpZW50cy5cbiAgdGhpcy51cGRhdGVNYXRlcmlhbF8oKTtcbn07XG5cblBob3Rvc3BoZXJlUmVuZGVyZXIucHJvdG90eXBlLm9uUmVzaXplXyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVmZmVjdC5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICB0aGlzLmNhbWVyYS5hc3BlY3QgPSB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xufTtcblxuUGhvdG9zcGhlcmVSZW5kZXJlci5wcm90b3R5cGUub25WUkRpc3BsYXlQYXJhbXNDaGFuZ2VfID0gZnVuY3Rpb24oZSkge1xuICBjb25zb2xlLmxvZygnb25WUkRpc3BsYXlQYXJhbXNDaGFuZ2VfJyk7XG4gIHRoaXMuZGlzdG9ydGVyLnNldERldmljZUluZm8oZS5kZXRhaWwuZGV2aWNlSW5mbyk7XG59O1xuXG5QaG90b3NwaGVyZVJlbmRlcmVyLnByb3RvdHlwZS5vblZSRGlzcGxheVByZXNlbnRDaGFuZ2VfID0gZnVuY3Rpb24oZSkge1xuICBjb25zb2xlLmxvZygnb25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlXycpO1xuICB2YXIgdnJEaXNwbGF5ID0gZS5kZXRhaWwudnJkaXNwbGF5O1xuICB2YXIgaXNWUk1vZGUgPSB2ckRpc3BsYXkuaXNQcmVzZW50aW5nO1xuICBpZiAodnJEaXNwbGF5LmlzUG9seWZpbGxlZCkge1xuICAgIHRoaXMuZGlzdG9ydGVyLnNldEVuYWJsZWQoaXNWUk1vZGUpO1xuICAgIHRoaXMudXBkYXRlTWF0ZXJpYWxfKCk7XG4gIH1cblxuICAvLyBSZXNpemUgdGhlIHJlbmRlcmVyIGZvciBnb29kIG1lYXN1cmUuXG4gIHRoaXMub25SZXNpemVfKCk7XG5cbiAgLy8gQW5hbHl0aWNzLlxuICBpZiAod2luZG93LmFuYWx5dGljcykge1xuICAgIGFuYWx5dGljcy5sb2dNb2RlQ2hhbmdlZChpc1ZSTW9kZSA/IDMgOiAxKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQaG90b3NwaGVyZVJlbmRlcmVyO1xuIiwiLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBDb250YWlucyBhbGwgaW5mb3JtYXRpb24gYWJvdXQgYSBnaXZlbiBzY2VuZSwgaW5jbHVkaW5nIHRoZSBwaG90b3NwaGVyZSBhc3NldCxcbiAqIGJhY2tncm91bmQgbXVzaWMuXG4gKi9cbmZ1bmN0aW9uIFNjZW5lSW5mbyhvcHRfcGFyYW1zKSB7XG4gIHZhciBwYXJhbXMgPSBvcHRfcGFyYW1zIHx8IHt9O1xuICB0aGlzLmlkID0gcGFyYW1zLmlkO1xuICB0aGlzLnRpdGxlID0gcGFyYW1zLnRpdGxlO1xuICB0aGlzLmltYWdlID0gcGFyYW1zLmltYWdlO1xuICB0aGlzLnByZXZpZXcgPSBwYXJhbXMucHJldmlldztcbiAgdGhpcy5pc1N0ZXJlbyA9ICEhcGFyYW1zLmlzU3RlcmVvO1xuICB0aGlzLmF1ZGlvID0gcGFyYW1zLmF1ZGlvO1xuICB0aGlzLnZpZGVvID0gcGFyYW1zLnZpZGVvO1xuICB0aGlzLnlhdyA9IHBhcmFtcy55YXcgfHwgMDtcbiAgdGhpcy5pc1lhd09ubHkgPSBwYXJhbXMuaXNZYXdPbmx5O1xufVxuXG5TY2VuZUluZm8ucHJvdG90eXBlLmlzQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhdGhpcy5pbWFnZSB8fCAhIXRoaXMudmlkZW87XG59O1xuXG5TY2VuZUluZm8ucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgaWQ6IHRoaXMuaWQgfHwgbnVsbCxcbiAgICB0aXRsZTogdGhpcy50aXRsZSB8fCBudWxsLFxuICAgIGltYWdlOiB0aGlzLmltYWdlLFxuICAgIHByZXZpZXc6IHRoaXMucHJldmlldyxcbiAgICBpc1N0ZXJlbzogdGhpcy5pc1N0ZXJlbyxcbiAgICBhdWRpbzogdGhpcy5hdWRpbyxcbiAgICB5YXc6IHRoaXMueWF3IHx8IG51bGwsXG4gICAgdmlkZW86IHRoaXMudmlkZW8gfHwgbnVsbCxcbiAgfTtcbn07XG5cblNjZW5lSW5mby5wcm90b3R5cGUuaXNJbWFnZURhdGFVUkkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuaW1hZ2UuaW5kZXhPZignZGF0YTonKSA9PSAwO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFNjZW5lSW5mbztcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJy4vZW1pdHRlcicpO1xudmFyIFNjZW5lSW5mbyA9IHJlcXVpcmUoJy4vc2NlbmUtaW5mbycpO1xuXG52YXIgUXVlcnkgPSB7XG4gIEpTT05fVVJMOiAndXJsJyxcbiAgVklERU9fVVJMOiAndmlkZW8nLFxuICBPQkpFQ1RfVVJMOiAnb2JqZWN0JyxcbiAgSU1BR0VfVVJMOiAnaW1hZ2UnLFxuICBQUkVWSUVXX1VSTDogJ3ByZXZpZXcnLFxuICBJU19TVEVSRU86ICdpc19zdGVyZW8nLFxuICBBVURJT19VUkw6ICdhdWRpbycsXG4gIFNUQVJUX1lBVzogJ3N0YXJ0X3lhdycsXG4gIElTX1lBV19PTkxZOiAnaXNfeWF3X29ubHknLFxufTtcblxuZnVuY3Rpb24gU2NlbmVMb2FkZXIoKSB7XG59XG5TY2VuZUxvYWRlci5wcm90b3R5cGUgPSBuZXcgRW1pdHRlcigpO1xuXG4vKipcbiAqIExvYWRzIGEgc2NlbmUgZnJvbSBhIEpTT04gZmlsZS5cbiAqL1xuU2NlbmVMb2FkZXIucHJvdG90eXBlLmxvYWRGcm9tSnNvbl8gPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7XG4gIC8vIFhIUiB0byBmZXRjaCB0aGUgSlNPTi5cbiAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB4aHIub25sb2FkID0gZnVuY3Rpb24oZSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIganNvbk9iaiA9IEpTT04ucGFyc2UodGhpcy5yZXNwb25zZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhhdC5lbWl0KCdlcnJvcicsICdJbnZhbGlkIEpTT04gYXQgJyArIHVybCArICcuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBsYWJlbE9iamVjdHMgPSB7fTtcbiAgICB2YXIgbGFiZWxzID0ganNvbk9iai5sYWJlbHMgfHwgW107XG4gICAgLy8gR28gdGhyb3VnaCB0aGUgbGFiZWxzIGluIHRoZSBkYXRhIGFuZCBvYmplY3RpZnkgdGhlbS5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxhYmVsID0gbmV3IExhYmVsKGxhYmVsc1tpXSk7XG4gICAgICBsYWJlbE9iamVjdHNbbGFiZWwuaWRdID0gbGFiZWw7XG4gICAgfVxuICAgIGpzb25PYmoubGFiZWxzID0gbGFiZWxPYmplY3RzO1xuICAgIHZhciBzY2VuZSA9IG5ldyBTY2VuZUluZm8oanNvbk9iaik7XG4gICAgdGhhdC5lbWl0KCdsb2FkJywgc2NlbmUpO1xuICB9O1xuICB4aHIuc2VuZCgpO1xufTtcblxuLyoqXG4gKiBQYXJzZSBvdXQgR0VUIHBhcmFtZXRlcnMgZnJvbSB0aGUgVVJMIHN0cmluZyBhbmQgbG9hZCB0aGUgc2NlbmUuXG4gKi9cblNjZW5lTG9hZGVyLnByb3RvdHlwZS5sb2FkRnJvbUdldFBhcmFtc18gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhcmFtcyA9IHtcbiAgICBpbWFnZTogVXRpbC5nZXRRdWVyeVBhcmFtZXRlcihRdWVyeS5JTUFHRV9VUkwpLFxuICAgIHZpZGVvOiBVdGlsLmdldFF1ZXJ5UGFyYW1ldGVyKFF1ZXJ5LlZJREVPX1VSTCksXG4gICAgb2JqZWN0OiBVdGlsLmdldFF1ZXJ5UGFyYW1ldGVyKFF1ZXJ5Lk9CSkVDVF9VUkwpLFxuICAgIHByZXZpZXc6IFV0aWwuZ2V0UXVlcnlQYXJhbWV0ZXIoUXVlcnkuUFJFVklFV19VUkwpLFxuICAgIGlzU3RlcmVvOiB0aGlzLnBhcnNlQm9vbGVhbl8oVXRpbC5nZXRRdWVyeVBhcmFtZXRlcihRdWVyeS5JU19TVEVSRU8pKSxcbiAgICBhdWRpbzogVXRpbC5nZXRRdWVyeVBhcmFtZXRlcihRdWVyeS5BVURJT19VUkwpLFxuICAgIGlzWWF3T25seTogdGhpcy5wYXJzZUJvb2xlYW5fKFV0aWwuZ2V0UXVlcnlQYXJhbWV0ZXIoUXVlcnkuSVNfWUFXX09OTFkpKSxcbiAgICB5YXc6IFRIUkVFLk1hdGguZGVnVG9SYWQoVXRpbC5nZXRRdWVyeVBhcmFtZXRlcihRdWVyeS5TVEFSVF9ZQVcpKSxcbiAgfTtcblxuICB2YXIgY291bnQgPSAwO1xuICBjb3VudCArPSAocGFyYW1zW1F1ZXJ5LklNQUdFX1VSTF0gPyAxIDogMCk7XG4gIGNvdW50ICs9IChwYXJhbXNbUXVlcnkuVklERU9fVVJMXSA/IDEgOiAwKTtcbiAgY291bnQgKz0gKHBhcmFtc1tRdWVyeS5PQkpFQ1RfVVJMXSA/IDEgOiAwKTtcbiAgLy8gVmFsaWRhdGUgdGhpcy5cbiAgaWYgKGNvdW50ID09IDApIHtcbiAgICB0aGlzLmVtaXQoJ2Vycm9yJywgJ0VpdGhlciBcImltYWdlXCIsIFwidmlkZW9cIiwgb3IgXCJvYmplY3RcIiBHRVQgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzY2VuZSA9IG5ldyBTY2VuZUluZm8ocGFyYW1zKTtcbiAgdGhpcy5lbWl0KCdsb2FkJywgc2NlbmUpO1xufTtcblxuU2NlbmVMb2FkZXIucHJvdG90eXBlLnBhcnNlQm9vbGVhbl8gPSBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gJ2ZhbHNlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gISF2YWx1ZTtcbn07XG5cblNjZW5lTG9hZGVyLnByb3RvdHlwZS5sb2FkU2NlbmUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAvLyBJZiB0aGVyZSdzIGEgdXJsIHBhcmFtIHNwZWNpZmllZCwgdHJ5IGxvYWRpbmcgZnJvbSBKU09OLlxuICB2YXIgdXJsID0gVXRpbC5nZXRRdWVyeVBhcmFtZXRlcigndXJsJyk7XG4gIHZhciBpbWFnZSA9IFV0aWwuZ2V0UXVlcnlQYXJhbWV0ZXIoJ2ltYWdlJyk7XG4gIHZhciB2aWRlbyA9IFV0aWwuZ2V0UXVlcnlQYXJhbWV0ZXIoJ3ZpZGVvJyk7XG4gIHZhciBvYmplY3QgPSBVdGlsLmdldFF1ZXJ5UGFyYW1ldGVyKCdvYmplY3QnKTtcbiAgaWYgKHVybCkge1xuICAgIHRoaXMubG9hZEZyb21Kc29uXyh1cmwpO1xuICB9IGVsc2UgaWYgKGltYWdlIHx8IHZpZGVvIHx8IG9iamVjdCkge1xuICAgIC8vIE90aGVyd2lzZSwgdHJ5IGxvYWRpbmcgZnJvbSBVUkwgcGFyYW1ldGVycy5cbiAgICB0aGlzLmxvYWRGcm9tR2V0UGFyYW1zXygpO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIGl0IGZhaWxzLCB0aHJvdyBhbiBleGNlcHRpb24uXG4gICAgdGhpcy5lbWl0KCdlcnJvcicsICdVbmFibGUgdG8gbG9hZCBzY2VuZS4gUmVxdWlyZWQgcGFyYW1ldGVyIG1pc3NpbmcuJyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2NlbmVMb2FkZXI7XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5VdGlsID0gd2luZG93LlV0aWwgfHwge307XG5cblV0aWwuaXNEYXRhVVJJID0gZnVuY3Rpb24oc3JjKSB7XG4gIHJldHVybiBzcmMgJiYgc3JjLmluZGV4T2YoJ2RhdGE6JykgPT0gMDtcbn07XG5cblV0aWwuZ2VuZXJhdGVVVUlEID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHM0KCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKVxuICAgIC50b1N0cmluZygxNilcbiAgICAuc3Vic3RyaW5nKDEpO1xuICB9XG4gIHJldHVybiBzNCgpICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICtcbiAgICBzNCgpICsgJy0nICsgczQoKSArIHM0KCkgKyBzNCgpO1xufTtcblxuVXRpbC5pc01vYmlsZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2hlY2sgPSBmYWxzZTtcbiAgKGZ1bmN0aW9uKGEpe2lmKC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm8vaS50ZXN0KGEpfHwvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaS50ZXN0KGEuc3Vic3RyKDAsNCkpKWNoZWNrID0gdHJ1ZX0pKG5hdmlnYXRvci51c2VyQWdlbnR8fG5hdmlnYXRvci52ZW5kb3J8fHdpbmRvdy5vcGVyYSk7XG4gIHJldHVybiBjaGVjaztcbn07XG5cblV0aWwuaXNJT1MgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8oaVBhZHxpUGhvbmV8aVBvZCkvZy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xufTtcblxuVXRpbC5jbG9uZU9iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgb3V0ID0ge307XG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIG91dFtrZXldID0gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cblV0aWwuaGFzaENvZGUgPSBmdW5jdGlvbihzKSB7XG4gIHJldHVybiBzLnNwbGl0KFwiXCIpLnJlZHVjZShmdW5jdGlvbihhLGIpe2E9KChhPDw1KS1hKStiLmNoYXJDb2RlQXQoMCk7cmV0dXJuIGEmYX0sMCk7XG59O1xuXG5VdGlsLmxvYWRUcmFja1NyYyA9IGZ1bmN0aW9uKGNvbnRleHQsIHNyYywgY2FsbGJhY2ssIG9wdF9wcm9ncmVzc0NhbGxiYWNrKSB7XG4gIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIHJlcXVlc3Qub3BlbignR0VUJywgc3JjLCB0cnVlKTtcbiAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuXG4gIC8vIERlY29kZSBhc3luY2hyb25vdXNseS5cbiAgcmVxdWVzdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBjb250ZXh0LmRlY29kZUF1ZGlvRGF0YShyZXF1ZXN0LnJlc3BvbnNlLCBmdW5jdGlvbihidWZmZXIpIHtcbiAgICAgIGNhbGxiYWNrKGJ1ZmZlcik7XG4gICAgfSwgZnVuY3Rpb24oZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9KTtcbiAgfTtcbiAgaWYgKG9wdF9wcm9ncmVzc0NhbGxiYWNrKSB7XG4gICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBlcmNlbnQgPSBlLmxvYWRlZCAvIGUudG90YWw7XG4gICAgICBvcHRfcHJvZ3Jlc3NDYWxsYmFjayhwZXJjZW50KTtcbiAgICB9O1xuICB9XG4gIHJlcXVlc3Quc2VuZCgpO1xufTtcblxuVXRpbC5pc1BvdzIgPSBmdW5jdGlvbihuKSB7XG4gIHJldHVybiAobiAmIChuIC0gMSkpID09IDA7XG59O1xuXG5VdGlsLmNhcGl0YWxpemUgPSBmdW5jdGlvbihzKSB7XG4gIHJldHVybiBzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKTtcbn07XG5cblV0aWwuaXNJRnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LnNlbGYgIT09IHdpbmRvdy50b3A7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLy8gRnJvbSBodHRwOi8vZ29vLmdsLzRXWDN0Z1xuVXRpbC5nZXRRdWVyeVBhcmFtZXRlciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCBcIlxcXFxbXCIpLnJlcGxhY2UoL1tcXF1dLywgXCJcXFxcXVwiKTtcbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIltcXFxcPyZdXCIgKyBuYW1lICsgXCI9KFteJiNdKilcIiksXG4gICAgICByZXN1bHRzID0gcmVnZXguZXhlYyhsb2NhdGlvbi5zZWFyY2gpO1xuICByZXR1cm4gcmVzdWx0cyA9PT0gbnVsbCA/IFwiXCIgOiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1sxXS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcbn07XG5cblxuLy8gRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzExODcxMDc3L3Byb3Blci13YXktdG8tZGV0ZWN0LXdlYmdsLXN1cHBvcnQuXG5VdGlsLmlzV2ViR0xFbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgdHJ5IHsgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dChcIndlYmdsXCIpOyB9XG4gIGNhdGNoICh4KSB7IGdsID0gbnVsbDsgfVxuXG4gIGlmIChnbCA9PSBudWxsKSB7XG4gICAgdHJ5IHsgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dChcImV4cGVyaW1lbnRhbC13ZWJnbFwiKTsgZXhwZXJpbWVudGFsID0gdHJ1ZTsgfVxuICAgIGNhdGNoICh4KSB7IGdsID0gbnVsbDsgfVxuICB9XG4gIHJldHVybiAhIWdsO1xufTtcblxuVXRpbC5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcbn07XG5cbi8vIEZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDE0MDYwNC9mYXN0ZXN0LWh5cG90ZW51c2UtaW4tamF2YXNjcmlwdFxuVXRpbC5oeXBvdCA9IE1hdGguaHlwb3QgfHwgZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gTWF0aC5zcXJ0KHgqeCArIHkqeSk7XG59O1xuXG4vLyBGcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE3NDQ3NzE4LzY5MzkzNFxuVXRpbC5pc0lFMTEgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1RyaWRlbnQvKTtcbn07XG5cblV0aWwuZ2V0UmVjdENlbnRlciA9IGZ1bmN0aW9uKHJlY3QpIHtcbiAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IyKHJlY3QueCArIHJlY3Qud2lkdGgvMiwgcmVjdC55ICsgcmVjdC5oZWlnaHQvMik7XG59O1xuXG5VdGlsLmdldFNjcmVlbldpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLm1heCh3aW5kb3cuc2NyZWVuLndpZHRoLCB3aW5kb3cuc2NyZWVuLmhlaWdodCkgKlxuICAgICAgd2luZG93LmRldmljZVBpeGVsUmF0aW87XG59O1xuXG5VdGlsLmdldFNjcmVlbkhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5taW4od2luZG93LnNjcmVlbi53aWR0aCwgd2luZG93LnNjcmVlbi5oZWlnaHQpICpcbiAgICAgIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xufTtcblxuVXRpbC5pc0lPUzlPckxlc3MgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCFVdGlsLmlzSU9TKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHJlID0gLyhpUGhvbmV8aVBhZHxpUG9kKSBPUyAoW1xcZF9dKykvO1xuICB2YXIgaU9TVmVyc2lvbiA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2gocmUpO1xuICBpZiAoIWlPU1ZlcnNpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gR2V0IHRoZSBsYXN0IGdyb3VwLlxuICB2YXIgdmVyc2lvblN0cmluZyA9IGlPU1ZlcnNpb25baU9TVmVyc2lvbi5sZW5ndGggLSAxXTtcbiAgdmFyIG1ham9yVmVyc2lvbiA9IHBhcnNlRmxvYXQodmVyc2lvblN0cmluZyk7XG4gIHJldHVybiBtYWpvclZlcnNpb24gPD0gOTtcbn07XG5cblV0aWwuZ2V0RXh0ZW5zaW9uID0gZnVuY3Rpb24odXJsKSB7XG4gIHJldHVybiB1cmwuc3BsaXQoJy4nKS5wb3AoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbDtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBFeWVzID0gcmVxdWlyZSgnLi9leWVzJyk7XG52YXIgVXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG52YXIgREVGQVVMVF9GT1YgPSA0MDtcbnZhciBOT19ESVNUT1JUSU9OID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuLyoqXG4gKiBSZXNwb25zaWJsZSBmb3IgZGlzdG9ydGlvbiBjb3JyZWN0aW9uIGJ5IHByZS1kaXN0b3J0aW5nIHRoZSB2ZXJ0ZXggZ2VvbWV0cnlcbiAqIHNvIHRoYXQgYSBzZWNvbmQgc2hhZGVyIHBhc3MgaXMgbm90IG5lZWRlZC4gVGhpcyBpcyBpbnRlbmRlZCB0byBncmVhdGx5XG4gKiBvcHRpbWl6ZSB0aGUgcmVuZGVyaW5nIHByb2Nlc3MuXG4gKi9cbmZ1bmN0aW9uIFZlcnRleERpc3RvcnRlcigpIHtcbiAgdGhpcy50ZXh0dXJlID0gbnVsbDtcbiAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZTtcbn1cblxuVmVydGV4RGlzdG9ydGVyLnByb3RvdHlwZS5zZXRFbmFibGVkID0gZnVuY3Rpb24oaXNFbmFibGVkKSB7XG4gIHRoaXMuaXNFbmFibGVkID0gaXNFbmFibGVkO1xufTtcblxuVmVydGV4RGlzdG9ydGVyLnByb3RvdHlwZS5zZXREZXZpY2VJbmZvID0gZnVuY3Rpb24oZGV2aWNlSW5mbykge1xuICB0aGlzLmRldmljZUluZm8gPSBkZXZpY2VJbmZvO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSB0ZXh0dXJlIHRoYXQgaXMgdXNlZCB0byByZW5kZXIgdGhpcyBwaG90b3NwaGVyZS5cbiAqL1xuVmVydGV4RGlzdG9ydGVyLnByb3RvdHlwZS5zZXRNYXAgPSBmdW5jdGlvbih0ZXh0dXJlKSB7XG4gIHRoaXMudGV4dHVyZSA9IHRleHR1cmU7XG59O1xuXG5WZXJ0ZXhEaXN0b3J0ZXIucHJvdG90eXBlLmdldFZlcnRleFNoYWRlcl8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFtcblx0XHQnI2lmZGVmIEdMX0VTJyxcblx0XHQncHJlY2lzaW9uIGhpZ2hwIGZsb2F0OycsXG5cdFx0JyNlbmRpZicsXG5cbiAgICAndmFyeWluZyB2ZWMyIHZVVjsnLFxuXG4gICAgdGhpcy5nZXREaXN0b3J0aW9uSW5jbHVkZV8oKSxcbiAgICB0aGlzLmdldFZpZXdwb3J0SW5jbHVkZV8oKSxcblxuICAgICd2b2lkIG1haW4oKSB7JyxcbiAgICAgIC8vIFBhc3MgdGhyb3VnaCB0ZXh0dXJlIGNvb3JkaW5hdGVzIHRvIHRoZSBmcmFnbWVudCBzaGFkZXIuXG4gICAgICAndlVWID0gdXY7JyxcblxuICAgICAgLy8gSGVyZSwgd2Ugd2FudCB0byBlbnN1cmUgdGhhdCB3ZSBhcmUgdXNpbmcgYW4gdW5kaXN0b3J0ZWQgcHJvamVjdGlvblxuICAgICAgLy8gbWF0cml4LiBCeSBzZXR0aW5nIGlzVW5kaXN0b3J0ZWQ6IHRydWUgaW4gdGhlIFdlYlZSTWFuYWdlciwgd2VcbiAgICAgIC8vIGd1YXJhbnRlZSB0aGlzLlxuICAgICAgJ3ZlYzQgcG9zID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7JyxcblxuICAgICAgLy8gRmlyc3Qgd2UgYXBwbHkgZGlzdG9ydGlvbi5cbiAgICAgICd2ZWM0IGRpc3RvcnRlZFBvcyA9IERpc3RvcnQocG9zKTsnLFxuICAgICAgLy8gVGhlbiBjb25zdHJhaW4gaW4gYSB2aWV3cG9ydC5cbiAgICAgICdnbF9Qb3NpdGlvbiA9IFZpZXdwb3J0KGRpc3RvcnRlZFBvcyk7JyxcbiAgICAnfSdcbiAgXS5qb2luKCdcXG4nKTtcbn07XG5cblZlcnRleERpc3RvcnRlci5wcm90b3R5cGUuZ2V0Tm9vcFZlcnRleFNoYWRlcl8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFtcblx0XHQnI2lmZGVmIEdMX0VTJyxcblx0XHQncHJlY2lzaW9uIGhpZ2hwIGZsb2F0OycsXG5cdFx0JyNlbmRpZicsXG5cbiAgICAndmFyeWluZyB2ZWMyIHZVVjsnLFxuXG4gICAgJ3ZvaWQgbWFpbigpIHsnLFxuICAgICAgJ2dsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7JyxcbiAgICAgICd2VVYgPSB1djsnLFxuICAgICd9J1xuICBdLmpvaW4oJ1xcbicpO1xufTtcblxuVmVydGV4RGlzdG9ydGVyLnByb3RvdHlwZS5nZXRGcmFnbWVudFNoYWRlcl8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFtcblx0XHQnI2lmZGVmIEdMX0VTJyxcblx0XHQncHJlY2lzaW9uIGhpZ2hwIGZsb2F0OycsXG5cdFx0JyNlbmRpZicsXG5cbiAgICAndmFyeWluZyB2ZWMyIHZVVjsnLFxuICAgICd1bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlOycsXG5cbiAgICAndm9pZCBtYWluKCkgeycsXG4gICAgICAnZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHRleHR1cmUsIHZVVik7JyxcbiAgICAnfSdcbiAgXS5qb2luKCdcXG4nKTtcbn07XG5cblZlcnRleERpc3RvcnRlci5wcm90b3R5cGUuZ2V0Tm9vcERpc3RvcnRpb25JbmNsdWRlXyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gW1xuICAgICd2ZWM0IERpc3RvcnQodmVjNCBwb2ludCkgeycsXG4gICAgICAncmV0dXJuIHBvaW50OycsXG4gICAgJ30nXG4gIF0uam9pbignXFxuJyk7XG59O1xuXG5WZXJ0ZXhEaXN0b3J0ZXIucHJvdG90eXBlLmdldERpc3RvcnRpb25JbmNsdWRlXyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gW1xuICAgICd1bmlmb3JtIGZsb2F0IHVEaXN0b3J0aW9uQ29lZmZpY2llbnRzWzEyXTsnLFxuICAgICd1bmlmb3JtIGZsb2F0IHVEaXN0b3J0aW9uTWF4Rm92U3F1YXJlZDsnLFxuICAgICd1bmlmb3JtIHZlYzIgdURpc3RvcnRpb25Gb3ZPZmZzZXQ7JyxcbiAgICAndW5pZm9ybSB2ZWMyIHVEaXN0b3J0aW9uRm92U2NhbGU7JyxcblxuICAgIC8vIFJldHVybnMgYSBzY2FsYXIgdG8gZGlzdG9ydCBhIHBvaW50OyBjb21wdXRlZCBpbiByZXZlcnNlIHZpYSB0aGUgcG9seW5vbWlhbCBhcHByb3hpbWF0aW9uOlxuICAgIC8vICAgcicgPSAxICsgzqNfaSAodURpc3RvcnRpb25Db2VmZmljaWVudHNbaV0gclNxdWFyZWReKGkrMSkpICBpPVswLi4xMV1cbiAgICAvLyB3aGVyZSByU3F1YXJlZCBpcyB0aGUgc3F1YXJlZCByYWRpdXMgb2YgYW4gdW5kaXN0b3J0ZWQgcG9pbnQgaW4gdGFuLWFuZ2xlIHNwYWNlLlxuICAgIC8vIFNlZSB7QGxpbmsgRGlzdG9ydGlvbn0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgJ2Zsb2F0IERpc3RvcnRpb25GYWN0b3IoZmxvYXQgclNxdWFyZWQpIHsnLFxuICAgICAgJ2Zsb2F0IHJldCA9IDAuMDsnLFxuICAgICAgJ3JTcXVhcmVkID0gbWluKHVEaXN0b3J0aW9uTWF4Rm92U3F1YXJlZCwgclNxdWFyZWQpOycsXG4gICAgICAncmV0ID0gclNxdWFyZWQgKiAocmV0ICsgdURpc3RvcnRpb25Db2VmZmljaWVudHNbMTFdKTsnLFxuICAgICAgJ3JldCA9IHJTcXVhcmVkICogKHJldCArIHVEaXN0b3J0aW9uQ29lZmZpY2llbnRzWzEwXSk7JyxcbiAgICAgICdyZXQgPSByU3F1YXJlZCAqIChyZXQgKyB1RGlzdG9ydGlvbkNvZWZmaWNpZW50c1s5XSk7JyxcbiAgICAgICdyZXQgPSByU3F1YXJlZCAqIChyZXQgKyB1RGlzdG9ydGlvbkNvZWZmaWNpZW50c1s4XSk7JyxcbiAgICAgICdyZXQgPSByU3F1YXJlZCAqIChyZXQgKyB1RGlzdG9ydGlvbkNvZWZmaWNpZW50c1s3XSk7JyxcbiAgICAgICdyZXQgPSByU3F1YXJlZCAqIChyZXQgKyB1RGlzdG9ydGlvbkNvZWZmaWNpZW50c1s2XSk7JyxcbiAgICAgICdyZXQgPSByU3F1YXJlZCAqIChyZXQgKyB1RGlzdG9ydGlvbkNvZWZmaWNpZW50c1s1XSk7JyxcbiAgICAgICdyZXQgPSByU3F1YXJlZCAqIChyZXQgKyB1RGlzdG9ydGlvbkNvZWZmaWNpZW50c1s0XSk7JyxcbiAgICAgICdyZXQgPSByU3F1YXJlZCAqIChyZXQgKyB1RGlzdG9ydGlvbkNvZWZmaWNpZW50c1szXSk7JyxcbiAgICAgICdyZXQgPSByU3F1YXJlZCAqIChyZXQgKyB1RGlzdG9ydGlvbkNvZWZmaWNpZW50c1syXSk7JyxcbiAgICAgICdyZXQgPSByU3F1YXJlZCAqIChyZXQgKyB1RGlzdG9ydGlvbkNvZWZmaWNpZW50c1sxXSk7JyxcbiAgICAgICdyZXQgPSByU3F1YXJlZCAqIChyZXQgKyB1RGlzdG9ydGlvbkNvZWZmaWNpZW50c1swXSk7JyxcbiAgICAgICdyZXR1cm4gcmV0ICsgMS4wOycsXG4gICAgJ30nLFxuXG4gICAgLy8gR2l2ZW4gYSBwb2ludCBpbiBjbGlwIHNwYWNlLCBkaXN0b3J0IHRoZSBwb2ludCBhY2NvcmRpbmcgdG8gdGhlIGNvZWZmaWNpZW50cyBzdG9yZWQgaW5cbiAgICAvLyB1RGlzdG9ydGlvbkNvZWZmaWNpZW50cyBhbmQgdGhlIGZpZWxkIG9mIHZpZXcgKEZPVikgc3BlY2lmaWVkIGluIHVEaXN0b3J0aW9uRm92T2Zmc2V0IGFuZFxuICAgIC8vIHVEaXN0b3J0aW9uRm92U2NhbGUuXG4gICAgLy8gUmV0dXJucyB0aGUgZGlzdG9ydGVkIHBvaW50IGluIGNsaXAgc3BhY2UsIHdpdGggaXRzIFogdW50b3VjaGVkLlxuICAgICd2ZWM0IERpc3RvcnQodmVjNCBwb2ludCkgeycsXG4gICAgICAvLyBQdXQgcG9pbnQgaW50byBub3JtYWxpemVkIGRldmljZSBjb29yZGluYXRlcyAoTkRDKSwgWygtMSwgLTEsIC0xKSB0byAoMSwgMSwgMSldLlxuICAgICAgJ3ZlYzMgcG9pbnROZGMgPSBwb2ludC54eXogLyBwb2ludC53OycsXG4gICAgICAvLyBUaHJvdyBhd2F5IHRoZSBaIGNvb3JkaW5hdGUgYW5kIG1hcCB0aGUgcG9pbnQgdG8gdGhlIHVuaXQgc3F1YXJlLCBbKDAsIDApIHRvICgxLCAxKV0uXG4gICAgICAndmVjMiBwb2ludFVuaXRTcXVhcmUgPSAocG9pbnROZGMueHkgKyB2ZWMyKDEuMCkpIC8gMi4wOycsXG4gICAgICAvLyBNYXAgdGhlIHBvaW50IGludG8gRk9WIHRhbi1hbmdsZSBzcGFjZS5cbiAgICAgICd2ZWMyIHBvaW50VGFuQW5nbGUgPSBwb2ludFVuaXRTcXVhcmUgKiB1RGlzdG9ydGlvbkZvdlNjYWxlIC0gdURpc3RvcnRpb25Gb3ZPZmZzZXQ7JyxcbiAgICAgICdmbG9hdCByYWRpdXNTcXVhcmVkID0gZG90KHBvaW50VGFuQW5nbGUsIHBvaW50VGFuQW5nbGUpOycsXG4gICAgICAnZmxvYXQgZGlzdG9ydGlvbkZhY3RvciA9IERpc3RvcnRpb25GYWN0b3IocmFkaXVzU3F1YXJlZCk7JyxcbiAgICAgIC8vJ2Zsb2F0IGRpc3RvcnRpb25GYWN0b3IgPSAyLjA7JyxcbiAgICAgICd2ZWMyIGRpc3RvcnRlZFBvaW50VGFuQW5nbGUgPSBwb2ludFRhbkFuZ2xlICogZGlzdG9ydGlvbkZhY3RvcjsnLFxuICAgICAgLy8gUmV2ZXJzZSB0aGUgbWFwcGluZ3MgYWJvdmUgdG8gYnJpbmcgdGhlIGRpc3RvcnRlZCBwb2ludCBiYWNrIGludG8gTkRDIHNwYWNlLlxuICAgICAgJ3ZlYzIgZGlzdG9ydGVkUG9pbnRVbml0U3F1YXJlID0gKGRpc3RvcnRlZFBvaW50VGFuQW5nbGUgKyB1RGlzdG9ydGlvbkZvdk9mZnNldCknLFxuICAgICAgICAgICcvIHVEaXN0b3J0aW9uRm92U2NhbGU7JyxcbiAgICAgICd2ZWMzIGRpc3RvcnRlZFBvaW50TmRjID0gdmVjMyhkaXN0b3J0ZWRQb2ludFVuaXRTcXVhcmUgKiAyLjAgLSB2ZWMyKDEuMCksIHBvaW50TmRjLnopOycsXG4gICAgICAvLyBDb252ZXJ0IHRoZSBwb2ludCBpbnRvIGNsaXAgc3BhY2UgYmVmb3JlIHJldHVybmluZyBpbiBjYXNlIGFueSBvcGVyYXRpb25zIGFyZSBkb25lIGFmdGVyLlxuICAgICAgJ3JldHVybiB2ZWM0KGRpc3RvcnRlZFBvaW50TmRjLCAxLjApICogcG9pbnQudzsnLFxuICAgICd9JyxcbiAgXS5qb2luKCdcXG4nKTtcbn07XG5cblZlcnRleERpc3RvcnRlci5wcm90b3R5cGUuZ2V0Vmlld3BvcnRJbmNsdWRlXyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gW1xuICAgICd1bmlmb3JtIG1hdDQgdVZpZXdwb3J0VHJhbnNmb3JtOycsXG5cbiAgICAndmVjNCBWaWV3cG9ydCh2ZWM0IHBvaW50KSB7JyxcbiAgICAgICdyZXR1cm4gdVZpZXdwb3J0VHJhbnNmb3JtICogcG9pbnQ7JyxcbiAgICAnfSdcbiAgXS5qb2luKCdcXG4nKTtcbn07XG5cblZlcnRleERpc3RvcnRlci5wcm90b3R5cGUuZ2V0RGlzdG9ydGlvbk1heEZvdlNxdWFyZWRfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBmb3YgPSB0aGlzLmdldEZvdl8oKTtcbiAgdmFyIG1heEZvdiA9IFV0aWwuaHlwb3QoXG4gICAgTWF0aC50YW4oVEhSRUUuTWF0aC5kZWdUb1JhZChNYXRoLm1heChmb3YubGVmdERlZ3JlZXMsIGZvdi5yaWdodERlZ3JlZXMpKSksXG4gICAgTWF0aC50YW4oVEhSRUUuTWF0aC5kZWdUb1JhZChNYXRoLm1heChmb3YuZG93bkRlZ3JlZXMsIGZvdi51cERlZ3JlZXMpKSkpO1xuICByZXR1cm4gbWF4Rm92ICogbWF4Rm92O1xufTtcblxuVmVydGV4RGlzdG9ydGVyLnByb3RvdHlwZS5nZXREaXN0b3J0aW9uQ29lZmZpY2llbnRzXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdmlld2VyID0gdGhpcy5kZXZpY2VJbmZvLnZpZXdlcjtcbiAgcmV0dXJuIHRoaXMuaXNFbmFibGVkID8gdmlld2VyLmludmVyc2VDb2VmZmljaWVudHMgOiBOT19ESVNUT1JUSU9OO1xufTtcblxuVmVydGV4RGlzdG9ydGVyLnByb3RvdHlwZS5nZXREaXN0b3J0aW9uRm92T2Zmc2V0XyA9IGZ1bmN0aW9uKGV5ZSkge1xuICB2YXIgZm92ID0gdGhpcy5nZXRGb3ZfKGV5ZSk7XG4gIHZhciBsZWZ0ID0gTWF0aC50YW4oVEhSRUUuTWF0aC5kZWdUb1JhZChmb3YubGVmdERlZ3JlZXMpKTtcbiAgdmFyIGRvd24gPSBNYXRoLnRhbihUSFJFRS5NYXRoLmRlZ1RvUmFkKGZvdi5kb3duRGVncmVlcykpO1xuICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIobGVmdCwgZG93bik7XG59O1xuXG5WZXJ0ZXhEaXN0b3J0ZXIucHJvdG90eXBlLmdldERpc3RvcnRpb25Gb3ZTY2FsZV8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGZvdiA9IHRoaXMuZ2V0Rm92XygpO1xuICB2YXIgbGVmdCA9IE1hdGgudGFuKFRIUkVFLk1hdGguZGVnVG9SYWQoZm92LmxlZnREZWdyZWVzKSk7XG4gIHZhciByaWdodCA9IE1hdGgudGFuKFRIUkVFLk1hdGguZGVnVG9SYWQoZm92LnJpZ2h0RGVncmVlcykpO1xuICB2YXIgdXAgPSBNYXRoLnRhbihUSFJFRS5NYXRoLmRlZ1RvUmFkKGZvdi51cERlZ3JlZXMpKTtcbiAgdmFyIGRvd24gPSBNYXRoLnRhbihUSFJFRS5NYXRoLmRlZ1RvUmFkKGZvdi5kb3duRGVncmVlcykpO1xuICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIobGVmdCArIHJpZ2h0LCB1cCArIGRvd24pO1xufTtcblxuXG5WZXJ0ZXhEaXN0b3J0ZXIucHJvdG90eXBlLmdldFVuaWZvcm1zXyA9IGZ1bmN0aW9uKGV5ZSkge1xuICByZXR1cm4ge1xuICAgIHRleHR1cmU6IHtcbiAgICAgIHR5cGU6ICd0JyxcbiAgICAgIHZhbHVlOiB0aGlzLnRleHR1cmVcbiAgICB9LFxuICAgIHVEaXN0b3J0aW9uQ29lZmZpY2llbnRzOiB7XG4gICAgICB0eXBlOiAnZnYxJyxcbiAgICAgIHZhbHVlOiB0aGlzLmdldERpc3RvcnRpb25Db2VmZmljaWVudHNfKClcbiAgICB9LFxuICAgIHVEaXN0b3J0aW9uTWF4Rm92U3F1YXJlZDoge1xuICAgICAgdHlwZTogJ2YnLFxuICAgICAgdmFsdWU6IHRoaXMuZ2V0RGlzdG9ydGlvbk1heEZvdlNxdWFyZWRfKClcbiAgICB9LFxuICAgIHVEaXN0b3J0aW9uRm92T2Zmc2V0OiB7XG4gICAgICB0eXBlOiAndjInLFxuICAgICAgdmFsdWU6IHRoaXMuZ2V0RGlzdG9ydGlvbkZvdk9mZnNldF8oZXllKVxuICAgIH0sXG4gICAgdURpc3RvcnRpb25Gb3ZTY2FsZToge1xuICAgICAgdHlwZTogJ3YyJyxcbiAgICAgIHZhbHVlOiB0aGlzLmdldERpc3RvcnRpb25Gb3ZTY2FsZV8oKVxuICAgIH0sXG4gICAgdVZpZXdwb3J0VHJhbnNmb3JtOiB7XG4gICAgICB0eXBlOiAnbTQnLFxuICAgICAgdmFsdWU6IHRoaXMuZ2V0Vmlld3BvcnRUcmFuc2Zvcm1fKGV5ZSlcbiAgICB9XG4gIH07XG59O1xuXG5WZXJ0ZXhEaXN0b3J0ZXIucHJvdG90eXBlLmdldFNoYWRlck1hdGVyaWFsID0gZnVuY3Rpb24oZXllKSB7XG4gIHZhciB1bmlmb3JtcyA9IHRoaXMuZ2V0VW5pZm9ybXNfKGV5ZSk7XG4gIHJldHVybiBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe1xuICAgIHVuaWZvcm1zOiB1bmlmb3JtcyxcbiAgICB2ZXJ0ZXhTaGFkZXI6IHRoaXMuZ2V0VmVydGV4U2hhZGVyXygpLFxuICAgIGZyYWdtZW50U2hhZGVyOiB0aGlzLmdldEZyYWdtZW50U2hhZGVyXygpXG4gIH0pO1xufTtcblxuVmVydGV4RGlzdG9ydGVyLnByb3RvdHlwZS5nZXRGb3ZfID0gZnVuY3Rpb24ob3B0X2V5ZSkge1xuICB2YXIgZXllID0gb3B0X2V5ZSB8fCBFeWVzLkxFRlQ7XG5cbiAgaWYgKGV5ZSA9PSBFeWVzLkxFRlQpIHtcbiAgICByZXR1cm4gdGhpcy5kZXZpY2VJbmZvLmdldEZpZWxkT2ZWaWV3TGVmdEV5ZSh0cnVlKTtcbiAgfVxuICBpZiAoZXllID09IEV5ZXMuUklHSFQpIHtcbiAgICByZXR1cm4gdGhpcy5kZXZpY2VJbmZvLmdldEZpZWxkT2ZWaWV3UmlnaHRFeWUodHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIDR4NCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gdHJhbnNmb3JtIHRoZSB2aWV3cG9ydCBpbnRvIE5EQy5cbiAqL1xuVmVydGV4RGlzdG9ydGVyLnByb3RvdHlwZS5nZXRWaWV3cG9ydFRyYW5zZm9ybV8gPSBmdW5jdGlvbihvcHRfZXllKSB7XG4gIHZhciBleWUgPSBvcHRfZXllIHx8IEV5ZXMuTEVGVDtcblxuICB2YXIgbGVmdFJlY3QgPSB0aGlzLmRldmljZUluZm8uZ2V0VW5kaXN0b3J0ZWRWaWV3cG9ydExlZnRFeWUoKTtcblxuICBpZiAoZXllID09IEV5ZXMuUklHSFQpIHtcbiAgICBsZWZ0UmVjdC54ID0gKFV0aWwuZ2V0U2NyZWVuV2lkdGgoKSAvIDIgLSBsZWZ0UmVjdC54KSAtIGxlZnRSZWN0LndpZHRoO1xuICB9XG5cbiAgdmFyIGZ1bGxMZWZ0UmVjdCA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgd2lkdGg6IFV0aWwuZ2V0U2NyZWVuV2lkdGgoKSAvIDIsXG4gICAgaGVpZ2h0OiBVdGlsLmdldFNjcmVlbkhlaWdodCgpXG4gIH07XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBzY2FsaW5nIGZyb20gZnVsbCB0byBzcXVhc2hlZCByZWN0YW5nbGUuXG4gIHZhciBzY2FsZSA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG4gIHNjYWxlLm1ha2VTY2FsZShsZWZ0UmVjdC53aWR0aCAvIGZ1bGxMZWZ0UmVjdC53aWR0aCxcbiAgICAgICAgICAgICAgICAgIGxlZnRSZWN0LmhlaWdodCAvIGZ1bGxMZWZ0UmVjdC5oZWlnaHQsIDEpO1xuXG4gIC8vIENhbGN1bGF0ZSB0aGUgdHJhbnNsYXRpb24gb2YgdGhlIGV5ZSBjZW50ZXIgaW4gTkRDLlxuICB2YXIgY2VudGVyID0gVXRpbC5nZXRSZWN0Q2VudGVyKGxlZnRSZWN0KTtcbiAgdmFyIHRhcmdldENlbnRlciA9IFV0aWwuZ2V0UmVjdENlbnRlcihmdWxsTGVmdFJlY3QpO1xuICBjZW50ZXIuc3ViKHRhcmdldENlbnRlcik7XG4gIHZhciB0cmFuc2xhdGUgPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuICB0cmFuc2xhdGUubWFrZVRyYW5zbGF0aW9uKGNlbnRlci54IC8gZnVsbExlZnRSZWN0LndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlci55IC8gZnVsbExlZnRSZWN0LmhlaWdodCwgMCk7XG5cbiAgY29uc29sZS5sb2coJ1RyYW5zbGF0ZWQgeCBieSAlcywgc2NhbGVkIGJ5ICVzJywgY2VudGVyLnggLyBmdWxsTGVmdFJlY3Qud2lkdGgsXG4gICAgICAgICAgICAgIGxlZnRSZWN0LndpZHRoIC8gZnVsbExlZnRSZWN0LndpZHRoKTtcbiAgcmV0dXJuIHNjYWxlLm11bHRpcGx5KHRyYW5zbGF0ZSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZlcnRleERpc3RvcnRlcjtcbiIsInZhciBVdGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbi8qKlxuICogQSBwcm94eSBjbGFzcyBmb3Igd29ya2luZyBhcm91bmQgdGhlIGZhY3QgdGhhdCBhcyBzb29uIGFzIGEgdmlkZW8gaXMgcGxheSgpZWRcbiAqIG9uIGlPUywgU2FmYXJpIGF1dG8tZnVsbHNjcmVlbnMgdGhlIHZpZGVvLlxuICpcbiAqIFRPRE8oc211cyk6IFRoZSBlbnRpcmUgcmFpc29uIGQnZXRyZSBmb3IgdGhpcyBjbGFzcyBpcyB0byB3b3JrIGFyb3VuZCB0aGlzXG4gKiBpc3N1ZS4gT25jZSBTYWZhcmkgaW1wbGVtZW50cyBzb21lIHdheSB0byBzdXBwcmVzcyB0aGlzIGZ1bGxzY3JlZW4gcGxheWVyLCB3ZVxuICogY2FuIHJlbW92ZSB0aGlzIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIFZpZGVvUHJveHkodmlkZW9FbGVtZW50KSB7XG4gIHRoaXMudmlkZW9FbGVtZW50ID0gdmlkZW9FbGVtZW50O1xuICAvLyBUcnVlIGlmIHdlJ3JlIGN1cnJlbnRseSBtYW51YWxseSBhZHZhbmNpbmcgdGhlIHBsYXloZWFkIChvbmx5IG9uIGlPUykuXG4gIHRoaXMuaXNGYWtlUGxheWJhY2sgPSBmYWxzZTtcblxuICAvLyBXaGVuIHRoZSB2aWRlbyBzdGFydGVkIHBsYXlpbmcuXG4gIHRoaXMuc3RhcnRUaW1lID0gbnVsbDtcbn1cblxuVmlkZW9Qcm94eS5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoVXRpbC5pc0lPUzlPckxlc3MoKSkge1xuICAgIHRoaXMuc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgdGhpcy5pc0Zha2VQbGF5YmFjayA9IHRydWU7XG5cbiAgICAvLyBNYWtlIGFuIGF1ZGlvIGVsZW1lbnQgdG8gcGxheWJhY2sganVzdCB0aGUgYXVkaW8gcGFydC5cbiAgICB0aGlzLmF1ZGlvRWxlbWVudCA9IG5ldyBBdWRpbygpO1xuICAgIHRoaXMuYXVkaW9FbGVtZW50LnNyYyA9IHRoaXMudmlkZW9FbGVtZW50LnNyYztcbiAgICB0aGlzLmF1ZGlvRWxlbWVudC5wbGF5KCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy52aWRlb0VsZW1lbnQucGxheSgpLnRoZW4oZnVuY3Rpb24oZSkge1xuICAgICAgY29uc29sZS5sb2coJ1BsYXlpbmcgdmlkZW8uJywgZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cblZpZGVvUHJveHkucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgaWYgKFV0aWwuaXNJT1M5T3JMZXNzKCkgJiYgdGhpcy5pc0Zha2VQbGF5YmFjaykge1xuICAgIHRoaXMuaXNGYWtlUGxheWJhY2sgPSB0cnVlO1xuXG4gICAgdGhpcy5hdWRpb0VsZW1lbnQuc3RvcCgpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMudmlkZW9FbGVtZW50LnN0b3AoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgb24gUkFGIHRvIHByb2dyZXNzIHBsYXliYWNrLlxuICovXG5WaWRlb1Byb3h5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gRmFrZXMgcGxheWJhY2sgZm9yIGlPUyBvbmx5LlxuICBpZiAoIXRoaXMuaXNGYWtlUGxheWJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGR1cmF0aW9uID0gdGhpcy52aWRlb0VsZW1lbnQuZHVyYXRpb247XG4gIHZhciBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgdmFyIGRlbHRhID0gbm93IC0gdGhpcy5zdGFydFRpbWU7XG4gIHZhciBkZWx0YVMgPSBkZWx0YSAvIDEwMDA7XG4gIHRoaXMudmlkZW9FbGVtZW50LmN1cnJlbnRUaW1lID0gZGVsdGFTO1xuXG4gIC8vIExvb3AgdGhyb3VnaCB0aGUgdmlkZW9cbiAgaWYgKGRlbHRhUyA+IGR1cmF0aW9uKSB7XG4gICAgdGhpcy5zdGFydFRpbWUgPSBub3c7XG4gICAgdGhpcy52aWRlb0VsZW1lbnQuY3VycmVudFRpbWUgPSAwO1xuICAgIC8vIEFsc28gcmVzdGFydCB0aGUgYXVkaW8uXG4gICAgdGhpcy5hdWRpb0VsZW1lbnQuY3VycmVudFRpbWUgPSAwO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZGVvUHJveHk7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiJdfQ==
